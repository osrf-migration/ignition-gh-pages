{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/202/comments/124735203.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/diff/ignitionrobotics/ign-rendering:3e114056bf52..d3f1e787d5de?path=examples%2Fthermal_camera%2FMain.cc"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/202/_/diff#comment-124735203"}}, "parent": {"id": 124733858, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/202/comments/124733858.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/202/_/diff#comment-124733858"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 202, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/202.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/202"}}, "title": "Add ThermalCamera"}, "content": {"raw": "Yeah, fundamentally the decision to load or unload a dynamically linked library falls on the operating system. The most we can do from user space is tell the operating system \u201cI wouldn\u2019t mind if you went ahead and unloaded that library now\u201d, but we can\u2019t force it to happen because the operating system might decide that the library is still needed for reasons that aren\u2019t obvious to us.\n\nOne example I know of off the top of my head is the gcc linker will sometimes put a \u201cunique global symbol\u201d into a library \\(this usually happens when dealing with global variables that have external linkage\\). Whenever a shared library has even one \u201cunique global symbol\u201d, the operating system will never unload that shared library from a process until the process is terminated. I won\u2019t pretend to know exactly what the motive/justification is for that behavior, but it\u2019s something that I\u2019ve noticed in testing. So if the Ogre library was compiled with any \u201cunique global symbols\u201d then the operating system will never unload it.", "markup": "markdown", "html": "<p>Yeah, fundamentally the decision to load or unload a dynamically linked library falls on the operating system. The most we can do from user space is tell the operating system \u201cI wouldn\u2019t mind if you went ahead and unloaded that library now\u201d, but we can\u2019t force it to happen because the operating system might decide that the library is still needed for reasons that aren\u2019t obvious to us.</p>\n<p>One example I know of off the top of my head is the gcc linker will sometimes put a \u201cunique global symbol\u201d into a library (this usually happens when dealing with global variables that have external linkage). Whenever a shared library has even one \u201cunique global symbol\u201d, the operating system will never unload that shared library from a process until the process is terminated. I won\u2019t pretend to know exactly what the motive/justification is for that behavior, but it\u2019s something that I\u2019ve noticed in testing. So if the Ogre library was compiled with any \u201cunique global symbols\u201d then the operating system will never unload it.</p>", "type": "rendered"}, "created_on": "2019-11-14T02:37:33.662026+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 136, "from": null, "outdated": false, "path": "examples/thermal_camera/Main.cc"}, "updated_on": "2019-11-14T02:37:33.670398+00:00", "type": "pullrequest_comment", "id": 124735203}