{"rendered": {"description": {"raw": "Note, this is pretty much a work in progress and I\u2019m not too familiar with ogre so I might have missed something or introduced regressions, especially in the ogre1 code.\r\n\r\nThis PR is to get collada assets with alpha textures to work properly in ignition, both with ogre1 and ogre2.\r\n\r\nFirst of all the asset can be found [here](https://drive.google.com/file/d/1vKCbR9AxiEyjsJ5ISIRIcARl81jfTqzE/view?usp=sharing), it\u2019s a slightly modified version of the one in [this issue](https://bitbucket.org/osrf/gazebo/issues/2640/alpha-textures-not-supported) \\(added transparency \\+ transparent properties to the cage object\\).\r\n\r\nAlso, in order for this PR to have any effect it is necessary to remove the part of the ColladaLoader in ign-common that overwrites the transparency with a value of 0 and issues a warning whenever a <texture> property is found inside a <transparent> tag, related PR [here](#!/ignitionrobotics/ign-common/pull-requests/219/transparent-textures/diff).\r\n\r\nI tested both the asset attached \\(to verify the change\\) and a non-textured asset with transparent materials from [fuel](https://app.ignitionrobotics.org/openrobotics/fuel/models/Cafe) to make sure there was no regressions. Both seem to render correctly but I might have missed something. Now the details.\r\n\r\n### Ogre2\r\n\r\n* Setting the blend type to transparent alpha makes the texture render correctly but shadows are wrong. The only way I could get the shadows to work correctly is by setting:\r\n\r\n    * AlphaTest: With this setting the shadows that the object projects on the outside are correct \\(instead of being solid\\).\r\n    * TwoSidedLighting: Setting this to true was the only way I could get the shadows inside the objects to be correct \\(the grid projecting a shadow on the blue bag\\), otherwise there is none.\r\n    \r\n* The alpha test threshold is an arbitrary number which changes the projected shadows slightly, I\u2019m open to making it a parameter \\(although this would probably mean breaking API\\).\r\n\r\n    * If we make the threshold a parameter, where should it come from?\r\n    \r\n* I\u2019m open to how we should implement transparency for textures. For now the transparency parameter is still taken and applied to the whole texture \\(hence even fully opaque alpha textures will be partially transparent, depending on the parameter value\\). Is this a good behavior or would we want to only use the texture\u2019s alpha channel? I\u2019m afraid that since we need to specify a transparency value greater than 0 to enable alpha blending it will actually be impossible to have a completely opaque texture and this sounds wrong.\r\n\r\n### OGRE1\r\n\r\n* I removed the manual override of the alpha channel and that fixed the rendering of the cage but to be honest I didn\u2019t spend much time on this so I might have introduced some regression, I\u2019d like to know from who wrote that part in the first place in which cases it was needed.\r\n* There is still no shadow being projected by the cage on the blue bag. I\u2019ll be looking into fixing this in the coming days.\r\n\r\n\u200c\r\n\r\nAgain this is very much a work in progress, and since we are adding a previously unimplemented functionality feedback on what the feature should look like from an end user point of view is welcome!\r\n\r\n\u200c", "markup": "markdown", "html": "<p>Note, this is pretty much a work in progress and I\u2019m not too familiar with ogre so I might have missed something or introduced regressions, especially in the ogre1 code.</p>\n<p>This PR is to get collada assets with alpha textures to work properly in ignition, both with ogre1 and ogre2.</p>\n<p>First of all the asset can be found <a data-is-external-link=\"true\" href=\"https://drive.google.com/file/d/1vKCbR9AxiEyjsJ5ISIRIcARl81jfTqzE/view?usp=sharing\" rel=\"nofollow\">here</a>, it\u2019s a slightly modified version of the one in <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/issues/2640/alpha-textures-not-supported\" rel=\"nofollow\">this issue</a> (added transparency + transparent properties to the cage object).</p>\n<p>Also, in order for this PR to have any effect it is necessary to remove the part of the ColladaLoader in ign-common that overwrites the transparency with a value of 0 and issues a warning whenever a &lt;texture&gt; property is found inside a &lt;transparent&gt; tag, related PR <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/219/transparent-textures/diff\" rel=\"nofollow\">here</a>.</p>\n<p>I tested both the asset attached (to verify the change) and a non-textured asset with transparent materials from <a data-is-external-link=\"true\" href=\"https://app.ignitionrobotics.org/openrobotics/fuel/models/Cafe\" rel=\"nofollow\">fuel</a> to make sure there was no regressions. Both seem to render correctly but I might have missed something. Now the details.</p>\n<h3 id=\"markdown-header-ogre2\">Ogre2</h3>\n<ul>\n<li>\n<p>Setting the blend type to transparent alpha makes the texture render correctly but shadows are wrong. The only way I could get the shadows to work correctly is by setting:</p>\n<ul>\n<li>AlphaTest: With this setting the shadows that the object projects on the outside are correct (instead of being solid).</li>\n<li>TwoSidedLighting: Setting this to true was the only way I could get the shadows inside the objects to be correct (the grid projecting a shadow on the blue bag), otherwise there is none.</li>\n</ul>\n</li>\n<li>\n<p>The alpha test threshold is an arbitrary number which changes the projected shadows slightly, I\u2019m open to making it a parameter (although this would probably mean breaking API).</p>\n<ul>\n<li>If we make the threshold a parameter, where should it come from?</li>\n</ul>\n</li>\n<li>\n<p>I\u2019m open to how we should implement transparency for textures. For now the transparency parameter is still taken and applied to the whole texture (hence even fully opaque alpha textures will be partially transparent, depending on the parameter value). Is this a good behavior or would we want to only use the texture\u2019s alpha channel? I\u2019m afraid that since we need to specify a transparency value greater than 0 to enable alpha blending it will actually be impossible to have a completely opaque texture and this sounds wrong.</p>\n</li>\n</ul>\n<h3 id=\"markdown-header-ogre1\">OGRE1</h3>\n<ul>\n<li>I removed the manual override of the alpha channel and that fixed the rendering of the cage but to be honest I didn\u2019t spend much time on this so I might have introduced some regression, I\u2019d like to know from who wrote that part in the first place in which cases it was needed.</li>\n<li>There is still no shadow being projected by the cage on the blue bag. I\u2019ll be looking into fixing this in the coming days.</li>\n</ul>\n<p>\u200c</p>\n<p>Again this is very much a work in progress, and since we are adding a previously unimplemented functionality feedback on what the feature should look like from an end user point of view is welcome!</p>\n<p>\u200c</p>", "type": "rendered"}, "title": {"raw": "Added basic support for alpha textures in ogre1 and ogre2", "markup": "markdown", "html": "<p>Added basic support for alpha textures in ogre1 and ogre2</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Note, this is pretty much a work in progress and I\u2019m not too familiar with ogre so I might have missed something or introduced regressions, especially in the ogre1 code.\r\n\r\nThis PR is to get collada assets with alpha textures to work properly in ignition, both with ogre1 and ogre2.\r\n\r\nFirst of all the asset can be found [here](https://drive.google.com/file/d/1vKCbR9AxiEyjsJ5ISIRIcARl81jfTqzE/view?usp=sharing), it\u2019s a slightly modified version of the one in [this issue](https://bitbucket.org/osrf/gazebo/issues/2640/alpha-textures-not-supported) \\(added transparency \\+ transparent properties to the cage object\\).\r\n\r\nAlso, in order for this PR to have any effect it is necessary to remove the part of the ColladaLoader in ign-common that overwrites the transparency with a value of 0 and issues a warning whenever a <texture> property is found inside a <transparent> tag, related PR [here](#!/ignitionrobotics/ign-common/pull-requests/219/transparent-textures/diff).\r\n\r\nI tested both the asset attached \\(to verify the change\\) and a non-textured asset with transparent materials from [fuel](https://app.ignitionrobotics.org/openrobotics/fuel/models/Cafe) to make sure there was no regressions. Both seem to render correctly but I might have missed something. Now the details.\r\n\r\n### Ogre2\r\n\r\n* Setting the blend type to transparent alpha makes the texture render correctly but shadows are wrong. The only way I could get the shadows to work correctly is by setting:\r\n\r\n    * AlphaTest: With this setting the shadows that the object projects on the outside are correct \\(instead of being solid\\).\r\n    * TwoSidedLighting: Setting this to true was the only way I could get the shadows inside the objects to be correct \\(the grid projecting a shadow on the blue bag\\), otherwise there is none.\r\n    \r\n* The alpha test threshold is an arbitrary number which changes the projected shadows slightly, I\u2019m open to making it a parameter \\(although this would probably mean breaking API\\).\r\n\r\n    * If we make the threshold a parameter, where should it come from?\r\n    \r\n* I\u2019m open to how we should implement transparency for textures. For now the transparency parameter is still taken and applied to the whole texture \\(hence even fully opaque alpha textures will be partially transparent, depending on the parameter value\\). Is this a good behavior or would we want to only use the texture\u2019s alpha channel? I\u2019m afraid that since we need to specify a transparency value greater than 0 to enable alpha blending it will actually be impossible to have a completely opaque texture and this sounds wrong.\r\n\r\n### OGRE1\r\n\r\n* I removed the manual override of the alpha channel and that fixed the rendering of the cage but to be honest I didn\u2019t spend much time on this so I might have introduced some regression, I\u2019d like to know from who wrote that part in the first place in which cases it was needed.\r\n* There is still no shadow being projected by the cage on the blue bag. I\u2019ll be looking into fixing this in the coming days.\r\n\r\n\u200c\r\n\r\nAgain this is very much a work in progress, and since we are adding a previously unimplemented functionality feedback on what the feature should look like from an end user point of view is welcome!\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/229/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/diffstat/ignitionrobotics/ign-rendering:ee3bdc5fbe6e%0De034fda8fefb?from_pullrequest_id=229"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/229/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/229.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/229/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/229/merge"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/229"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/229/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/diff/ignitionrobotics/ign-rendering:ee3bdc5fbe6e%0De034fda8fefb?from_pullrequest_id=229"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/229/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/229/statuses_page=1.json"}}, "title": "Added basic support for alpha textures in ogre1 and ogre2", "close_source_branch": true, "reviewers": [], "id": 229, "destination": {"commit": {"hash": "e034fda8fefb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e034fda8fefb.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e034fda8fefb"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "created_on": "2020-01-15T09:45:56.966047+00:00", "summary": {"raw": "Note, this is pretty much a work in progress and I\u2019m not too familiar with ogre so I might have missed something or introduced regressions, especially in the ogre1 code.\r\n\r\nThis PR is to get collada assets with alpha textures to work properly in ignition, both with ogre1 and ogre2.\r\n\r\nFirst of all the asset can be found [here](https://drive.google.com/file/d/1vKCbR9AxiEyjsJ5ISIRIcARl81jfTqzE/view?usp=sharing), it\u2019s a slightly modified version of the one in [this issue](https://bitbucket.org/osrf/gazebo/issues/2640/alpha-textures-not-supported) \\(added transparency \\+ transparent properties to the cage object\\).\r\n\r\nAlso, in order for this PR to have any effect it is necessary to remove the part of the ColladaLoader in ign-common that overwrites the transparency with a value of 0 and issues a warning whenever a <texture> property is found inside a <transparent> tag, related PR [here](#!/ignitionrobotics/ign-common/pull-requests/219/transparent-textures/diff).\r\n\r\nI tested both the asset attached \\(to verify the change\\) and a non-textured asset with transparent materials from [fuel](https://app.ignitionrobotics.org/openrobotics/fuel/models/Cafe) to make sure there was no regressions. Both seem to render correctly but I might have missed something. Now the details.\r\n\r\n### Ogre2\r\n\r\n* Setting the blend type to transparent alpha makes the texture render correctly but shadows are wrong. The only way I could get the shadows to work correctly is by setting:\r\n\r\n    * AlphaTest: With this setting the shadows that the object projects on the outside are correct \\(instead of being solid\\).\r\n    * TwoSidedLighting: Setting this to true was the only way I could get the shadows inside the objects to be correct \\(the grid projecting a shadow on the blue bag\\), otherwise there is none.\r\n    \r\n* The alpha test threshold is an arbitrary number which changes the projected shadows slightly, I\u2019m open to making it a parameter \\(although this would probably mean breaking API\\).\r\n\r\n    * If we make the threshold a parameter, where should it come from?\r\n    \r\n* I\u2019m open to how we should implement transparency for textures. For now the transparency parameter is still taken and applied to the whole texture \\(hence even fully opaque alpha textures will be partially transparent, depending on the parameter value\\). Is this a good behavior or would we want to only use the texture\u2019s alpha channel? I\u2019m afraid that since we need to specify a transparency value greater than 0 to enable alpha blending it will actually be impossible to have a completely opaque texture and this sounds wrong.\r\n\r\n### OGRE1\r\n\r\n* I removed the manual override of the alpha channel and that fixed the rendering of the cage but to be honest I didn\u2019t spend much time on this so I might have introduced some regression, I\u2019d like to know from who wrote that part in the first place in which cases it was needed.\r\n* There is still no shadow being projected by the cage on the blue bag. I\u2019ll be looking into fixing this in the coming days.\r\n\r\n\u200c\r\n\r\nAgain this is very much a work in progress, and since we are adding a previously unimplemented functionality feedback on what the feature should look like from an end user point of view is welcome!\r\n\r\n\u200c", "markup": "markdown", "html": "<p>Note, this is pretty much a work in progress and I\u2019m not too familiar with ogre so I might have missed something or introduced regressions, especially in the ogre1 code.</p>\n<p>This PR is to get collada assets with alpha textures to work properly in ignition, both with ogre1 and ogre2.</p>\n<p>First of all the asset can be found <a data-is-external-link=\"true\" href=\"https://drive.google.com/file/d/1vKCbR9AxiEyjsJ5ISIRIcARl81jfTqzE/view?usp=sharing\" rel=\"nofollow\">here</a>, it\u2019s a slightly modified version of the one in <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/issues/2640/alpha-textures-not-supported\" rel=\"nofollow\">this issue</a> (added transparency + transparent properties to the cage object).</p>\n<p>Also, in order for this PR to have any effect it is necessary to remove the part of the ColladaLoader in ign-common that overwrites the transparency with a value of 0 and issues a warning whenever a &lt;texture&gt; property is found inside a &lt;transparent&gt; tag, related PR <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/219/transparent-textures/diff\" rel=\"nofollow\">here</a>.</p>\n<p>I tested both the asset attached (to verify the change) and a non-textured asset with transparent materials from <a data-is-external-link=\"true\" href=\"https://app.ignitionrobotics.org/openrobotics/fuel/models/Cafe\" rel=\"nofollow\">fuel</a> to make sure there was no regressions. Both seem to render correctly but I might have missed something. Now the details.</p>\n<h3 id=\"markdown-header-ogre2\">Ogre2</h3>\n<ul>\n<li>\n<p>Setting the blend type to transparent alpha makes the texture render correctly but shadows are wrong. The only way I could get the shadows to work correctly is by setting:</p>\n<ul>\n<li>AlphaTest: With this setting the shadows that the object projects on the outside are correct (instead of being solid).</li>\n<li>TwoSidedLighting: Setting this to true was the only way I could get the shadows inside the objects to be correct (the grid projecting a shadow on the blue bag), otherwise there is none.</li>\n</ul>\n</li>\n<li>\n<p>The alpha test threshold is an arbitrary number which changes the projected shadows slightly, I\u2019m open to making it a parameter (although this would probably mean breaking API).</p>\n<ul>\n<li>If we make the threshold a parameter, where should it come from?</li>\n</ul>\n</li>\n<li>\n<p>I\u2019m open to how we should implement transparency for textures. For now the transparency parameter is still taken and applied to the whole texture (hence even fully opaque alpha textures will be partially transparent, depending on the parameter value). Is this a good behavior or would we want to only use the texture\u2019s alpha channel? I\u2019m afraid that since we need to specify a transparency value greater than 0 to enable alpha blending it will actually be impossible to have a completely opaque texture and this sounds wrong.</p>\n</li>\n</ul>\n<h3 id=\"markdown-header-ogre1\">OGRE1</h3>\n<ul>\n<li>I removed the manual override of the alpha channel and that fixed the rendering of the cage but to be honest I didn\u2019t spend much time on this so I might have introduced some regression, I\u2019d like to know from who wrote that part in the first place in which cases it was needed.</li>\n<li>There is still no shadow being projected by the cage on the blue bag. I\u2019ll be looking into fixing this in the coming days.</li>\n</ul>\n<p>\u200c</p>\n<p>Again this is very much a work in progress, and since we are adding a previously unimplemented functionality feedback on what the feature should look like from an end user point of view is welcome!</p>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "376dcbc8df46", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/376dcbc8df46.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/376dcbc8df46"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "transparent_materials"}}, "comment_count": 30, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-01-27T03:27:36.912695+00:00", "type": "participant", "approved": false, "user": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-29T19:40:58.024126+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2020-02-16T23:52:34.918878+00:00", "author": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}, "merge_commit": {"hash": "ee3bdc5fbe6e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/ee3bdc5fbe6e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/ee3bdc5fbe6e"}}}, "closed_by": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}