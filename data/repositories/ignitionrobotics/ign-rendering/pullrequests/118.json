{"rendered": {"description": {"raw": "Depends on pull request #113, pull request #114, and pull request #115. Please review those first\r\n\r\nFixes memory leaks when repeatedly creating and deleting visuals, materials, and meshes. Included in this PR is a performance test, `test/performance/scene_factory.cc`, that checks the memory usage before and after running a piece of code that creates and destroy objects.\r\n\r\nWith the help of [heaptrack](https://github.com/KDE/heaptrack) and it's `heaptrack_gui` visualization tool \\(thanks to @azeey for the recommendation\\), I was able to identify possible places of leaks and verify that they are fixed.\r\n\r\nHere are a few memory consumption graphs for the two performance tests in `scene_factory.cc`\r\n\r\n**ogre1.x**\r\n\r\nMaterialMemoryLeak test - memory consumption stays roughly constant after 5000 creations and deletions\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/3868236620-heaptrack_scene_materials.png)\r\n\u200c\r\n\r\nVisualMemoryLeak test - visuals are created and deleted in batches hence the wave like pattern.\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/3984210993-heaptrack_scene_visuals.png)\r\n\u200c\r\n\r\n**ogre2.x** \\(higher overall memory usage could be because it\u2019s installed from source in debug build\\)\r\n\r\nMaterialMemoryLeak test\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/754718843-heaptrack_material_ogre2.png)\r\n\u200c\r\n\r\nVisualMemoryLeak test\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/826907701-heaptrack_visual_ogre2.png)", "markup": "markdown", "html": "<p>Depends on <a href=\"#!/ignitionrobotics/ign-rendering/pull-requests/113/add-functions-to-recursively-destroy-a\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #113</a>, <a href=\"#!/ignitionrobotics/ign-rendering/pull-requests/114/use-ign-plugin-and-support-unloading\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #114</a>, and <a href=\"#!/ignitionrobotics/ign-rendering/pull-requests/115/enable-ogre2-tests\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #115</a>. Please review those first</p>\n<p>Fixes memory leaks when repeatedly creating and deleting visuals, materials, and meshes. Included in this PR is a performance test, <code>test/performance/scene_factory.cc</code>, that checks the memory usage before and after running a piece of code that creates and destroy objects.</p>\n<p>With the help of <a data-is-external-link=\"true\" href=\"https://github.com/KDE/heaptrack\" rel=\"nofollow\">heaptrack</a> and it's <code>heaptrack_gui</code> visualization tool (thanks to @azeey for the recommendation), I was able to identify possible places of leaks and verify that they are fixed.</p>\n<p>Here are a few memory consumption graphs for the two performance tests in <code>scene_factory.cc</code></p>\n<p><strong>ogre1.x</strong></p>\n<p>MaterialMemoryLeak test - memory consumption stays roughly constant after 5000 creations and deletions</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/3868236620-heaptrack_scene_materials.png\" />\n\u200c</p>\n<p>VisualMemoryLeak test - visuals are created and deleted in batches hence the wave like pattern.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/3984210993-heaptrack_scene_visuals.png\" />\n\u200c</p>\n<p><strong>ogre2.x</strong> (higher overall memory usage could be because it\u2019s installed from source in debug build)</p>\n<p>MaterialMemoryLeak test</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/754718843-heaptrack_material_ogre2.png\" />\n\u200c</p>\n<p>VisualMemoryLeak test</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/826907701-heaptrack_visual_ogre2.png\" /></p>", "type": "rendered"}, "title": {"raw": "Fix memory leaks", "markup": "markdown", "html": "<p>Fix memory leaks</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Depends on pull request #113, pull request #114, and pull request #115. Please review those first\r\n\r\nFixes memory leaks when repeatedly creating and deleting visuals, materials, and meshes. Included in this PR is a performance test, `test/performance/scene_factory.cc`, that checks the memory usage before and after running a piece of code that creates and destroy objects.\r\n\r\nWith the help of [heaptrack](https://github.com/KDE/heaptrack) and it's `heaptrack_gui` visualization tool \\(thanks to @azeey for the recommendation\\), I was able to identify possible places of leaks and verify that they are fixed.\r\n\r\nHere are a few memory consumption graphs for the two performance tests in `scene_factory.cc`\r\n\r\n**ogre1.x**\r\n\r\nMaterialMemoryLeak test - memory consumption stays roughly constant after 5000 creations and deletions\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/3868236620-heaptrack_scene_materials.png)\r\n\u200c\r\n\r\nVisualMemoryLeak test - visuals are created and deleted in batches hence the wave like pattern.\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/3984210993-heaptrack_scene_visuals.png)\r\n\u200c\r\n\r\n**ogre2.x** \\(higher overall memory usage could be because it\u2019s installed from source in debug build\\)\r\n\r\nMaterialMemoryLeak test\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/754718843-heaptrack_material_ogre2.png)\r\n\u200c\r\n\r\nVisualMemoryLeak test\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/826907701-heaptrack_visual_ogre2.png)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/118/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/diffstat/ignitionrobotics/ign-rendering:96644f4ef94c%0D094c3cae6fcf?from_pullrequest_id=118"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/118/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/118.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/118/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/118/merge"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/118"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/118/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/diff/ignitionrobotics/ign-rendering:96644f4ef94c%0D094c3cae6fcf?from_pullrequest_id=118"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/118/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/118/statuses_page=1.json"}}, "title": "Fix memory leaks", "close_source_branch": true, "reviewers": [], "id": 118, "destination": {"commit": {"hash": "094c3cae6fcf", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/094c3cae6fcf.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/094c3cae6fcf"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "gz11"}}, "created_on": "2018-11-29T00:18:08.355962+00:00", "summary": {"raw": "Depends on pull request #113, pull request #114, and pull request #115. Please review those first\r\n\r\nFixes memory leaks when repeatedly creating and deleting visuals, materials, and meshes. Included in this PR is a performance test, `test/performance/scene_factory.cc`, that checks the memory usage before and after running a piece of code that creates and destroy objects.\r\n\r\nWith the help of [heaptrack](https://github.com/KDE/heaptrack) and it's `heaptrack_gui` visualization tool \\(thanks to @azeey for the recommendation\\), I was able to identify possible places of leaks and verify that they are fixed.\r\n\r\nHere are a few memory consumption graphs for the two performance tests in `scene_factory.cc`\r\n\r\n**ogre1.x**\r\n\r\nMaterialMemoryLeak test - memory consumption stays roughly constant after 5000 creations and deletions\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/3868236620-heaptrack_scene_materials.png)\r\n\u200c\r\n\r\nVisualMemoryLeak test - visuals are created and deleted in batches hence the wave like pattern.\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/3984210993-heaptrack_scene_visuals.png)\r\n\u200c\r\n\r\n**ogre2.x** \\(higher overall memory usage could be because it\u2019s installed from source in debug build\\)\r\n\r\nMaterialMemoryLeak test\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/754718843-heaptrack_material_ogre2.png)\r\n\u200c\r\n\r\nVisualMemoryLeak test\r\n\r\n![](data/bitbucket.org/repo/zq9ear/images/826907701-heaptrack_visual_ogre2.png)", "markup": "markdown", "html": "<p>Depends on <a href=\"#!/ignitionrobotics/ign-rendering/pull-requests/113/add-functions-to-recursively-destroy-a\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #113</a>, <a href=\"#!/ignitionrobotics/ign-rendering/pull-requests/114/use-ign-plugin-and-support-unloading\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #114</a>, and <a href=\"#!/ignitionrobotics/ign-rendering/pull-requests/115/enable-ogre2-tests\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #115</a>. Please review those first</p>\n<p>Fixes memory leaks when repeatedly creating and deleting visuals, materials, and meshes. Included in this PR is a performance test, <code>test/performance/scene_factory.cc</code>, that checks the memory usage before and after running a piece of code that creates and destroy objects.</p>\n<p>With the help of <a data-is-external-link=\"true\" href=\"https://github.com/KDE/heaptrack\" rel=\"nofollow\">heaptrack</a> and it's <code>heaptrack_gui</code> visualization tool (thanks to @azeey for the recommendation), I was able to identify possible places of leaks and verify that they are fixed.</p>\n<p>Here are a few memory consumption graphs for the two performance tests in <code>scene_factory.cc</code></p>\n<p><strong>ogre1.x</strong></p>\n<p>MaterialMemoryLeak test - memory consumption stays roughly constant after 5000 creations and deletions</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/3868236620-heaptrack_scene_materials.png\" />\n\u200c</p>\n<p>VisualMemoryLeak test - visuals are created and deleted in batches hence the wave like pattern.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/3984210993-heaptrack_scene_visuals.png\" />\n\u200c</p>\n<p><strong>ogre2.x</strong> (higher overall memory usage could be because it\u2019s installed from source in debug build)</p>\n<p>MaterialMemoryLeak test</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/754718843-heaptrack_material_ogre2.png\" />\n\u200c</p>\n<p>VisualMemoryLeak test</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/zq9ear/images/826907701-heaptrack_visual_ogre2.png\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "e228153d5eb7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e228153d5eb7.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e228153d5eb7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "mat_mem_leak_gz11"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-11-29T19:36:37.039270+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2018-12-11T20:00:03.121102+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2018-11-29T19:12:55.171287+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2018-12-11T21:16:00.751934+00:00", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "merge_commit": {"hash": "96644f4ef94c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/96644f4ef94c.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/96644f4ef94c"}}}, "closed_by": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}