{"pagelen": 50, "values": [{"update": {"description": "This is part of a GPU lidar for ignition sensors.\r\n\r\nIt adds vertex and fragment shader support. Shaders can be given float and integer `uniform` parameters. Cameras also have a method for setting a material that they  will see on all objects. This allows creating a camera that sees all objects with a shader that encodes depth in the color output.\r\n\r\nOnly Ogre is supported.", "title": "Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "f4808b3307d3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/f4808b3307d3.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/f4808b3307d3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5287004ee071", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/5287004ee071.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/5287004ee071"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-12-19T17:27:09.996273+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52281483.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52281483"}}, "parent": {"id": 52211169, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52211169.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52211169"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "What do you mean? Currently it returns `ShaderParamsPtr` which is `typedef shared_ptr<ShaderParams> ShaderParamsPtr;`", "markup": "markdown", "html": "<p>What do you mean? Currently it returns <code>ShaderParamsPtr</code> which is <code>typedef shared_ptr&lt;ShaderParams&gt; ShaderParamsPtr;</code></p>", "type": "rendered"}, "created_on": "2017-12-19T17:23:50.302610+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-12-19T17:23:50.306272+00:00", "type": "pullrequest_comment", "id": 52281483}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52281232.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52281232"}}, "parent": {"id": 52211241, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52211241.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52211241"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "Added in 38d5cb2", "markup": "markdown", "html": "<p>Added in <a href=\"#!/ignitionrobotics/ign-rendering/commits/38d5cb2\" rel=\"nofollow\" class=\"ap-connect-link\">38d5cb2</a></p>", "type": "rendered"}, "created_on": "2017-12-19T17:20:49.516059+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-12-19T17:20:49.518519+00:00", "type": "pullrequest_comment", "id": 52281232}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52281216.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52281216"}}, "parent": {"id": 52240448, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52240448.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52240448"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "Removed unused code in c11a6bf", "markup": "markdown", "html": "<p>Removed unused code in <a href=\"#!/ignitionrobotics/ign-rendering/commits/c11a6bf\" rel=\"nofollow\" class=\"ap-connect-link\">c11a6bf</a></p>", "type": "rendered"}, "created_on": "2017-12-19T17:20:36.822139+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-12-19T17:20:36.825062+00:00", "type": "pullrequest_comment", "id": 52281216}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52281199.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52281199"}}, "parent": {"id": 52240564, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52240564.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52240564"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "Added in fbf1e5e and a9fbefc", "markup": "markdown", "html": "<p>Added in <a href=\"#!/ignitionrobotics/ign-rendering/commits/fbf1e5e\" rel=\"nofollow\" class=\"ap-connect-link\">fbf1e5e</a> and <a href=\"#!/ignitionrobotics/ign-rendering/commits/a9fbefc\" rel=\"nofollow\" class=\"ap-connect-link\">a9fbefc</a></p>", "type": "rendered"}, "created_on": "2017-12-19T17:20:27.555470+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-12-19T17:20:27.559336+00:00", "type": "pullrequest_comment", "id": 52281199}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "This is part of a GPU lidar for ignition sensors.\r\n\r\nIt adds vertex and fragment shader support. Shaders can be given float and integer `uniform` parameters. Cameras also have a method for setting a material that they  will see on all objects. This allows creating a camera that sees all objects with a shader that encodes depth in the color output.\r\n\r\nOnly Ogre is supported.", "title": "Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "f4808b3307d3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/f4808b3307d3.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/f4808b3307d3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c11a6bfd19a1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c11a6bfd19a1.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c11a6bfd19a1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-12-19T17:20:03.665575+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52240564.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52240564"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "can you add `// Documentation inherited.` to the new functions?", "markup": "markdown", "html": "<p>can you add <code>// Documentation inherited.</code> to the new functions?</p>", "type": "rendered"}, "created_on": "2017-12-19T11:04:55.613409+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-12-19T11:04:55.616053+00:00", "type": "pullrequest_comment", "id": 52240564}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52240448.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52240448"}}, "parent": {"id": 52207509, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52207509.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52207509"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "same goes for other commented out code in the example shaders", "markup": "markdown", "html": "<p>same goes for other commented out code in the example shaders</p>", "type": "rendered"}, "created_on": "2017-12-19T11:03:49.098691+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-12-19T11:03:49.102897+00:00", "type": "pullrequest_comment", "id": 52240448}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52211241.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52211241"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "I've been catching up on documentation. Can you help document this one and the new variables you added in this class? thanks", "markup": "markdown", "html": "<p>I've been catching up on documentation. Can you help document this one and the new variables you added in this class? thanks</p>", "type": "rendered"}, "created_on": "2017-12-19T04:47:39.337369+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-12-19T04:47:39.341498+00:00", "type": "pullrequest_comment", "id": 52211241}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52211169.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52211169"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "do you think we need to make `FragmentShaderParams()` return shared pointers if we plan to dereference it later?", "markup": "markdown", "html": "<p>do you think we need to make <code>FragmentShaderParams()</code> return shared pointers if we plan to dereference it later?</p>", "type": "rendered"}, "created_on": "2017-12-19T04:44:59.400350+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-12-19T04:44:59.403336+00:00", "type": "pullrequest_comment", "id": 52211169}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52207509.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52207509"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "remove these commented out code? Are you planning to use them in the future?", "markup": "markdown", "html": "<p>remove these commented out code? Are you planning to use them in the future?</p>", "type": "rendered"}, "created_on": "2017-12-19T02:51:21.976711+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2017-12-19T02:51:21.979406+00:00", "type": "pullrequest_comment", "id": 52207509}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/52200264.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-52200264"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "Fixed conflicts and merged with default FYI @iche033 ", "markup": "markdown", "html": "<p>Fixed conflicts and merged with default FYI @iche033 </p>", "type": "rendered"}, "created_on": "2017-12-18T23:25:14.974093+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-18T23:25:14.988667+00:00", "type": "pullrequest_comment", "id": 52200264}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "This is part of a GPU lidar for ignition sensors.\r\n\r\nIt adds vertex and fragment shader support. Shaders can be given float and integer `uniform` parameters. Cameras also have a method for setting a material that they  will see on all objects. This allows creating a camera that sees all objects with a shader that encodes depth in the color output.\r\n\r\nOnly Ogre is supported.", "title": "Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c6427fe663b6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c6427fe663b6.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c6427fe663b6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "da933fac1558", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/da933fac1558.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/da933fac1558"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-12-18T23:09:47.973219+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "This is part of a GPU lidar for ignition sensors.\r\n\r\nIt adds vertex and fragment shader support. Shaders can be given float and integer `uniform` parameters. Cameras also have a method for setting a material that they  will see on all objects. This allows creating a camera that sees all objects with a shader that encodes depth in the color output.\r\n\r\nOnly Ogre is supported.", "title": "Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cb32ede44a6d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/cb32ede44a6d.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/cb32ede44a6d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-12-04T16:33:37.552576+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "This is part of a GPU lidar for ignition sensors.\r\n\r\nIt adds vertex and fragment shader support. Shaders can be given float and integer `uniform` parameters. Cameras also have a method for setting a material that they  will see on all objects. This allows creating a camera that sees all objects with a shader that encodes depth in the color output.\r\n\r\nOnly Ogre is supported.", "title": "Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "79c6d27ac36e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/79c6d27ac36e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/79c6d27ac36e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-12-01T16:25:28.470336+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "This is part of a GPU lidar for ignition sensors.\r\n\r\nIt adds vertex and fragment shader support. Shaders can be given float and integer `uniform` parameters. Cameras also have a method for setting a material that they  will see on all objects. This allows creating a camera that sees all objects with a shader that encodes depth in the color output.", "title": "Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "79c6d27ac36e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/79c6d27ac36e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/79c6d27ac36e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-12-01T16:25:06.057615+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "79c6d27ac36e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/79c6d27ac36e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/79c6d27ac36e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-12-01T16:21:52.646661+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "790124bd397e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/790124bd397e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/790124bd397e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-27T23:09:12.331187+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ca7e2c8d7755", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/ca7e2c8d7755.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/ca7e2c8d7755"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-15T22:24:37.882074+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "35b9baea0fec", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/35b9baea0fec.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/35b9baea0fec"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-15T22:20:19.663796+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ecf915090427", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/ecf915090427.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/ecf915090427"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-15T21:39:51.854482+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/49552932.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-49552932"}}, "parent": {"id": 49552175, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/49552175.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-49552175"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "Fancy :)", "markup": "markdown", "html": "<p>Fancy :)</p>", "type": "rendered"}, "created_on": "2017-11-14T16:21:07.956435+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-11-14T16:21:07.959308+00:00", "type": "pullrequest_comment", "id": 49552932}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/49552175.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-49552175"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "Normal camera with one object having a shader that sets the color to green unconditionally.\n\n![regular.png](data/bitbucket.org/repo/zq9ear/images/459778285-regular.png)\n\nCamera that sees all objects with a shader that sets color based on depth.\n\n![depth.png](data/bitbucket.org/repo/zq9ear/images/3834535168-depth.png)", "markup": "markdown", "html": "<p>Normal camera with one object having a shader that sets the color to green unconditionally.</p>\n<p><img alt=\"regular.png\" src=\"data/bitbucket.org/repo/zq9ear/images/459778285-regular.png\" /></p>\n<p>Camera that sees all objects with a shader that sets color based on depth.</p>\n<p><img alt=\"depth.png\" src=\"data/bitbucket.org/repo/zq9ear/images/3834535168-depth.png\" /></p>", "type": "rendered"}, "created_on": "2017-11-14T16:16:01.263953+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-11-14T16:16:01.267059+00:00", "type": "pullrequest_comment", "id": 49552175}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/49471598.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-49471598"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "note to self: remove this `Clone()` and keep a shared pointer to the material on the `OgreRenderTarget`. The gpu laser will need `uniform` parameters on the vertex and fragment shader. The api on the material could be `SetFragmentParam(\"maxRange\", 10.0f)`. Allowing the parameters to be changed means the material should be shared between the render target and the code setting the params. ", "markup": "markdown", "html": "<p>note to self: remove this <code>Clone()</code> and keep a shared pointer to the material on the <code>OgreRenderTarget</code>. The gpu laser will need <code>uniform</code> parameters on the vertex and fragment shader. The api on the material could be <code>SetFragmentParam(\"maxRange\", 10.0f)</code>. Allowing the parameters to be changed means the material should be shared between the render target and the code setting the params. </p>", "type": "rendered"}, "created_on": "2017-11-14T00:18:51.471659+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-11-14T00:18:51.473722+00:00", "type": "pullrequest_comment", "id": 49471598}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3f842fc89f33", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/3f842fc89f33.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/3f842fc89f33"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-14T00:03:13.672399+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6177a04f2735", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/6177a04f2735.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/6177a04f2735"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-13T23:59:44.003403+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7209de35e45c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/7209de35e45c.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/7209de35e45c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-13T23:14:13.563835+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6b04dc7d3bf0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/6b04dc7d3bf0.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/6b04dc7d3bf0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-13T22:48:02.078682+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "c1582502bc2e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/c1582502bc2e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/c1582502bc2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6b04dc7d3bf0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/6b04dc7d3bf0.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/6b04dc7d3bf0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-13T22:48:02.032194+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "e9bb1ec38c2a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e9bb1ec38c2a.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e9bb1ec38c2a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6b04dc7d3bf0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/6b04dc7d3bf0.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/6b04dc7d3bf0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-13T22:46:48.215681+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nThis adds a method `Camera::SetGlobalMaterial` which calls `RenderTarget::SetGlobalMaterial`. Internally it uses a new class `OgreUniformMaterialApplicator` that manages a callback stack needed\r\nto set the technique used to render objects in a scene when viewed through a `RenderTarget`.\r\n\r\nRemaining work:\r\n\r\n* How to abstract this in a way that's usable by Optix?\r\n* Multi-pass materials? Current GPU lidar uses two passes. Maybe it can be reduced to one pass.", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "e9bb1ec38c2a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e9bb1ec38c2a.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e9bb1ec38c2a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6b04dc7d3bf0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/6b04dc7d3bf0.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/6b04dc7d3bf0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-13T22:46:48.174689+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nI'm trying to avoid calls to internal ogre methods. This proof-of-concept adds a technique to every material with a special \"material scheme name\" `HACKDepthScheme`. The technique has custom shaders copied from the first pass of the gazebo gpu lidar.  The camera calls a method on its RenderTarget to set the material scheme name used on its `Ogre::Viewport`.\r\n\r\nCons:\r\n\r\n* Requires adding a technique to every material used in a scene\r\n* Extra memory usage from each material having it's own copy of the same technique\r\n* No clue how to abstract this in a way that's usable by Optix\r\n\r\nPros:\r\n\r\n* Possible to do unique lidar returns on different materials (simulate lack of laser return on a dark object)\r\n\r\n\r\nTodo:\r\n\r\n* How to iterate over all materials in a scene?\r\n* How to handle new materials being added?\r\n* Is there a way render all objects using a common material without internal methods?\r\n* What happens if there are multiple GPU lasers? Can they re-use the same material scheme name?\r\n* What does the second pass on the GPU lidar do?\r\n* How to abstract this so any rendering engine supporting glsl can be used?", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "e90f8cec8944", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e90f8cec8944.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e90f8cec8944"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6b04dc7d3bf0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/6b04dc7d3bf0.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/6b04dc7d3bf0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-13T22:41:17.412566+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37/comments/49134668.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37/_/diff#comment-49134668"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}, "content": {"raw": "made a few changes in bf2238b to get vertex and fragment shaders working for visuals. \n\nign-rendering-optix lib build now but it doesn't support shaders.", "markup": "markdown", "html": "<p>made a few changes in <a href=\"#!/ignitionrobotics/ign-rendering/commits/bf2238b\" rel=\"nofollow\" class=\"ap-connect-link\">bf2238b</a> to get vertex and fragment shaders working for visuals. </p>\n<p>ign-rendering-optix lib build now but it doesn't support shaders.</p>", "type": "rendered"}, "created_on": "2017-11-09T00:44:08.815981+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2017-11-09T00:44:08.818510+00:00", "type": "pullrequest_comment", "id": 49134668}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nI'm trying to avoid calls to internal ogre methods. This proof-of-concept adds a technique to every material with a special \"material scheme name\" `HACKDepthScheme`. The technique has custom shaders copied from the first pass of the gazebo gpu lidar.  The camera calls a method on its RenderTarget to set the material scheme name used on its `Ogre::Viewport`.\r\n\r\nCons:\r\n\r\n* Requires adding a technique to every material used in a scene\r\n* Extra memory usage from each material having it's own copy of the same technique\r\n* No clue how to abstract this in a way that's usable by Optix\r\n\r\nPros:\r\n\r\n* Possible to do unique lidar returns on different materials (simulate lack of laser return on a dark object)\r\n\r\n\r\nTodo:\r\n\r\n* How to iterate over all materials in a scene?\r\n* How to handle new materials being added?\r\n* Is there a way render all objects using a common material without internal methods?\r\n* What happens if there are multiple GPU lasers? Can they re-use the same material scheme name?\r\n* What does the second pass on the GPU lidar do?\r\n* How to abstract this so any rendering engine supporting glsl can be used?", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "e90f8cec8944", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e90f8cec8944.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e90f8cec8944"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "bf2238b4d075", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/bf2238b4d075.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/bf2238b4d075"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "date": "2017-11-09T00:41:09.434528+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nI'm trying to avoid calls to internal ogre methods. This proof-of-concept adds a technique to every material with a special \"material scheme name\" `HACKDepthScheme`. The technique has custom shaders copied from the first pass of the gazebo gpu lidar.  The camera calls a method on its RenderTarget to set the material scheme name used on its `Ogre::Viewport`.\r\n\r\nCons:\r\n\r\n* Requires adding a technique to every material used in a scene\r\n* Extra memory usage from each material having it's own copy of the same technique\r\n* No clue how to abstract this in a way that's usable by Optix\r\n\r\nPros:\r\n\r\n* Possible to do unique lidar returns on different materials (simulate lack of laser return on a dark object)\r\n\r\n\r\nTodo:\r\n\r\n* How to iterate over all materials in a scene?\r\n* How to handle new materials being added?\r\n* Is there a way render all objects using a common material without internal methods?\r\n* What happens if there are multiple GPU lasers? Can they re-use the same material scheme name?\r\n* What does the second pass on the GPU lidar do?\r\n* How to abstract this so any rendering engine supporting glsl can be used?", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "e90f8cec8944", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e90f8cec8944.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e90f8cec8944"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "81162f523212", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/81162f523212.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/81162f523212"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-01T21:38:49.274266+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nI'm trying to avoid calls to internal ogre methods. This proof-of-concept adds a technique to every material with a special \"material scheme name\" `HACKDepthScheme`. The technique has custom shaders copied from the first pass of the gazebo gpu lidar.  The camera calls a method on its RenderTarget to set the material scheme name used on its `Ogre::Viewport`.\r\n\r\nCons:\r\n\r\n* Requires adding a technique to every material used in a scene\r\n* Extra memory usage from each material having it's own copy of the same technique\r\n* No clue how to abstract this in a way that's usable by Optix\r\n\r\nPros:\r\n\r\n* Possible to do unique lidar returns on different materials (simulate lack of laser return on a dark object)\r\n\r\n\r\nTodo:\r\n\r\n* How to iterate over all materials in a scene?\r\n* How to handle new materials being added?\r\n* Is there a way render all objects using a common material without internal methods?\r\n* What happens if there are multiple GPU lasers? Can they re-use the same material scheme name?\r\n* What does the second pass on the GPU lidar do?\r\n* How to abstract this so any rendering engine supporting glsl can be used?", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "e90f8cec8944", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e90f8cec8944.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e90f8cec8944"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4ff7fdbe744e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/4ff7fdbe744e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/4ff7fdbe744e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-11-01T21:12:26.730286+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nI'm trying to avoid calls to internal ogre methods. This proof-of-concept adds a technique to every material with a special \"material scheme name\" `HACKDepthScheme`. The technique has custom shaders copied from the first pass of the gazebo gpu lidar.  The camera calls a method on its RenderTarget to set the material scheme name used on its `Ogre::Viewport`.\r\n\r\nCons:\r\n\r\n* Requires adding a technique to every material used in a scene\r\n* Extra memory usage from each material having it's own copy of the same technique\r\n* No clue how to abstract this in a way that's usable by Optix\r\n\r\nPros:\r\n\r\n* Possible to do unique lidar returns on different materials (simulate lack of laser return on a dark object)\r\n\r\n\r\nTodo:\r\n\r\n* How to iterate over all materials in a scene?\r\n* How to handle new materials being added?\r\n* Is there a way render all objects using a common material without internal methods?\r\n* What happens if there are multiple GPU lasers? Can they re-use the same material scheme name?\r\n* What does the second pass on the GPU lidar do?\r\n* How to abstract this so any rendering engine supporting glsl can be used?", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "e90f8cec8944", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/e90f8cec8944.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/e90f8cec8944"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a18e1a188db8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/a18e1a188db8.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/a18e1a188db8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-10-31T15:23:53.065924+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nI'm trying to avoid calls to internal ogre methods. This proof-of-concept adds a technique to every material with a special \"material scheme name\" `HACKDepthScheme`. The technique has custom shaders copied from the first pass of the gazebo gpu lidar.  The camera calls a method on its RenderTarget to set the material scheme name used on its `Ogre::Viewport`.\r\n\r\nCons:\r\n\r\n* Requires adding a technique to every material used in a scene\r\n* Extra memory usage from each material having it's own copy of the same technique\r\n* No clue how to abstract this in a way that's usable by Optix\r\n\r\nPros:\r\n\r\n* Possible to do unique lidar returns on different materials (simulate lack of laser return on a dark object)\r\n\r\n\r\nTodo:\r\n\r\n* How to iterate over all materials in a scene?\r\n* How to handle new materials being added?\r\n* Is there a way render all objects using a common material without internal methods?\r\n* What happens if there are multiple GPU lasers? Can they re-use the same material scheme name?\r\n* What does the second pass on the GPU lidar do?\r\n* How to abstract this so any rendering engine supporting glsl can be used?", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "73da5ba77621", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/73da5ba77621.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/73da5ba77621"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4ed90cc45b8e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/4ed90cc45b8e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/4ed90cc45b8e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-10-23T22:54:32.486549+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}, {"update": {"description": "The goal is a GPU lidar in ignition-sensors using ignition-rendering.\r\n\r\nGazebo GPU laser uses a material with two passes using special vertex and fragment shaders that encode depth in pixel color. Rendering uses some internal ogre methods (prefixed with `_`) to render those two passes explicitly.\r\n\r\nI'm trying to avoid calls to internal ogre methods. This proof-of-concept adds a technique to every material with a special \"material scheme name\" `HACKDepthScheme`. The technique has custom shaders copied from the first pass of the gazebo gpu lidar.  The camera calls a method on its RenderTarget to set the material scheme name used on its `Ogre::Viewport`.\r\n\r\nCons:\r\n\r\n* Requires adding a technique to every material used in a scene\r\n* Extra memory usage from each material having it's own copy of the same technique\r\n* No clue how to abstract this in a way that's usable by Optix\r\n\r\nPros:\r\n\r\n* Possible to do unique lidar returns on different materials (simulate lack of laser return on a dark object)\r\n\r\n\r\nTodo:\r\n\r\n* How to iterate over all materials in a scene?\r\n* How to handle new materials being added?\r\n* Is there a way render all objects using a common material without internal methods?\r\n* What happens if there are multiple GPU lasers? Can they re-use the same material scheme name?\r\n* What does the second pass on the GPU lidar do?\r\n* How to abstract this so any rendering engine supporting glsl can be used?", "title": "[WIP] Custom shaders on all objects seen by a camera", "destination": {"commit": {"hash": "73da5ba77621", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/73da5ba77621.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/73da5ba77621"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4ed90cc45b8e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/4ed90cc45b8e.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/4ed90cc45b8e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "hack_custom_shaders"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-10-23T22:54:32.452911+00:00"}, "pull_request": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/37.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/37"}}, "title": "Custom shaders on all objects seen by a camera"}}]}