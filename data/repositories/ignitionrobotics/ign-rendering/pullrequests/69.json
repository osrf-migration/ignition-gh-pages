{"rendered": {"description": {"raw": "The motivation is that [Display Plugins](#!/ignitionrobotics/ign-gui/issues/31) can attach all of their custom visuals to a single visual, for which the visibility is then toggled on and off. You can imagine the TF display in RViz as an extreme case: without something like this, that plugin has to keep track of all of its custom visuals and iterate through them when the display is enabled/disabled. With this PR, toggling of visibility is handled in the [base class](#!/ignitionrobotics/ign-gui/src/e055a5a0b3a228b023775a729a28120b67d24608/src/DisplayPlugin.cc?at=default&fileviewer=file-view-default#DisplayPlugin.cc-188), and subclasses don\u2019t have to worry about it.\r\n\r\nI implemented this copying `SetInheritScale`. I didn't add `Visible()` getter like there is an `InheritScale()` because AFAIK Ogre [doesn\u2019t support it](https://forums.ogre3d.org/viewtopic.php?t=67348).\r\n\r\nWhat is potentially an issue with this PR is that I didn\u2019t find a similar notion for toggling visibility for Optix Groups. I am not sure how we want to proceed when it\u2019s not just that it isn\u2019t *currently *implemented for Optix, it might be that, for fundamental reasons, it won\u2019t *ever* be implemented?\r\n\r\n\u200c", "markup": "markdown", "html": "<p>The motivation is that <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gui/issues/31\" rel=\"nofollow\">Display Plugins</a> can attach all of their custom visuals to a single visual, for which the visibility is then toggled on and off. You can imagine the TF display in RViz as an extreme case: without something like this, that plugin has to keep track of all of its custom visuals and iterate through them when the display is enabled/disabled. With this PR, toggling of visibility is handled in the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gui/src/e055a5a0b3a228b023775a729a28120b67d24608/src/DisplayPlugin.cc?at=default&amp;fileviewer=file-view-default#DisplayPlugin.cc-188\" rel=\"nofollow\">base class</a>, and subclasses don\u2019t have to worry about it.</p>\n<p>I implemented this copying <code>SetInheritScale</code>. I didn't add <code>Visible()</code> getter like there is an <code>InheritScale()</code> because AFAIK Ogre <a data-is-external-link=\"true\" href=\"https://forums.ogre3d.org/viewtopic.php?t=67348\" rel=\"nofollow\">doesn\u2019t support it</a>.</p>\n<p>What is potentially an issue with this PR is that I didn\u2019t find a similar notion for toggling visibility for Optix Groups. I am not sure how we want to proceed when it\u2019s not just that it isn\u2019t <em>currently </em>implemented for Optix, it might be that, for fundamental reasons, it won\u2019t <em>ever</em> be implemented?</p>\n<p>\u200c</p>", "type": "rendered"}, "title": {"raw": "Add SetVisible for Visual", "markup": "markdown", "html": "<p>Add SetVisible for Visual</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The motivation is that [Display Plugins](#!/ignitionrobotics/ign-gui/issues/31) can attach all of their custom visuals to a single visual, for which the visibility is then toggled on and off. You can imagine the TF display in RViz as an extreme case: without something like this, that plugin has to keep track of all of its custom visuals and iterate through them when the display is enabled/disabled. With this PR, toggling of visibility is handled in the [base class](#!/ignitionrobotics/ign-gui/src/e055a5a0b3a228b023775a729a28120b67d24608/src/DisplayPlugin.cc?at=default&fileviewer=file-view-default#DisplayPlugin.cc-188), and subclasses don\u2019t have to worry about it.\r\n\r\nI implemented this copying `SetInheritScale`. I didn't add `Visible()` getter like there is an `InheritScale()` because AFAIK Ogre [doesn\u2019t support it](https://forums.ogre3d.org/viewtopic.php?t=67348).\r\n\r\nWhat is potentially an issue with this PR is that I didn\u2019t find a similar notion for toggling visibility for Optix Groups. I am not sure how we want to proceed when it\u2019s not just that it isn\u2019t *currently *implemented for Optix, it might be that, for fundamental reasons, it won\u2019t *ever* be implemented?\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/69/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/diffstat/ignitionrobotics/ign-rendering:1922d5ae8d58%0Dab0af869fddf?from_pullrequest_id=69"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/69/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/69.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/69/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/69/merge"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/pull-requests/69"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/69/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/diff/ignitionrobotics/ign-rendering:1922d5ae8d58%0Dab0af869fddf?from_pullrequest_id=69"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/pullrequests/69/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-rendering/pullrequests/69/statuses_page=1.json"}}, "title": "Add SetVisible for Visual", "close_source_branch": true, "reviewers": [], "id": 69, "destination": {"commit": {"hash": "ab0af869fddf", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/ab0af869fddf.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/ab0af869fddf"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "default"}}, "created_on": "2018-07-10T01:31:15.165731+00:00", "summary": {"raw": "The motivation is that [Display Plugins](#!/ignitionrobotics/ign-gui/issues/31) can attach all of their custom visuals to a single visual, for which the visibility is then toggled on and off. You can imagine the TF display in RViz as an extreme case: without something like this, that plugin has to keep track of all of its custom visuals and iterate through them when the display is enabled/disabled. With this PR, toggling of visibility is handled in the [base class](#!/ignitionrobotics/ign-gui/src/e055a5a0b3a228b023775a729a28120b67d24608/src/DisplayPlugin.cc?at=default&fileviewer=file-view-default#DisplayPlugin.cc-188), and subclasses don\u2019t have to worry about it.\r\n\r\nI implemented this copying `SetInheritScale`. I didn't add `Visible()` getter like there is an `InheritScale()` because AFAIK Ogre [doesn\u2019t support it](https://forums.ogre3d.org/viewtopic.php?t=67348).\r\n\r\nWhat is potentially an issue with this PR is that I didn\u2019t find a similar notion for toggling visibility for Optix Groups. I am not sure how we want to proceed when it\u2019s not just that it isn\u2019t *currently *implemented for Optix, it might be that, for fundamental reasons, it won\u2019t *ever* be implemented?\r\n\r\n\u200c", "markup": "markdown", "html": "<p>The motivation is that <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gui/issues/31\" rel=\"nofollow\">Display Plugins</a> can attach all of their custom visuals to a single visual, for which the visibility is then toggled on and off. You can imagine the TF display in RViz as an extreme case: without something like this, that plugin has to keep track of all of its custom visuals and iterate through them when the display is enabled/disabled. With this PR, toggling of visibility is handled in the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gui/src/e055a5a0b3a228b023775a729a28120b67d24608/src/DisplayPlugin.cc?at=default&amp;fileviewer=file-view-default#DisplayPlugin.cc-188\" rel=\"nofollow\">base class</a>, and subclasses don\u2019t have to worry about it.</p>\n<p>I implemented this copying <code>SetInheritScale</code>. I didn't add <code>Visible()</code> getter like there is an <code>InheritScale()</code> because AFAIK Ogre <a data-is-external-link=\"true\" href=\"https://forums.ogre3d.org/viewtopic.php?t=67348\" rel=\"nofollow\">doesn\u2019t support it</a>.</p>\n<p>What is potentially an issue with this PR is that I didn\u2019t find a similar notion for toggling visibility for Optix Groups. I am not sure how we want to proceed when it\u2019s not just that it isn\u2019t <em>currently </em>implemented for Optix, it might be that, for fundamental reasons, it won\u2019t <em>ever</em> be implemented?</p>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "5ebaf8c859ef", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/5ebaf8c859ef.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/5ebaf8c859ef"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "branch": {"name": "visual_set_visible"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-07-17T06:13:01.718579+00:00", "type": "participant", "approved": false, "user": {"display_name": "Deanna Hood", "uuid": "{40d490b4-7de9-4c89-ac1c-2219a22057eb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B40d490b4-7de9-4c89-ac1c-2219a22057eb%7D"}, "html": {"href": "https://bitbucket.org/%7B40d490b4-7de9-4c89-ac1c-2219a22057eb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ec666897-79d8-48b4-ae27-4f0e9e56f5b5/f7b56737-eb1f-481f-beb1-50c179565cf4/128"}}, "nickname": "d_hood", "type": "user", "account_id": "557058:ec666897-79d8-48b4-ae27-4f0e9e56f5b5"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-17T21:47:07.039269+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2018-07-17T21:47:34.821725+00:00", "author": {"display_name": "Deanna Hood", "uuid": "{40d490b4-7de9-4c89-ac1c-2219a22057eb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B40d490b4-7de9-4c89-ac1c-2219a22057eb%7D"}, "html": {"href": "https://bitbucket.org/%7B40d490b4-7de9-4c89-ac1c-2219a22057eb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ec666897-79d8-48b4-ae27-4f0e9e56f5b5/f7b56737-eb1f-481f-beb1-50c179565cf4/128"}}, "nickname": "d_hood", "type": "user", "account_id": "557058:ec666897-79d8-48b4-ae27-4f0e9e56f5b5"}, "merge_commit": {"hash": "1922d5ae8d58", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/commit/1922d5ae8d58.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/commits/1922d5ae8d58"}}}, "closed_by": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}