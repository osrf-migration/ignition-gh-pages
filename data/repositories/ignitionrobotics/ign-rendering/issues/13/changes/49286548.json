{"changes": {"content": {"new": "I noticed on the examples that it is common to use `Scene::Create*` functions to instantiate most of the rendering types, as opposed to directly calling the type's constructor. All `Create*` functions return shared pointers.\n\n1. Does the scene keep shared ownership of everything which is created by `Scene::Create*`?\n\n```\nThis seems to be true for some types but not others, for example:\n```\n\n```\n    auto light = scene->CreateDirectionalLight();\n    ASSERT_EQ(light.use_count(), 2u); // passes\n```\n\n```\n    auto ray = scene->CreateRayQuery();\n    ASSERT_EQ(ray.use_count(), 1u); // passes\n```\n\n    I'd suggest we return `unique_ptr`s for those which the scene won't be keeping1. When calling `Visual::AddChild`, is the ownership shared with the visual? The same goes for other `Add` and `Set` functions which take `shared_ptr`s\n\n1. What's the appropriate way to destroy something which was created with `Scene::Create*`? There are some `Scene::Destroy*` functions, but there isn't a 1-1 relation to the creates. How to destroy the missing ones?\n\n1. Is there a situation when an object should / could be instantiated without the use of `Scene::Create*`?", "old": "I noticed on the examples that it is common to use `Scene::Create*` functions to instantiate most of the rendering types, as opposed to directly calling the type's constructor. All `Create*` functions return shared pointers.\n\n1. Does the scene keep shared ownership of everything which is created by `Scene::Create*`?\n\n    This seems to be true for some types but not others, for example: \n\n        auto light = scene->CreateDirectionalLight();\n        ASSERT_EQ(light.use_count(), 2u); // passes\n\n        auto ray = scene->CreateRayQuery();\n        ASSERT_EQ(ray.use_count(), 1u); // passes\n\n    I'd suggest we return `unique_ptr`s for those which the scene won't be keeping\n\n1. When calling `Visual::AddChild`, is the ownership shared with the visual? The same goes for other `Add` and `Set` functions which take `shared_ptr`s\n\n1. What's the appropriate way to destroy something which was created with `Scene::Create*`? There are some `Scene::Destroy*` functions, but there isn't a 1-1 relation to the creates. How to destroy the missing ones?\n\n1. Is there a situation when an object should / could be instantiated without the use of `Scene::Create*`?"}}, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/13/changes/49286548.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/issues/13#comment-49286548"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "title": "Ownership questions"}, "created_on": "2018-12-04T18:52:54.118535+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "message": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "type": "issue_change", "id": 49286548}