{"priority": "minor", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/issues/13/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/13/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/issues/13/ownership-questions"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/issues/13/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Ownership questions", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I noticed on the examples that it is common to use `Scene::Create*` functions to instantiate most of the rendering types, as opposed to directly calling the type's constructor. All `Create*` functions return shared pointers.\n\n1. Does the scene keep shared ownership of everything which is created by `Scene::Create*`?\n\n```\nThis seems to be true for some types but not others, for example:\n```\n\n```\n    auto light = scene->CreateDirectionalLight();\n    ASSERT_EQ(light.use_count(), 2u); // passes\n```\n\n```\n    auto ray = scene->CreateRayQuery();\n    ASSERT_EQ(ray.use_count(), 1u); // passes\n```\n\n    I'd suggest we return `unique_ptr`s for those which the scene won't be keeping1. When calling `Visual::AddChild`, is the ownership shared with the visual? The same goes for other `Add` and `Set` functions which take `shared_ptr`s\n\n1. What's the appropriate way to destroy something which was created with `Scene::Create*`? There are some `Scene::Destroy*` functions, but there isn't a 1-1 relation to the creates. How to destroy the missing ones?\n\n1. Is there a situation when an object should / could be instantiated without the use of `Scene::Create*`?", "markup": "markdown", "html": "<p>I noticed on the examples that it is common to use <code>Scene::Create*</code> functions to instantiate most of the rendering types, as opposed to directly calling the type's constructor. All <code>Create*</code> functions return shared pointers.</p>\n<ol>\n<li>Does the scene keep shared ownership of everything which is created by <code>Scene::Create*</code>?</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>This seems to be true for some types but not others, for example:\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>    auto light = scene-&gt;CreateDirectionalLight();\n    ASSERT_EQ(light.use_count(), 2u); // passes\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>    auto ray = scene-&gt;CreateRayQuery();\n    ASSERT_EQ(ray.use_count(), 1u); // passes\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>I&#39;d suggest we return `unique_ptr`s for those which the scene won&#39;t be keeping1. When calling `Visual::AddChild`, is the ownership shared with the visual? The same goes for other `Add` and `Set` functions which take `shared_ptr`s\n</pre></div>\n\n\n<ol>\n<li>\n<p>What's the appropriate way to destroy something which was created with <code>Scene::Create*</code>? There are some <code>Scene::Destroy*</code> functions, but there isn't a 1-1 relation to the creates. How to destroy the missing ones?</p>\n</li>\n<li>\n<p>Is there a situation when an object should / could be instantiated without the use of <code>Scene::Create*</code>?</p>\n</li>\n</ol>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-11-04T00:32:26.584487+00:00", "milestone": null, "updated_on": "2018-12-04T18:52:50.981311+00:00", "type": "issue", "id": 13}