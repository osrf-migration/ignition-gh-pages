{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-rendering.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f6b404b6-f373-460d-a470-69ff6f27cd93}ts=1533308"}}, "type": "repository", "name": "ign-rendering", "full_name": "ignitionrobotics/ign-rendering", "uuid": "{f6b404b6-f373-460d-a470-69ff6f27cd93}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/22/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/22.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/issues/22/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-rendering/issues/22/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-rendering/issues/22/consider-merging-pure-virtual-class"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-rendering/issues/22/vote"}}, "reporter": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "title": "Consider merging pure virtual class interfaces with base implementation", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Instead of having pure virtual interfaces in `include/ignition/rendering`, we can merge the Base* implementations from `include/ignition/rendering/base/` in to `src`. \n\nIt's a trade off between cleaner separation of code and improving code maintainability and extensibility:\n\nMain advantages:\n\n* reduces the number of files to maintain\n* easier to add/update/remove features or functions in classes \n\nTemplated Base classes also them difficult to add private implementations using the pimpl pattern", "markup": "markdown", "html": "<p>Instead of having pure virtual interfaces in <code>include/ignition/rendering</code>, we can merge the Base* implementations from <code>include/ignition/rendering/base/</code> in to <code>src</code>. </p>\n<p>It's a trade off between cleaner separation of code and improving code maintainability and extensibility:</p>\n<p>Main advantages:</p>\n<ul>\n<li>reduces the number of files to maintain</li>\n<li>easier to add/update/remove features or functions in classes </li>\n</ul>\n<p>Templated Base classes also them difficult to add private implementations using the pimpl pattern</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-01-13T04:00:29.252401+00:00", "milestone": null, "updated_on": "2018-12-04T18:52:47.312961+00:00", "type": "issue", "id": 22}