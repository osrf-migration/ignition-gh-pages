{"pagelen": 50, "values": [{"update": {"description": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/) :large_blue_circle:\r\n* [Homebrew](Link URL) :large_orange_diamond: (Jenkins seems offline)\r\n* [Windows](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/336/) :large_blue_circle: (Just a well known warning that only shows up on Jenkins).\r\n\r\n", "title": "Request a service from the command line", "destination": {"commit": {"hash": "f7cda8de86b0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/f7cda8de86b0.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/f7cda8de86b0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5b19a6b8e5f1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/5b19a6b8e5f1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/5b19a6b8e5f1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "issue_42"}}, "state": "MERGED", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2016-10-05T00:26:14.486887+00:00"}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"update": {"description": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/) :large_blue_circle:\r\n* [Homebrew](Link URL) :large_orange_diamond: (Jenkins seems offline)\r\n* [Windows](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/336/) :large_blue_circle: (Just a well known warning that only shows up on Jenkins).\r\n\r\n", "title": "Request a service from the command line", "destination": {"commit": {"hash": "f7cda8de86b0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/f7cda8de86b0.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/f7cda8de86b0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5b19a6b8e5f1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/5b19a6b8e5f1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/5b19a6b8e5f1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "issue_42"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2016-10-04T22:26:54.396948+00:00"}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"approval": {"date": "2016-09-23T21:20:48.447040+00:00", "pullrequest": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172/comments/24217232.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172/_/diff#comment-24217232"}}, "parent": {"id": 23877236, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172/comments/23877236.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172/_/diff#comment-23877236"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}, "content": {"raw": "Agreed, we have the same problem when publishing messages from the command line using `ign`. It's only possible for messages declared in `ign-msgs`. I think your approach is doable but we can leave it for a future pull request if you agree, since it'll take some time, although is really interesting.\n\nThis was the first part of the problem and we solved it using the factory that `ign-msgs` provides at the cost of restricting the messages to the ones contained in the library. The second problem is the fact that `ReqHandler` requires a specific type and not a generic `google::protobuf::message`. This was tackled with the creation of a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates some code but I cannot think other solution right now. I leave it here for the record, because @nkoenig and I talked and seems reasonable.", "markup": "markdown", "html": "<p>Agreed, we have the same problem when publishing messages from the command line using <code>ign</code>. It's only possible for messages declared in <code>ign-msgs</code>. I think your approach is doable but we can leave it for a future pull request if you agree, since it'll take some time, although is really interesting.</p>\n<p>This was the first part of the problem and we solved it using the factory that <code>ign-msgs</code> provides at the cost of restricting the messages to the ones contained in the library. The second problem is the fact that <code>ReqHandler</code> requires a specific type and not a generic <code>google::protobuf::message</code>. This was tackled with the creation of a template specialization for <code>ReqHandler</code> when <code>[Req=google::protobuf::message]</code> and <code>[Rep=google::protobuf::message]</code>. It duplicates some code but I cannot think other solution right now. I leave it here for the record, because @nkoenig and I talked and seems reasonable.</p>", "type": "rendered"}, "created_on": "2016-09-23T21:00:35.211593+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-09-23T21:00:35.227775+00:00", "type": "pullrequest_comment", "id": 24217232}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"update": {"description": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/) :large_blue_circle:\r\n* [Homebrew](Link URL) :large_orange_diamond: (Jenkins seems offline)\r\n* [Windows](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/312/) :large_orange_diamond:\r\n\r\n", "title": "Request a service from the command line", "destination": {"commit": {"hash": "7d7777533017", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/7d7777533017.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/7d7777533017"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5b19a6b8e5f1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/5b19a6b8e5f1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/5b19a6b8e5f1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "issue_42"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2016-09-23T20:53:29.295216+00:00"}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172/comments/23877236.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172/_/diff#comment-23877236"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}, "content": {"raw": "This is probably a lot more work, but an alternate solution is:\n\n1. Support the ability to get the response and requests message definitions from the service provider.\n2. Use the two message definitions to instantiate the correct message types, and then send the service request.\n\nThis approach will work with custom messages, whereas this PR will only work with messages in `ign_msgs`.", "markup": "markdown", "html": "<p>This is probably a lot more work, but an alternate solution is:</p>\n<ol>\n<li>Support the ability to get the response and requests message definitions from the service provider.</li>\n<li>Use the two message definitions to instantiate the correct message types, and then send the service request.</li>\n</ol>\n<p>This approach will work with custom messages, whereas this PR will only work with messages in <code>ign_msgs</code>.</p>", "type": "rendered"}, "created_on": "2016-09-16T23:01:24.579964+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2016-09-16T23:01:24.586937+00:00", "type": "pullrequest_comment", "id": 23877236}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"update": {"description": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/) :large_blue_circle:\r\n* [Homebrew](Link URL) :large_orange_diamond: (Jenkins seems offline)\r\n* [Windows](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/312/) :large_orange_diamond:\r\n\r\n", "title": "Request a service from the command line", "destination": {"commit": {"hash": "9fc8a2312ba9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/9fc8a2312ba9.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/9fc8a2312ba9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "06cdc67e1c39", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/06cdc67e1c39.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/06cdc67e1c39"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "issue_42"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2016-09-16T00:40:08.666122+00:00"}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"update": {"description": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](Link URL) :large_orange_diamond:\r\n* [Homebrew](Link URL) :large_orange_diamond:\r\n* [Windows](Link URL) :large_orange_diamond:\r\n\r\n", "title": "Request a service from the command line", "destination": {"commit": {"hash": "9fc8a2312ba9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/9fc8a2312ba9.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/9fc8a2312ba9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "06cdc67e1c39", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/06cdc67e1c39.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/06cdc67e1c39"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "issue_42"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2016-09-16T00:25:47.350356+00:00"}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}, {"update": {"description": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](Link URL) :large_orange_diamond:\r\n* [Homebrew](Link URL) :large_orange_diamond:\r\n* [Windows](Link URL) :large_orange_diamond:\r\n\r\n", "title": "Request a service from the command line", "destination": {"commit": {"hash": "9fc8a2312ba9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/9fc8a2312ba9.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/9fc8a2312ba9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "06cdc67e1c39", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/06cdc67e1c39.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/06cdc67e1c39"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "issue_42"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2016-09-16T00:25:47.329316+00:00"}, "pull_request": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}}, "title": "Request a service from the command line"}}]}