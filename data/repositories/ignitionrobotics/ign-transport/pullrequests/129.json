{"rendered": {"description": {"raw": "This augments the Node API to make it a bit easier/cleaner to advertise and publish messages.\r\n\r\nThe current pattern relies on keeping track of `std::string` topic names for each advertised topic. For example:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nstd::string myTopic = \"/my/topic\";\r\nnode.Advertise<msg_type>(myTopic);\r\nnode.Publish(myTopic, myMsg);\r\n\r\n```\r\n\r\nThis gets a bit more cumbersome if you want to do something like this:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nstd::string topicBase = \"/part_a\";\r\nnode.Advertise<type>(topicBase + \"/torque\");\r\nnode.Advertise<type>(topicBase + \"/velocity\");\r\n\r\n```\r\n\r\nYou could create individual string for each topic, or redo the string math a publish time. However, this adds more code, feels like a limitation, and makes it relatively easy for people to do bad things (such as accidentally alter a string).\r\n\r\nSo, my proposed solution is to return an object from `Node::Advertise` that essentially encapsulates the topic string. A user can't change the topic name, and this feels a bit better to me.\r\n\r\nThe string based method has not been lost.\r\n\r\nNew usage:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nauto pubId = node.Advertise<type>(\"topicName\");\r\nnode.Publish(pubId, msg);\r\n\r\n// pubId also acts a boolean, so you can still do the following\r\nif (!node.Advertise<type>(\"topicName\"))\r\n  cerr << \"Some badness\\n\";\r\n\r\nnode.Publish(\"topicName\", msg);\r\n\r\n```\r\n", "markup": "markdown", "html": "<p>This augments the Node API to make it a bit easier/cleaner to advertise and publish messages.</p>\n<p>The current pattern relies on keeping track of <code>std::string</code> topic names for each advertised topic. For example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">myTopic</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/my/topic&quot;</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">msg_type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">myTopic</span><span class=\"p\">);</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">myTopic</span><span class=\"p\">,</span> <span class=\"n\">myMsg</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>This gets a bit more cumbersome if you want to do something like this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">topicBase</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/part_a&quot;</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">topicBase</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/torque&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">topicBase</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/velocity&quot;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>You could create individual string for each topic, or redo the string math a publish time. However, this adds more code, feels like a limitation, and makes it relatively easy for people to do bad things (such as accidentally alter a string).</p>\n<p>So, my proposed solution is to return an object from <code>Node::Advertise</code> that essentially encapsulates the topic string. A user can't change the topic name, and this feels a bit better to me.</p>\n<p>The string based method has not been lost.</p>\n<p>New usage:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">auto</span> <span class=\"n\">pubId</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;topicName&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">pubId</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// pubId also acts a boolean, so you can still do the following</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;topicName&quot;</span><span class=\"p\">))</span>\n  <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Some badness</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"s\">&quot;topicName&quot;</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "title": {"raw": "Node::Advertise return object", "markup": "markdown", "html": "<p>Node::Advertise return object</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This augments the Node API to make it a bit easier/cleaner to advertise and publish messages.\r\n\r\nThe current pattern relies on keeping track of `std::string` topic names for each advertised topic. For example:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nstd::string myTopic = \"/my/topic\";\r\nnode.Advertise<msg_type>(myTopic);\r\nnode.Publish(myTopic, myMsg);\r\n\r\n```\r\n\r\nThis gets a bit more cumbersome if you want to do something like this:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nstd::string topicBase = \"/part_a\";\r\nnode.Advertise<type>(topicBase + \"/torque\");\r\nnode.Advertise<type>(topicBase + \"/velocity\");\r\n\r\n```\r\n\r\nYou could create individual string for each topic, or redo the string math a publish time. However, this adds more code, feels like a limitation, and makes it relatively easy for people to do bad things (such as accidentally alter a string).\r\n\r\nSo, my proposed solution is to return an object from `Node::Advertise` that essentially encapsulates the topic string. A user can't change the topic name, and this feels a bit better to me.\r\n\r\nThe string based method has not been lost.\r\n\r\nNew usage:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nauto pubId = node.Advertise<type>(\"topicName\");\r\nnode.Publish(pubId, msg);\r\n\r\n// pubId also acts a boolean, so you can still do the following\r\nif (!node.Advertise<type>(\"topicName\"))\r\n  cerr << \"Some badness\\n\";\r\n\r\nnode.Publish(\"topicName\", msg);\r\n\r\n```\r\n", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/129/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diffstat/ignitionrobotics/ign-transport:73b2fe282952%0D9ec762cfc0ae?from_pullrequest_id=129"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/129/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/129.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/129/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/129/merge"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/129"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/129/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:73b2fe282952%0D9ec762cfc0ae?from_pullrequest_id=129"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/129/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/129/statuses_page=1.json"}}, "title": "Node::Advertise return object", "close_source_branch": true, "reviewers": [], "id": 129, "destination": {"commit": {"hash": "9ec762cfc0ae", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/9ec762cfc0ae.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/9ec762cfc0ae"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "created_on": "2016-04-28T17:59:55.787909+00:00", "summary": {"raw": "This augments the Node API to make it a bit easier/cleaner to advertise and publish messages.\r\n\r\nThe current pattern relies on keeping track of `std::string` topic names for each advertised topic. For example:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nstd::string myTopic = \"/my/topic\";\r\nnode.Advertise<msg_type>(myTopic);\r\nnode.Publish(myTopic, myMsg);\r\n\r\n```\r\n\r\nThis gets a bit more cumbersome if you want to do something like this:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nstd::string topicBase = \"/part_a\";\r\nnode.Advertise<type>(topicBase + \"/torque\");\r\nnode.Advertise<type>(topicBase + \"/velocity\");\r\n\r\n```\r\n\r\nYou could create individual string for each topic, or redo the string math a publish time. However, this adds more code, feels like a limitation, and makes it relatively easy for people to do bad things (such as accidentally alter a string).\r\n\r\nSo, my proposed solution is to return an object from `Node::Advertise` that essentially encapsulates the topic string. A user can't change the topic name, and this feels a bit better to me.\r\n\r\nThe string based method has not been lost.\r\n\r\nNew usage:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nauto pubId = node.Advertise<type>(\"topicName\");\r\nnode.Publish(pubId, msg);\r\n\r\n// pubId also acts a boolean, so you can still do the following\r\nif (!node.Advertise<type>(\"topicName\"))\r\n  cerr << \"Some badness\\n\";\r\n\r\nnode.Publish(\"topicName\", msg);\r\n\r\n```\r\n", "markup": "markdown", "html": "<p>This augments the Node API to make it a bit easier/cleaner to advertise and publish messages.</p>\n<p>The current pattern relies on keeping track of <code>std::string</code> topic names for each advertised topic. For example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">myTopic</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/my/topic&quot;</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">msg_type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">myTopic</span><span class=\"p\">);</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">myTopic</span><span class=\"p\">,</span> <span class=\"n\">myMsg</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>This gets a bit more cumbersome if you want to do something like this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">topicBase</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/part_a&quot;</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">topicBase</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/torque&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">topicBase</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/velocity&quot;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>You could create individual string for each topic, or redo the string math a publish time. However, this adds more code, feels like a limitation, and makes it relatively easy for people to do bad things (such as accidentally alter a string).</p>\n<p>So, my proposed solution is to return an object from <code>Node::Advertise</code> that essentially encapsulates the topic string. A user can't change the topic name, and this feels a bit better to me.</p>\n<p>The string based method has not been lost.</p>\n<p>New usage:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">auto</span> <span class=\"n\">pubId</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;topicName&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">pubId</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// pubId also acts a boolean, so you can still do the following</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;topicName&quot;</span><span class=\"p\">))</span>\n  <span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Some badness</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"s\">&quot;topicName&quot;</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "f405618a598e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/f405618a598e.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/f405618a598e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "advertise_return_object"}}, "comment_count": 13, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-04-29T17:21:35.571211+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2016-04-29T18:09:30.037600+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2016-04-29T18:01:11.630072+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2016-04-29T18:36:56.524534+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": {"hash": "73b2fe282952", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/73b2fe282952.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/73b2fe282952"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}