{"rendered": {"description": {"raw": "We were not checking the return value of `zmq::poll()`. This might cause an uncaught exception in the following scenario:\r\n\r\nWe are waiting in a blocking function such as `poll()`. When a signal is received, some operating systems return from `poll()` and set `errno` to `EINTR`. In the case of the zmq c++ wrapper that we use, an exception is triggered. \r\n\r\nWe discovered this while running a QT example. You can compile this code and try it without/with this pull request.\r\n\r\nhttps://bitbucket.org/snippets/ignitionrobotics/gK6gd\r\n\r\nCI results:\r\n\r\n* Trusty is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/50/).\r\n* Homebrew is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/44/).\r\n* Windows is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/92/).", "markup": "markdown", "html": "<p>We were not checking the return value of <code>zmq::poll()</code>. This might cause an uncaught exception in the following scenario:</p>\n<p>We are waiting in a blocking function such as <code>poll()</code>. When a signal is received, some operating systems return from <code>poll()</code> and set <code>errno</code> to <code>EINTR</code>. In the case of the zmq c++ wrapper that we use, an exception is triggered. </p>\n<p>We discovered this while running a QT example. You can compile this code and try it without/with this pull request.</p>\n<p><a href=\"https://bitbucket.org/snippets/ignitionrobotics/gK6gd\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/snippets/ignitionrobotics/gK6gd</a></p>\n<p>CI results:</p>\n<ul>\n<li>Trusty is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/50/\" rel=\"nofollow\">pending</a>.</li>\n<li>Homebrew is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/44/\" rel=\"nofollow\">pending</a>.</li>\n<li>Windows is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/92/\" rel=\"nofollow\">pending</a>.</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Catch exception in zmq::poll", "markup": "markdown", "html": "<p>Catch exception in zmq::poll</p>", "type": "rendered"}}, "type": "pullrequest", "description": "We were not checking the return value of `zmq::poll()`. This might cause an uncaught exception in the following scenario:\r\n\r\nWe are waiting in a blocking function such as `poll()`. When a signal is received, some operating systems return from `poll()` and set `errno` to `EINTR`. In the case of the zmq c++ wrapper that we use, an exception is triggered. \r\n\r\nWe discovered this while running a QT example. You can compile this code and try it without/with this pull request.\r\n\r\nhttps://bitbucket.org/snippets/ignitionrobotics/gK6gd\r\n\r\nCI results:\r\n\r\n* Trusty is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/50/).\r\n* Homebrew is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/44/).\r\n* Windows is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/92/).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/110/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diffstat/ignitionrobotics/ign-transport:fad589bef008%0D4be55254b5d6?from_pullrequest_id=110"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/110/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/110.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/110/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/110/merge"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/110"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/110/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:fad589bef008%0D4be55254b5d6?from_pullrequest_id=110"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/110/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/110/statuses_page=1.json"}}, "title": "Catch exception in zmq::poll", "close_source_branch": true, "reviewers": [], "id": 110, "destination": {"commit": {"hash": "4be55254b5d6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/4be55254b5d6.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/4be55254b5d6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport1"}}, "created_on": "2016-02-24T00:30:00.471476+00:00", "summary": {"raw": "We were not checking the return value of `zmq::poll()`. This might cause an uncaught exception in the following scenario:\r\n\r\nWe are waiting in a blocking function such as `poll()`. When a signal is received, some operating systems return from `poll()` and set `errno` to `EINTR`. In the case of the zmq c++ wrapper that we use, an exception is triggered. \r\n\r\nWe discovered this while running a QT example. You can compile this code and try it without/with this pull request.\r\n\r\nhttps://bitbucket.org/snippets/ignitionrobotics/gK6gd\r\n\r\nCI results:\r\n\r\n* Trusty is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/50/).\r\n* Homebrew is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/44/).\r\n* Windows is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/92/).", "markup": "markdown", "html": "<p>We were not checking the return value of <code>zmq::poll()</code>. This might cause an uncaught exception in the following scenario:</p>\n<p>We are waiting in a blocking function such as <code>poll()</code>. When a signal is received, some operating systems return from <code>poll()</code> and set <code>errno</code> to <code>EINTR</code>. In the case of the zmq c++ wrapper that we use, an exception is triggered. </p>\n<p>We discovered this while running a QT example. You can compile this code and try it without/with this pull request.</p>\n<p><a href=\"https://bitbucket.org/snippets/ignitionrobotics/gK6gd\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/snippets/ignitionrobotics/gK6gd</a></p>\n<p>CI results:</p>\n<ul>\n<li>Trusty is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/50/\" rel=\"nofollow\">pending</a>.</li>\n<li>Homebrew is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/44/\" rel=\"nofollow\">pending</a>.</li>\n<li>Windows is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/92/\" rel=\"nofollow\">pending</a>.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "33ee8fd7484a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/33ee8fd7484a.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/33ee8fd7484a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "qt_issue"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-02-24T22:32:52.040841+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2016-02-24T00:49:17.605151+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2016-03-01T22:17:33.483252+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "fad589bef008", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/fad589bef008.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/fad589bef008"}}}, "closed_by": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}