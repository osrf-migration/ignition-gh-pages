{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/229/comments/52920146.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:e3810d45cd91..f02881cc0ca3?path=src%2FNodeShared.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/229/_/diff#comment-52920146"}}, "parent": {"id": 52917405, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/229/comments/52917405.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/229/_/diff#comment-52917405"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 229, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/229.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/229"}}, "title": "Use zero copy when publishing messages"}, "content": {"raw": "We only do zero copy with `_data`, we can ignore `_topic`, `myAddress` and `_msgType` for now. I think the behavior should be fine:\n\n1. In [Publisher::Publish()](#!/ignitionrobotics/ign-transport/src/7b396a00d7fb06e1eac97416f325b85fbfa9441b/src/Node.cc?at=ign-transport4&fileviewer=file-view-default#Node.cc-266), we are in the situation where we need to serialize the data.\n1. We allocate a new buffer, serialize the message on it, and pass it to `NodeShared::Publish()`.\n1. The `msg2` initialization avoids the copy and takes ownership of the buffer.\n1. When ZeroMQ is done with the message, it calls our deallocation function, which deallocates the buffer.\n\nAre you seeing something weird?", "markup": "markdown", "html": "<p>We only do zero copy with <code>_data</code>, we can ignore <code>_topic</code>, <code>myAddress</code> and <code>_msgType</code> for now. I think the behavior should be fine:</p>\n<ol>\n<li>In <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/src/7b396a00d7fb06e1eac97416f325b85fbfa9441b/src/Node.cc?at=ign-transport4&amp;fileviewer=file-view-default#Node.cc-266\" rel=\"nofollow\">Publisher::Publish()</a>, we are in the situation where we need to serialize the data.</li>\n<li>We allocate a new buffer, serialize the message on it, and pass it to <code>NodeShared::Publish()</code>.</li>\n<li>The <code>msg2</code> initialization avoids the copy and takes ownership of the buffer.</li>\n<li>When ZeroMQ is done with the message, it calls our deallocation function, which deallocates the buffer.</li>\n</ol>\n<p>Are you seeing something weird?</p>", "type": "rendered"}, "created_on": "2018-01-03T18:35:08.249196+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": null, "from": null, "outdated": false, "path": "src/NodeShared.cc"}, "updated_on": "2018-01-03T18:35:34.116135+00:00", "type": "pullrequest_comment", "id": 52920146}