{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252/comments/52292751.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:3a56fb3c1f6a..efad1de04a1a?path=log%2Finclude%2Fignition%2Ftransport%2Flog%2FLog.hh"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252/_/diff#comment-52292751"}}, "parent": {"id": 52170356, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252/comments/52170356.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252/_/diff#comment-52170356"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 252, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252"}}, "title": "ignition tools record/playback"}, "content": {"raw": "Interestingly, the `const` on an lvalue parameter in a function declaration signature does not need to match the `const` on an lvalue in the function definition signature. In other words, the following is completely valid C++:\n\n```\n// in foo.hh\nvoid foo(int a);\n```\n\n```\n// in foo.cc\nvoid foo(const int a)\n{\n  /* definition of foo */\n}\n```\n\nSome experts recommend that you leave the `const` off of lvalue parameters in the function declaration because\n\n1. The user doesn't need to know that the parameter is const within the function definition\n2. It could easily be misinterpreted by the user as a const-reference\n3. It makes for a longer function declaration\n\nI think the one disadvantage to leaving off the `const` is that it can be confusing for developers when the declaration and definition signatures don't immediately appear to match each other.", "markup": "markdown", "html": "<p>Interestingly, the <code>const</code> on an lvalue parameter in a function declaration signature does not need to match the <code>const</code> on an lvalue in the function definition signature. In other words, the following is completely valid C++:</p>\n<div class=\"codehilite\"><pre><span></span>// in foo.hh\nvoid foo(int a);\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>// in foo.cc\nvoid foo(const int a)\n{\n  /* definition of foo */\n}\n</pre></div>\n\n\n<p>Some experts recommend that you leave the <code>const</code> off of lvalue parameters in the function declaration because</p>\n<ol>\n<li>The user doesn't need to know that the parameter is const within the function definition</li>\n<li>It could easily be misinterpreted by the user as a const-reference</li>\n<li>It makes for a longer function declaration</li>\n</ol>\n<p>I think the one disadvantage to leaving off the <code>const</code> is that it can be confusing for developers when the declaration and definition signatures don't immediately appear to match each other.</p>", "type": "rendered"}, "created_on": "2017-12-19T19:47:25.511755+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "log/include/ignition/transport/log/Log.hh"}, "updated_on": "2017-12-19T19:47:37.441127+00:00", "type": "pullrequest_comment", "id": 52292751}