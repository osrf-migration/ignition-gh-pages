{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252/comments/52731109.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252/_/diff#comment-52731109"}}, "parent": {"id": 52729243, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252/comments/52729243.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252/_/diff#comment-52729243"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 252, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252"}}, "title": "ignition tools record/playback"}, "content": {"raw": "I'm trying to quickly implement the empty topic name proposal, but it seems like there may be some complications with respect to the partition and namespace of the fully qualified topic name.\n\nThe `HandlerStorage` class maintains a map of subscription handlers whose key is a fully qualified topic name. When a publisher advertises itself, it advertises its \"topic\" as a fully qualified topic name, and we compare that string against the map in `HandlerStorage`.\n\nThe trouble I'm having at the moment is it seems the `HandlerStorage` class would need some way to understand the fully qualified topic strings in order to recognize when an \"empty\" topic is provided to it, either by a node that's adding a subscription handler or by an incoming message from a remote publisher. It seems like we can reliably expect fully qualified topic names to follow a pattern of either `@/<partition_name>@/<namespace>/<topic>` or `@/<partition_name>@/<topic>`, but I'm under the impression that `<namespace>` and `<topic>` may contain arbitrary slashes within themselves, so it's not clear to me that we can always correctly identify the basic topic name from within a fully qualified topic name. The fully qualified topic name seems to lose information about where the namespace ends and the topic name begins.\n\nAs it currently stands, it doesn't seem possible for a node to latch onto arbitrary new publishers as they advertise themselves; at least not without some kind of small redesign of the `HandlerStorage` class.", "markup": "markdown", "html": "<p>I'm trying to quickly implement the empty topic name proposal, but it seems like there may be some complications with respect to the partition and namespace of the fully qualified topic name.</p>\n<p>The <code>HandlerStorage</code> class maintains a map of subscription handlers whose key is a fully qualified topic name. When a publisher advertises itself, it advertises its \"topic\" as a fully qualified topic name, and we compare that string against the map in <code>HandlerStorage</code>.</p>\n<p>The trouble I'm having at the moment is it seems the <code>HandlerStorage</code> class would need some way to understand the fully qualified topic strings in order to recognize when an \"empty\" topic is provided to it, either by a node that's adding a subscription handler or by an incoming message from a remote publisher. It seems like we can reliably expect fully qualified topic names to follow a pattern of either <code>@/&lt;partition_name&gt;@/&lt;namespace&gt;/&lt;topic&gt;</code> or <code>@/&lt;partition_name&gt;@/&lt;topic&gt;</code>, but I'm under the impression that <code>&lt;namespace&gt;</code> and <code>&lt;topic&gt;</code> may contain arbitrary slashes within themselves, so it's not clear to me that we can always correctly identify the basic topic name from within a fully qualified topic name. The fully qualified topic name seems to lose information about where the namespace ends and the topic name begins.</p>\n<p>As it currently stands, it doesn't seem possible for a node to latch onto arbitrary new publishers as they advertise themselves; at least not without some kind of small redesign of the <code>HandlerStorage</code> class.</p>", "type": "rendered"}, "created_on": "2017-12-29T01:25:42.900550+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-29T01:25:42.903221+00:00", "type": "pullrequest_comment", "id": 52731109}