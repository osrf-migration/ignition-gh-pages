{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252/comments/52722747.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:016b4cdbd772..efad1de04a1a?path=log%2Fsrc%2FPlayback.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252/_/diff#comment-52722747"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 252, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252"}}, "title": "ignition tools record/playback"}, "content": {"raw": "I think for right now `MsgIter() != iter` is a reasonable approach for determining when we've exceeded the final message, but in the long-term we should consider having a message container object (e.g. the `Batch` class in the design document) and have the `MsgIter` (or maybe a `Batch::iterator`) class tied to the container object. Then we can compare the iterator object to `container.end()` so that our iterator class is more consistent with the standard way that iterators get used in C++. That way, we'd even be compatible with range-for loops.\n\nIt may be the case that the \"container\" object would actually be something more like a `raii_sqlite3::Statement` factory rather than a traditional container object, but that wouldn't be an issue as long as the semantics match up.", "markup": "markdown", "html": "<p>I think for right now <code>MsgIter() != iter</code> is a reasonable approach for determining when we've exceeded the final message, but in the long-term we should consider having a message container object (e.g. the <code>Batch</code> class in the design document) and have the <code>MsgIter</code> (or maybe a <code>Batch::iterator</code>) class tied to the container object. Then we can compare the iterator object to <code>container.end()</code> so that our iterator class is more consistent with the standard way that iterators get used in C++. That way, we'd even be compatible with range-for loops.</p>\n<p>It may be the case that the \"container\" object would actually be something more like a <code>raii_sqlite3::Statement</code> factory rather than a traditional container object, but that wouldn't be an issue as long as the semantics match up.</p>", "type": "rendered"}, "created_on": "2017-12-28T19:56:08.850276+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 114, "from": null, "outdated": true, "path": "log/src/Playback.cc"}, "updated_on": "2017-12-28T19:56:08.852834+00:00", "type": "pullrequest_comment", "id": 52722747}