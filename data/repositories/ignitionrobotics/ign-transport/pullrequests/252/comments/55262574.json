{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252/comments/55262574.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:be14a0811c18..53ca125a23b4?path=include%2Fignition%2Ftransport%2FNodeShared.hh"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252/_/diff#comment-55262574"}}, "parent": {"id": 55245149, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252/comments/55245149.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252/_/diff#comment-55245149"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 252, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/252.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/252"}}, "title": "ignition tools record/playback"}, "content": {"raw": "Looks like I'm wrong here. Removing static leads to a compile time error when Recorder tries to use the constant it without an instance.\n\nAlso\n\n```C++\n#include <iostream>\n\n\nclass ConstCheck1\n{\n  public:\n    const int member0 = 5;\n    const int member1 = 5;\n    const int member2 = 5;\n    const int member3 = 5;\n    const int member4 = 5;\n    const int member5 = 5;\n    const int member6 = 5;\n    const int member7 = 5;\n    const int member8 = 5;\n    const int member9 = 5;\n};\n\n\nclass StaticConstCheck1\n{\n  public:\n    static const int member0 = 5;\n    static const int member1 = 5;\n    static const int member2 = 5;\n    static const int member3 = 5;\n    static const int member4 = 5;\n    static const int member5 = 5;\n    static const int member6 = 5;\n    static const int member7 = 5;\n    static const int member8 = 5;\n    static const int member9 = 5;\n};\n\n\nint main(int argc, char ** argv)\n{\n  std::cout << \"const only size: \" << sizeof(ConstCheck1) << \"\\n\";\n  std::cout << \"static const size: \" << sizeof(StaticConstCheck1) << \"\\n\";\n  return 0;\n}\n```\n\n\nnon-static const does increase the size of the object, so the value is copied with each instance.\n```\n$ g++ --std=c++11 text.cpp \n$ ./a.out \nconst only size: 40\nstatic const size: 1\n```", "markup": "markdown", "html": "<p>Looks like I'm wrong here. Removing static leads to a compile time error when Recorder tries to use the constant it without an instance.</p>\n<p>Also</p>\n<div class=\"codehilite language-C++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConstCheck1</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member0</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member2</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member3</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member4</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member5</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member6</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member7</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member8</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member9</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StaticConstCheck1</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member0</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member2</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member3</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member4</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member5</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member6</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member7</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member8</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">member9</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;const only size: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ConstCheck1</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;static const size: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">StaticConstCheck1</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>non-static const does increase the size of the object, so the value is copied with each instance.</p>\n<div class=\"codehilite\"><pre><span></span>$ g++ --std<span class=\"o\">=</span>c++11 text.cpp \n$ ./a.out \nconst only size: <span class=\"m\">40</span>\nstatic const size: <span class=\"m\">1</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-02-01T22:31:27.322753+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": null, "from": null, "outdated": false, "path": "include/ignition/transport/NodeShared.hh"}, "updated_on": "2018-02-01T22:31:27.326278+00:00", "type": "pullrequest_comment", "id": 55262574}