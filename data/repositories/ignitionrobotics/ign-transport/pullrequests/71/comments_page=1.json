{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7716455.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:23e3bd61d6a3..a1cf527bf1c0?path=msgs%2FCMakeLists.txt"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7716455"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Could you rename this messages for starting with lower case?", "markup": "markdown", "html": "<p>Could you rename this messages for starting with lower case?</p>", "type": "rendered"}, "created_on": "2015-06-22T23:18:11.659769+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 4, "from": null, "path": "msgs/CMakeLists.txt"}, "updated_on": "2015-06-22T23:18:11.664615+00:00", "type": "pullrequest_comment", "id": 7716455}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7716571.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7716571"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "This is going to share the wire format of the discovery protocol. We should increment the `DiscoveryPrivate::Version` variable from `2` to `3` for avoiding compatibility issues.", "markup": "markdown", "html": "<p>This is going to share the wire format of the discovery protocol. We should increment the <code>DiscoveryPrivate::Version</code> variable from <code>2</code> to <code>3</code> for avoiding compatibility issues.</p>", "type": "rendered"}, "created_on": "2015-06-22T23:25:10.929821+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-22T23:25:10.937669+00:00", "type": "pullrequest_comment", "id": 7716571}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7716593.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7716593"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "I had to add this [line](https://bitbucket.org/costashatz/ign-transport/commits/23e3bd61d6a3e0b11f8447c9b1e724119fb89f3a) to compile some tests.", "markup": "markdown", "html": "<p>I had to add this <a data-is-external-link=\"true\" href=\"https://bitbucket.org/costashatz/ign-transport/commits/23e3bd61d6a3e0b11f8447c9b1e724119fb89f3a\" rel=\"nofollow\">line</a> to compile some tests.</p>", "type": "rendered"}, "created_on": "2015-06-22T23:27:14.248214+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-22T23:27:14.254000+00:00", "type": "pullrequest_comment", "id": 7716593}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7717663.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:23e3bd61d6a3..a1cf527bf1c0?path=include%2Fignition%2Ftransport%2FPacket.hh"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7717663"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "I believe this is not a reference, it's a copy (which is probably fine).", "markup": "markdown", "html": "<p>I believe this is not a reference, it's a copy (which is probably fine).</p>", "type": "rendered"}, "created_on": "2015-06-23T00:55:17.529454+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 153, "from": null, "path": "include/ignition/transport/Packet.hh"}, "updated_on": "2015-06-23T00:55:17.538473+00:00", "type": "pullrequest_comment", "id": 7717663}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7717809.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:23e3bd61d6a3..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7717809"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "How about:\n\n\n```\n#!c++\nreturn (this->version != 0) && (this->pUuid != \"\") &&\n    (this->type != Uninitialized);\n```", "markup": "markdown", "html": "<p>How about:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">version</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">pUuid</span> <span class=\"o\">!=</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">Uninitialized</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-06-23T01:04:04.953644+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 89, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T01:04:04.960604+00:00", "type": "pullrequest_comment", "id": 7717809}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7717855.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:23e3bd61d6a3..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7717855"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "`return this->header.CanPack();`", "markup": "markdown", "html": "<p><code>return this-&gt;header.CanPack();</code></p>", "type": "rendered"}, "created_on": "2015-06-23T01:07:53.243639+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 157, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T01:07:53.249546+00:00", "type": "pullrequest_comment", "id": 7717855}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7717889.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:23e3bd61d6a3..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7717889"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "`data.resize(sz)`?", "markup": "markdown", "html": "<p><code>data.resize(sz)</code>?</p>", "type": "rendered"}, "created_on": "2015-06-23T01:10:28.284604+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 141, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T01:10:28.291449+00:00", "type": "pullrequest_comment", "id": 7717889}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7717926.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:23e3bd61d6a3..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7717926"}}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2015-06-23T01:13:23.584457+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 147, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T01:13:57.586075+00:00", "type": "pullrequest_comment", "id": 7717926}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7718030.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:23e3bd61d6a3..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7718030"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "I seems that if we use `SerializeToArray` we have to store the array size first, and then, the array itself. If we use `SerializeToString` or `SerializeToOstream` we can avoid that. Is there any reason for selecting `SerializeToArray()` over the other two alternatives?", "markup": "markdown", "html": "<p>I seems that if we use <code>SerializeToArray</code> we have to store the array size first, and then, the array itself. If we use <code>SerializeToString</code> or <code>SerializeToOstream</code> we can avoid that. Is there any reason for selecting <code>SerializeToArray()</code> over the other two alternatives?</p>", "type": "rendered"}, "created_on": "2015-06-23T01:23:01.612609+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 147, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T01:23:01.628291+00:00", "type": "pullrequest_comment", "id": 7718030}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7726446.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7726446"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Fixed all issues that [Carlos](https://bitbucket.org/caguero) pointed out.\n\nRegarding the selection of *SerializeToArray* over the other two alternatives (*SerializeToString* or *SerializeToOstream*), there's no real reason for that. The (extra) size of the array that we store right now, using *SerializeToString* or *SerializeToOstream* it is dealt inside their implementation. So, we won't gain anything in performance. Only in code appearance. Should I change it?", "markup": "markdown", "html": "<p>Fixed all issues that <a data-is-external-link=\"true\" href=\"https://bitbucket.org/caguero\" rel=\"nofollow\">Carlos</a> pointed out.</p>\n<p>Regarding the selection of <em>SerializeToArray</em> over the other two alternatives (<em>SerializeToString</em> or <em>SerializeToOstream</em>), there's no real reason for that. The (extra) size of the array that we store right now, using <em>SerializeToString</em> or <em>SerializeToOstream</em> it is dealt inside their implementation. So, we won't gain anything in performance. Only in code appearance. Should I change it?</p>", "type": "rendered"}, "created_on": "2015-06-23T09:29:24.787146+00:00", "user": {"display_name": "Konstantinos Chatzilygeroudis", "uuid": "{4243c891-d80f-40d6-87cd-2cd89e0aa897}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4243c891-d80f-40d6-87cd-2cd89e0aa897%7D"}, "html": {"href": "https://bitbucket.org/%7B4243c891-d80f-40d6-87cd-2cd89e0aa897%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ae5009f3-2908-4477-beef-4ca061e61478/6f7ccf76-cbb5-403b-803b-ae7208960a77/128"}}, "nickname": "costashatz", "type": "user", "account_id": "557058:ae5009f3-2908-4477-beef-4ca061e61478"}, "updated_on": "2015-06-23T09:29:24.841489+00:00", "type": "pullrequest_comment", "id": 7726446}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7743738.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7743738"}}, "parent": {"id": 7726446, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7726446.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7726446"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "I would go with SerializeToString or SerializeToOstream because the code is slightly shorter and we don't have to deal with the buffer size (unless there's a reason for using SerializeToArray).", "markup": "markdown", "html": "<p>I would go with SerializeToString or SerializeToOstream because the code is slightly shorter and we don't have to deal with the buffer size (unless there's a reason for using SerializeToArray).</p>", "type": "rendered"}, "created_on": "2015-06-23T18:16:51.769294+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-23T18:16:51.777289+00:00", "type": "pullrequest_comment", "id": 7743738}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7744006.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:e88d64f0a0b2..a1cf527bf1c0?path=include%2Fignition%2Ftransport%2FPacket.hh"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7744006"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Could you make it a `const` method:\n\n```\n#!c++\nsize_t MsgLength() const;\n```\n", "markup": "markdown", "html": "<p>Could you make it a <code>const</code> method:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">size_t</span> <span class=\"nf\">MsgLength</span><span class=\"p\">()</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-06-23T18:27:32.276856+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 162, "from": null, "path": "include/ignition/transport/Packet.hh"}, "updated_on": "2015-06-23T18:27:32.289368+00:00", "type": "pullrequest_comment", "id": 7744006}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7744147.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:e88d64f0a0b2..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7744147"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "We're serializing the message into a temporary vector `data`, and then, copying `data` into `_buffer`. Can we avoid this extra copy by serializing directly into `_buffer`?", "markup": "markdown", "html": "<p>We're serializing the message into a temporary vector <code>data</code>, and then, copying <code>data</code> into <code>_buffer</code>. Can we avoid this extra copy by serializing directly into <code>_buffer</code>?</p>", "type": "rendered"}, "created_on": "2015-06-23T18:32:32.008498+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 139, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T18:32:32.018601+00:00", "type": "pullrequest_comment", "id": 7744147}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7747562.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:e88d64f0a0b2..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7747562"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Can we remove this method and replace it with the following code in the Message constructor?\n\n```\n#!c++\n  this->message.mutable_header()->set_version(_header.Version());\n  this->message.mutable_header()->set_puuid(_header.PUuid());\n  this->message.mutable_header()->set_type(static_cast<int>(header.Type()));\n  this->message.mutable_header()->set_flags(header.Flags());\n```", "markup": "markdown", "html": "<p>Can we remove this method and replace it with the following code in the Message constructor?</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">mutable_header</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">set_version</span><span class=\"p\">(</span><span class=\"n\">_header</span><span class=\"p\">.</span><span class=\"n\">Version</span><span class=\"p\">());</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">mutable_header</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">set_puuid</span><span class=\"p\">(</span><span class=\"n\">_header</span><span class=\"p\">.</span><span class=\"n\">PUuid</span><span class=\"p\">());</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">mutable_header</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">set_type</span><span class=\"p\">(</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">Type</span><span class=\"p\">()));</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">mutable_header</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">set_flags</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">Flags</span><span class=\"p\">());</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-06-23T20:24:20.903655+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 158, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T20:24:20.910603+00:00", "type": "pullrequest_comment", "id": 7747562}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7747699.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7747699"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Can we make the methods `CanPack()` private? It should be only used when we're doing `Pack()`. ", "markup": "markdown", "html": "<p>Can we make the methods <code>CanPack()</code> private? It should be only used when we're doing <code>Pack()</code>. </p>", "type": "rendered"}, "created_on": "2015-06-23T20:30:14.597563+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-23T20:30:14.605694+00:00", "type": "pullrequest_comment", "id": 7747699}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7747906.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7747906"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "I'm still not 100% convinced about this:\n\n* The `Header` class has its own member variables (version, puuid, type and flags).\n* The `Message` class has a `header` and a `msg::MessageData message` member variables. At this point we have two headers: one is the `header` member variable, and the other is the header contained in `message`. This is a little confusing and a potential source of problems.\n\nOne alternative could be not to use protobuf messages as member variables. We can use the protobuf messages in the `Pack()` and `UnPack()` methods for not having to do the [un]serialization by hand. What do you think?\n\nUpdate: A similar thing happens in `Publisher`. We have all the member variables but we also have a `msgs::PublisherData` with the same fields inside. ", "markup": "markdown", "html": "<p>I'm still not 100% convinced about this:</p>\n<ul>\n<li>The <code>Header</code> class has its own member variables (version, puuid, type and flags).</li>\n<li>The <code>Message</code> class has a <code>header</code> and a <code>msg::MessageData message</code> member variables. At this point we have two headers: one is the <code>header</code> member variable, and the other is the header contained in <code>message</code>. This is a little confusing and a potential source of problems.</li>\n</ul>\n<p>One alternative could be not to use protobuf messages as member variables. We can use the protobuf messages in the <code>Pack()</code> and <code>UnPack()</code> methods for not having to do the [un]serialization by hand. What do you think?</p>\n<p>Update: A similar thing happens in <code>Publisher</code>. We have all the member variables but we also have a <code>msgs::PublisherData</code> with the same fields inside. </p>", "type": "rendered"}, "created_on": "2015-06-23T20:37:53.668779+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-23T20:53:24.493141+00:00", "type": "pullrequest_comment", "id": 7747906}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7748044.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:e88d64f0a0b2..a1cf527bf1c0?path=msgs%2Fpacket.proto"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7748044"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Can you document these fields following the style used in the other existing messages? [Gazebo](https://bitbucket.org/osrf/gazebo/src/92da614daa0fed41a7c3cce2db95c0f427b65e6a/gazebo/msgs/log_playback_control.proto?at=default) also uses the same style. Same applies to publisher.proto", "markup": "markdown", "html": "<p>Can you document these fields following the style used in the other existing messages? <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/92da614daa0fed41a7c3cce2db95c0f427b65e6a/gazebo/msgs/log_playback_control.proto?at=default\" rel=\"nofollow\">Gazebo</a> also uses the same style. Same applies to publisher.proto</p>", "type": "rendered"}, "created_on": "2015-06-23T20:42:25.418716+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 10, "from": null, "path": "msgs/packet.proto"}, "updated_on": "2015-06-23T20:44:39.424824+00:00", "type": "pullrequest_comment", "id": 7748044}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7748162.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:e88d64f0a0b2..a1cf527bf1c0?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7748162"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Can we use the Header setters methods instead of creating a new object?", "markup": "markdown", "html": "<p>Can we use the Header setters methods instead of creating a new object?</p>", "type": "rendered"}, "created_on": "2015-06-23T20:46:49.645860+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 189, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-23T20:46:49.653438+00:00", "type": "pullrequest_comment", "id": 7748162}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7748202.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:e88d64f0a0b2..a1cf527bf1c0?path=src%2FPublisher.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7748202"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Can we avoid this extra copy and serialize directly into `_buffer`?", "markup": "markdown", "html": "<p>Can we avoid this extra copy and serialize directly into <code>_buffer</code>?</p>", "type": "rendered"}, "created_on": "2015-06-23T20:48:39.023616+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 134, "from": null, "path": "src/Publisher.cc"}, "updated_on": "2015-06-23T20:48:39.033075+00:00", "type": "pullrequest_comment", "id": 7748202}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7775374.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7775374"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "I am pushing a commit making all the changes @caguero marked (except of the `PreparePack()` function).\n\nFor the above comment and the `PreparePack()`:\n\n* The idea is to only use protobuf data when Packing and Unpacking.\n\n* I have an extra `msgs::MessageData` in `Message` class and an extra `msgs::PublisherData` in `Publisher` class as a workaround to handle difficulties of passing data along classes (e.g. from `Publisher` to `Message`). I am still trying to find a way to overcome this \"problem\".\n\nRegarding making `CanPack()` private, it needs a little tweaking but it is related to the above problem. So it is on my waiting list.\n\n\n**Update:** Removed `PreparePack()` and extra protobuf message structs. `CanPack()` still public. Working on it!", "markup": "markdown", "html": "<p>I am pushing a commit making all the changes @caguero marked (except of the <code>PreparePack()</code> function).</p>\n<p>For the above comment and the <code>PreparePack()</code>:</p>\n<ul>\n<li>\n<p>The idea is to only use protobuf data when Packing and Unpacking.</p>\n</li>\n<li>\n<p>I have an extra <code>msgs::MessageData</code> in <code>Message</code> class and an extra <code>msgs::PublisherData</code> in <code>Publisher</code> class as a workaround to handle difficulties of passing data along classes (e.g. from <code>Publisher</code> to <code>Message</code>). I am still trying to find a way to overcome this \"problem\".</p>\n</li>\n</ul>\n<p>Regarding making <code>CanPack()</code> private, it needs a little tweaking but it is related to the above problem. So it is on my waiting list.</p>\n<p><strong>Update:</strong> Removed <code>PreparePack()</code> and extra protobuf message structs. <code>CanPack()</code> still public. Working on it!</p>", "type": "rendered"}, "created_on": "2015-06-24T16:48:12.049298+00:00", "user": {"display_name": "Konstantinos Chatzilygeroudis", "uuid": "{4243c891-d80f-40d6-87cd-2cd89e0aa897}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4243c891-d80f-40d6-87cd-2cd89e0aa897%7D"}, "html": {"href": "https://bitbucket.org/%7B4243c891-d80f-40d6-87cd-2cd89e0aa897%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ae5009f3-2908-4477-beef-4ca061e61478/6f7ccf76-cbb5-403b-803b-ae7208960a77/128"}}, "nickname": "costashatz", "type": "user", "account_id": "557058:ae5009f3-2908-4477-beef-4ca061e61478"}, "updated_on": "2015-06-24T22:59:41.464912+00:00", "type": "pullrequest_comment", "id": 7775374}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7784947.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7784947"}}, "parent": {"id": 7775374, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7775374.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7775374"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "It's looking much better!", "markup": "markdown", "html": "<p>It's looking much better!</p>", "type": "rendered"}, "created_on": "2015-06-24T23:40:18.916075+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-24T23:40:24.478600+00:00", "type": "pullrequest_comment", "id": 7784947}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7784873.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:6305a6e46145..fd00403f78c2?path=src%2FPacket.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7784873"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "`this->header`", "markup": "markdown", "html": "<p><code>this-&gt;header</code></p>", "type": "rendered"}, "created_on": "2015-06-24T23:34:26.192999+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 122, "from": null, "path": "src/Packet.cc"}, "updated_on": "2015-06-24T23:34:26.205418+00:00", "type": "pullrequest_comment", "id": 7784873}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7784979.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7784979"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "Now, that the memory allocation happens inside `Pack()`, there's probably no need to return `size_t`. We could return a `bool` that tells if everything went OK. If you need the size you can use `.size()` on the std::vector that you passed in as a parameter to `Pack()`. The `size_t` in `Unpack` is probably irrelevant too. I believe that a `bool` would be cleaner.", "markup": "markdown", "html": "<p>Now, that the memory allocation happens inside <code>Pack()</code>, there's probably no need to return <code>size_t</code>. We could return a <code>bool</code> that tells if everything went OK. If you need the size you can use <code>.size()</code> on the std::vector that you passed in as a parameter to <code>Pack()</code>. The <code>size_t</code> in <code>Unpack</code> is probably irrelevant too. I believe that a <code>bool</code> would be cleaner.</p>", "type": "rendered"}, "created_on": "2015-06-24T23:42:33.285498+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-24T23:42:33.295502+00:00", "type": "pullrequest_comment", "id": 7784979}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7785553.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:6305a6e46145..fd00403f78c2?path=include%2Fignition%2Ftransport%2FPacket.hh"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7785553"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "We should make all `Pack()` methods `const`, we're not modifying any member variable inside.", "markup": "markdown", "html": "<p>We should make all <code>Pack()</code> methods <code>const</code>, we're not modifying any member variable inside.</p>", "type": "rendered"}, "created_on": "2015-06-25T00:30:35.859906+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 174, "from": null, "path": "include/ignition/transport/Packet.hh"}, "updated_on": "2015-06-25T00:31:08.389694+00:00", "type": "pullrequest_comment", "id": 7785553}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7785859.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:6305a6e46145..fd00403f78c2?path=include%2Fignition%2Ftransport%2FPacket.hh"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7785859"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "This is an elegant solution but we're exposing our internal implementation for [un]serialization (protobufs) in the public API. Ideally, we shouldn't do it. How about this:\n\n```\n#!c++\n        std::vector<char> v;\n        this->publisher.Pack(v);\n        msgs::PublisherData msg;\n        char *buffer = &v[0];\n        uint bufferSize;\n        memcpy(&bufferSize, buffer, sizeof(bufferSize));\n        buffer += sizeof(bufferSize);\n\n        if (!msg.ParseFromArray(buffer, bufferSize))\n        {\n          std::cerr << \"AdvertiseMessage::Pack() error parsing\" << std::endl;\n          return 0;\n        }\n\n        message.mutable_publisher()->CopyFrom(msg);\n```\n\nWe can get rid of all the `PublisherProto()` and looks consistent to me because the only methods that know about protobufs are `Pack()` and `Unpack()`. \n\nAlso, based on the way we're doing things right now, I don't think we need `Publisher::Unpack()` anymore.", "markup": "markdown", "html": "<p>This is an elegant solution but we're exposing our internal implementation for [un]serialization (protobufs) in the public API. Ideally, we shouldn't do it. How about this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">publisher</span><span class=\"p\">.</span><span class=\"n\">Pack</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n        <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">PublisherData</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n        <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"n\">uint</span> <span class=\"n\">bufferSize</span><span class=\"p\">;</span>\n        <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">bufferSize</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">bufferSize</span><span class=\"p\">));</span>\n        <span class=\"n\">buffer</span> <span class=\"o\">+=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">bufferSize</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">ParseFromArray</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">bufferSize</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n          <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;AdvertiseMessage::Pack() error parsing&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n          <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">mutable_publisher</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">CopyFrom</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>We can get rid of all the <code>PublisherProto()</code> and looks consistent to me because the only methods that know about protobufs are <code>Pack()</code> and <code>Unpack()</code>. </p>\n<p>Also, based on the way we're doing things right now, I don't think we need <code>Publisher::Unpack()</code> anymore.</p>", "type": "rendered"}, "created_on": "2015-06-25T00:56:33.327981+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 291, "from": null, "path": "include/ignition/transport/Packet.hh"}, "updated_on": "2015-06-25T01:35:12.601502+00:00", "type": "pullrequest_comment", "id": 7785859}], "page": 1, "size": 25}