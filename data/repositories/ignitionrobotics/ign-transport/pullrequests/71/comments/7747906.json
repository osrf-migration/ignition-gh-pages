{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7747906.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7747906"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "I'm still not 100% convinced about this:\n\n* The `Header` class has its own member variables (version, puuid, type and flags).\n* The `Message` class has a `header` and a `msg::MessageData message` member variables. At this point we have two headers: one is the `header` member variable, and the other is the header contained in `message`. This is a little confusing and a potential source of problems.\n\nOne alternative could be not to use protobuf messages as member variables. We can use the protobuf messages in the `Pack()` and `UnPack()` methods for not having to do the [un]serialization by hand. What do you think?\n\nUpdate: A similar thing happens in `Publisher`. We have all the member variables but we also have a `msgs::PublisherData` with the same fields inside. ", "markup": "markdown", "html": "<p>I'm still not 100% convinced about this:</p>\n<ul>\n<li>The <code>Header</code> class has its own member variables (version, puuid, type and flags).</li>\n<li>The <code>Message</code> class has a <code>header</code> and a <code>msg::MessageData message</code> member variables. At this point we have two headers: one is the <code>header</code> member variable, and the other is the header contained in <code>message</code>. This is a little confusing and a potential source of problems.</li>\n</ul>\n<p>One alternative could be not to use protobuf messages as member variables. We can use the protobuf messages in the <code>Pack()</code> and <code>UnPack()</code> methods for not having to do the [un]serialization by hand. What do you think?</p>\n<p>Update: A similar thing happens in <code>Publisher</code>. We have all the member variables but we also have a <code>msgs::PublisherData</code> with the same fields inside. </p>", "type": "rendered"}, "created_on": "2015-06-23T20:37:53.668779+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2015-06-23T20:53:24.493141+00:00", "type": "pullrequest_comment", "id": 7747906}