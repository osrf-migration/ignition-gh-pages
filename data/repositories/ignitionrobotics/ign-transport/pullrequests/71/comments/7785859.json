{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71/comments/7785859.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/costashatz/ign-transport:6305a6e46145..fd00403f78c2?path=include%2Fignition%2Ftransport%2FPacket.hh"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71/_/diff#comment-7785859"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/71"}}, "title": "Protobuf implementation of discovery"}, "content": {"raw": "This is an elegant solution but we're exposing our internal implementation for [un]serialization (protobufs) in the public API. Ideally, we shouldn't do it. How about this:\n\n```\n#!c++\n        std::vector<char> v;\n        this->publisher.Pack(v);\n        msgs::PublisherData msg;\n        char *buffer = &v[0];\n        uint bufferSize;\n        memcpy(&bufferSize, buffer, sizeof(bufferSize));\n        buffer += sizeof(bufferSize);\n\n        if (!msg.ParseFromArray(buffer, bufferSize))\n        {\n          std::cerr << \"AdvertiseMessage::Pack() error parsing\" << std::endl;\n          return 0;\n        }\n\n        message.mutable_publisher()->CopyFrom(msg);\n```\n\nWe can get rid of all the `PublisherProto()` and looks consistent to me because the only methods that know about protobufs are `Pack()` and `Unpack()`. \n\nAlso, based on the way we're doing things right now, I don't think we need `Publisher::Unpack()` anymore.", "markup": "markdown", "html": "<p>This is an elegant solution but we're exposing our internal implementation for [un]serialization (protobufs) in the public API. Ideally, we shouldn't do it. How about this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">publisher</span><span class=\"p\">.</span><span class=\"n\">Pack</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n        <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">PublisherData</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n        <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"n\">uint</span> <span class=\"n\">bufferSize</span><span class=\"p\">;</span>\n        <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">bufferSize</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">bufferSize</span><span class=\"p\">));</span>\n        <span class=\"n\">buffer</span> <span class=\"o\">+=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">bufferSize</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">ParseFromArray</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">bufferSize</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n          <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;AdvertiseMessage::Pack() error parsing&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n          <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">mutable_publisher</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">CopyFrom</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>We can get rid of all the <code>PublisherProto()</code> and looks consistent to me because the only methods that know about protobufs are <code>Pack()</code> and <code>Unpack()</code>. </p>\n<p>Also, based on the way we're doing things right now, I don't think we need <code>Publisher::Unpack()</code> anymore.</p>", "type": "rendered"}, "created_on": "2015-06-25T00:56:33.327981+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 291, "from": null, "outdated": true, "path": "include/ignition/transport/Packet.hh"}, "updated_on": "2015-06-25T01:35:12.601502+00:00", "type": "pullrequest_comment", "id": 7785859}