{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/302/comments/63067620.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:3041d4095d4e..63e622f5b94d?path=log%2Fsrc%2FPlayback.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/302/_/diff#comment-63067620"}}, "parent": {"id": 63054649, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/302/comments/63054649.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/302/_/diff#comment-63054649"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 302, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/302.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/302"}}, "title": "Refactor Playback into Playback and PlaybackHandle"}, "content": {"raw": "Yes and no. Intuitively, it would make sense, but there are two issues:\n\n1. `DefaultToAllTopics()` is not const-qualified whereas this `Start()` function is const-qualified (because spawning a new playback handle shouldn't affect the state of the spawner).\n\n2. The first bullet point is a natural consequence of the fact that calling here `DefaultToAllTopics()` will change the behavior of the `Playback` class. Consider this scenario:\n\n    a. A user creates a `Playback` object `playback`.\n\n    b. They call `playback->Start()` to spawn a handle that will playback all the topics.\n\n    c. They call `playback->AddTopic(\"/some/topic\")`.\n\n    d. They call `playback->Start()` again.\n\nIf we call `this->DefaultToAllTopics()` here, then the second playback handle would play all of the topics again, even though the behavior that's defined by the documentation says that it should only play `/some/topic`.", "markup": "markdown", "html": "<p>Yes and no. Intuitively, it would make sense, but there are two issues:</p>\n<ol>\n<li>\n<p><code>DefaultToAllTopics()</code> is not const-qualified whereas this <code>Start()</code> function is const-qualified (because spawning a new playback handle shouldn't affect the state of the spawner).</p>\n</li>\n<li>\n<p>The first bullet point is a natural consequence of the fact that calling here <code>DefaultToAllTopics()</code> will change the behavior of the <code>Playback</code> class. Consider this scenario:</p>\n<p>a. A user creates a <code>Playback</code> object <code>playback</code>.</p>\n<p>b. They call <code>playback-&gt;Start()</code> to spawn a handle that will playback all the topics.</p>\n<p>c. They call <code>playback-&gt;AddTopic(\"/some/topic\")</code>.</p>\n<p>d. They call <code>playback-&gt;Start()</code> again.</p>\n</li>\n</ol>\n<p>If we call <code>this-&gt;DefaultToAllTopics()</code> here, then the second playback handle would play all of the topics again, even though the behavior that's defined by the documentation says that it should only play <code>/some/topic</code>.</p>", "type": "rendered"}, "created_on": "2018-05-01T17:33:00.145175+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": false, "path": "log/src/Playback.cc"}, "updated_on": "2018-05-01T17:33:00.156266+00:00", "type": "pullrequest_comment", "id": 63067620}