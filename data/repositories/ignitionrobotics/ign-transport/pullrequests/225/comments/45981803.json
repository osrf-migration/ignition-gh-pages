{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/45981803.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-45981803"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "The main issue that I see after thinking on this during some time is the extra Ignition Common dependency. I see two main problems:\n\n* Currently, Ignition Common doesn't build on Windows. This will affect the Ignition Transport CI because all Windows builds won't work until we fix the Ignition Common CI. The current plan is to merge the initial Ignition CMake [PR](#!/ignitionrobotics/ign-cmake/pull-requests/1), and then, merge the CMakeRefactor [PR](#!/ignitionrobotics/ign-common/pull-requests/69) in Ignition Common. In my opinion, this is just an issue that will delay the merge of this pull request a little bit, but it's not a big deal if Ignition Common is fixed.\n\n* The main concern that I have is the size of Ignition Common in terms of dependencies. Here is some data:\n  * [Recursive list of dependencies on Ignition Transport 3.x.x](https://bitbucket.org/snippets/osrf/9jaEzk/ignition-transport-3xx-recursive)\n  * [Recursive list of dependencies on Ignition Common 0.x.x](https://bitbucket.org/snippets/osrf/zj5Ex5/ignition-common-0xx-recursive-dependencies)\n  * [Diff](https://bitbucket.org/snippets/osrf/9jaERX/dependencies-diff-ignition-transport-3xx)\n\n  For the record, I created the list with:\n  \n```\n#!c++\n\napt-rdepends libignition-transport-dev | grep Depends | cut -d\" \" -f4 | sort | uniq > /tmp/transport_deps\napt-rdepends libignition-common-dev | grep Depends | cut -d\" \" -f4 | sort | uniq > /tmp/common_deps\ncat /tmp/transport_deps /tmp/common_deps | sort | uniq -u > diff_deps\ngrep -Fvxf /tmp/transport_deps /tmp/diff_deps > /tmp/diff\n```\n\nI'm not 100% convinced that the need of `common::WorkerPool` justifies to pull all these extra dependencies. Note, that some of the dependencies will already exist in a basic installation, but I think is arguable the need to pull audio and video dependencies (for example) into Ignition Transport. [This issue](#!/ignitionrobotics/ign-common/issues/14) captures more details about it.\n\nHere are a few proposals:\n\n* Copy the `WorkerPool` class into Ignition Transport.\n* Split `Ignition Common` into multiple libraries. I'd like to see `Ignition Common` as a pretty lightweight library focused in real common features that can be implemented with just a few dependencies. I'm aware that this can take a bit of discussion, so I'm leaning towards the other options until we have a clear idea of the `Ignition Common` direction. I think this is the right way to go, but will block this PR for some time.\n* Maybe there's an easy way to use `std::async` instead of a `WorkerPool`. Just an idea, I haven't thought much about it.", "markup": "markdown", "html": "<p>The main issue that I see after thinking on this during some time is the extra Ignition Common dependency. I see two main problems:</p>\n<ul>\n<li>\n<p>Currently, Ignition Common doesn't build on Windows. This will affect the Ignition Transport CI because all Windows builds won't work until we fix the Ignition Common CI. The current plan is to merge the initial Ignition CMake <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/pull-requests/1\" rel=\"nofollow\">PR</a>, and then, merge the CMakeRefactor <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/69\" rel=\"nofollow\">PR</a> in Ignition Common. In my opinion, this is just an issue that will delay the merge of this pull request a little bit, but it's not a big deal if Ignition Common is fixed.</p>\n</li>\n<li>\n<p>The main concern that I have is the size of Ignition Common in terms of dependencies. Here is some data:</p>\n</li>\n<li><a data-is-external-link=\"true\" href=\"https://bitbucket.org/snippets/osrf/9jaEzk/ignition-transport-3xx-recursive\" rel=\"nofollow\">Recursive list of dependencies on Ignition Transport 3.x.x</a></li>\n<li><a data-is-external-link=\"true\" href=\"https://bitbucket.org/snippets/osrf/zj5Ex5/ignition-common-0xx-recursive-dependencies\" rel=\"nofollow\">Recursive list of dependencies on Ignition Common 0.x.x</a></li>\n<li><a data-is-external-link=\"true\" href=\"https://bitbucket.org/snippets/osrf/9jaERX/dependencies-diff-ignition-transport-3xx\" rel=\"nofollow\">Diff</a></li>\n</ul>\n<p>For the record, I created the list with:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">rdepends</span> <span class=\"n\">libignition</span><span class=\"o\">-</span><span class=\"n\">transport</span><span class=\"o\">-</span><span class=\"n\">dev</span> <span class=\"o\">|</span> <span class=\"n\">grep</span> <span class=\"n\">Depends</span> <span class=\"o\">|</span> <span class=\"n\">cut</span> <span class=\"o\">-</span><span class=\"n\">d</span><span class=\"s\">&quot; &quot;</span> <span class=\"o\">-</span><span class=\"n\">f4</span> <span class=\"o\">|</span> <span class=\"n\">sort</span> <span class=\"o\">|</span> <span class=\"n\">uniq</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">transport_deps</span>\n<span class=\"n\">apt</span><span class=\"o\">-</span><span class=\"n\">rdepends</span> <span class=\"n\">libignition</span><span class=\"o\">-</span><span class=\"n\">common</span><span class=\"o\">-</span><span class=\"n\">dev</span> <span class=\"o\">|</span> <span class=\"n\">grep</span> <span class=\"n\">Depends</span> <span class=\"o\">|</span> <span class=\"n\">cut</span> <span class=\"o\">-</span><span class=\"n\">d</span><span class=\"s\">&quot; &quot;</span> <span class=\"o\">-</span><span class=\"n\">f4</span> <span class=\"o\">|</span> <span class=\"n\">sort</span> <span class=\"o\">|</span> <span class=\"n\">uniq</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">common_deps</span>\n<span class=\"n\">cat</span> <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">transport_deps</span> <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">common_deps</span> <span class=\"o\">|</span> <span class=\"n\">sort</span> <span class=\"o\">|</span> <span class=\"n\">uniq</span> <span class=\"o\">-</span><span class=\"n\">u</span> <span class=\"o\">&gt;</span> <span class=\"n\">diff_deps</span>\n<span class=\"n\">grep</span> <span class=\"o\">-</span><span class=\"n\">Fvxf</span> <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">transport_deps</span> <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">diff_deps</span> <span class=\"o\">&gt;</span> <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">diff</span>\n</pre></div>\n\n\n<p>I'm not 100% convinced that the need of <code>common::WorkerPool</code> justifies to pull all these extra dependencies. Note, that some of the dependencies will already exist in a basic installation, but I think is arguable the need to pull audio and video dependencies (for example) into Ignition Transport. <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/issues/14\" rel=\"nofollow\">This issue</a> captures more details about it.</p>\n<p>Here are a few proposals:</p>\n<ul>\n<li>Copy the <code>WorkerPool</code> class into Ignition Transport.</li>\n<li>Split <code>Ignition Common</code> into multiple libraries. I'd like to see <code>Ignition Common</code> as a pretty lightweight library focused in real common features that can be implemented with just a few dependencies. I'm aware that this can take a bit of discussion, so I'm leaning towards the other options until we have a clear idea of the <code>Ignition Common</code> direction. I think this is the right way to go, but will block this PR for some time.</li>\n<li>Maybe there's an easy way to use <code>std::async</code> instead of a <code>WorkerPool</code>. Just an idea, I haven't thought much about it.</li>\n</ul>", "type": "rendered"}, "created_on": "2017-09-27T22:58:22.615728+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-09-28T01:01:49.377530+00:00", "type": "pullrequest_comment", "id": 45981803}