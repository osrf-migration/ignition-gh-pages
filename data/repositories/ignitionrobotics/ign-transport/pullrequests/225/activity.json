{"pagelen": 50, "values": [{"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "817abf1ddb9c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/817abf1ddb9c.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/817abf1ddb9c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "8de5cfec6607", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/8de5cfec6607.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/8de5cfec6607"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "MERGED", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-01-11T15:18:32.839117+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "817abf1ddb9c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/817abf1ddb9c.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/817abf1ddb9c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "8de5cfec6607", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/8de5cfec6607.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/8de5cfec6607"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-01-11T15:14:51.413789+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53414601.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53414601"}}, "parent": {"id": 53414237, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53414237.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53414237"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "Now I think I understand what happened. Pull request #247 and pull request #250 were merged into default but never into `ign-transport4`. This branch as well as the branch for pull request #251 merged in those changes from default. We're targeting this branch at `ign-transport4`, even though `ign-transport4` never got those changes from default.\n\nWhile it's a little bit convoluted, I suppose it's not really an issue. Those changes can be thought of as already approved.", "markup": "markdown", "html": "<p>Now I think I understand what happened. <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/247/add-type-and-partition-to-messageinfo\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #247</a> and <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/250/messageinfo-settopicandpartition\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #250</a> were merged into default but never into <code>ign-transport4</code>. This branch as well as the branch for <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/251/subscribe-and-publish-raw-serialized-data\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #251</a> merged in those changes from default. We're targeting this branch at <code>ign-transport4</code>, even though <code>ign-transport4</code> never got those changes from default.</p>\n<p>While it's a little bit convoluted, I suppose it's not really an issue. Those changes can be thought of as already approved.</p>", "type": "rendered"}, "created_on": "2018-01-11T01:26:10.513585+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-11T01:26:10.516240+00:00", "type": "pullrequest_comment", "id": 53414601}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53414237.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53414237"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "~~It looks like this has content which is from pull request #258,~~ so we should merge that one first. But other than that caveat, this looks good to me.\n\nEdit: Actually, I'm not quite sure where the `src/MessageInfo.cc` and other related changes originate and why the diff thinks they aren't in `ign-transport4` yet. Do we have a pull request to get those changes into `ign-transport4`? If not, we may want to retarget this PR to `default`.", "markup": "markdown", "html": "<p><del>It looks like this has content which is from <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/258/transport4-to-default\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #258</a>,</del> so we should merge that one first. But other than that caveat, this looks good to me.</p>\n<p>Edit: Actually, I'm not quite sure where the <code>src/MessageInfo.cc</code> and other related changes originate and why the diff thinks they aren't in <code>ign-transport4</code> yet. Do we have a pull request to get those changes into <code>ign-transport4</code>? If not, we may want to retarget this PR to <code>default</code>.</p>", "type": "rendered"}, "created_on": "2018-01-11T01:14:31.871359+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-11T01:16:52.807460+00:00", "type": "pullrequest_comment", "id": 53414237}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"approval": {"date": "2018-01-11T01:14:42.184291+00:00", "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53412307.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53412307"}}, "parent": {"id": 53412157, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53412157.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53412157"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "It starts to get ugly if I try to use a pointer. I'm inclined to leave it alone.", "markup": "markdown", "html": "<p>It starts to get ugly if I try to use a pointer. I'm inclined to leave it alone.</p>", "type": "rendered"}, "created_on": "2018-01-11T00:21:34.148941+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-01-11T00:21:34.152670+00:00", "type": "pullrequest_comment", "id": 53412307}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53412157.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53412157"}}, "parent": {"id": 53411944, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53411944.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53411944"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "One plausible explanation might be that as soon as we call `Init()` and subscribe to the topics, the `PubTester` will be getting put to work. By that point, we might already need to have provided the member variables with values.\n\nSince `gPubTester` is a global variable,  we won't have very good control over the flow of information.\n\nI suppose it boils down to the inherent ugliness of global variables. Since this is just an example which we aren't likely to touch on much, I won't try to work out a global variable-less implementation.", "markup": "markdown", "html": "<p>One plausible explanation might be that as soon as we call <code>Init()</code> and subscribe to the topics, the <code>PubTester</code> will be getting put to work. By that point, we might already need to have provided the member variables with values.</p>\n<p>Since <code>gPubTester</code> is a global variable,  we won't have very good control over the flow of information.</p>\n<p>I suppose it boils down to the inherent ugliness of global variables. Since this is just an example which we aren't likely to touch on much, I won't try to work out a global variable-less implementation.</p>", "type": "rendered"}, "created_on": "2018-01-11T00:16:58.679485+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-01-11T00:16:58.682807+00:00", "type": "pullrequest_comment", "id": 53412157}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53412069.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53412069"}}, "parent": {"id": 53411944, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53411944.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53411944"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "It's starting to come back to me. I wanted topics to be created based on command line flags, but I also need a globally scoped object to properly handle sigints. So, I needed an Init function.\n\nFor example, `Init` is not called with the `-r` option.\n\nI guess I could use a `PubTester` pointer, and construct it when needed.", "markup": "markdown", "html": "<p>It's starting to come back to me. I wanted topics to be created based on command line flags, but I also need a globally scoped object to properly handle sigints. So, I needed an Init function.</p>\n<p>For example, <code>Init</code> is not called with the <code>-r</code> option.</p>\n<p>I guess I could use a <code>PubTester</code> pointer, and construct it when needed.</p>", "type": "rendered"}, "created_on": "2018-01-11T00:15:04.207561+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-01-11T00:16:42.583572+00:00", "type": "pullrequest_comment", "id": 53412069}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53411944.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53411944"}}, "parent": {"id": 53411200, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53411200.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53411200"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "Sorry, the key bit is that I wanted Init to be called after `ReplyTester` had been created. There was a reason I had done this, but I can't remember it now. I'm testing both versions in case I'm missing something.", "markup": "markdown", "html": "<p>Sorry, the key bit is that I wanted Init to be called after <code>ReplyTester</code> had been created. There was a reason I had done this, but I can't remember it now. I'm testing both versions in case I'm missing something.</p>", "type": "rendered"}, "created_on": "2018-01-11T00:11:38.729360+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-01-11T00:11:38.731886+00:00", "type": "pullrequest_comment", "id": 53411944}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53411200.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53411200"}}, "parent": {"id": 53410962, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410962.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410962"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "I don't see anything in the main function to motivate a separation of the construction and initialization. The `Init()` function does not use any member variables, so those don't need to be set before it gets called (and even if it were the case that they did, that would imply that the values for those variables should be constructor arguments).\n\nEdit: To clarify, when I say \"does not use any member variables\", I mean it does not consume any variables that are expected to already have been set. Obviously it does set some variables.", "markup": "markdown", "html": "<p>I don't see anything in the main function to motivate a separation of the construction and initialization. The <code>Init()</code> function does not use any member variables, so those don't need to be set before it gets called (and even if it were the case that they did, that would imply that the values for those variables should be constructor arguments).</p>\n<p>Edit: To clarify, when I say \"does not use any member variables\", I mean it does not consume any variables that are expected to already have been set. Obviously it does set some variables.</p>", "type": "rendered"}, "created_on": "2018-01-10T23:55:06.923538+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-01-10T23:56:28.432015+00:00", "type": "pullrequest_comment", "id": 53411200}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410962.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410962"}}, "parent": {"id": 53410679, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410679.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410679"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "Take a look at the main function.", "markup": "markdown", "html": "<p>Take a look at the main function.</p>", "type": "rendered"}, "created_on": "2018-01-10T23:49:49.363982+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-01-10T23:49:49.367371+00:00", "type": "pullrequest_comment", "id": 53410962}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410679.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410679"}}, "parent": {"id": 53410534, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410534.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410534"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "+1 to not having a separate `Init` step unless there is a use for an uninitialized object.", "markup": "markdown", "html": "<p>+1 to not having a separate <code>Init</code> step unless there is a use for an uninitialized object.</p>", "type": "rendered"}, "created_on": "2018-01-10T23:42:32.637980+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2018-01-10T23:42:32.639900+00:00", "type": "pullrequest_comment", "id": 53410679}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410534.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410534"}}, "parent": {"id": 53410427, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410427.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410427"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "If we ever have cause to change the implementation of this example, we won't have to remember that the object is uninitialized after construction.\n\nI don't mind encapsulating this work in the `Init()` function, but we should at least call `this->Init()` from the constructor to avoid having uninitialized objects.", "markup": "markdown", "html": "<p>If we ever have cause to change the implementation of this example, we won't have to remember that the object is uninitialized after construction.</p>\n<p>I don't mind encapsulating this work in the <code>Init()</code> function, but we should at least call <code>this-&gt;Init()</code> from the constructor to avoid having uninitialized objects.</p>", "type": "rendered"}, "created_on": "2018-01-10T23:39:24.169860+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-01-10T23:39:24.172061+00:00", "type": "pullrequest_comment", "id": 53410534}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410492.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410492"}}, "parent": {"id": 53410364, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410364.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410364"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "This is a private function in an example program. Passing a pointer should be fine.", "markup": "markdown", "html": "<p>This is a private function in an example program. Passing a pointer should be fine.</p>", "type": "rendered"}, "created_on": "2018-01-10T23:38:43.702721+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-01-10T23:38:43.704794+00:00", "type": "pullrequest_comment", "id": 53410492}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410427.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410427"}}, "parent": {"id": 53410002, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410002.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410002"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "What is the concrete benefit of moving this code?", "markup": "markdown", "html": "<p>What is the concrete benefit of moving this code?</p>", "type": "rendered"}, "created_on": "2018-01-10T23:37:14.643154+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-01-10T23:37:14.645687+00:00", "type": "pullrequest_comment", "id": 53410427}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410364.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410364"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "If we expect `_stream` to always be a valid object (and not a `nullptr`) we should consider accepting it by reference instead of by pointer. Or at least we should handle the case of `_stream == nullptr`.", "markup": "markdown", "html": "<p>If we expect <code>_stream</code> to always be a valid object (and not a <code>nullptr</code>) we should consider accepting it by reference instead of by pointer. Or at least we should handle the case of <code>_stream == nullptr</code>.</p>", "type": "rendered"}, "created_on": "2018-01-10T23:35:45.532946+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-01-10T23:35:45.536332+00:00", "type": "pullrequest_comment", "id": 53410364}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53410002.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53410002"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "I would suggest moving this code to the constructor, to match a RAII pattern.\n\nOr if there's a reason to have an `Init()` function (e.g. we want to re-run the `PubTester` from scratch without destructing and reconstructing the `PubTester` object), then we should at least call `this->Init()` from the constructor so that it's ready to be used right away.", "markup": "markdown", "html": "<p>I would suggest moving this code to the constructor, to match a RAII pattern.</p>\n<p>Or if there's a reason to have an <code>Init()</code> function (e.g. we want to re-run the <code>PubTester</code> from scratch without destructing and reconstructing the <code>PubTester</code> object), then we should at least call <code>this-&gt;Init()</code> from the constructor so that it's ready to be used right away.</p>", "type": "rendered"}, "created_on": "2018-01-10T23:30:12.497264+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-01-10T23:30:12.499774+00:00", "type": "pullrequest_comment", "id": 53410002}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"approval": {"date": "2018-01-04T21:46:33.941699+00:00", "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53021637.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53021637"}}, "parent": {"id": 53019572, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53019572.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53019572"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "thanks", "markup": "markdown", "html": "<p>thanks</p>", "type": "rendered"}, "created_on": "2018-01-04T21:46:26.104279+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-01-04T21:46:26.108070+00:00", "type": "pullrequest_comment", "id": 53021637}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53019572.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53019572"}}, "parent": {"id": 53019460, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53019460.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53019460"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "This is fairly consistent with the results I received in November.", "markup": "markdown", "html": "<p>This is fairly consistent with the results I received in November.</p>", "type": "rendered"}, "created_on": "2018-01-04T21:12:32.005931+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-01-04T21:12:32.008290+00:00", "type": "pullrequest_comment", "id": 53019572}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53019460.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53019460"}}, "parent": {"id": 53017856, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53017856.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53017856"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "This is what I get:\n\n\n```\n#!c++\n\n# 2018-01-04T13:10:08PST\n# Ignition Transport Version 4.0.0\n# Linux 4.5.2-040502-generic #201604200335 SMP Wed Apr 20 07:37:26 UTC 2016 x86_64\n# Test\tSize(B)\t\tMB/s\t\tKmsg/s\n1\t263\t\t10.754447\t40.891433\t\n2\t517\t\t22.030937\t42.613031\t\n3\t1004\t\t43.062406\t42.890843\t\n4\t2012\t\t90.228261\t44.845060\t\n5\t4013\t\t190.469410\t47.463097\t\n6\t8013\t\t394.767957\t49.265938\t\n7\t16014\t\t873.173391\t54.525627\t\n8\t32014\t\t1749.207737\t54.638837\t\n9\t64014\t\t2798.548570\t43.717758\t\n10\t128014\t\t4066.001779\t31.762165\t\n11\t256004\t\t6114.258419\t23.883449\t\n12\t512004\t\t6699.693805\t13.085237\t\n13\t1000014\t\t8422.092524\t8.421975\t\n14\t2000004\t\t5967.222114\t2.983605\t\n15\t4000005\t\t6345.014490\t1.586252\n```\n", "markup": "markdown", "html": "<p>This is what I get:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\"># 2018-01-04T13:10:08PST</span>\n<span class=\"cp\"># Ignition Transport Version 4.0.0</span>\n<span class=\"cp\"># Linux 4.5.2-040502-generic #201604200335 SMP Wed Apr 20 07:37:26 UTC 2016 x86_64</span>\n<span class=\"cp\"># Test  Size(B)     MB/s        Kmsg/s</span>\n<span class=\"mi\">1</span>   <span class=\"mi\">263</span>     <span class=\"mf\">10.754447</span>   <span class=\"mf\">40.891433</span>   \n<span class=\"mi\">2</span>   <span class=\"mi\">517</span>     <span class=\"mf\">22.030937</span>   <span class=\"mf\">42.613031</span>   \n<span class=\"mi\">3</span>   <span class=\"mi\">1004</span>        <span class=\"mf\">43.062406</span>   <span class=\"mf\">42.890843</span>   \n<span class=\"mi\">4</span>   <span class=\"mi\">2012</span>        <span class=\"mf\">90.228261</span>   <span class=\"mf\">44.845060</span>   \n<span class=\"mi\">5</span>   <span class=\"mi\">4013</span>        <span class=\"mf\">190.469410</span>  <span class=\"mf\">47.463097</span>   \n<span class=\"mi\">6</span>   <span class=\"mi\">8013</span>        <span class=\"mf\">394.767957</span>  <span class=\"mf\">49.265938</span>   \n<span class=\"mi\">7</span>   <span class=\"mi\">16014</span>       <span class=\"mf\">873.173391</span>  <span class=\"mf\">54.525627</span>   \n<span class=\"mi\">8</span>   <span class=\"mi\">32014</span>       <span class=\"mf\">1749.207737</span> <span class=\"mf\">54.638837</span>   \n<span class=\"mi\">9</span>   <span class=\"mi\">64014</span>       <span class=\"mf\">2798.548570</span> <span class=\"mf\">43.717758</span>   \n<span class=\"mi\">10</span>  <span class=\"mi\">128014</span>      <span class=\"mf\">4066.001779</span> <span class=\"mf\">31.762165</span>   \n<span class=\"mi\">11</span>  <span class=\"mi\">256004</span>      <span class=\"mf\">6114.258419</span> <span class=\"mf\">23.883449</span>   \n<span class=\"mi\">12</span>  <span class=\"mi\">512004</span>      <span class=\"mf\">6699.693805</span> <span class=\"mf\">13.085237</span>   \n<span class=\"mi\">13</span>  <span class=\"mi\">1000014</span>     <span class=\"mf\">8422.092524</span> <span class=\"mf\">8.421975</span>    \n<span class=\"mi\">14</span>  <span class=\"mi\">2000004</span>     <span class=\"mf\">5967.222114</span> <span class=\"mf\">2.983605</span>    \n<span class=\"mi\">15</span>  <span class=\"mi\">4000005</span>     <span class=\"mf\">6345.014490</span> <span class=\"mf\">1.586252</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-01-04T21:10:44.573309+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-01-04T21:10:44.577338+00:00", "type": "pullrequest_comment", "id": 53019460}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "817abf1ddb9c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/817abf1ddb9c.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/817abf1ddb9c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "d874304603b0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/d874304603b0.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/d874304603b0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-01-04T21:09:00.273924+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/53017856.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-53017856"}}, "parent": {"id": 48895390, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48895390.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48895390"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "the graphs are out of date, but I'm mostly able to reproduce the committed data files from November for intraprocess latency and throughput\n\nthe main discrepancy I see is that my throughput drops off for large messages  (with a peak value of 9.6 GB/s in test 12 dropping to 2.9 GB/s in test 15) instead of saturating (in [throughput-intraprocess.data](#!/ignitionrobotics/ign-transport/pull-requests/225/benchmark/diff#chg-example/data/14-11-2017-benchmarks/throughput-intraprocess.data), throughput fluctuates between 5.5 and 6.2 GB/s but doesn't have big drop):\n\n~~~\n$ ./bench -t\n# 2018-01-04T12:38:36PST\n# Ignition Transport Version 4.0.0\n# Linux 4.4.0-101-generic #124-Ubuntu SMP Fri Nov 10 18:29:59 UTC 2017 x86_64\n# Test\tSize(B)\t\tMB/s\t\tKmsg/s\n1\t259\t\t17.801911\t68.733246\t\n2\t517\t\t37.872683\t73.254707\t\n3\t1006\t\t71.211156\t70.786437\t\n4\t2014\t\t148.920438\t73.942621\t\n5\t4014\t\t327.139364\t81.499593\t\n6\t8013\t\t589.104543\t73.518600\t\n7\t16012\t\t1293.689909\t80.795023\t\n8\t32013\t\t2482.590151\t77.549438\t\n9\t64014\t\t3812.626563\t59.559261\t\n10\t128014\t\t5011.509552\t39.148137\t\n11\t256004\t\t7691.965627\t30.046271\t\n12\t512004\t\t9598.875141\t18.747657\t\n13\t1000004\t\t6189.943857\t6.189919\t\n14\t2000023\t\t4343.485390\t2.171718\t\n15\t4000005\t\t2911.938715\t0.727984\t\n~~~\n\nI compiled 77fc275d7220 in release mode (also ign-msgs1 in release mode). What do other people see for their large message throughput?", "markup": "markdown", "html": "<p>the graphs are out of date, but I'm mostly able to reproduce the committed data files from November for intraprocess latency and throughput</p>\n<p>the main discrepancy I see is that my throughput drops off for large messages  (with a peak value of 9.6 GB/s in test 12 dropping to 2.9 GB/s in test 15) instead of saturating (in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/225/benchmark/diff#chg-example/data/14-11-2017-benchmarks/throughput-intraprocess.data\" rel=\"nofollow\">throughput-intraprocess.data</a>, throughput fluctuates between 5.5 and 6.2 GB/s but doesn't have big drop):</p>\n<div class=\"codehilite\"><pre><span></span>$ ./bench -t\n<span class=\"c1\"># 2018-01-04T12:38:36PST</span>\n<span class=\"c1\"># Ignition Transport Version 4.0.0</span>\n<span class=\"c1\"># Linux 4.4.0-101-generic #124-Ubuntu SMP Fri Nov 10 18:29:59 UTC 2017 x86_64</span>\n<span class=\"c1\"># Test  Size(B)     MB/s        Kmsg/s</span>\n<span class=\"m\">1</span>   <span class=\"m\">259</span>     <span class=\"m\">17</span>.801911   <span class=\"m\">68</span>.733246   \n<span class=\"m\">2</span>   <span class=\"m\">517</span>     <span class=\"m\">37</span>.872683   <span class=\"m\">73</span>.254707   \n<span class=\"m\">3</span>   <span class=\"m\">1006</span>        <span class=\"m\">71</span>.211156   <span class=\"m\">70</span>.786437   \n<span class=\"m\">4</span>   <span class=\"m\">2014</span>        <span class=\"m\">148</span>.920438  <span class=\"m\">73</span>.942621   \n<span class=\"m\">5</span>   <span class=\"m\">4014</span>        <span class=\"m\">327</span>.139364  <span class=\"m\">81</span>.499593   \n<span class=\"m\">6</span>   <span class=\"m\">8013</span>        <span class=\"m\">589</span>.104543  <span class=\"m\">73</span>.518600   \n<span class=\"m\">7</span>   <span class=\"m\">16012</span>       <span class=\"m\">1293</span>.689909 <span class=\"m\">80</span>.795023   \n<span class=\"m\">8</span>   <span class=\"m\">32013</span>       <span class=\"m\">2482</span>.590151 <span class=\"m\">77</span>.549438   \n<span class=\"m\">9</span>   <span class=\"m\">64014</span>       <span class=\"m\">3812</span>.626563 <span class=\"m\">59</span>.559261   \n<span class=\"m\">10</span>  <span class=\"m\">128014</span>      <span class=\"m\">5011</span>.509552 <span class=\"m\">39</span>.148137   \n<span class=\"m\">11</span>  <span class=\"m\">256004</span>      <span class=\"m\">7691</span>.965627 <span class=\"m\">30</span>.046271   \n<span class=\"m\">12</span>  <span class=\"m\">512004</span>      <span class=\"m\">9598</span>.875141 <span class=\"m\">18</span>.747657   \n<span class=\"m\">13</span>  <span class=\"m\">1000004</span>     <span class=\"m\">6189</span>.943857 <span class=\"m\">6</span>.189919    \n<span class=\"m\">14</span>  <span class=\"m\">2000023</span>     <span class=\"m\">4343</span>.485390 <span class=\"m\">2</span>.171718    \n<span class=\"m\">15</span>  <span class=\"m\">4000005</span>     <span class=\"m\">2911</span>.938715 <span class=\"m\">0</span>.727984    \n</pre></div>\n\n\n<p>I compiled <a href=\"#!/ignitionrobotics/ign-transport/commits/77fc275d7220\" rel=\"nofollow\" class=\"ap-connect-link\">77fc275d7220</a> in release mode (also ign-msgs1 in release mode). What do other people see for their large message throughput?</p>", "type": "rendered"}, "created_on": "2018-01-04T20:44:29.796372+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-01-04T20:44:29.798960+00:00", "type": "pullrequest_comment", "id": 53017856}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "817abf1ddb9c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/817abf1ddb9c.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/817abf1ddb9c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "77fc275d7220", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/77fc275d7220.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/77fc275d7220"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-01-04T19:29:35.521857+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "6bb406518ac9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/6bb406518ac9.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/6bb406518ac9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "c6daa6b3bd6d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/c6daa6b3bd6d.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/c6daa6b3bd6d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-01-04T15:36:32.157032+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "7b396a00d7fb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/7b396a00d7fb.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/7b396a00d7fb"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "08dbd73b7930", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/08dbd73b7930.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/08dbd73b7930"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-01-03T22:33:45.568240+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "7b396a00d7fb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/7b396a00d7fb.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/7b396a00d7fb"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "aec1aa7bcd71", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/aec1aa7bcd71.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/aec1aa7bcd71"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-01-03T22:31:25.466905+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "f02881cc0ca3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/f02881cc0ca3.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/f02881cc0ca3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "eb8c3b34d794", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/eb8c3b34d794.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/eb8c3b34d794"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2017-12-11T16:26:03.220829+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "f02881cc0ca3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/f02881cc0ca3.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/f02881cc0ca3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "eb8c3b34d794", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/eb8c3b34d794.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/eb8c3b34d794"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2017-12-11T16:26:02.767935+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "eac9336a638f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/eac9336a638f.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/eac9336a638f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "eb8c3b34d794", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/eb8c3b34d794.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/eb8c3b34d794"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2017-12-11T16:25:42.365915+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/50013538.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-50013538"}}, "parent": {"id": 48898867, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48898867.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48898867"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "Wireless data updated: c2a80fb", "markup": "markdown", "html": "<p>Wireless data updated: <a href=\"#!/ignitionrobotics/ign-transport/commits/c2a80fb\" rel=\"nofollow\" class=\"ap-connect-link\">c2a80fb</a></p>", "type": "rendered"}, "created_on": "2017-11-20T17:52:40.064932+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2017-11-20T17:52:40.067150+00:00", "type": "pullrequest_comment", "id": 50013538}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "1a9c29ac2b91", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/1a9c29ac2b91.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/1a9c29ac2b91"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "c2a80fbafff0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/c2a80fbafff0.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/c2a80fbafff0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2017-11-20T17:51:32.447638+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/49572198.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-49572198"}}, "parent": {"id": 48898867, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48898867.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48898867"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "Wired data has been update: 7b58475\n\nNeed to do wireless data.", "markup": "markdown", "html": "<p>Wired data has been update: <a href=\"#!/ignitionrobotics/ign-transport/commits/7b58475\" rel=\"nofollow\" class=\"ap-connect-link\">7b58475</a></p>\n<p>Need to do wireless data.</p>", "type": "rendered"}, "created_on": "2017-11-14T19:50:55.487677+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2017-11-14T19:50:55.490969+00:00", "type": "pullrequest_comment", "id": 49572198}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "1a9c29ac2b91", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/1a9c29ac2b91.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/1a9c29ac2b91"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "7b584758038d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/7b584758038d.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/7b584758038d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2017-11-14T19:50:28.766456+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48898867.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48898867"}}, "parent": {"id": 48895390, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48895390.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48895390"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "thanks", "markup": "markdown", "html": "<p>thanks</p>", "type": "rendered"}, "created_on": "2017-11-07T01:43:59.533576+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-11-07T01:43:59.535804+00:00", "type": "pullrequest_comment", "id": 48898867}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48895390.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48895390"}}, "parent": {"id": 48895363, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48895363.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48895363"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "I'll also update the benchmark data sets in this PR to match the current code.", "markup": "markdown", "html": "<p>I'll also update the benchmark data sets in this PR to match the current code.</p>", "type": "rendered"}, "created_on": "2017-11-07T00:04:00.494612+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2017-11-07T00:04:00.497101+00:00", "type": "pullrequest_comment", "id": 48895390}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48895363.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48895363"}}, "parent": {"id": 48374197, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48374197.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48374197"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "I can confirm that you are seeing the correct data. The original plots were made with code that avoided a message copy. The downside was that intraprocess subscribers blocked the publisher. `Node.cc` was changed so that intraprocess subscribers receive their callbacks asynchronously. In order to make that work, the message had to be copied.\n\nWe will address this performance issue in a future pull request by offering different publish API calls that support no-copy. ", "markup": "markdown", "html": "<p>I can confirm that you are seeing the correct data. The original plots were made with code that avoided a message copy. The downside was that intraprocess subscribers blocked the publisher. <code>Node.cc</code> was changed so that intraprocess subscribers receive their callbacks asynchronously. In order to make that work, the message had to be copied.</p>\n<p>We will address this performance issue in a future pull request by offering different publish API calls that support no-copy. </p>", "type": "rendered"}, "created_on": "2017-11-07T00:03:05.552271+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2017-11-07T00:03:05.554611+00:00", "type": "pullrequest_comment", "id": 48895363}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/48374197.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-48374197"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "I can't reproduce the flat intraprocess latency results with ce37a0e8982b\n\n![latency-20171030-ce37a0e8982b Intraprocess-all.png](data/bitbucket.org/repo/og7EBq/images/2241567057-latency-20171030-ce37a0e8982b_Intraprocess-all.png)", "markup": "markdown", "html": "<p>I can't reproduce the flat intraprocess latency results with <a href=\"#!/ignitionrobotics/ign-transport/commits/ce37a0e8982b\" rel=\"nofollow\" class=\"ap-connect-link\">ce37a0e8982b</a></p>\n<p><img alt=\"latency-20171030-ce37a0e8982b Intraprocess-all.png\" src=\"data/bitbucket.org/repo/og7EBq/images/2241567057-latency-20171030-ce37a0e8982b_Intraprocess-all.png\" /></p>", "type": "rendered"}, "created_on": "2017-10-30T23:55:35.671108+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-10-30T23:55:35.674570+00:00", "type": "pullrequest_comment", "id": 48374197}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "c8ffcd5e9640", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/c8ffcd5e9640.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/c8ffcd5e9640"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "ce37a0e8982b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/ce37a0e8982b.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/ce37a0e8982b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-10-30T23:05:01.336937+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "c8ffcd5e9640", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/c8ffcd5e9640.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/c8ffcd5e9640"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "c42dd156adf0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/c42dd156adf0.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/c42dd156adf0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-10-30T22:45:06.169532+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "36ec98e8ab81", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/36ec98e8ab81.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/36ec98e8ab81"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "d9e5101e72b1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/d9e5101e72b1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/d9e5101e72b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2017-10-24T22:52:57.339731+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46862808.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46862808"}}, "parent": {"id": 46746605, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46746605.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46746605"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "e13d3e4", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-transport/commits/e13d3e4\" rel=\"nofollow\" class=\"ap-connect-link\">e13d3e4</a></p>", "type": "rendered"}, "created_on": "2017-10-10T22:52:32.570950+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-10T22:52:32.573211+00:00", "type": "pullrequest_comment", "id": 46862808}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46862804.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46862804"}}, "parent": {"id": 46746693, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46746693.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46746693"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "e13d3e4", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-transport/commits/e13d3e4\" rel=\"nofollow\" class=\"ap-connect-link\">e13d3e4</a></p>", "type": "rendered"}, "created_on": "2017-10-10T22:52:29.799192+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-10T22:52:29.801814+00:00", "type": "pullrequest_comment", "id": 46862804}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46862802.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46862802"}}, "parent": {"id": 46747703, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46747703.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46747703"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "e13d3e4", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-transport/commits/e13d3e4\" rel=\"nofollow\" class=\"ap-connect-link\">e13d3e4</a></p>", "type": "rendered"}, "created_on": "2017-10-10T22:52:26.443595+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-10T22:52:26.446908+00:00", "type": "pullrequest_comment", "id": 46862802}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"update": {"description": "This PR adds a `bench` example program that can be used to evaluate the latency and throughput of `ign-transport`.\r\n\r\nA deadlock was found in `Node.cc` when using intraprocess communication with a mutex. The modification to `Node.cc` changes intraprocess message delivery from blocking to non-blocking. The behavior now matches interprocess communication. A few tests relied on blocking intraprocess message delivery. Those tests have been modified to use condition variables.\r\n\r\nA slight change was made to `NodeShared` to reduce the length of time the mutex is held during message publication. I didn't notice any performance impact, but there might be change with large numbers of publishers and subscribers.\r\n\r\n# Dependencies\r\n\r\nThis PR relies on C++14, and will not be merged until pull request #128 is merged first.\r\n\r\n# Benchmarking \r\n\r\nThis process could use more automation, but the scope started to get out of hand. Here are the steps to follow:\r\n\r\n1. Compile and install as normal.\r\n2. Compile the `examples`\r\n3. Run the `bench` example. In one of the following configurations:\r\n\r\n    1. Example intraprocess latency:\r\n\r\n            ./bench -l\r\n\r\n    2. Example interprocess latency:\r\n\r\n            Terminal 1: ./bench -l -r\r\n\r\n            Terminal 2: ./bench -l -p\r\n\r\n    3. Example intraprocess throughput:\r\n\r\n            ./bench -t\r\n\r\n    4. Example interprocess throughput:\r\n\r\n            Terminal 1: ./bench -t -r\r\n\r\n            Terminal 2: ./bench -t -p\r\n\r\n4. The `bench` executable with the `-p` option will output data suitable for use with the `latency.gp` and `throughput.gp` gnuplot scripts. Note: you can use the `-o` option with `bench` to output to a file.\r\n\r\n5. Produce plots using\r\n\r\n    1. Latency\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" latency.gp\r\n\r\n    2. Throughput\r\n\r\n            gnuplot -e \"filename='MY_FILENAME'; prefix='MY_PREFIX'\" throughput.gp\r\n\r\n## Results\r\n\r\nRaw data is stored in `examples/data`. We can use this (or some other location) to hold a history of benchmark data. All results are the average of 100 iterations. These tests include time required for message serialization and deserialization.\r\n\r\nI did not make a test out `bench` because results are highly dependent on hardware, background processes, and network activity.\r\n\r\nA few definitions follow.\r\n\r\n** Intraprocess**:  Publisher and subscriber in same process.\r\n\r\n** Interprocess**: Publisher and subscriber in separate processes on the same PC.\r\n\r\n** Wired**: Publisher and subscriber on separate PCs connected via a wired LAN.\r\n\r\n**Wireless**: Publisher and subscriber on separate Pcs where one computer was connected to wireless access point and the other hardwired to the LAN.\r\n\r\n** Latency**: Latency was measure by publishing a message on `topicA`, and then waiting for a response on `topicB`. The time between publication and reception of the response was divided in half to compute the one-way latency time.\r\n\r\n**Throughput**: Throughput was measure by rapidly publishing N messages. Once the N messages have been published, the publisher waits for N responses. The time from start of publication to reception of all N messages is used to compute throughput. \r\n\r\n### Latency\r\n\r\n** Intraprocess latency**\r\n\r\nI was not expecting this result. My theory as to why the plot is not more constant is a combination of context switches, other processes, etc.\r\n\r\n![latency-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/1473127294-latency-Intraprocess-all.png)\r\n\r\n![latency-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3217563991-latency-Intraprocess-small.png)\r\n\r\n![latency-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/83318001-latency-Intraprocess-large.png)\r\n\r\n**Interprocess latency**\r\n\r\n![latency-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2668403778-latency-Interprocess-all.png)\r\n\r\n![latency-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3207293959-latency-Interprocess-small.png)\r\n\r\n![latency-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/556609639-latency-Interprocess-large.png)\r\n**Wired latency**\r\n\r\n![latency-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1861775847-latency-Wired-all.png)\r\n\r\n![latency-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3238222459-latency-Wired-small.png)\r\n\r\n![latency-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/2639846742-latency-Wired-large.png)\r\n\r\n** Wireless latency**\r\n\r\nYou may notice that the latency appears better than over the wired network. I believe this is because I ran the wireless tests when no one else was using the network, and the wired test during an active portion of the day.\r\n\r\n![latency-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/177746882-latency-Wireless-all.png)\r\n\r\n![latency-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/4212627213-latency-Wireless-small.png)\r\n\r\n![latency-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/3866951968-latency-Wireless-large.png)\r\n\r\n### Throughput\r\n\r\n** Intraprocess throughput**\r\n\r\n![throughput-Intraprocess-all.png](https://bitbucket.org/repo/og7EBq/images/2829676984-throughput-Intraprocess-all.png)\r\n\r\n![throughput-Intraprocess-small.png](https://bitbucket.org/repo/og7EBq/images/3933927565-throughput-Intraprocess-small.png)\r\n\r\n![throughput-Intraprocess-large.png](https://bitbucket.org/repo/og7EBq/images/3718225819-throughput-Intraprocess-large.png)\r\n\r\n** Interprocess throughput**\r\n\r\n![throughput-Interprocess-all.png](https://bitbucket.org/repo/og7EBq/images/3032255927-throughput-Interprocess-all.png)\r\n\r\n![throughput-Interprocess-small.png](https://bitbucket.org/repo/og7EBq/images/1568831296-throughput-Interprocess-small.png)\r\n\r\n![throughput-Interprocess-large.png](https://bitbucket.org/repo/og7EBq/images/4114343739-throughput-Interprocess-large.png)\r\n\r\n** Wired throughput**\r\n\r\n![throughput-Wired-all.png](https://bitbucket.org/repo/og7EBq/images/1229007404-throughput-Wired-all.png)\r\n\r\n![throughput-Wired-small.png](https://bitbucket.org/repo/og7EBq/images/3679643025-throughput-Wired-small.png)\r\n\r\n![throughput-Wired-large.png](https://bitbucket.org/repo/og7EBq/images/3619655927-throughput-Wired-large.png)\r\n\r\n** Wireless throughput**\r\n\r\n![throughput-Wireless-all.png](https://bitbucket.org/repo/og7EBq/images/365561471-throughput-Wireless-all.png)\r\n\r\n![throughput-Wireless-small.png](https://bitbucket.org/repo/og7EBq/images/2412795863-throughput-Wireless-small.png)\r\n\r\n![throughput-Wireless-large.png](https://bitbucket.org/repo/og7EBq/images/1670547079-throughput-Wireless-large.png)\r\n\r\n## Comparison\r\n\r\nI had no idea whether these results were good or bad. [This paper](https://dl.acm.org/citation.cfm?id=2968502) on ROS1 and ROS2 performance can be used as a point of comparison.", "title": "Benchmark", "destination": {"commit": {"hash": "0baa0d16cec9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/0baa0d16cec9.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/0baa0d16cec9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport4"}}, "reason": "", "source": {"commit": {"hash": "e13d3e4f3138", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/e13d3e4f3138.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/e13d3e4f3138"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "benchmark_nate"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2017-10-10T22:52:11.568057+00:00"}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46862646.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46862646"}}, "parent": {"id": 46748836, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46748836.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46748836"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "See the condition below. It's used as part of the boolean check.", "markup": "markdown", "html": "<p>See the condition below. It's used as part of the boolean check.</p>", "type": "rendered"}, "created_on": "2017-10-10T22:48:39.597015+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-10T22:48:39.600646+00:00", "type": "pullrequest_comment", "id": 46862646}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46748836.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46748836"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "Do we need this line?", "markup": "markdown", "html": "<p>Do we need this line?</p>", "type": "rendered"}, "created_on": "2017-10-09T21:05:13.912604+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2017-10-09T21:05:13.916346+00:00", "type": "pullrequest_comment", "id": 46748836}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46747703.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46747703"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "I think this for loop is equivalent to `std::memset(byteData, '0', _size);`. Maybe `std::fill` can be used it too but I've never tried it.", "markup": "markdown", "html": "<p>I think this for loop is equivalent to <code>std::memset(byteData, '0', _size);</code>. Maybe <code>std::fill</code> can be used it too but I've never tried it.</p>", "type": "rendered"}, "created_on": "2017-10-09T20:47:52.987029+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2017-10-09T20:47:52.989622+00:00", "type": "pullrequest_comment", "id": 46747703}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46746693.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46746693"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "Not needed anymore.", "markup": "markdown", "html": "<p>Not needed anymore.</p>", "type": "rendered"}, "created_on": "2017-10-09T20:29:45.486005+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2017-10-09T20:29:45.488731+00:00", "type": "pullrequest_comment", "id": 46746693}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/comments/46746605.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225/_/diff#comment-46746605"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}, "content": {"raw": "We should probably remove this block as we're not depending on Ignition Common anymore.", "markup": "markdown", "html": "<p>We should probably remove this block as we're not depending on Ignition Common anymore.</p>", "type": "rendered"}, "created_on": "2017-10-09T20:28:33.985813+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {}, "updated_on": "2017-10-09T20:28:33.989135+00:00", "type": "pullrequest_comment", "id": 46746605}, "pull_request": {"type": "pullrequest", "id": 225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/225"}}, "title": "Benchmark"}}], "next": "data/repositories/ignitionrobotics/ign-transport/pullrequests/225/activity_ctx=yEsgBFaUn.json"}