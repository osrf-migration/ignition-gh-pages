{"rendered": {"description": {"raw": "And one more API change. This time affects the way we advertise messages. Now, we have to specify the message type that we'll publish associated with the topic that we're advertising. E.g.:\r\n\r\n```\r\n#!c++\r\n\r\nnode.Advertise<example::msgs::StringMsg>(\"/foo\");\r\n```\r\n\r\nIn addition, this pull request adds the following checks:\r\n\r\n* When a message is published on a given topic, it checks that the message type matches the type advertised during the advertising phase.\r\n* Before delivering a message to a callback, it checks that the type of the incoming message and the type of the expected message in the callback match.\r\n* When a service call is requested, it checks that there's a service provider offering the requested service with the same parameter types as the ones included in the request (synchronous version) or the ones specified in the callback (asynchronous version).\r\n\r\nCI results:\r\n\r\n* [Trusty is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/33/).\r\n* [Homebrew is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/28/).\r\n* [Windows is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/69/). ", "markup": "markdown", "html": "<p>And one more API change. This time affects the way we advertise messages. Now, we have to specify the message type that we'll publish associated with the topic that we're advertising. E.g.:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">example</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;/foo&quot;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>In addition, this pull request adds the following checks:</p>\n<ul>\n<li>When a message is published on a given topic, it checks that the message type matches the type advertised during the advertising phase.</li>\n<li>Before delivering a message to a callback, it checks that the type of the incoming message and the type of the expected message in the callback match.</li>\n<li>When a service call is requested, it checks that there's a service provider offering the requested service with the same parameter types as the ones included in the request (synchronous version) or the ones specified in the callback (asynchronous version).</li>\n</ul>\n<p>CI results:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/33/\" rel=\"nofollow\">Trusty is happy</a>.</li>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/28/\" rel=\"nofollow\">Homebrew is happy</a>.</li>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/69/\" rel=\"nofollow\">Windows is happy</a>. </li>\n</ul>", "type": "rendered"}, "title": {"raw": "Type checking", "markup": "markdown", "html": "<p>Type checking</p>", "type": "rendered"}}, "type": "pullrequest", "description": "And one more API change. This time affects the way we advertise messages. Now, we have to specify the message type that we'll publish associated with the topic that we're advertising. E.g.:\r\n\r\n```\r\n#!c++\r\n\r\nnode.Advertise<example::msgs::StringMsg>(\"/foo\");\r\n```\r\n\r\nIn addition, this pull request adds the following checks:\r\n\r\n* When a message is published on a given topic, it checks that the message type matches the type advertised during the advertising phase.\r\n* Before delivering a message to a callback, it checks that the type of the incoming message and the type of the expected message in the callback match.\r\n* When a service call is requested, it checks that there's a service provider offering the requested service with the same parameter types as the ones included in the request (synchronous version) or the ones specified in the callback (asynchronous version).\r\n\r\nCI results:\r\n\r\n* [Trusty is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/33/).\r\n* [Homebrew is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/28/).\r\n* [Windows is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/69/). ", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/98/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diffstat/ignitionrobotics/ign-transport:950e87b6678c%0D91ec91a0fae4?from_pullrequest_id=98"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/98/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/98.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/98/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/98/merge"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/98"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/98/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:950e87b6678c%0D91ec91a0fae4?from_pullrequest_id=98"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/98/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/98/statuses_page=1.json"}}, "title": "Type checking", "close_source_branch": true, "reviewers": [], "id": 98, "destination": {"commit": {"hash": "91ec91a0fae4", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/91ec91a0fae4.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/91ec91a0fae4"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "created_on": "2015-11-25T17:52:20.725495+00:00", "summary": {"raw": "And one more API change. This time affects the way we advertise messages. Now, we have to specify the message type that we'll publish associated with the topic that we're advertising. E.g.:\r\n\r\n```\r\n#!c++\r\n\r\nnode.Advertise<example::msgs::StringMsg>(\"/foo\");\r\n```\r\n\r\nIn addition, this pull request adds the following checks:\r\n\r\n* When a message is published on a given topic, it checks that the message type matches the type advertised during the advertising phase.\r\n* Before delivering a message to a callback, it checks that the type of the incoming message and the type of the expected message in the callback match.\r\n* When a service call is requested, it checks that there's a service provider offering the requested service with the same parameter types as the ones included in the request (synchronous version) or the ones specified in the callback (asynchronous version).\r\n\r\nCI results:\r\n\r\n* [Trusty is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/33/).\r\n* [Homebrew is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/28/).\r\n* [Windows is happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/69/). ", "markup": "markdown", "html": "<p>And one more API change. This time affects the way we advertise messages. Now, we have to specify the message type that we'll publish associated with the topic that we're advertising. E.g.:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">example</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;/foo&quot;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>In addition, this pull request adds the following checks:</p>\n<ul>\n<li>When a message is published on a given topic, it checks that the message type matches the type advertised during the advertising phase.</li>\n<li>Before delivering a message to a callback, it checks that the type of the incoming message and the type of the expected message in the callback match.</li>\n<li>When a service call is requested, it checks that there's a service provider offering the requested service with the same parameter types as the ones included in the request (synchronous version) or the ones specified in the callback (asynchronous version).</li>\n</ul>\n<p>CI results:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/33/\" rel=\"nofollow\">Trusty is happy</a>.</li>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/28/\" rel=\"nofollow\">Homebrew is happy</a>.</li>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/69/\" rel=\"nofollow\">Windows is happy</a>. </li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "fc2006fc487d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/fc2006fc487d.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/fc2006fc487d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "type_checking"}}, "comment_count": 6, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-12-15T01:05:59.303691+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2015-12-15T02:12:40.800061+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2016-01-06T23:14:59.114004+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2016-01-06T23:21:13.581326+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "950e87b6678c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/950e87b6678c.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/950e87b6678c"}}}, "closed_by": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}