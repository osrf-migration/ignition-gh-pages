{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/376/comments/100381628.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:cbdbbdaaae4d..00829adc3f66?path=src%2FCIface.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/376/_/diff#comment-100381628"}}, "parent": {"id": 100379621, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/376/comments/100379621.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/376/_/diff#comment-100379621"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 376, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/376.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/376"}}, "title": "Added wait to CIface when publishing"}, "content": {"raw": "There's a difference. The time elapsed between a call to `Advertise()` and `Publish()` might be relevant. If you go too fast, subscribers won\u2019t get the message.\n\n* `cmdTopicPub`: This is designed to be used from the command line. It advertises, publishes and deallocates all resources. It makes sense to me to wait for a long time \\(e.g. 800ms\\) or even block in a `WaitForSubscribers()` function because you\u2019re trying to send a single message. **Without the wait, the second time that you call this function in the presence of a subscriber won\u2019t deliver the message either.**\n* `ignTransportPublish()`: I see this function very similar to `Node::Publisher::Publish()`. We don't know exactly how people are going to use it in the code but adding a longer wait or even blocking this function sounds more dangerous because users typically will send multiple messages and the typical expectation is to never block. I wouldn\u2019t use a `WaitForSubscribers()` here as it might block your user thread forever if you don\u2019t have control over the subscribers. **Without the wait, the second time that you call this function in the presence of a subscriber will probably deliver the message \\(depending on the timing\\)**.\n\nThe timing between publisher and subscriber is a classic topic. ZeroMQ doesn\u2019t solve it in the PUB-SUB socket:\n\n_\u201cThere is one more important thing to know about PUB-SUB sockets: you do not know precisely when a subscriber starts to get messages. Even if you start a subscriber, wait a while, and then start the publisher, **the subscriber will always miss the first messages that the publisher sends**. This is because as the subscriber connects to the publisher \\(something that takes a small but non-zero time\\), the publisher may already be sending messages out.\u201d_\n\nWhat I\u2019m proposing is that by default, the hack doesn\u2019t affect the functionality of anyone unless you really want to change it. It\u2019s true that we\u2019re creating an extra argument but nothing is free :slight_smile: . The alternative is adding this extra delay to the first message of each topic. This won't improve in the future even if we have `WaitForSubscribers()`, as I don\u2019t think this is a good idea.\n\nIf you don\u2019t agree, I\u2019m willing to approve this pull request as it is for the sake of time and for not blocking other projects but I still think an extra argument is more flexible.", "markup": "markdown", "html": "<p>There's a difference. The time elapsed between a call to <code>Advertise()</code> and <code>Publish()</code> might be relevant. If you go too fast, subscribers won\u2019t get the message.</p>\n<ul>\n<li><code>cmdTopicPub</code>: This is designed to be used from the command line. It advertises, publishes and deallocates all resources. It makes sense to me to wait for a long time (e.g. 800ms) or even block in a <code>WaitForSubscribers()</code> function because you\u2019re trying to send a single message. <strong>Without the wait, the second time that you call this function in the presence of a subscriber won\u2019t deliver the message either.</strong></li>\n<li><code>ignTransportPublish()</code>: I see this function very similar to <code>Node::Publisher::Publish()</code>. We don't know exactly how people are going to use it in the code but adding a longer wait or even blocking this function sounds more dangerous because users typically will send multiple messages and the typical expectation is to never block. I wouldn\u2019t use a <code>WaitForSubscribers()</code> here as it might block your user thread forever if you don\u2019t have control over the subscribers. <strong>Without the wait, the second time that you call this function in the presence of a subscriber will probably deliver the message (depending on the timing)</strong>.</li>\n</ul>\n<p>The timing between publisher and subscriber is a classic topic. ZeroMQ doesn\u2019t solve it in the PUB-SUB socket:</p>\n<p><em>\u201cThere is one more important thing to know about PUB-SUB sockets: you do not know precisely when a subscriber starts to get messages. Even if you start a subscriber, wait a while, and then start the publisher, <strong>the subscriber will always miss the first messages that the publisher sends</strong>. This is because as the subscriber connects to the publisher (something that takes a small but non-zero time), the publisher may already be sending messages out.\u201d</em></p>\n<p>What I\u2019m proposing is that by default, the hack doesn\u2019t affect the functionality of anyone unless you really want to change it. It\u2019s true that we\u2019re creating an extra argument but nothing is free <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f642.png\" alt=\"\ud83d\ude42\" title=\":slight_smile:\" data-emoji-short-name=\":slight_smile:\" /> . The alternative is adding this extra delay to the first message of each topic. This won't improve in the future even if we have <code>WaitForSubscribers()</code>, as I don\u2019t think this is a good idea.</p>\n<p>If you don\u2019t agree, I\u2019m willing to approve this pull request as it is for the sake of time and for not blocking other projects but I still think an extra argument is more flexible.</p>", "type": "rendered"}, "created_on": "2019-04-29T23:03:31.606364+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 64, "from": null, "outdated": false, "path": "src/CIface.cc"}, "updated_on": "2019-04-29T23:08:37.678194+00:00", "type": "pullrequest_comment", "id": 100381628}