{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244/comments/51447055.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:f2ae2c23cded..dc8d5c174529?path=tools%2Frecord%2Fschema%2F0.1.0.sql"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244/_/diff#comment-51447055"}}, "parent": {"id": 51444955, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244/comments/51444955.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244/_/diff#comment-51444955"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 244, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244"}}, "title": "Record schema 0.1.0"}, "content": {"raw": "I'm still wrapping up my investigation, but I don't think we'll need to store the descriptors for the logging to work exactly as we want it to. If my understanding is correct, protobuf can reconstruct the messages without any difficulty, even without the message description available. The only catch is that if a user doesn't have access to a compatible version of the message description, then they'll have to use protobuf's Reflection interface to actually use the deserialized message.\n\nThe only benefit we'd get from storing the message description files would be that we could (in theory) extract the description information from the log and regenerate the message source code in some kind of pre-processing step. Essentially, we'd be enabling the user of a log to install the message types out of the log file. I'm not sure how important that hypothetical feature really is.", "markup": "markdown", "html": "<p>I'm still wrapping up my investigation, but I don't think we'll need to store the descriptors for the logging to work exactly as we want it to. If my understanding is correct, protobuf can reconstruct the messages without any difficulty, even without the message description available. The only catch is that if a user doesn't have access to a compatible version of the message description, then they'll have to use protobuf's Reflection interface to actually use the deserialized message.</p>\n<p>The only benefit we'd get from storing the message description files would be that we could (in theory) extract the description information from the log and regenerate the message source code in some kind of pre-processing step. Essentially, we'd be enabling the user of a log to install the message types out of the log file. I'm not sure how important that hypothetical feature really is.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:38:15.275751+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "tools/record/schema/0.1.0.sql"}, "updated_on": "2017-12-07T23:38:15.277728+00:00", "type": "pullrequest_comment", "id": 51447055}