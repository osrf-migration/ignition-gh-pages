{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244/comments/51449492.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:f2ae2c23cded..dc8d5c174529?path=tools%2Frecord%2Fschema%2F0.1.0.sql"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244/_/diff#comment-51449492"}}, "parent": {"id": 51448578, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244/comments/51448578.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244/_/diff#comment-51448578"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 244, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244"}}, "title": "Record schema 0.1.0"}, "content": {"raw": "Just to clarify, `ign-transport` is already using the dynamic message generation as a special case when someone subscribes to a topic with a callback that expects a generic `google::protobuf::Message` type. We could actually move forward with this descriptorless approach as-is without any complexity or changes to `ign-transport`.\n\nStoring the descriptions could certainly make migration between message types safer, although if \"good practices\" are used with protobuf, then migration between message types should be trivial, because message types should always be forward and backward compatible (\"good practices\" in this case means you never reuse a field index when changing the description, which is a reasonably simple rule to follow).\n\nMy main concern with trying to enforce the transmission and recording of descriptors is that I'm not sure how to ensure that it's possible for arbitrary message types. I think we would need a way to serialize an arbitrary `Descriptor` object, but I don't know of any built-in mechanism in protobuf for doing that. The closest thing I can think of is [self-describing messages](https://developers.google.com/protocol-buffers/docs/techniques#self-description), but that requires the message to be generated in a very specific way, so it's not generalizable.\n\nI guess one straightforward option is to make all the messages in `ign-msgs` self-describing. Then for users' custom message types we just handle them as generic protobuf messages, and the user just needs to accept the consequences.", "markup": "markdown", "html": "<p>Just to clarify, <code>ign-transport</code> is already using the dynamic message generation as a special case when someone subscribes to a topic with a callback that expects a generic <code>google::protobuf::Message</code> type. We could actually move forward with this descriptorless approach as-is without any complexity or changes to <code>ign-transport</code>.</p>\n<p>Storing the descriptions could certainly make migration between message types safer, although if \"good practices\" are used with protobuf, then migration between message types should be trivial, because message types should always be forward and backward compatible (\"good practices\" in this case means you never reuse a field index when changing the description, which is a reasonably simple rule to follow).</p>\n<p>My main concern with trying to enforce the transmission and recording of descriptors is that I'm not sure how to ensure that it's possible for arbitrary message types. I think we would need a way to serialize an arbitrary <code>Descriptor</code> object, but I don't know of any built-in mechanism in protobuf for doing that. The closest thing I can think of is <a data-is-external-link=\"true\" href=\"https://developers.google.com/protocol-buffers/docs/techniques#self-description\" rel=\"nofollow\">self-describing messages</a>, but that requires the message to be generated in a very specific way, so it's not generalizable.</p>\n<p>I guess one straightforward option is to make all the messages in <code>ign-msgs</code> self-describing. Then for users' custom message types we just handle them as generic protobuf messages, and the user just needs to accept the consequences.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:36:28.961720+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "tools/record/schema/0.1.0.sql"}, "updated_on": "2017-12-08T00:36:28.965657+00:00", "type": "pullrequest_comment", "id": 51449492}