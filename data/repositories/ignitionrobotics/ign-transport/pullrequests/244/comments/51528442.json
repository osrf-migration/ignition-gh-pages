{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244/comments/51528442.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:f2ae2c23cded..dc8d5c174529?path=tools%2Frecord%2Fschema%2F0.1.0.sql"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244/_/diff#comment-51528442"}}, "parent": {"id": 51520104, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244/comments/51520104.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244/_/diff#comment-51520104"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 244, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/244.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/244"}}, "title": "Record schema 0.1.0"}, "content": {"raw": "For sure, I would never want to burden a user with needing to use the protobuf Reflection interface. Even worse, they'd have to use the [UnknownFieldSet](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.unknown_field_set#UnknownFieldSet) interface, so they wouldn't be able to look up fields by name (they could only use indices).\n\nHowever, one potential use of supporting generic messages is we could create a log inspection tool (either GUI or CLI) that can present the message data to the user in a clean format, even if the message type is unknown. But our first milestone is log playback, so we can shelf this idea until playback is finished.\n\nAnd yes, if we generate self-describing messages, we can store those in the database as if they were any other kind of protobuf message, but they'd have the added advantage of being fully recreatable by consumers of the log, even without access to the original `.proto` descriptor file. The one detail that I'm a bit concerned about is how this would impact message sizes, and whether it's worth the inflation of resource usage. As I understand it, the descriptor would be getting serialized over and over again with each message, and there doesn't seem to be an obvious way to separate the descriptor from the message that it describes.\n\nAll that being said, if we tweak `ign-transport` to support Publishing and Subscribing to serialized data, we can very easily achieve perfect playback without the logger or the playback node having any knowledge whatsoever of the original message descriptors. The burden of knowing the message type descriptors would fall on the nodes that are listening to the log playback, but the listening nodes need to have access to the message type in order to subscribe to the topic anyhow, so that shouldn't typically be an issue.\n\nThe only problem that would arise is if a message type has changed since the time that a log was recorded. In that case, a node that listens to the playback would need to compile against the version of the library that generated the message. Using a self-describing message or storing the descriptors in the log wouldn't really change that fact, unless the listening node wants to operate on the self-describing message using the Reflection interface.", "markup": "markdown", "html": "<p>For sure, I would never want to burden a user with needing to use the protobuf Reflection interface. Even worse, they'd have to use the <a data-is-external-link=\"true\" href=\"https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.unknown_field_set#UnknownFieldSet\" rel=\"nofollow\">UnknownFieldSet</a> interface, so they wouldn't be able to look up fields by name (they could only use indices).</p>\n<p>However, one potential use of supporting generic messages is we could create a log inspection tool (either GUI or CLI) that can present the message data to the user in a clean format, even if the message type is unknown. But our first milestone is log playback, so we can shelf this idea until playback is finished.</p>\n<p>And yes, if we generate self-describing messages, we can store those in the database as if they were any other kind of protobuf message, but they'd have the added advantage of being fully recreatable by consumers of the log, even without access to the original <code>.proto</code> descriptor file. The one detail that I'm a bit concerned about is how this would impact message sizes, and whether it's worth the inflation of resource usage. As I understand it, the descriptor would be getting serialized over and over again with each message, and there doesn't seem to be an obvious way to separate the descriptor from the message that it describes.</p>\n<p>All that being said, if we tweak <code>ign-transport</code> to support Publishing and Subscribing to serialized data, we can very easily achieve perfect playback without the logger or the playback node having any knowledge whatsoever of the original message descriptors. The burden of knowing the message type descriptors would fall on the nodes that are listening to the log playback, but the listening nodes need to have access to the message type in order to subscribe to the topic anyhow, so that shouldn't typically be an issue.</p>\n<p>The only problem that would arise is if a message type has changed since the time that a log was recorded. In that case, a node that listens to the playback would need to compile against the version of the library that generated the message. Using a self-describing message or storing the descriptors in the log wouldn't really change that fact, unless the listening node wants to operate on the self-describing message using the Reflection interface.</p>", "type": "rendered"}, "created_on": "2017-12-08T20:33:13.246516+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "tools/record/schema/0.1.0.sql"}, "updated_on": "2017-12-08T20:33:13.249218+00:00", "type": "pullrequest_comment", "id": 51528442}