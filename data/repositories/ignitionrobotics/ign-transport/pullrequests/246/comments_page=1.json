{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51445437.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51445437"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Fast work, thanks.\n\nThere are parts here that also highlight why we should put the core features of logging directly into the main Node code. For example, this code causes a message to deserialize and then re-serialize before writing to the database. I also believe you loose partition information, and other meta data.", "markup": "markdown", "html": "<p>Fast work, thanks.</p>\n<p>There are parts here that also highlight why we should put the core features of logging directly into the main Node code. For example, this code causes a message to deserialize and then re-serialize before writing to the database. I also believe you loose partition information, and other meta data.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:04:37.297365+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2017-12-07T23:04:37.301104+00:00", "type": "pullrequest_comment", "id": 51445437}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51445970.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51445970"}}, "parent": {"id": 51445437, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51445437.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51445437"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "At the very least Node could be extended to offer a raw bytes subscriber. I think that is similar to the direction Karsten is heading for ros2.", "markup": "markdown", "html": "<p>At the very least Node could be extended to offer a raw bytes subscriber. I think that is similar to the direction Karsten is heading for ros2.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:16:32.020870+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-07T23:17:56.288471+00:00", "type": "pullrequest_comment", "id": 51445970}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51450282.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51450282"}}, "parent": {"id": 51445970, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51445970.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51445970"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I think this should be possible too.", "markup": "markdown", "html": "<p>I think this should be possible too.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:57:27.813993+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-08T00:57:27.816384+00:00", "type": "pullrequest_comment", "id": 51450282}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51446790.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51446790"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I'm trying to answer your question about the type of the topic. Are you interested in the types of all the topics advertised in the network? If so, you would need to use a combination of `TopicsList()` and `TopicInfo()` for each topic.", "markup": "markdown", "html": "<p>I'm trying to answer your question about the type of the topic. Are you interested in the types of all the topics advertised in the network? If so, you would need to use a combination of <code>TopicsList()</code> and <code>TopicInfo()</code> for each topic.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:32:04.074331+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-07T23:33:36.010473+00:00", "type": "pullrequest_comment", "id": 51446790}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51446852.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51446852"}}, "parent": {"id": 51446790, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51446790.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51446790"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I am. @mxgrey has an Idea of adding the message type name into `MessageInfo`. Then the topic/message could be inserted into the db after the first message was received. Is there a better way?", "markup": "markdown", "html": "<p>I am. @mxgrey has an Idea of adding the message type name into <code>MessageInfo</code>. Then the topic/message could be inserted into the db after the first message was received. Is there a better way?</p>", "type": "rendered"}, "created_on": "2017-12-07T23:33:43.591971+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-07T23:34:26.551161+00:00", "type": "pullrequest_comment", "id": 51446852}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447001.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447001"}}, "parent": {"id": 51446852, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51446852.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51446852"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "That sounds like a good idea to me. Just keep in mind (in case is important here) that you may have several publishers using the same topic name but different message types. You could also use a lambda as the subscription callback for each topic and capture the message type.", "markup": "markdown", "html": "<p>That sounds like a good idea to me. Just keep in mind (in case is important here) that you may have several publishers using the same topic name but different message types. You could also use a lambda as the subscription callback for each topic and capture the message type.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:36:59.735030+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-07T23:40:21.970422+00:00", "type": "pullrequest_comment", "id": 51447001}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447556.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447556"}}, "parent": {"id": 51447001, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447001.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447001"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Ah, that's important to the schema. Right now the topic row has a foreign key to the `message_types` table. Multiple topics with the same message type point to the same row in the `message_types` table. If logging should record multiple message types on a topic then that relationship should be reversed: `message_types` should have a foreign key to the `topics` table. `messages` then needs a foreign key on the `message_types` table too. \n\nThe consequence of reversing the relationship is a slight increase in database size: every message received is stored with an extra integer, and the same message type is duplicated in `message_types` when multiple topics have the same type. These consequences seem small to me, so if record needs to support multiple message types per topic then I'll make the changes to the schema.  @nkoenig Is this needed?", "markup": "markdown", "html": "<p>Ah, that's important to the schema. Right now the topic row has a foreign key to the <code>message_types</code> table. Multiple topics with the same message type point to the same row in the <code>message_types</code> table. If logging should record multiple message types on a topic then that relationship should be reversed: <code>message_types</code> should have a foreign key to the <code>topics</code> table. <code>messages</code> then needs a foreign key on the <code>message_types</code> table too. </p>\n<p>The consequence of reversing the relationship is a slight increase in database size: every message received is stored with an extra integer, and the same message type is duplicated in <code>message_types</code> when multiple topics have the same type. These consequences seem small to me, so if record needs to support multiple message types per topic then I'll make the changes to the schema.  @nkoenig Is this needed?</p>", "type": "rendered"}, "created_on": "2017-12-07T23:48:17.908193+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-07T23:48:17.916404+00:00", "type": "pullrequest_comment", "id": 51447556}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447845.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447845"}}, "parent": {"id": 51447556, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447556.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447556"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Exactly, publisher_1 can advertise a message on topic `/foo` with type `type_1` and publisher_2 can advertise a message on the same topic `/foo` with type `type_2`.", "markup": "markdown", "html": "<p>Exactly, publisher_1 can advertise a message on topic <code>/foo</code> with type <code>type_1</code> and publisher_2 can advertise a message on the same topic <code>/foo</code> with type <code>type_2</code>.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:56:17.215430+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-07T23:56:17.218433+00:00", "type": "pullrequest_comment", "id": 51447845}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447912.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447912"}}, "parent": {"id": 51447556, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447556.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447556"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Delphyne and Gazebo currently do not use this functionality. However, the recording format should take it into account since the functionality exists in ign-transport.", "markup": "markdown", "html": "<p>Delphyne and Gazebo currently do not use this functionality. However, the recording format should take it into account since the functionality exists in ign-transport.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:57:49.555079+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2017-12-07T23:57:49.557432+00:00", "type": "pullrequest_comment", "id": 51447912}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448889.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448889"}}, "parent": {"id": 51447912, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447912.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447912"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Looks like the schema can handle it, I just had to change how I thought about it. There should be a unique row in `topics` for each name/type combo. I added a unique index to force only one row of a pair, and maybe to remind my future self how the schema should be used.\n\n43d06ab", "markup": "markdown", "html": "<p>Looks like the schema can handle it, I just had to change how I thought about it. There should be a unique row in <code>topics</code> for each name/type combo. I added a unique index to force only one row of a pair, and maybe to remind my future self how the schema should be used.</p>\n<p><a href=\"#!/ignitionrobotics/ign-transport/commits/43d06ab\" rel=\"nofollow\" class=\"ap-connect-link\">43d06ab</a></p>", "type": "rendered"}, "created_on": "2017-12-08T00:17:56.653735+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-08T00:17:56.655780+00:00", "type": "pullrequest_comment", "id": 51448889}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447564.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447564"}}, "parent": {"id": 51447001, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447001.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447001"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Does `ign-transport` support multiple messages per topic? I've seen in several places that it enforces a single message type per topic, but I suppose it's doing that on a per-Publisher and per-Subscriber basis. So what you're suggesting is that if two Publishers are publishing to the same topic, they could choose to publish two different types of messages? In that case, I imagine we'll need to tweak the schema to support recording the message type on a per-message basis.", "markup": "markdown", "html": "<p>Does <code>ign-transport</code> support multiple messages per topic? I've seen in several places that it enforces a single message type per topic, but I suppose it's doing that on a per-Publisher and per-Subscriber basis. So what you're suggesting is that if two Publishers are publishing to the same topic, they could choose to publish two different types of messages? In that case, I imagine we'll need to tweak the schema to support recording the message type on a per-message basis.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:48:40.567758+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-07T23:48:40.569898+00:00", "type": "pullrequest_comment", "id": 51447564}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447848.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447848"}}, "parent": {"id": 51447564, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447564.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447564"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Alternative to added message type to messages: Have an entry in `topics` for each name and message type. That trades the duplication in `message_types` and an integer column in `messages` for just a duplication of the row in `topics`.", "markup": "markdown", "html": "<p>Alternative to added message type to messages: Have an entry in <code>topics</code> for each name and message type. That trades the duplication in <code>message_types</code> and an integer column in <code>messages</code> for just a duplication of the row in <code>topics</code>.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:56:21.393794+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-07T23:57:22.378624+00:00", "type": "pullrequest_comment", "id": 51447848}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447989.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447989"}}, "parent": {"id": 51447848, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447848.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447848"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Also, from the subscription callback you can always get the type by doing `msg.GetTypeName()`.", "markup": "markdown", "html": "<p>Also, from the subscription callback you can always get the type by doing <code>msg.GetTypeName()</code>.</p>", "type": "rendered"}, "created_on": "2017-12-07T23:59:28.991787+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-07T23:59:28.995650+00:00", "type": "pullrequest_comment", "id": 51447989}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448035.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448035"}}, "parent": {"id": 51447989, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51447989.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51447989"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Even using `google::protobuf::Message`?", "markup": "markdown", "html": "<p>Even using <code>google::protobuf::Message</code>?</p>", "type": "rendered"}, "created_on": "2017-12-08T00:00:45.729186+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-08T00:00:45.732391+00:00", "type": "pullrequest_comment", "id": 51448035}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448099.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448099"}}, "parent": {"id": 51448035, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448035.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448035"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I believe `msg.GetTypeName()` would only work when you use the message-specific template parameter of Subscribe, which means you need to know the message type at compile time. That wouldn't be plausible for the recorder.", "markup": "markdown", "html": "<p>I believe <code>msg.GetTypeName()</code> would only work when you use the message-specific template parameter of Subscribe, which means you need to know the message type at compile time. That wouldn't be plausible for the recorder.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:02:25.113642+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-08T00:02:25.116066+00:00", "type": "pullrequest_comment", "id": 51448099}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448159.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448159"}}, "parent": {"id": 51448035, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448035.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448035"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Yes, that should work too.", "markup": "markdown", "html": "<p>Yes, that should work too.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:03:07.264187+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-08T00:03:07.266448+00:00", "type": "pullrequest_comment", "id": 51448159}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448441.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448441"}}, "parent": {"id": 51448159, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448159.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448159"}}, "depth": 8}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I don't think it would work in general. The descriptor pool would need access to the descriptor of the message type, so the recorder library would need to link against the libraries for all possible message types. That means that (at a minimum) custom user messages wouldn't get identified correctly by `msg.GetTypeName()`.\n\nUnless there is something deeper going on than I realize with how protobuf works. I have to admit that I'm still investigating exactly how these descriptors work.", "markup": "markdown", "html": "<p>I don't think it would work in general. The descriptor pool would need access to the descriptor of the message type, so the recorder library would need to link against the libraries for all possible message types. That means that (at a minimum) custom user messages wouldn't get identified correctly by <code>msg.GetTypeName()</code>.</p>\n<p>Unless there is something deeper going on than I realize with how protobuf works. I have to admit that I'm still investigating exactly how these descriptors work.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:06:04.944385+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-08T00:06:39.810032+00:00", "type": "pullrequest_comment", "id": 51448441}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448518.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448518"}}, "parent": {"id": 51448441, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448441.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448441"}}, "depth": 9}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Test code\n\n```\nvoid onMessageReceived(\n    const google::protobuf::Message &_msg,\n    const ignition::transport::MessageInfo &_info)\n{\n  ReceivedMessage m;\n  m.time_rx = time(NULL);\n  m.topic = _info.Topic();\n  _msg.SerializeToString(&(m.message));\n  std::cout << \"Received message on \" << m.topic << \" type \" << _msg.GetTypeName() << \"\\n\";\n  std::lock_guard<std::mutex> guard(g_buffer_mutex);\n  g_message_buffer.push_back(m);\n}\n```\n\nWarning: magic detected\n```\nReceived message on /some/string type ignition.msgs.StringMsg\nReceived message on /some/float type ignition.msgs.Float\n```", "markup": "markdown", "html": "<p>Test code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">void</span> <span class=\"nt\">onMessageReceived</span><span class=\"o\">(</span>\n    <span class=\"nt\">const</span> <span class=\"nt\">google</span><span class=\"p\">::</span><span class=\"nd\">protobuf</span><span class=\"p\">::</span><span class=\"nd\">Message</span> <span class=\"o\">&amp;</span><span class=\"nt\">_msg</span><span class=\"o\">,</span>\n    <span class=\"nt\">const</span> <span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">transport</span><span class=\"p\">::</span><span class=\"nd\">MessageInfo</span> <span class=\"o\">&amp;</span><span class=\"nt\">_info</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">ReceivedMessage</span> <span class=\"err\">m</span><span class=\"p\">;</span>\n  <span class=\"err\">m.time_rx</span> <span class=\"err\">=</span> <span class=\"err\">time(NULL)</span><span class=\"p\">;</span>\n  <span class=\"err\">m.topic</span> <span class=\"err\">=</span> <span class=\"err\">_info.Topic()</span><span class=\"p\">;</span>\n  <span class=\"err\">_msg.SerializeToString(&amp;(m.message))</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;Received message on &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">topic</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot; type &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_msg</span><span class=\"o\">.</span><span class=\"nf\">GetTypeName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;\\n&quot;</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">lock_guard</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">mutex</span><span class=\"o\">&gt;</span> <span class=\"nf\">guard</span><span class=\"p\">(</span><span class=\"n\">g_buffer_mutex</span><span class=\"p\">);</span>\n  <span class=\"err\">g_message_buffer.push_back(m)</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Warning: magic detected</p>\n<div class=\"codehilite\"><pre><span></span>Received message on /some/string type ignition.msgs.StringMsg\nReceived message on /some/float type ignition.msgs.Float\n</pre></div>", "type": "rendered"}, "created_on": "2017-12-08T00:08:21.567502+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-08T00:08:21.569536+00:00", "type": "pullrequest_comment", "id": 51448518}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448677.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448677"}}, "parent": {"id": 51448518, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448518.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448518"}}, "depth": 10}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "This is working for a type defined in `ign-msgs`, but can it work for custom types from other libraries?\n\nMy understanding based on the protobuf documentation is that when you compile against a set of message types, their descriptors will be statically added to the descriptor pool and therefore available to the `DynamicMessageFactory` which we use for generic protobuf types. Edit: Since `ign-transport` links against `ign-msgs`, we should always be able to retrieve descriptors for messages defined inside of `ign-msgs`.\n\nBut I don't believe it will work if the message type was generated by another library.", "markup": "markdown", "html": "<p>This is working for a type defined in <code>ign-msgs</code>, but can it work for custom types from other libraries?</p>\n<p>My understanding based on the protobuf documentation is that when you compile against a set of message types, their descriptors will be statically added to the descriptor pool and therefore available to the <code>DynamicMessageFactory</code> which we use for generic protobuf types. Edit: Since <code>ign-transport</code> links against <code>ign-msgs</code>, we should always be able to retrieve descriptors for messages defined inside of <code>ign-msgs</code>.</p>\n<p>But I don't believe it will work if the message type was generated by another library.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:12:27.999726+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-08T00:42:03.487107+00:00", "type": "pullrequest_comment", "id": 51448677}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51449129.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51449129"}}, "parent": {"id": 51448677, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448677.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448677"}}, "depth": 11}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "If I'm not wrong, in the first case, we won't be able to receive the message if the subscriber is not linked against the custom message or has registered the descriptor in the descriptor pool. The string type is traveling over the wire (ign-transport sends it), the main problem is to compose the protobuf message. If the subscriber is linked against the custom message it should work (but we're in a similar case as with Ignition Msgs).", "markup": "markdown", "html": "<p>If I'm not wrong, in the first case, we won't be able to receive the message if the subscriber is not linked against the custom message or has registered the descriptor in the descriptor pool. The string type is traveling over the wire (ign-transport sends it), the main problem is to compose the protobuf message. If the subscriber is linked against the custom message it should work (but we're in a similar case as with Ignition Msgs).</p>", "type": "rendered"}, "created_on": "2017-12-08T00:25:03.323232+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-08T00:28:29.609005+00:00", "type": "pullrequest_comment", "id": 51449129}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51449589.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51449589"}}, "parent": {"id": 51449129, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51449129.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51449129"}}, "depth": 12}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I'm definitely concerned about this possibility, which is why I've been investigating exactly how descriptors work. If my current understanding is correct, even without linking against the message type, a receiver should be able to get a generic protobuf message that is suitable for reflection. I think all that's left for me to do is test this theory, so I'll start setting up a test for that.", "markup": "markdown", "html": "<p>I'm definitely concerned about this possibility, which is why I've been investigating exactly how descriptors work. If my current understanding is correct, even without linking against the message type, a receiver should be able to get a generic protobuf message that is suitable for reflection. I think all that's left for me to do is test this theory, so I'll start setting up a test for that.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:39:26.763737+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-08T00:39:26.766681+00:00", "type": "pullrequest_comment", "id": 51449589}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448558.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448558"}}, "parent": {"id": 51448441, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448441.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448441"}}, "depth": 9}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I believe I've seen it working but it might be because it was an Ignition Msg type and we're linking against it.", "markup": "markdown", "html": "<p>I believe I've seen it working but it might be because it was an Ignition Msg type and we're linking against it.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:09:23.712316+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-08T00:09:23.714374+00:00", "type": "pullrequest_comment", "id": 51448558}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448615.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448615"}}, "parent": {"id": 51448558, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51448558.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51448558"}}, "depth": 10}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Ah, we'll need to test with some custom/unlinked protobuf message then. There's definitely not enough data in the serialized output of a message to contain the name so it is not coming over the wire.", "markup": "markdown", "html": "<p>Ah, we'll need to test with some custom/unlinked protobuf message then. There's definitely not enough data in the serialized output of a message to contain the name so it is not coming over the wire.</p>", "type": "rendered"}, "created_on": "2017-12-08T00:10:37.433379+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-08T00:10:54.714651+00:00", "type": "pullrequest_comment", "id": 51448615}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51543529.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51543529"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I know this is a prototype, but in case you didn't see it. Style checker errors:\n\n\n```\n#!c++\n\n./tools/record/src/raii-sqlite3.hh:22:  Found C system header after C++ system header. Should be: raii-sqlite3.h, c system, c++ system, other.  [build/include_order] [4]\n./tools/record/src/raii-sqlite3.hh:34:  Missing spaces around &&  [whitespace/operators] [3]\n./tools/record/src/raii-sqlite3.hh:109:  Add #include <string> for string  [build/include_what_you_use] [4]\n```\n", "markup": "markdown", "html": "<p>I know this is a prototype, but in case you didn't see it. Style checker errors:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">record</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">raii</span><span class=\"o\">-</span><span class=\"n\">sqlite3</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span>  <span class=\"n\">Found</span> <span class=\"n\">C</span> <span class=\"n\">system</span> <span class=\"n\">header</span> <span class=\"n\">after</span> <span class=\"n\">C</span><span class=\"o\">++</span> <span class=\"n\">system</span> <span class=\"n\">header</span><span class=\"p\">.</span> <span class=\"n\">Should</span> <span class=\"nl\">be</span><span class=\"p\">:</span> <span class=\"n\">raii</span><span class=\"o\">-</span><span class=\"n\">sqlite3</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">++</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">.</span>  <span class=\"p\">[</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">include_order</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">record</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">raii</span><span class=\"o\">-</span><span class=\"n\">sqlite3</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span>  <span class=\"n\">Missing</span> <span class=\"n\">spaces</span> <span class=\"n\">around</span> <span class=\"o\">&amp;&amp;</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">operators</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">record</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">raii</span><span class=\"o\">-</span><span class=\"n\">sqlite3</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">109</span><span class=\"o\">:</span>  <span class=\"n\">Add</span> <span class=\"err\">#</span><span class=\"n\">include</span> <span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"n\">string</span>  <span class=\"p\">[</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">include_what_you_use</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-12-09T16:56:40.827827+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-09T19:56:21.359005+00:00", "type": "pullrequest_comment", "id": 51543529}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51543761.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:25a1f194b6c5..43d06abac763?path=tools%2Frecord%2Fsrc%2Frecord.cpp"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51543761"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Is there any way of deferring the load of the file to sqlite3? It might be overkill to read the entire file at once when the file is big.", "markup": "markdown", "html": "<p>Is there any way of deferring the load of the file to sqlite3? It might be overkill to read the entire file at once when the file is big.</p>", "type": "rendered"}, "created_on": "2017-12-09T17:28:19.077137+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 64, "from": null, "path": "tools/record/src/record.cpp"}, "updated_on": "2017-12-09T17:28:19.079488+00:00", "type": "pullrequest_comment", "id": 51543761}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51632175.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:25a1f194b6c5..43d06abac763?path=tools%2Frecord%2Fsrc%2Frecord.cpp"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51632175"}}, "parent": {"id": 51543761, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51543761.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51543761"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "This is loading the `0.1.0.sql` schema file. Record uses the schema file to create the tables in a brand new database file. I don't expect the schema to ever be more than a few KB in size.", "markup": "markdown", "html": "<p>This is loading the <code>0.1.0.sql</code> schema file. Record uses the schema file to create the tables in a brand new database file. I don't expect the schema to ever be more than a few KB in size.</p>", "type": "rendered"}, "created_on": "2017-12-11T16:39:33.902373+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": null, "from": null, "path": "tools/record/src/record.cpp"}, "updated_on": "2017-12-11T16:39:33.906129+00:00", "type": "pullrequest_comment", "id": 51632175}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51544724.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51544724"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Is the idea to write a playback prototype to close the cycle or what do you have in mind?", "markup": "markdown", "html": "<p>Is the idea to write a playback prototype to close the cycle or what do you have in mind?</p>", "type": "rendered"}, "created_on": "2017-12-09T19:55:40.461068+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2017-12-09T19:55:52.457541+00:00", "type": "pullrequest_comment", "id": 51544724}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51631199.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51631199"}}, "parent": {"id": 51544724, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51544724.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51544724"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "I'll make a playback prototype for more discussion, then decline this PR when it stops being useful.", "markup": "markdown", "html": "<p>I'll make a playback prototype for more discussion, then decline this PR when it stops being useful.</p>", "type": "rendered"}, "created_on": "2017-12-11T16:34:40.846837+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-11T16:34:40.850440+00:00", "type": "pullrequest_comment", "id": 51631199}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51759592.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51759592"}}, "parent": {"id": 51544724, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51544724.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51544724"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Playback prototype in 43d2b37", "markup": "markdown", "html": "<p>Playback prototype in <a href=\"#!/ignitionrobotics/ign-transport/commits/43d2b37\" rel=\"nofollow\" class=\"ap-connect-link\">43d2b37</a></p>", "type": "rendered"}, "created_on": "2017-12-12T19:08:35.949795+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-12T19:08:35.953001+00:00", "type": "pullrequest_comment", "id": 51759592}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51667390.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51667390"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "* a528614 updates record to store time received with seconds and nanoseconds using a monotonic clock\n* b3eb403 inserts the correct message type using methods added in pull request #247\n\nWith that the output from this record proof of concept should be playable by the final playback tool. I'll put together a playback proof of concept to see if any problems turn up there, but at least for recording this shows the current approach is going to work.", "markup": "markdown", "html": "<ul>\n<li><a href=\"#!/ignitionrobotics/ign-transport/commits/a528614\" rel=\"nofollow\" class=\"ap-connect-link\">a528614</a> updates record to store time received with seconds and nanoseconds using a monotonic clock</li>\n<li><a href=\"#!/ignitionrobotics/ign-transport/commits/b3eb403\" rel=\"nofollow\" class=\"ap-connect-link\">b3eb403</a> inserts the correct message type using methods added in <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/247/add-type-and-partition-to-messageinfo\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #247</a></li>\n</ul>\n<p>With that the output from this record proof of concept should be playable by the final playback tool. I'll put together a playback proof of concept to see if any problems turn up there, but at least for recording this shows the current approach is going to work.</p>", "type": "rendered"}, "created_on": "2017-12-12T00:12:14.207066+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-12T00:12:14.209952+00:00", "type": "pullrequest_comment", "id": 51667390}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51760333.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51760333"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "Playback proof of concept turned out to be pretty easy, and didn't reveal anything we didn't already  know.  Record logs all ignition transport topics being published. Playback plays back all topics that were recorded. I'll leave this open a day or two for any comments, then decline the PR when that settles down.\n\nAFAIK the last technical hurdle is a raw_bytes subscriber and publisher. Without those custom messages cannot be logged (@mxgrey please correct if I misunderstood) (see pull request #249).\n\nBuild\n```\ncmake -DCMAKE_BUILD_TYPE=Debug  -DCMAKE_INSTALL_PREFIX=path/to/install path/to/src/ign-transport/tools/record/\nmake && make install\n```\n\nRecord \n```\n# Launch something that publishes messages\n./install/bin/talker\n# Record prototype assumes a brand new database, so make sure the file doesn't exist\nrm -rf /tmp/test.db\n# Record topics\n./install/bin/record /tmp/test.db\n```\n\n\nPlayback\n```\n# playback recorded messages\n./tools/record/playback /tmp/test.db\n# observe the published messages\nign topic --echo --topic /some/float\n```\n", "markup": "markdown", "html": "<p>Playback proof of concept turned out to be pretty easy, and didn't reveal anything we didn't already  know.  Record logs all ignition transport topics being published. Playback plays back all topics that were recorded. I'll leave this open a day or two for any comments, then decline the PR when that settles down.</p>\n<p>AFAIK the last technical hurdle is a raw_bytes subscriber and publisher. Without those custom messages cannot be logged (@mxgrey please correct if I misunderstood) (see <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/249/wip-subscribe-and-publish-raw-serialized\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #249</a>).</p>\n<p>Build</p>\n<div class=\"codehilite\"><pre><span></span>cmake -DCMAKE_BUILD_TYPE=Debug  -DCMAKE_INSTALL_PREFIX=path/to/install path/to/src/ign-transport/tools/record/\nmake &amp;&amp; make install\n</pre></div>\n\n\n<p>Record </p>\n<div class=\"codehilite\"><pre><span></span># Launch something that publishes messages\n./install/bin/talker\n# Record prototype assumes a brand new database, so make sure the file doesn&#39;t exist\nrm -rf /tmp/test.db\n# Record topics\n./install/bin/record /tmp/test.db\n</pre></div>\n\n\n<p>Playback</p>\n<div class=\"codehilite\"><pre><span></span># playback recorded messages\n./tools/record/playback /tmp/test.db\n# observe the published messages\nign topic --echo --topic /some/float\n</pre></div>", "type": "rendered"}, "created_on": "2017-12-12T19:18:13.761845+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-12-12T19:18:13.777568+00:00", "type": "pullrequest_comment", "id": 51760333}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246/comments/51763669.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246/_/diff#comment-51763669"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/246"}}, "title": "Record proof of concept (do not merge)"}, "content": {"raw": "As I understand it, we'll run into an issue with the current implementation of the playback because of limitations on `Node::Advertise(~)`.\n\n[This line](#!/ignitionrobotics/ign-transport/pull-requests/246/record-proof-of-concept-do-not-merge/diff#Ltools/record/src/playback.cppT184) attempts to advertise arbitrary message types to arbitrary topics from a single `Node`, but it seems the `Node::Advertise(~)` function explicitly forbids a single node from advertising multiple message types to a single topic. This means if the logger records multiple message types from a single topic, then the current implementation of the playback will fail to recreate that.\n\nA potential workaround is to create one `Node` object per message type and then advertise that node to arbitrary topics. However, this raises a question of why this limitation is enforced by the `Node::Advertise(~)` function. So I'll page @caguero :\n\n1. Is it necessary to limit a single `Node` to only publish one message type to a topic? Is this something that the design of `ign-transport` requires, or is it meant to be a logical constraint (i.e. \"If a user wants to publish multiple message types to a single topic from a single node, then they're probably doing something wrong\")?\n\n2. Would it be reasonable for us to lift this constraint somehow? Either by changing the behavior of `Node::Advertise(~)` or having an alternative (less restrictive) function for advertising a node? (For example, in pull request #249 I introduce an `Advanced` API, so we could put an \"advanced\" version of `Advertise` in there which is less restrictive.)", "markup": "markdown", "html": "<p>As I understand it, we'll run into an issue with the current implementation of the playback because of limitations on <code>Node::Advertise(~)</code>.</p>\n<p><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/246/record-proof-of-concept-do-not-merge/diff#Ltools/record/src/playback.cppT184\" rel=\"nofollow\">This line</a> attempts to advertise arbitrary message types to arbitrary topics from a single <code>Node</code>, but it seems the <code>Node::Advertise(~)</code> function explicitly forbids a single node from advertising multiple message types to a single topic. This means if the logger records multiple message types from a single topic, then the current implementation of the playback will fail to recreate that.</p>\n<p>A potential workaround is to create one <code>Node</code> object per message type and then advertise that node to arbitrary topics. However, this raises a question of why this limitation is enforced by the <code>Node::Advertise(~)</code> function. So I'll page @caguero :</p>\n<ol>\n<li>\n<p>Is it necessary to limit a single <code>Node</code> to only publish one message type to a topic? Is this something that the design of <code>ign-transport</code> requires, or is it meant to be a logical constraint (i.e. \"If a user wants to publish multiple message types to a single topic from a single node, then they're probably doing something wrong\")?</p>\n</li>\n<li>\n<p>Would it be reasonable for us to lift this constraint somehow? Either by changing the behavior of <code>Node::Advertise(~)</code> or having an alternative (less restrictive) function for advertising a node? (For example, in <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/249/wip-subscribe-and-publish-raw-serialized\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #249</a> I introduce an <code>Advanced</code> API, so we could put an \"advanced\" version of <code>Advertise</code> in there which is less restrictive.)</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2017-12-12T20:04:08.143303+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-12T20:04:08.154215+00:00", "type": "pullrequest_comment", "id": 51763669}], "page": 1, "size": 32}