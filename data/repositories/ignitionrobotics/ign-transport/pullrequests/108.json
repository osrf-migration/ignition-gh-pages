{"rendered": {"description": {"raw": "The `ignition-tools` commands don't work on OS X because the library name is hard-coded with a `.so` suffix, while `.dylib` is used on OS X.\r\n\r\nI tried to figure out how to automatically identify the library file name using the following:\r\n\r\n~~~\r\nget_target_property(IGN_LIBRARY_NAME ${PROJECT_NAME_LOWER}${PROJECT_MAJOR_VERSION} LOCATION)\r\n~~~\r\n\r\nThat gives the full path, which could be stripped out, but that variable name isn't recommended:\r\n\r\n~~~\r\nCMake Warning (dev) at src/cmd/CMakeLists.txt:6 (get_target_property):\r\n  Policy CMP0026 is not set: Disallow use of the LOCATION target property.\r\n  Run \"cmake --help-policy CMP0026\" for policy details.  Use the cmake_policy\r\n  command to set the policy and suppress this warning.\r\n\r\n  The LOCATION property should not be read from target \"ignition-transport1\".\r\n  Use the target name directly with add_custom_command, or use the generator\r\n  expression $<TARGET_FILE>, as appropriate.\r\n~~~\r\n\r\nApparently `configure_file` occurs before the generator stage, which is when the library name is generated. I wasn't sure how to do this in the generator stage, so I've just done this instead.", "markup": "markdown", "html": "<p>The <code>ignition-tools</code> commands don't work on OS X because the library name is hard-coded with a <code>.so</code> suffix, while <code>.dylib</code> is used on OS X.</p>\n<p>I tried to figure out how to automatically identify the library file name using the following:</p>\n<div class=\"codehilite\"><pre><span></span>get_target_property(IGN_LIBRARY_NAME <span class=\"cp\">${</span><span class=\"n\">PROJECT_NAME_LOWER</span><span class=\"cp\">}${</span><span class=\"n\">PROJECT_MAJOR_VERSION</span><span class=\"cp\">}</span> LOCATION)\n</pre></div>\n\n\n<p>That gives the full path, which could be stripped out, but that variable name isn't recommended:</p>\n<div class=\"codehilite\"><pre><span></span>CMake Warning (dev) at src/cmd/CMakeLists.txt:6 (get_target_property):\n  Policy CMP0026 is not set: Disallow use of the LOCATION target property.\n  Run &quot;cmake --help-policy CMP0026&quot; for policy details.  Use the cmake_policy\n  command to set the policy and suppress this warning.\n\n  The LOCATION property should not be read from target &quot;ignition-transport1&quot;.\n  Use the target name directly with add_custom_command, or use the generator\n  expression $&lt;TARGET_FILE&gt;, as appropriate.\n</pre></div>\n\n\n<p>Apparently <code>configure_file</code> occurs before the generator stage, which is when the library name is generated. I wasn't sure how to do this in the generator stage, so I've just done this instead.</p>", "type": "rendered"}, "title": {"raw": "Use dylib suffix on APPLE platforms instead of so", "markup": "markdown", "html": "<p>Use dylib suffix on APPLE platforms instead of so</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The `ignition-tools` commands don't work on OS X because the library name is hard-coded with a `.so` suffix, while `.dylib` is used on OS X.\r\n\r\nI tried to figure out how to automatically identify the library file name using the following:\r\n\r\n~~~\r\nget_target_property(IGN_LIBRARY_NAME ${PROJECT_NAME_LOWER}${PROJECT_MAJOR_VERSION} LOCATION)\r\n~~~\r\n\r\nThat gives the full path, which could be stripped out, but that variable name isn't recommended:\r\n\r\n~~~\r\nCMake Warning (dev) at src/cmd/CMakeLists.txt:6 (get_target_property):\r\n  Policy CMP0026 is not set: Disallow use of the LOCATION target property.\r\n  Run \"cmake --help-policy CMP0026\" for policy details.  Use the cmake_policy\r\n  command to set the policy and suppress this warning.\r\n\r\n  The LOCATION property should not be read from target \"ignition-transport1\".\r\n  Use the target name directly with add_custom_command, or use the generator\r\n  expression $<TARGET_FILE>, as appropriate.\r\n~~~\r\n\r\nApparently `configure_file` occurs before the generator stage, which is when the library name is generated. I wasn't sure how to do this in the generator stage, so I've just done this instead.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/108/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diffstat/ignitionrobotics/ign-transport:4be55254b5d6%0D29858615a6b0?from_pullrequest_id=108"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/108/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/108.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/108/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/108/merge"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/108"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/108/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:4be55254b5d6%0D29858615a6b0?from_pullrequest_id=108"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/108/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/108/statuses_page=1.json"}}, "title": "Use dylib suffix on APPLE platforms instead of so", "close_source_branch": true, "reviewers": [], "id": 108, "destination": {"commit": {"hash": "29858615a6b0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/29858615a6b0.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/29858615a6b0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport1"}}, "created_on": "2016-02-11T01:41:12.082408+00:00", "summary": {"raw": "The `ignition-tools` commands don't work on OS X because the library name is hard-coded with a `.so` suffix, while `.dylib` is used on OS X.\r\n\r\nI tried to figure out how to automatically identify the library file name using the following:\r\n\r\n~~~\r\nget_target_property(IGN_LIBRARY_NAME ${PROJECT_NAME_LOWER}${PROJECT_MAJOR_VERSION} LOCATION)\r\n~~~\r\n\r\nThat gives the full path, which could be stripped out, but that variable name isn't recommended:\r\n\r\n~~~\r\nCMake Warning (dev) at src/cmd/CMakeLists.txt:6 (get_target_property):\r\n  Policy CMP0026 is not set: Disallow use of the LOCATION target property.\r\n  Run \"cmake --help-policy CMP0026\" for policy details.  Use the cmake_policy\r\n  command to set the policy and suppress this warning.\r\n\r\n  The LOCATION property should not be read from target \"ignition-transport1\".\r\n  Use the target name directly with add_custom_command, or use the generator\r\n  expression $<TARGET_FILE>, as appropriate.\r\n~~~\r\n\r\nApparently `configure_file` occurs before the generator stage, which is when the library name is generated. I wasn't sure how to do this in the generator stage, so I've just done this instead.", "markup": "markdown", "html": "<p>The <code>ignition-tools</code> commands don't work on OS X because the library name is hard-coded with a <code>.so</code> suffix, while <code>.dylib</code> is used on OS X.</p>\n<p>I tried to figure out how to automatically identify the library file name using the following:</p>\n<div class=\"codehilite\"><pre><span></span>get_target_property(IGN_LIBRARY_NAME <span class=\"cp\">${</span><span class=\"n\">PROJECT_NAME_LOWER</span><span class=\"cp\">}${</span><span class=\"n\">PROJECT_MAJOR_VERSION</span><span class=\"cp\">}</span> LOCATION)\n</pre></div>\n\n\n<p>That gives the full path, which could be stripped out, but that variable name isn't recommended:</p>\n<div class=\"codehilite\"><pre><span></span>CMake Warning (dev) at src/cmd/CMakeLists.txt:6 (get_target_property):\n  Policy CMP0026 is not set: Disallow use of the LOCATION target property.\n  Run &quot;cmake --help-policy CMP0026&quot; for policy details.  Use the cmake_policy\n  command to set the policy and suppress this warning.\n\n  The LOCATION property should not be read from target &quot;ignition-transport1&quot;.\n  Use the target name directly with add_custom_command, or use the generator\n  expression $&lt;TARGET_FILE&gt;, as appropriate.\n</pre></div>\n\n\n<p>Apparently <code>configure_file</code> occurs before the generator stage, which is when the library name is generated. I wasn't sure how to do this in the generator stage, so I've just done this instead.</p>", "type": "rendered"}, "source": {"commit": {"hash": "69e61049a4b1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/69e61049a4b1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/69e61049a4b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "library_suffix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-02-11T18:57:49.377463+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2016-02-11T18:26:21.624253+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2016-02-22T20:06:51.108612+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "4be55254b5d6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/4be55254b5d6.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/4be55254b5d6"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}