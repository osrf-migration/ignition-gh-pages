{"rendered": {"description": {"raw": "Here's a problem:\r\n\r\nWhen you want to use `mynode.TopicList()` or `node.ServiceList()` you can be in one of these two scenarios, assuming that are existing nodes on the network running on different processes:\r\n\r\n* mynode's process has just started. For example, this is the case when you execute `ign topic -l` (`ign-tools` required). In this scenario, your discovery needs some time to receive the heartbeats from the rest of the nodes. This means that you needed to wait some time before calling `TopicList()` or `ServiceList()`, otherwise the list of topics/services would be empty most of the time.\r\n\r\n``` \r\n#!c++\r\n\r\nignition::transport::Node mynode;\r\nstd::this_thread::sleep_for(std::chrono::milliseconds(someTime));\r\nstd::vector<std::string> topics;\r\nnode.TopicList(topics);\r\n```\r\n\r\n* mynode's process has been running for a while and your discovery has a good picture of the other nodes on the network. In this case there was no need to wait if you wanted to call `TopicList()` or `ServiceList()`.\r\n\r\n```\r\n#!c++\r\n\r\nignition::transport::Node mynode;\r\nstd::vector<std::string> topics;\r\nnode.TopicList(topics);\r\n```\r\n\r\nBefore this pull request, Ignition Transport was not helping to differentiate in which situation you were.\r\nThis pull request makes the behavior of `TopicList()` or `ServiceList()` slightly different depending on the state of the discovery layer. If the discovery is starting, `TopicList()` and `ServiceList()` will block until the discovery is ready, to make sure that we have picture of the network before answering. If the discovery layer has been initialized, the functions won't block.\r\n\r\nCI results:\r\n\r\n* Trusty is [happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/45/).\r\n* Homebrew is [happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/38/).\r\n* Windows is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/81/).", "markup": "markdown", "html": "<p>Here's a problem:</p>\n<p>When you want to use <code>mynode.TopicList()</code> or <code>node.ServiceList()</code> you can be in one of these two scenarios, assuming that are existing nodes on the network running on different processes:</p>\n<ul>\n<li>mynode's process has just started. For example, this is the case when you execute <code>ign topic -l</code> (<code>ign-tools</code> required). In this scenario, your discovery needs some time to receive the heartbeats from the rest of the nodes. This means that you needed to wait some time before calling <code>TopicList()</code> or <code>ServiceList()</code>, otherwise the list of topics/services would be empty most of the time.</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">mynode</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">this_thread</span><span class=\"o\">::</span><span class=\"n\">sleep_for</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">milliseconds</span><span class=\"p\">(</span><span class=\"n\">someTime</span><span class=\"p\">));</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">topics</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">TopicList</span><span class=\"p\">(</span><span class=\"n\">topics</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<ul>\n<li>mynode's process has been running for a while and your discovery has a good picture of the other nodes on the network. In this case there was no need to wait if you wanted to call <code>TopicList()</code> or <code>ServiceList()</code>.</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">mynode</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">topics</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">TopicList</span><span class=\"p\">(</span><span class=\"n\">topics</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Before this pull request, Ignition Transport was not helping to differentiate in which situation you were.\nThis pull request makes the behavior of <code>TopicList()</code> or <code>ServiceList()</code> slightly different depending on the state of the discovery layer. If the discovery is starting, <code>TopicList()</code> and <code>ServiceList()</code> will block until the discovery is ready, to make sure that we have picture of the network before answering. If the discovery layer has been initialized, the functions won't block.</p>\n<p>CI results:</p>\n<ul>\n<li>Trusty is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/45/\" rel=\"nofollow\">happy</a>.</li>\n<li>Homebrew is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/38/\" rel=\"nofollow\">happy</a>.</li>\n<li>Windows is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/81/\" rel=\"nofollow\">pending</a>.</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Improve the behavior of TopicList and ServiceList", "markup": "markdown", "html": "<p>Improve the behavior of TopicList and ServiceList</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Here's a problem:\r\n\r\nWhen you want to use `mynode.TopicList()` or `node.ServiceList()` you can be in one of these two scenarios, assuming that are existing nodes on the network running on different processes:\r\n\r\n* mynode's process has just started. For example, this is the case when you execute `ign topic -l` (`ign-tools` required). In this scenario, your discovery needs some time to receive the heartbeats from the rest of the nodes. This means that you needed to wait some time before calling `TopicList()` or `ServiceList()`, otherwise the list of topics/services would be empty most of the time.\r\n\r\n``` \r\n#!c++\r\n\r\nignition::transport::Node mynode;\r\nstd::this_thread::sleep_for(std::chrono::milliseconds(someTime));\r\nstd::vector<std::string> topics;\r\nnode.TopicList(topics);\r\n```\r\n\r\n* mynode's process has been running for a while and your discovery has a good picture of the other nodes on the network. In this case there was no need to wait if you wanted to call `TopicList()` or `ServiceList()`.\r\n\r\n```\r\n#!c++\r\n\r\nignition::transport::Node mynode;\r\nstd::vector<std::string> topics;\r\nnode.TopicList(topics);\r\n```\r\n\r\nBefore this pull request, Ignition Transport was not helping to differentiate in which situation you were.\r\nThis pull request makes the behavior of `TopicList()` or `ServiceList()` slightly different depending on the state of the discovery layer. If the discovery is starting, `TopicList()` and `ServiceList()` will block until the discovery is ready, to make sure that we have picture of the network before answering. If the discovery layer has been initialized, the functions won't block.\r\n\r\nCI results:\r\n\r\n* Trusty is [happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/45/).\r\n* Homebrew is [happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/38/).\r\n* Windows is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/81/).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/105/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diffstat/ignitionrobotics/ign-transport:60e1be448547%0D04587706d9d1?from_pullrequest_id=105"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/105/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/105.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/105/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/105/merge"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/105"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/105/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:60e1be448547%0D04587706d9d1?from_pullrequest_id=105"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/105/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/105/statuses_page=1.json"}}, "title": "Improve the behavior of TopicList and ServiceList", "close_source_branch": true, "reviewers": [], "id": 105, "destination": {"commit": {"hash": "04587706d9d1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/04587706d9d1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/04587706d9d1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport1"}}, "created_on": "2016-02-06T02:57:24.164142+00:00", "summary": {"raw": "Here's a problem:\r\n\r\nWhen you want to use `mynode.TopicList()` or `node.ServiceList()` you can be in one of these two scenarios, assuming that are existing nodes on the network running on different processes:\r\n\r\n* mynode's process has just started. For example, this is the case when you execute `ign topic -l` (`ign-tools` required). In this scenario, your discovery needs some time to receive the heartbeats from the rest of the nodes. This means that you needed to wait some time before calling `TopicList()` or `ServiceList()`, otherwise the list of topics/services would be empty most of the time.\r\n\r\n``` \r\n#!c++\r\n\r\nignition::transport::Node mynode;\r\nstd::this_thread::sleep_for(std::chrono::milliseconds(someTime));\r\nstd::vector<std::string> topics;\r\nnode.TopicList(topics);\r\n```\r\n\r\n* mynode's process has been running for a while and your discovery has a good picture of the other nodes on the network. In this case there was no need to wait if you wanted to call `TopicList()` or `ServiceList()`.\r\n\r\n```\r\n#!c++\r\n\r\nignition::transport::Node mynode;\r\nstd::vector<std::string> topics;\r\nnode.TopicList(topics);\r\n```\r\n\r\nBefore this pull request, Ignition Transport was not helping to differentiate in which situation you were.\r\nThis pull request makes the behavior of `TopicList()` or `ServiceList()` slightly different depending on the state of the discovery layer. If the discovery is starting, `TopicList()` and `ServiceList()` will block until the discovery is ready, to make sure that we have picture of the network before answering. If the discovery layer has been initialized, the functions won't block.\r\n\r\nCI results:\r\n\r\n* Trusty is [happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/45/).\r\n* Homebrew is [happy](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/38/).\r\n* Windows is [pending](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/81/).", "markup": "markdown", "html": "<p>Here's a problem:</p>\n<p>When you want to use <code>mynode.TopicList()</code> or <code>node.ServiceList()</code> you can be in one of these two scenarios, assuming that are existing nodes on the network running on different processes:</p>\n<ul>\n<li>mynode's process has just started. For example, this is the case when you execute <code>ign topic -l</code> (<code>ign-tools</code> required). In this scenario, your discovery needs some time to receive the heartbeats from the rest of the nodes. This means that you needed to wait some time before calling <code>TopicList()</code> or <code>ServiceList()</code>, otherwise the list of topics/services would be empty most of the time.</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">mynode</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">this_thread</span><span class=\"o\">::</span><span class=\"n\">sleep_for</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">milliseconds</span><span class=\"p\">(</span><span class=\"n\">someTime</span><span class=\"p\">));</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">topics</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">TopicList</span><span class=\"p\">(</span><span class=\"n\">topics</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<ul>\n<li>mynode's process has been running for a while and your discovery has a good picture of the other nodes on the network. In this case there was no need to wait if you wanted to call <code>TopicList()</code> or <code>ServiceList()</code>.</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">mynode</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">topics</span><span class=\"p\">;</span>\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">TopicList</span><span class=\"p\">(</span><span class=\"n\">topics</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Before this pull request, Ignition Transport was not helping to differentiate in which situation you were.\nThis pull request makes the behavior of <code>TopicList()</code> or <code>ServiceList()</code> slightly different depending on the state of the discovery layer. If the discovery is starting, <code>TopicList()</code> and <code>ServiceList()</code> will block until the discovery is ready, to make sure that we have picture of the network before answering. If the discovery layer has been initialized, the functions won't block.</p>\n<p>CI results:</p>\n<ul>\n<li>Trusty is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/45/\" rel=\"nofollow\">happy</a>.</li>\n<li>Homebrew is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-homebrew-amd64/38/\" rel=\"nofollow\">happy</a>.</li>\n<li>Windows is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/81/\" rel=\"nofollow\">pending</a>.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "a8ef92d03d1e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/a8ef92d03d1e.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/a8ef92d03d1e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "improve_topic_list"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-03-18T01:09:21.564385+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2016-03-21T20:57:36.018867+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2016-02-10T23:05:30.538038+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2016-03-21T20:57:36.025253+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "60e1be448547", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/60e1be448547.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/60e1be448547"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}