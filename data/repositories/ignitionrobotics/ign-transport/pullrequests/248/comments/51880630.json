{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/248/comments/51880630.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/248/_/diff#comment-51880630"}}, "parent": {"id": 51879001, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/248/comments/51879001.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/248/_/diff#comment-51879001"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 248, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/248.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/248"}}, "title": "Code layout for record/playback"}, "content": {"raw": "In my experience, the most idiomatic use of namespaces is to organize classes into the libraries that they belong to (with a few special cases, like the `internal` or `detail` namespaces for hiding implementation details). Ideally, a directory structure should have some kind of 1:1 correspondence with the name of the library whose source files it contains. As a result, namespaces should end up naturally matching the directory structure of the source code.\n\nIf we want the logger API to be a part of `ignition-transport`, then it should use the `ignition::transport` namespace and live in the `ign-transport/src` directory (with its headers in `ign-transport/include/ignition/transport`).\n\nI see two disadvantages to this:\n\n1. `SQLite3` becomes a required dependency of `ignition-transport`. This probably isn't a major disadvantage given how ubiquitous `SQLite3` is. It's probably Windows users who will hurt the most from it, because they'll have to make sure that `SQLite3` can be found by `ignition-transport` at build time and at run time, even if they don't want to use the logging features.\n\n2. The source code and API of logging gets sort of blended into the rest of the source code for `ignition-transport`, even though it has its own dependency and is serving a different role than the overall `ign-transport` library. If a refactoring is desired in the future, it'll be harder when logging is blended into everything else.\n\nIf we don't care about those disadvantages, then we can just put the logging API into the rest of the source code tree, give it the namespace `ignition::transport`, and make `SQLite3` a required dependency.\n\nEdit: Also, tying back to your comment about \"multiple files with a common purpose\", I think that's often a good rule of thumb for where to draw the line between separate libraries (especially if you account for dependencies as well).", "markup": "markdown", "html": "<p>In my experience, the most idiomatic use of namespaces is to organize classes into the libraries that they belong to (with a few special cases, like the <code>internal</code> or <code>detail</code> namespaces for hiding implementation details). Ideally, a directory structure should have some kind of 1:1 correspondence with the name of the library whose source files it contains. As a result, namespaces should end up naturally matching the directory structure of the source code.</p>\n<p>If we want the logger API to be a part of <code>ignition-transport</code>, then it should use the <code>ignition::transport</code> namespace and live in the <code>ign-transport/src</code> directory (with its headers in <code>ign-transport/include/ignition/transport</code>).</p>\n<p>I see two disadvantages to this:</p>\n<ol>\n<li>\n<p><code>SQLite3</code> becomes a required dependency of <code>ignition-transport</code>. This probably isn't a major disadvantage given how ubiquitous <code>SQLite3</code> is. It's probably Windows users who will hurt the most from it, because they'll have to make sure that <code>SQLite3</code> can be found by <code>ignition-transport</code> at build time and at run time, even if they don't want to use the logging features.</p>\n</li>\n<li>\n<p>The source code and API of logging gets sort of blended into the rest of the source code for <code>ignition-transport</code>, even though it has its own dependency and is serving a different role than the overall <code>ign-transport</code> library. If a refactoring is desired in the future, it'll be harder when logging is blended into everything else.</p>\n</li>\n</ol>\n<p>If we don't care about those disadvantages, then we can just put the logging API into the rest of the source code tree, give it the namespace <code>ignition::transport</code>, and make <code>SQLite3</code> a required dependency.</p>\n<p>Edit: Also, tying back to your comment about \"multiple files with a common purpose\", I think that's often a good rule of thumb for where to draw the line between separate libraries (especially if you account for dependencies as well).</p>", "type": "rendered"}, "created_on": "2017-12-13T21:33:04.920858+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-13T21:41:32.991227+00:00", "type": "pullrequest_comment", "id": 51880630}