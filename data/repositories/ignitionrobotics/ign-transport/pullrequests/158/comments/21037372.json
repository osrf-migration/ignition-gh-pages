{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/21037372.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-21037372"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158"}}, "title": "Issue_47: Wait for subscribers"}, "content": {"raw": "Another thing to consider is the topic type. Imagine the following scenario:\n\n* node1 advertises `topic` with type `ignition::msgs::StringMsg`.\n* node2 subscribes to `topic` with a callback that uses `ignition::msgs::Int32`.\n\nnode2 shouldn't receive any message because the types are different. Ideally,  node1 should stay blocked after calling `WaitForSubscribers()` because node1 is not really its subscriber. This is the correct behavior that I observe when node1 and node2 are on different processes. However, the behavior is different when they are within the same process. E.g. using a single node:\n\n\n```\n#!c++\n\n#include <iostream>\n#include <string>\n#include <ignition/msgs.hh>\n#include <ignition/transport.hh>\n\n//////////////////////////////////////////////////\n/// \\brief Function called each time a topic update is received.\nvoid cb(const ignition::msgs::Int32 &_msg)\n{\n  std::cout << \"Msg: \" << _msg.data() << std::endl << std::endl;\n}\n\n//////////////////////////////////////////////////\nint main(int argc, char **argv)\n{\n  // Create a transport node and advertise a topic.\n  ignition::transport::Node node;\n  std::string topic = \"/foo\";\n\n  auto pubId = node.Advertise<ignition::msgs::StringMsg>(topic);\n  if (!pubId)\n  {\n    std::cerr << \"Error advertising topic [\" << topic << \"]\" << std::endl;\n    return -1;\n  }\n\n  // Subscribe to a topic by registering a callback.\n  if (!node.Subscribe(topic, cb))\n  {\n    std::cerr << \"Error subscribing to topic [\" << topic << \"]\" << std::endl;\n    return -1;\n  }\n\n  if (!node.WaitForSubscribers(topic, 10000))\n  {\n    std::cerr << \"No subscribers available\" << std::endl;\n    return 0;\n  }\n\n  std::cout << \"Subscribers available\" << std::endl;\n  return 0;\n}\n```\n\nWe should write a test to cover this case when we address it.\n\n", "markup": "markdown", "html": "<p>Another thing to consider is the topic type. Imagine the following scenario:</p>\n<ul>\n<li>node1 advertises <code>topic</code> with type <code>ignition::msgs::StringMsg</code>.</li>\n<li>node2 subscribes to <code>topic</code> with a callback that uses <code>ignition::msgs::Int32</code>.</li>\n</ul>\n<p>node2 shouldn't receive any message because the types are different. Ideally,  node1 should stay blocked after calling <code>WaitForSubscribers()</code> because node1 is not really its subscriber. This is the correct behavior that I observe when node1 and node2 are on different processes. However, the behavior is different when they are within the same process. E.g. using a single node:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/msgs.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/transport.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">//////////////////////////////////////////////////</span>\n<span class=\"c1\">/// \\brief Function called each time a topic update is received.</span>\n<span class=\"kt\">void</span> <span class=\"nf\">cb</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Int32</span> <span class=\"o\">&amp;</span><span class=\"n\">_msg</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Msg: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//////////////////////////////////////////////////</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Create a transport node and advertise a topic.</span>\n  <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/foo&quot;</span><span class=\"p\">;</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">pubId</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pubId</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Error advertising topic [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">topic</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Subscribe to a topic by registering a callback.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">cb</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Error subscribing to topic [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">topic</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">WaitForSubscribers</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;No subscribers available&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Subscribers available&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>We should write a test to cover this case when we address it.</p>", "type": "rendered"}, "created_on": "2016-07-14T18:51:21.600910+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-07-15T01:01:03.081633+00:00", "type": "pullrequest_comment", "id": 21037372}