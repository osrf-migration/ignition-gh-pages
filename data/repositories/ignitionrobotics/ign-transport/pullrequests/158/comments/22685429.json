{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/22685429.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/nampi/ign-transport:None..None?path=src%2FNode_TEST.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-22685429"}}, "parent": {"id": 22672281, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/22672281.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-22672281"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158"}}, "title": "Issue_47: Wait for subscribers"}, "content": {"raw": "It looks like I can not write this test. I modified ```example/publisher.cc```:\n\n\n```\n#!c++\n\n  // Create a transport node and advertise a topic.\n  ignition::transport::Node node;\n  std::string topic = \"/foo\";\n\n  auto pubId = node.Advertise<ignition::msgs::StringMsg>(topic);\n  auto pubId1 = node.Advertise<ignition::msgs::Int32>(topic);\n  if (!pubId)\n  {\n    std::cerr << \"Error advertising topic [\" << topic << \"]\" << std::endl;\n    return -1;\n  }\n  if (!pubId1)\n  {\n    std::cerr << \"Error advertising topic [\" << topic << \"]\" << std::endl;\n    return -1;\n  }\n\n  // Prepare the message.\n  ignition::msgs::StringMsg msg;\n  ignition::msgs::Int32 msg1;\n  msg.set_data(\"HELLO\");\n  msg1.set_data(12);\n\n  // Publish messages at 1Hz.\n  while (!g_terminatePub)\n  {\n    if (!node.Publish(pubId, msg))\n      break;\n    if (!node.Publish(pubId1, msg1))\n      break;\n  }\n\n```\n\nI have this error:\n```\nNode::Publish() Type mismatch.\n\t* Type advertised: ignition.msgs.StringMsg\n\t* Type published: ignition.msgs.Int32\n```\n\nDid I understand your requirement?", "markup": "markdown", "html": "<p>It looks like I can not write this test. I modified <code>example/publisher.cc</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"c1\">// Create a transport node and advertise a topic.</span>\n  <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/foo&quot;</span><span class=\"p\">;</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">pubId</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">);</span>\n  <span class=\"k\">auto</span> <span class=\"n\">pubId1</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Int32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pubId</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Error advertising topic [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">topic</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pubId1</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Error advertising topic [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">topic</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Prepare the message.</span>\n  <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n  <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Int32</span> <span class=\"n\">msg1</span><span class=\"p\">;</span>\n  <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"s\">&quot;HELLO&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">msg1</span><span class=\"p\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Publish messages at 1Hz.</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">g_terminatePub</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">pubId</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">))</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">pubId1</span><span class=\"p\">,</span> <span class=\"n\">msg1</span><span class=\"p\">))</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I have this error:</p>\n<div class=\"codehilite\"><pre><span></span>Node::Publish() Type mismatch.\n    * Type advertised: ignition.msgs.StringMsg\n    * Type published: ignition.msgs.Int32\n</pre></div>\n\n\n<p>Did I understand your requirement?</p>", "type": "rendered"}, "created_on": "2016-08-22T23:21:49.550976+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "inline": {"to": null, "from": null, "outdated": false, "path": "src/Node_TEST.cc"}, "updated_on": "2016-08-22T23:21:49.553236+00:00", "type": "pullrequest_comment", "id": 22685429}