{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/23689518.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/nampi/ign-transport:3373fe1e0958..2a041435ea45?path=src%2FNodeShared.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-23689518"}}, "parent": {"id": 23622154, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/23622154.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-23622154"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158"}}, "title": "Issue_47: Wait for subscribers"}, "content": {"raw": "Sorry, I meant a test similar to this one:\n\n\n```\n#!c++\n\ntransport::Node node;\ntransport::Node node2;\nunsigned int timeout = 1000;\n\nEXPECT_TRUE(node2.Advertise<ignition::msgs::Vector3d>(g_topic));\nEXPECT_TRUE(node.Advertise<ignition::msgs::Int32>(g_topic));\n\nstd::string subscriberPath = testing::portablePathUnion(\n   PROJECT_BINARY_PATH,\n   \"test/integration/INTEGRATION_waitForSubscribers_aux\");\ntesting::forkHandlerType pi = testing::forkAndRun(subscriberPath.c_str(),\n  partition.c_str());\n\nEXPECT_FALSE(node.WaitForSubscribers<ignition::msgs::Int32>(g_topic,\n  timeout));\n```\n\nAnd this other test should trigger the condition `if (subscriptionHandlerPtr->TypeName() == _typeName)`:\n\n\n```\n#!c++\n\ntransport::Node node;\ntransport::Node node2;\nunsigned int timeout = 1000;\n\nEXPECT_TRUE(node2.Subscribe(g_topic, cb));\nEXPECT_TRUE(node.Advertise<ignition::msgs::Int32>(g_topic));\n\nstd::string subscriberPath = testing::portablePathUnion(\n   PROJECT_BINARY_PATH,\n   \"test/integration/INTEGRATION_waitForSubscribers_aux\");\ntesting::forkHandlerType pi = testing::forkAndRun(subscriberPath.c_str(),\n  partition.c_str());\n\nEXPECT_TRUE(node.WaitForSubscribers<ignition::msgs::Int32>(g_topic,\n  timeout));\n```\n\n", "markup": "markdown", "html": "<p>Sorry, I meant a test similar to this one:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n<span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">node2</span><span class=\"p\">;</span>\n<span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>\n\n<span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Vector3d</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">g_topic</span><span class=\"p\">));</span>\n<span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Int32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">g_topic</span><span class=\"p\">));</span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">subscriberPath</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">::</span><span class=\"n\">portablePathUnion</span><span class=\"p\">(</span>\n   <span class=\"n\">PROJECT_BINARY_PATH</span><span class=\"p\">,</span>\n   <span class=\"s\">&quot;test/integration/INTEGRATION_waitForSubscribers_aux&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">testing</span><span class=\"o\">::</span><span class=\"n\">forkHandlerType</span> <span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">::</span><span class=\"n\">forkAndRun</span><span class=\"p\">(</span><span class=\"n\">subscriberPath</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span>\n  <span class=\"n\">partition</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n\n<span class=\"n\">EXPECT_FALSE</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">WaitForSubscribers</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Int32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">g_topic</span><span class=\"p\">,</span>\n  <span class=\"n\">timeout</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>And this other test should trigger the condition <code>if (subscriptionHandlerPtr-&gt;TypeName() == _typeName)</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n<span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span> <span class=\"n\">node2</span><span class=\"p\">;</span>\n<span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>\n\n<span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"n\">g_topic</span><span class=\"p\">,</span> <span class=\"n\">cb</span><span class=\"p\">));</span>\n<span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Int32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">g_topic</span><span class=\"p\">));</span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">subscriberPath</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">::</span><span class=\"n\">portablePathUnion</span><span class=\"p\">(</span>\n   <span class=\"n\">PROJECT_BINARY_PATH</span><span class=\"p\">,</span>\n   <span class=\"s\">&quot;test/integration/INTEGRATION_waitForSubscribers_aux&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">testing</span><span class=\"o\">::</span><span class=\"n\">forkHandlerType</span> <span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">::</span><span class=\"n\">forkAndRun</span><span class=\"p\">(</span><span class=\"n\">subscriberPath</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span>\n  <span class=\"n\">partition</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n\n<span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">WaitForSubscribers</span><span class=\"o\">&lt;</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Int32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">g_topic</span><span class=\"p\">,</span>\n  <span class=\"n\">timeout</span><span class=\"p\">));</span>\n</pre></div>", "type": "rendered"}, "created_on": "2016-09-13T23:17:06.303706+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": null, "from": null, "outdated": false, "path": "src/NodeShared.cc"}, "updated_on": "2016-09-13T23:21:14.463611+00:00", "type": "pullrequest_comment", "id": 23689518}