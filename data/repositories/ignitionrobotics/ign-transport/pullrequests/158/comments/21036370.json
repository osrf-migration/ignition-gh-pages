{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/21036370.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/nampi/ign-transport:None..None?path=example%2Fpublisher.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-21036370"}}, "parent": {"id": 20986084, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/20986084.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-20986084"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158"}}, "title": "Issue_47: Wait for subscribers"}, "content": {"raw": "1. I cannot find an easier way to do it.\n2. True, and probably in a production program you should add the signal handlers to make sure that your program terminates smoothly. I believe that it's OK if we leave these examples as they are for not introducing a lot of complexity in them. Having said that, maybe we should follow a similar approach in `publisher` and install the signal handler after `WaitForSubscriber` as you were proposing. It's not the recommended way to do it in a production environment but the example will be easier to understand, which is the main goal.\n3. The first approach (`Publisher.cc`) installs a handler but doesn't block the thread, leaving the user the opportunity to execute other code. In `publisher`, we send messages in a loop. The second approach should be used when you want to block the thread because you don't have anything to do. This is the case of the `subscriber`, where you register your callback when you call `Subscribe()`, and then, you don't have anything to do. So, you just sit and wait for messages. This the case where you can use `waitForShutdown()`. As a bonus, `waitForShutdown()` installs a signal handler for you, so if you hit `CTRL-C` the function will unblock.", "markup": "markdown", "html": "<ol>\n<li>I cannot find an easier way to do it.</li>\n<li>True, and probably in a production program you should add the signal handlers to make sure that your program terminates smoothly. I believe that it's OK if we leave these examples as they are for not introducing a lot of complexity in them. Having said that, maybe we should follow a similar approach in <code>publisher</code> and install the signal handler after <code>WaitForSubscriber</code> as you were proposing. It's not the recommended way to do it in a production environment but the example will be easier to understand, which is the main goal.</li>\n<li>The first approach (<code>Publisher.cc</code>) installs a handler but doesn't block the thread, leaving the user the opportunity to execute other code. In <code>publisher</code>, we send messages in a loop. The second approach should be used when you want to block the thread because you don't have anything to do. This is the case of the <code>subscriber</code>, where you register your callback when you call <code>Subscribe()</code>, and then, you don't have anything to do. So, you just sit and wait for messages. This the case where you can use <code>waitForShutdown()</code>. As a bonus, <code>waitForShutdown()</code> installs a signal handler for you, so if you hit <code>CTRL-C</code> the function will unblock.</li>\n</ol>", "type": "rendered"}, "created_on": "2016-07-14T18:28:22.028141+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": null, "from": null, "outdated": false, "path": "example/publisher.cc"}, "updated_on": "2016-07-14T18:35:54.791337+00:00", "type": "pullrequest_comment", "id": 21036370}