{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/20986084.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/nampi/ign-transport:None..None?path=example%2Fpublisher.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-20986084"}}, "parent": {"id": 20972735, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158/comments/20972735.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158/_/diff#comment-20972735"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/158.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/158"}}, "title": "Issue_47: Wait for subscribers"}, "content": {"raw": "1 . Yes... It works exactly the same as you described. But the code block you suggested in issue_47 is quite difficult.\n\n```\n#!c++\n\nint counter = 0;\nwhile (!node.WaitForSubscribers(topic, 1000))\n{\n  if (g_terminatePub)\n    return 0;\n\n  if (++counter == 10)\n  {\n    std::cerr << \"No subscribers available\" << std::endl;\n    return 0;\n  }\n}\n```\nI think it is not clear for everybody. Could I use ```WaitForSubscribers()``` more obviously?\n\n2 . I tested all examples in ```examples``` folder. It looks like ```requester``` and ```requester_no_input``` should be updated. There is no destructor call. Also ```requester_oneway``` should be updated. The destructor was called, because it ended very quickly and I couldn't press CTRL+C. There are two approaches working with signals. One approach is in ```publisher.cc```: using ```signal_handler```. Another approach is in ```subscriber.cc```: using ```ignition::transport::waitForShutdown();```. Could you explain the differences between them, please?", "markup": "markdown", "html": "<p>1 . Yes... It works exactly the same as you described. But the code block you suggested in issue_47 is quite difficult.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">WaitForSubscribers</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">g_terminatePub</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">counter</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;No subscribers available&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I think it is not clear for everybody. Could I use <code>WaitForSubscribers()</code> more obviously?</p>\n<p>2 . I tested all examples in <code>examples</code> folder. It looks like <code>requester</code> and <code>requester_no_input</code> should be updated. There is no destructor call. Also <code>requester_oneway</code> should be updated. The destructor was called, because it ended very quickly and I couldn't press CTRL+C. There are two approaches working with signals. One approach is in <code>publisher.cc</code>: using <code>signal_handler</code>. Another approach is in <code>subscriber.cc</code>: using <code>ignition::transport::waitForShutdown();</code>. Could you explain the differences between them, please?</p>", "type": "rendered"}, "created_on": "2016-07-13T22:48:39.063640+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "inline": {"to": null, "from": null, "outdated": false, "path": "example/publisher.cc"}, "updated_on": "2016-07-13T22:49:35.624750+00:00", "type": "pullrequest_comment", "id": 20986084}