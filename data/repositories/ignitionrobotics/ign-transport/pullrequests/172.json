{"rendered": {"description": {"raw": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/) :large_blue_circle:\r\n* [Homebrew](Link URL) :large_orange_diamond: (Jenkins seems offline)\r\n* [Windows](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/336/) :large_blue_circle: (Just a well known warning that only shows up on Jenkins).\r\n\r\n", "markup": "markdown", "html": "<p>This pull request extends <code>ign service</code> for being able to request a service from the command line (issue <a href=\"#!/ignitionrobotics/ign-transport/issues/42/implement-a-service-request-from-the\" rel=\"nofollow\" title=\"Implement a service request from the command line using &quot;ign&quot;\" class=\"ap-connect-link\"><s>#42</s></a>).</p>\n<ul>\n<li>Compile the examples and run <code>responser</code> for registering the <code>/echo</code> service:</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">caguero</span><span class=\"err\">@</span><span class=\"nl\">bb8</span><span class=\"p\">:</span><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">ign</span><span class=\"o\">-</span><span class=\"n\">transport</span><span class=\"o\">/</span><span class=\"n\">example</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"err\">$</span> <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">responser</span>\n</pre></div>\n\n\n<ul>\n<li>Example that requests the <code>/echo</code> service with data=\"Hello\"</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ign</span> <span class=\"n\">service</span> <span class=\"o\">-</span><span class=\"n\">s</span> <span class=\"o\">/</span><span class=\"n\">echo</span> <span class=\"o\">--</span><span class=\"n\">reqtype</span> <span class=\"n\">ignition</span><span class=\"p\">.</span><span class=\"n\">msgs</span><span class=\"p\">.</span><span class=\"n\">StringMsg</span> <span class=\"o\">--</span><span class=\"n\">reptype</span> <span class=\"n\">ignition</span><span class=\"p\">.</span><span class=\"n\">msgs</span><span class=\"p\">.</span><span class=\"n\">StringMsg</span> <span class=\"o\">--</span><span class=\"n\">timeout</span> <span class=\"mi\">1000</span> <span class=\"o\">--</span><span class=\"n\">req</span> <span class=\"err\">&#39;</span><span class=\"nl\">data</span><span class=\"p\">:</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"err\">&#39;</span>\n</pre></div>\n\n\n<p>Note about the implementation:</p>\n<p>As described in issue <a href=\"#!/ignitionrobotics/ign-transport/issues/42/implement-a-service-request-from-the\" rel=\"nofollow\" title=\"Implement a service request from the command line using &quot;ign&quot;\" class=\"ap-connect-link\"><s>#42</s></a>, when we are inside <code>ign.cc::cmdServiceReq()</code>, we call <code>ignition::msgs::Factory::New</code> to create the request and response messages based on their string types. Within <code>ign.cc::cmdServiceReq()</code>, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic <code>google::protobuf::message</code>. </p>\n<p>This is a problem when we call <code>Node::Request()</code> and also when we create the <code>ReqHandler</code> inside <code>Node::Request()</code>. There are a few places where we need the specific type and not a generic <code>google::protobuf::message</code>. The solution that I found was to create a template specialization for <code>ReqHandler</code> when <code>[Req=google::protobuf::message]</code> and <code>[Rep=google::protobuf::message]</code>. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.</p>\n<p>Note: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.</p>\n<p>CI results:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/\" rel=\"nofollow\">Trusty</a> :large_blue_circle:</li>\n<li><a data-is-external-link=\"true\" href=\"/ignitionrobotics/ign-transport/src/330771b756d744e78c2e8fa2e102533aa9e8a861/Link%20URL\" rel=\"nofollow\">Homebrew</a> <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f536.png\" alt=\"\ud83d\udd36\" title=\":large_orange_diamond:\" data-emoji-short-name=\":large_orange_diamond:\" /> (Jenkins seems offline)</li>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/336/\" rel=\"nofollow\">Windows</a> :large_blue_circle: (Just a well known warning that only shows up on Jenkins).</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Request a service from the command line", "markup": "markdown", "html": "<p>Request a service from the command line</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/) :large_blue_circle:\r\n* [Homebrew](Link URL) :large_orange_diamond: (Jenkins seems offline)\r\n* [Windows](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/336/) :large_blue_circle: (Just a well known warning that only shows up on Jenkins).\r\n\r\n", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/172/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diffstat/ignitionrobotics/ign-transport:65976dd5f11e%0Df7cda8de86b0?from_pullrequest_id=172"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/172/merge"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/172"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:65976dd5f11e%0Df7cda8de86b0?from_pullrequest_id=172"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/172/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/172/statuses_page=1.json"}}, "title": "Request a service from the command line", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}], "id": 172, "destination": {"commit": {"hash": "f7cda8de86b0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/f7cda8de86b0.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/f7cda8de86b0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "default"}}, "created_on": "2016-09-16T00:25:47.325424+00:00", "summary": {"raw": "This pull request extends `ign service` for being able to request a service from the command line (issue #42).\r\n\r\n* Compile the examples and run `responser` for registering the `/echo` service:\r\n\r\n```\r\n#!c++\r\n\r\ncaguero@bb8:~/workspace/ign-transport/example/build$ ./responser\r\n```\r\n\r\n* Example that requests the `/echo` service with data=\"Hello\"\r\n\r\n```\r\n#!c++\r\n\r\nign service -s /echo --reqtype ignition.msgs.StringMsg --reptype ignition.msgs.StringMsg --timeout 1000 --req 'data: \"Hello\"'\r\n```\r\n\r\nNote about the implementation:\r\n\r\nAs described in issue #42, when we are inside `ign.cc::cmdServiceReq()`, we call `ignition::msgs::Factory::New` to create the request and response messages based on their string types. Within `ign.cc::cmdServiceReq()`, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic `google::protobuf::message`. \r\n\r\nThis is a problem when we call `Node::Request()` and also when we create the `ReqHandler` inside `Node::Request()`. There are a few places where we need the specific type and not a generic `google::protobuf::message`. The solution that I found was to create a template specialization for `ReqHandler` when `[Req=google::protobuf::message]` and `[Rep=google::protobuf::message]`. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.\r\n\r\nNote: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.\r\n\r\nCI results:\r\n\r\n* [Trusty](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/) :large_blue_circle:\r\n* [Homebrew](Link URL) :large_orange_diamond: (Jenkins seems offline)\r\n* [Windows](http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/336/) :large_blue_circle: (Just a well known warning that only shows up on Jenkins).\r\n\r\n", "markup": "markdown", "html": "<p>This pull request extends <code>ign service</code> for being able to request a service from the command line (issue <a href=\"#!/ignitionrobotics/ign-transport/issues/42/implement-a-service-request-from-the\" rel=\"nofollow\" title=\"Implement a service request from the command line using &quot;ign&quot;\" class=\"ap-connect-link\"><s>#42</s></a>).</p>\n<ul>\n<li>Compile the examples and run <code>responser</code> for registering the <code>/echo</code> service:</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">caguero</span><span class=\"err\">@</span><span class=\"nl\">bb8</span><span class=\"p\">:</span><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">ign</span><span class=\"o\">-</span><span class=\"n\">transport</span><span class=\"o\">/</span><span class=\"n\">example</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"err\">$</span> <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">responser</span>\n</pre></div>\n\n\n<ul>\n<li>Example that requests the <code>/echo</code> service with data=\"Hello\"</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">ign</span> <span class=\"n\">service</span> <span class=\"o\">-</span><span class=\"n\">s</span> <span class=\"o\">/</span><span class=\"n\">echo</span> <span class=\"o\">--</span><span class=\"n\">reqtype</span> <span class=\"n\">ignition</span><span class=\"p\">.</span><span class=\"n\">msgs</span><span class=\"p\">.</span><span class=\"n\">StringMsg</span> <span class=\"o\">--</span><span class=\"n\">reptype</span> <span class=\"n\">ignition</span><span class=\"p\">.</span><span class=\"n\">msgs</span><span class=\"p\">.</span><span class=\"n\">StringMsg</span> <span class=\"o\">--</span><span class=\"n\">timeout</span> <span class=\"mi\">1000</span> <span class=\"o\">--</span><span class=\"n\">req</span> <span class=\"err\">&#39;</span><span class=\"nl\">data</span><span class=\"p\">:</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"err\">&#39;</span>\n</pre></div>\n\n\n<p>Note about the implementation:</p>\n<p>As described in issue <a href=\"#!/ignitionrobotics/ign-transport/issues/42/implement-a-service-request-from-the\" rel=\"nofollow\" title=\"Implement a service request from the command line using &quot;ign&quot;\" class=\"ap-connect-link\"><s>#42</s></a>, when we are inside <code>ign.cc::cmdServiceReq()</code>, we call <code>ignition::msgs::Factory::New</code> to create the request and response messages based on their string types. Within <code>ign.cc::cmdServiceReq()</code>, we don't have access to the real types, we only have the string types, so the Ignition Msgs factory is not able to cast the new messages to the specific protobuf types (e.g.: ignition::msgs::StringMsg). Instead, it returns a pointer to a generic <code>google::protobuf::message</code>. </p>\n<p>This is a problem when we call <code>Node::Request()</code> and also when we create the <code>ReqHandler</code> inside <code>Node::Request()</code>. There are a few places where we need the specific type and not a generic <code>google::protobuf::message</code>. The solution that I found was to create a template specialization for <code>ReqHandler</code> when <code>[Req=google::protobuf::message]</code> and <code>[Rep=google::protobuf::message]</code>. It duplicates a little bit of code but seems to work. Maybe @nkoenig has another idea but at least this is a working version.</p>\n<p>Note: This feature was originally started by Nadya Ampilogova (@nampi), credit for her.</p>\n<p>CI results:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-trusty-amd64/163/\" rel=\"nofollow\">Trusty</a> :large_blue_circle:</li>\n<li><a data-is-external-link=\"true\" href=\"/ignitionrobotics/ign-transport/src/330771b756d744e78c2e8fa2e102533aa9e8a861/Link%20URL\" rel=\"nofollow\">Homebrew</a> <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f536.png\" alt=\"\ud83d\udd36\" title=\":large_orange_diamond:\" data-emoji-short-name=\":large_orange_diamond:\" /> (Jenkins seems offline)</li>\n<li><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/main/view/ignition/job/ignition_transport-ci-pr_any-windows7-amd64/336/\" rel=\"nofollow\">Windows</a> :large_blue_circle: (Just a well known warning that only shows up on Jenkins).</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "5b19a6b8e5f1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/5b19a6b8e5f1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/5b19a6b8e5f1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "issue_42"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-09-23T21:00:35.227775+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "REVIEWER", "participated_on": "2016-09-23T21:20:48.447040+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2016-10-05T00:26:14.468709+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "65976dd5f11e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/65976dd5f11e.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/65976dd5f11e"}}}, "closed_by": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}