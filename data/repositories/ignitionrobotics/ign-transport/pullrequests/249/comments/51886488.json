{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/249/comments/51886488.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:b7611efd2931..43d2b37c8d97?path=src%2FNode.cc"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/249/_/diff#comment-51886488"}}, "parent": {"id": 51884608, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/249/comments/51884608.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/249/_/diff#comment-51884608"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/249.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/249"}}, "title": "[WIP] Subscribe and publish raw (serialized) data"}, "content": {"raw": "That's correct, although I'd recommend keeping it like this anyway. One of the recommended practices when using PIMPL is for the user-facing classes to be nothing but very light wrappers for the underlying implementation class. The implementation class is where the heavy lifting should be done, rather than just being a container for data fields. This usually makes refactoring easier, and makes code cleaner (e.g. you don't need to use `dataPtr->` over and over again in your implementations).\n\nI understand that our libraries are still transitioning from being non-PIMPL to using PIMPL, but I'd suggest we take advantage of opportunities to move further towards idiomatic PIMPL whenever we can. If you have a strong preference for mixing PIMPL and non-PIMPL idioms, I can move the function back to where it was.", "markup": "markdown", "html": "<p>That's correct, although I'd recommend keeping it like this anyway. One of the recommended practices when using PIMPL is for the user-facing classes to be nothing but very light wrappers for the underlying implementation class. The implementation class is where the heavy lifting should be done, rather than just being a container for data fields. This usually makes refactoring easier, and makes code cleaner (e.g. you don't need to use <code>dataPtr-&gt;</code> over and over again in your implementations).</p>\n<p>I understand that our libraries are still transitioning from being non-PIMPL to using PIMPL, but I'd suggest we take advantage of opportunities to move further towards idiomatic PIMPL whenever we can. If you have a strong preference for mixing PIMPL and non-PIMPL idioms, I can move the function back to where it was.</p>", "type": "rendered"}, "created_on": "2017-12-13T23:03:06.784804+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": false, "path": "src/Node.cc"}, "updated_on": "2017-12-13T23:03:06.786939+00:00", "type": "pullrequest_comment", "id": 51886488}