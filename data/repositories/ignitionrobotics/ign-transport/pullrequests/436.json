{"rendered": {"description": {"raw": "The root of the issue is the need to do a ZMQ `connect`, and then, register as a remote subscriber in the publisher\u2019s process. Before this pull request, there was a `sleep` after the ZMQ `connect` to guarantee that the message was always received after the negotiation needed during the `connect` \\(see [this line](#!/ignitionrobotics/ign-transport/src/35f4c00e998a9cd64262ba5ad989272efa99b4ed/src/NodeShared.cc#lines-970)\\). If a network has enough delay, the `100ms` is not enough to complete the `connect` phase. In this case, the ZMQ message registering the subscriber would never reach the publisher. If this node was the only subscriber, the publisher would decide to not send anything over the network.\r\n\r\nSolution: As far as I know ZMQ doesn\u2019t offer a way to solve this issue. Instead, we use the UDP multicast channel to send a NewConnection/EndConnection message when a remote subscriber subscribes and unsubscribes respectively.\r\n\r\n\u200c", "markup": "markdown", "html": "<p>The root of the issue is the need to do a ZMQ <code>connect</code>, and then, register as a remote subscriber in the publisher\u2019s process. Before this pull request, there was a <code>sleep</code> after the ZMQ <code>connect</code> to guarantee that the message was always received after the negotiation needed during the <code>connect</code> (see <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/src/35f4c00e998a9cd64262ba5ad989272efa99b4ed/src/NodeShared.cc#lines-970\" rel=\"nofollow\">this line</a>). If a network has enough delay, the <code>100ms</code> is not enough to complete the <code>connect</code> phase. In this case, the ZMQ message registering the subscriber would never reach the publisher. If this node was the only subscriber, the publisher would decide to not send anything over the network.</p>\n<p>Solution: As far as I know ZMQ doesn\u2019t offer a way to solve this issue. Instead, we use the UDP multicast channel to send a NewConnection/EndConnection message when a remote subscriber subscribes and unsubscribes respectively.</p>\n<p>\u200c</p>", "type": "rendered"}, "title": {"raw": "Remove some sleeps", "markup": "markdown", "html": "<p>Remove some sleeps</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The root of the issue is the need to do a ZMQ `connect`, and then, register as a remote subscriber in the publisher\u2019s process. Before this pull request, there was a `sleep` after the ZMQ `connect` to guarantee that the message was always received after the negotiation needed during the `connect` \\(see [this line](#!/ignitionrobotics/ign-transport/src/35f4c00e998a9cd64262ba5ad989272efa99b4ed/src/NodeShared.cc#lines-970)\\). If a network has enough delay, the `100ms` is not enough to complete the `connect` phase. In this case, the ZMQ message registering the subscriber would never reach the publisher. If this node was the only subscriber, the publisher would decide to not send anything over the network.\r\n\r\nSolution: As far as I know ZMQ doesn\u2019t offer a way to solve this issue. Instead, we use the UDP multicast channel to send a NewConnection/EndConnection message when a remote subscriber subscribes and unsubscribes respectively.\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/436/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diffstat/ignitionrobotics/ign-transport:e6f556495d21%0D35f4c00e998a?from_pullrequest_id=436"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/436/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/436.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/436/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/436/merge"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/436"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/436/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/diff/ignitionrobotics/ign-transport:e6f556495d21%0D35f4c00e998a?from_pullrequest_id=436"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/pullrequests/436/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/436/statuses_page=1.json"}}, "title": "Remove some sleeps", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}], "id": 436, "destination": {"commit": {"hash": "35f4c00e998a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/35f4c00e998a.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/35f4c00e998a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "ign-transport7"}}, "created_on": "2020-02-14T22:20:59.453065+00:00", "summary": {"raw": "The root of the issue is the need to do a ZMQ `connect`, and then, register as a remote subscriber in the publisher\u2019s process. Before this pull request, there was a `sleep` after the ZMQ `connect` to guarantee that the message was always received after the negotiation needed during the `connect` \\(see [this line](#!/ignitionrobotics/ign-transport/src/35f4c00e998a9cd64262ba5ad989272efa99b4ed/src/NodeShared.cc#lines-970)\\). If a network has enough delay, the `100ms` is not enough to complete the `connect` phase. In this case, the ZMQ message registering the subscriber would never reach the publisher. If this node was the only subscriber, the publisher would decide to not send anything over the network.\r\n\r\nSolution: As far as I know ZMQ doesn\u2019t offer a way to solve this issue. Instead, we use the UDP multicast channel to send a NewConnection/EndConnection message when a remote subscriber subscribes and unsubscribes respectively.\r\n\r\n\u200c", "markup": "markdown", "html": "<p>The root of the issue is the need to do a ZMQ <code>connect</code>, and then, register as a remote subscriber in the publisher\u2019s process. Before this pull request, there was a <code>sleep</code> after the ZMQ <code>connect</code> to guarantee that the message was always received after the negotiation needed during the <code>connect</code> (see <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/src/35f4c00e998a9cd64262ba5ad989272efa99b4ed/src/NodeShared.cc#lines-970\" rel=\"nofollow\">this line</a>). If a network has enough delay, the <code>100ms</code> is not enough to complete the <code>connect</code> phase. In this case, the ZMQ message registering the subscriber would never reach the publisher. If this node was the only subscriber, the publisher would decide to not send anything over the network.</p>\n<p>Solution: As far as I know ZMQ doesn\u2019t offer a way to solve this issue. Instead, we use the UDP multicast channel to send a NewConnection/EndConnection message when a remote subscriber subscribes and unsubscribes respectively.</p>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "3b32768838e7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/3b32768838e7.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/3b32768838e7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "branch": {"name": "discovery_extended_p2"}}, "comment_count": 10, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-03-01T11:58:12.423045+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "REVIEWER", "participated_on": "2020-03-04T15:44:31.911225+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2020-03-04T15:44:54.251952+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": {"hash": "e6f556495d21", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/commit/e6f556495d21.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/commits/e6f556495d21"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}