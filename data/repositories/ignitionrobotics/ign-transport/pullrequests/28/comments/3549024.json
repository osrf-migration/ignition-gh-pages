{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/28/comments/3549024.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/28/_/diff#comment-3549024"}}, "parent": {"id": 3548045, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/28/comments/3548045.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/28/_/diff#comment-3548045"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 28, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/pullrequests/28.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/pull-requests/28"}}, "title": "Windows: compile tests and examples (take II)"}, "content": {"raw": "ummm ... I spoke too fast. The assembly code generated by clang when using const or constexpr is the same, so something is preventing the data member to be really a const in compile time.\n\nAlthough my C skills really sucks, I would propose something like:\n\n```\n#!c++\n\n--- a/src/DiscoveryPrivate.cc\tTue Oct 21 23:13:20 2014 +0200\n+++ b/src/DiscoveryPrivate.cc\tWed Oct 22 01:08:02 2014 +0200\n@@ -441,7 +441,7 @@\n //////////////////////////////////////////////////\n void DiscoveryPrivate::RecvDiscoveryUpdate()\n {\n-  char rcvStr[this->MaxRcvStr];\n+  char * rcvStr = new char[this->MaxRcvStr];\n   std::string srcAddr;\n   uint16_t srcPort;\n   sockaddr_in clntAddr;\n@@ -464,6 +464,7 @@\n   }\n \n   this->DispatchDiscoveryMsg(srcAddr, rcvStr);\n+  delete[] rcvStr;\n }\n```\nThat should make clang happy.\n\n\n", "markup": "markdown", "html": "<p>ummm ... I spoke too fast. The assembly code generated by clang when using const or constexpr is the same, so something is preventing the data member to be really a const in compile time.</p>\n<p>Although my C skills really sucks, I would propose something like:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"o\">---</span> <span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiscoveryPrivate</span><span class=\"p\">.</span><span class=\"n\">cc</span>   <span class=\"n\">Tue</span> <span class=\"n\">Oct</span> <span class=\"mi\">21</span> <span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"mi\">2014</span> <span class=\"o\">+</span><span class=\"mo\">0200</span>\n<span class=\"o\">+++</span> <span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiscoveryPrivate</span><span class=\"p\">.</span><span class=\"n\">cc</span>   <span class=\"n\">Wed</span> <span class=\"n\">Oct</span> <span class=\"mi\">22</span> <span class=\"mo\">01</span><span class=\"o\">:</span><span class=\"mi\">08</span><span class=\"o\">:</span><span class=\"mo\">02</span> <span class=\"mi\">2014</span> <span class=\"o\">+</span><span class=\"mo\">0200</span>\n<span class=\"err\">@@</span> <span class=\"o\">-</span><span class=\"mi\">441</span><span class=\"p\">,</span><span class=\"mi\">7</span> <span class=\"o\">+</span><span class=\"mi\">441</span><span class=\"p\">,</span><span class=\"mi\">7</span> <span class=\"err\">@@</span>\n <span class=\"c1\">//////////////////////////////////////////////////</span>\n <span class=\"kt\">void</span> <span class=\"n\">DiscoveryPrivate</span><span class=\"o\">::</span><span class=\"n\">RecvDiscoveryUpdate</span><span class=\"p\">()</span>\n <span class=\"p\">{</span>\n<span class=\"o\">-</span>  <span class=\"kt\">char</span> <span class=\"n\">rcvStr</span><span class=\"p\">[</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">MaxRcvStr</span><span class=\"p\">];</span>\n<span class=\"o\">+</span>  <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">rcvStr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"p\">[</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">MaxRcvStr</span><span class=\"p\">];</span>\n   <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">srcAddr</span><span class=\"p\">;</span>\n   <span class=\"kt\">uint16_t</span> <span class=\"n\">srcPort</span><span class=\"p\">;</span>\n   <span class=\"n\">sockaddr_in</span> <span class=\"n\">clntAddr</span><span class=\"p\">;</span>\n<span class=\"err\">@@</span> <span class=\"o\">-</span><span class=\"mi\">464</span><span class=\"p\">,</span><span class=\"mi\">6</span> <span class=\"o\">+</span><span class=\"mi\">464</span><span class=\"p\">,</span><span class=\"mi\">7</span> <span class=\"err\">@@</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">DispatchDiscoveryMsg</span><span class=\"p\">(</span><span class=\"n\">srcAddr</span><span class=\"p\">,</span> <span class=\"n\">rcvStr</span><span class=\"p\">);</span>\n<span class=\"o\">+</span>  <span class=\"k\">delete</span><span class=\"p\">[]</span> <span class=\"n\">rcvStr</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>That should make clang happy.</p>", "type": "rendered"}, "created_on": "2014-10-21T23:09:13.645756+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2014-10-21T23:09:13.655097+00:00", "type": "pullrequest_comment", "id": 3549024}