{"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/13/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/13/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/13/fail-to-communicate-some-protobufs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/13/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Fail to communicate some protobufs", "component": null, "votes": 0, "watches": 2, "content": {"raw": "In this library, a protobuf message is serialized with `msg.SerializeToString`, and then, it's sent over the wire using zeromq. The C++ `SerializeToString` method might contain null bytes (`\\0`) and as long as we store the serialized data into a std::string or we don't interpret the stream of bytes as a c-string, we are safe.\r\n\r\nIn several points of the code we were reconstructing a stream of bytes by using:\r\n\r\n`std::string data = std::string(reinterpret_cast<char *>(msg.data()));`\r\n\r\nThis line was not storing the whole stream of bytes into `data`, it was storing only bytes up to the first `\\0`.\r\n\r\nThe solution is to use an alternative `std::string` constructor that accepts two arguments (a pointer and size):\r\n\r\n`std::string data = std::string(reinterpret_cast<char *>(msg.data()), msg.size());`\r\n\r\nThis problem was not appearing with protobuf messages containing a single field. However, if the message contains multiple fields, the bug was causing that incorrect messages were received by the subscribers. Probably protobuf uses `\\0` as an internal separator in its serializer.\r\n\r\nPull request #15 solves this problem.", "markup": "markdown", "html": "<p>In this library, a protobuf message is serialized with <code>msg.SerializeToString</code>, and then, it's sent over the wire using zeromq. The C++ <code>SerializeToString</code> method might contain null bytes (<code>\\0</code>) and as long as we store the serialized data into a std::string or we don't interpret the stream of bytes as a c-string, we are safe.</p>\n<p>In several points of the code we were reconstructing a stream of bytes by using:</p>\n<p><code>std::string data = std::string(reinterpret_cast&lt;char *&gt;(msg.data()));</code></p>\n<p>This line was not storing the whole stream of bytes into <code>data</code>, it was storing only bytes up to the first <code>\\0</code>.</p>\n<p>The solution is to use an alternative <code>std::string</code> constructor that accepts two arguments (a pointer and size):</p>\n<p><code>std::string data = std::string(reinterpret_cast&lt;char *&gt;(msg.data()), msg.size());</code></p>\n<p>This problem was not appearing with protobuf messages containing a single field. However, if the message contains multiple fields, the bug was causing that incorrect messages were received by the subscribers. Probably protobuf uses <code>\\0</code> as an internal separator in its serializer.</p>\n<p><a href=\"#!/ignitionrobotics/ign-transport/pull-requests/15/bug-fix-for-issue-13\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #15</a> solves this problem.</p>", "type": "rendered"}, "assignee": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-08-17T00:22:43.208121+00:00", "milestone": null, "updated_on": "2014-09-09T20:25:26.116494+00:00", "type": "issue", "id": 13}