{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/114/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/114.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/114/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/114/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/114/random-disconnect-during-transmission-over"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/114/vote"}}, "reporter": {"display_name": "Bart Cox", "uuid": "{e7963ca4-65ad-4b94-93f2-6687f4330a6e}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be7963ca4-65ad-4b94-93f2-6687f4330a6e%7D"}, "html": {"href": "https://bitbucket.org/%7Be7963ca4-65ad-4b94-93f2-6687f4330a6e%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/0feaa01a5c690cc3ccf5de57747ad7c9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsBC-5.png"}}, "nickname": "bcox_pv", "type": "user", "account_id": "5c1bb09a1c6a692feab9419c"}, "title": "Random disconnect during transmission over WiFi", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Description\r\n\r\nWhen we use ignition transport over WiFi we experience long delays on communication via \\(asynchronous\\) service calls and disconnects on pub/sub traffic. These seem to be accompanied with frequent detected disconnects and connects in the discovery layer. Interestingly, these delays seem to happen to a few nodes \\(but not all\\) at once and seem to resolve at the same time as well. We have been able to rule out any deadlock-like situations as our nodes will still accept and process service requests from nodes not affected by the delay in the network. Once the delay resolves, the messages seem to come in all at once.\r\n\r\nWe tested this problem with the basic example code from the source. When running the basic examples _publisher.cc_ and _subscriber.cc_ over WiFi, random disconnection callbacks are fired while both machines are still connected to the same network. We seem to experience similar problems with communication in the publisher/subscriber example which disconnects within a few minutes and in severe cases even seconds.\r\n\r\nTo rule out relevant external factors, we used an isolated network without any other active clients on a professional grade router and access-point but that seemed to have no influence on the robustness of the connections. We have also been able to exclude Ubuntu versions \\(16.04/18.04\\), client hardware/architecture and ignition-transport versions\\(5.xx - 7.xx\\), during our tests.\r\n\r\nWhen we run the same tests on the same machines over a wired network no long delays or disconnects are occurring, the connection is stable.\r\n\r\n# Steps to Reproduce\r\n\r\n* Use Ubuntu 18.04\r\n* Install dependencies\r\n\r\n```shell\r\nsudo apt-get update\\\r\n          && apt-get -y install\\\r\n            gnupg lsb-release\\\r\n            cmake pkg-config cppcheck git mercurial build-essential curl\\\r\n            libprotobuf-dev protobuf-compiler libprotoc-dev libzmq3-dev uuid-dev\\\r\n            doxygen ruby-ronn libsqlite3-dev g++-8\\\r\n          && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8\r\necho \"deb <http://packages.osrfoundation.org/gazebo/ubuntu-stable> $(lsb_release -cs) main\" > /etc/apt/sources.list.d/gazebo-stable.list\r\necho \"deb <http://packages.osrfoundation.org/gazebo/ubuntu-prerelease> `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-prerelease.list\r\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys D2486D2DD83DB69272AFE98867170598AF249743\r\n```\r\n\r\n* Install ignition libraries\r\n\r\n```\r\nsudo apt-get update \\\r\n          && sudo apt-get -y install \\\r\n            libignition-cmake2-dev \\\r\n            libignition-math6-dev \\\r\n            libignition-msgs4-dev \\\r\n            libignition-tools-dev\r\n```\r\n\r\n* Build ignition-transport 7.7.0 from source\r\n\r\n\u200c\r\n\r\n```shell\r\nhg clone #!/ignitionrobotics/ign-transport/ ign-transport \\ \r\n&& cd ign-transport \\ \r\n&& hg up ignition-transport7_7.0.0 \\ \r\n&& mkdir -p build \\ \r\n&& cd build \\ \r\n&& cmake ../ \\ \r\n&& make -j4 \\ \r\n&& sudo make install -j4 \\ \r\n&& cd ../example \\ \r\n&& mkdir -p build \\ \r\n&& cd build \\ \r\n&& cmake .. \\ \r\n&& make -j4\r\n```\r\n\r\n* Run the publisher example from the source code on machine A\r\n\r\n\u200c\r\n\r\n```\r\nexport IGN_PARTITION=transmission_test \r\nexport IGN_VERBOSE=1 \r\nexport IGN_IP=${OWN_IP} \r\n./build/publisher\r\n```\r\n\r\n* Run the subscriber example from the source code on machine B\r\n\r\n\u200c\r\n\r\n```\r\nexport IGN_PARTITION=transmission_test \r\nexport IGN_VERBOSE=1 \r\nexport IGN_IP=${OWN_IP} \r\n./build/subscriber\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nNo disconnection callbacks when the machine is connected to the \\(wireless\\) network\r\n\r\n**Actual behavior:**\r\n\r\nAfter 2 minutes the subscriber gets a disconnect callback and stops receiving messages. The publisher keeps sending messages.\r\n\r\n**Reproduces how often:**\r\n\r\nPeriodically.\r\n\r\n# Versions\r\n\r\n* Ubuntu 18.04\r\n* source install\r\n* ignition-transport 7.7.0\r\n\r\n# Additional context\r\n\r\nOur first assumption was that UDP multicast traffic carrying discovery information might get lost over a WiFi connection. Therefore we have been experimenting with different parameter sets in the discovery layer such as a lower heartbeat interval, higher silence interval etc. Only a longer silence interval resulted in a better performance in our tests but only at large values of 20 seconds or more.\r\n\r\nWe have further tried forcing all the traffic over unicast through modifying the relay functionality such that all discovery related messages are send over unicast within the same network \\(but not relayed\\). We were hoping that this lead to more stable connections but we did not see any significant improvement.", "markup": "markdown", "html": "<h1 id=\"markdown-header-description\">Description</h1>\n<p>When we use ignition transport over WiFi we experience long delays on communication via (asynchronous) service calls and disconnects on pub/sub traffic. These seem to be accompanied with frequent detected disconnects and connects in the discovery layer. Interestingly, these delays seem to happen to a few nodes (but not all) at once and seem to resolve at the same time as well. We have been able to rule out any deadlock-like situations as our nodes will still accept and process service requests from nodes not affected by the delay in the network. Once the delay resolves, the messages seem to come in all at once.</p>\n<p>We tested this problem with the basic example code from the source. When running the basic examples <em>publisher.cc</em> and <em>subscriber.cc</em> over WiFi, random disconnection callbacks are fired while both machines are still connected to the same network. We seem to experience similar problems with communication in the publisher/subscriber example which disconnects within a few minutes and in severe cases even seconds.</p>\n<p>To rule out relevant external factors, we used an isolated network without any other active clients on a professional grade router and access-point but that seemed to have no influence on the robustness of the connections. We have also been able to exclude Ubuntu versions (16.04/18.04), client hardware/architecture and ignition-transport versions(5.xx - 7.xx), during our tests.</p>\n<p>When we run the same tests on the same machines over a wired network no long delays or disconnects are occurring, the connection is stable.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ul>\n<li>Use Ubuntu 18.04</li>\n<li>Install dependencies</li>\n</ul>\n<div class=\"codehilite language-shell\"><pre><span></span>sudo apt-get update<span class=\"se\">\\</span>\n          <span class=\"o\">&amp;&amp;</span> apt-get -y install<span class=\"se\">\\</span>\n            gnupg lsb-release<span class=\"se\">\\</span>\n            cmake pkg-config cppcheck git mercurial build-essential curl<span class=\"se\">\\</span>\n            libprotobuf-dev protobuf-compiler libprotoc-dev libzmq3-dev uuid-dev<span class=\"se\">\\</span>\n            doxygen ruby-ronn libsqlite3-dev g++-8<span class=\"se\">\\</span>\n          <span class=\"o\">&amp;&amp;</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 <span class=\"m\">800</span> --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8\n<span class=\"nb\">echo</span> <span class=\"s2\">&quot;deb &lt;http://packages.osrfoundation.org/gazebo/ubuntu-stable&gt; </span><span class=\"k\">$(</span>lsb_release -cs<span class=\"k\">)</span><span class=\"s2\"> main&quot;</span> &gt; /etc/apt/sources.list.d/gazebo-stable.list\n<span class=\"nb\">echo</span> <span class=\"s2\">&quot;deb &lt;http://packages.osrfoundation.org/gazebo/ubuntu-prerelease&gt; `lsb_release -cs` main&quot;</span> &gt; /etc/apt/sources.list.d/gazebo-prerelease.list\napt-key adv --keyserver keyserver.ubuntu.com --recv-keys D2486D2DD83DB69272AFE98867170598AF249743\n</pre></div>\n\n\n<ul>\n<li>Install ignition libraries</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>sudo apt-get update \\\n          &amp;&amp; sudo apt-get -y install \\\n            libignition-cmake2-dev \\\n            libignition-math6-dev \\\n            libignition-msgs4-dev \\\n            libignition-tools-dev\n</pre></div>\n\n\n<ul>\n<li>Build ignition-transport 7.7.0 from source</li>\n</ul>\n<p>\u200c</p>\n<div class=\"codehilite language-shell\"><pre><span></span>hg clone #!/ignitionrobotics/ign-transport/ ign-transport <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> ign-transport <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> hg up ignition-transport7_7.0.0 <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> mkdir -p build <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> build <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> cmake ../ <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> make -j4 <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> sudo make install -j4 <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> ../example <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> mkdir -p build <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> build <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> cmake .. <span class=\"se\">\\ </span>\n<span class=\"o\">&amp;&amp;</span> make -j4\n</pre></div>\n\n\n<ul>\n<li>Run the publisher example from the source code on machine A</li>\n</ul>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>export IGN_PARTITION=transmission_test \nexport IGN_VERBOSE=1 \nexport IGN_IP=<span class=\"cp\">${</span><span class=\"n\">OWN_IP</span><span class=\"cp\">}</span> \n./build/publisher\n</pre></div>\n\n\n<ul>\n<li>Run the subscriber example from the source code on machine B</li>\n</ul>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>export IGN_PARTITION=transmission_test \nexport IGN_VERBOSE=1 \nexport IGN_IP=<span class=\"cp\">${</span><span class=\"n\">OWN_IP</span><span class=\"cp\">}</span> \n./build/subscriber\n</pre></div>\n\n\n<p><strong>Expected behavior:</strong></p>\n<p>No disconnection callbacks when the machine is connected to the (wireless) network</p>\n<p><strong>Actual behavior:</strong></p>\n<p>After 2 minutes the subscriber gets a disconnect callback and stops receiving messages. The publisher keeps sending messages.</p>\n<p><strong>Reproduces how often:</strong></p>\n<p>Periodically.</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<ul>\n<li>Ubuntu 18.04</li>\n<li>source install</li>\n<li>ignition-transport 7.7.0</li>\n</ul>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>Our first assumption was that UDP multicast traffic carrying discovery information might get lost over a WiFi connection. Therefore we have been experimenting with different parameter sets in the discovery layer such as a lower heartbeat interval, higher silence interval etc. Only a longer silence interval resulted in a better performance in our tests but only at large values of 20 seconds or more.</p>\n<p>We have further tried forcing all the traffic over unicast through modifying the relay functionality such that all discovery related messages are send over unicast within the same network (but not relayed). We were hoping that this lead to more stable connections but we did not see any significant improvement.</p>", "type": "rendered"}, "assignee": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-12-13T13:54:40.681868+00:00", "milestone": null, "updated_on": "2020-03-05T00:13:33.366748+00:00", "type": "issue", "id": 114}