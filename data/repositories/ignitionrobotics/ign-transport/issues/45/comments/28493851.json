{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28493851.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28493851"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**Question 1:**\n\nI use ```discovery_v2``` branch.\n\nThis is an example of code for a synchronous request.  What do you think about this code? \n\n```\n#!c++\n/// \\brief Request a new service without input parameter using a blocking call.\n      public: template<typename T> bool Request(\n        const std::string &_topic,\n        const unsigned int &_timeout,\n        T &_rep,\n        bool &_result)\n      {\n        msgs::Empty req;\n        return Request(_topic, req, _timeout, _rep, _result);\n      }\n```\nI can copy the content of this method:\n\n```\n#!c++\n\n      /// \\brief Request a new service using a blocking call.\n      public: template<typename T1, typename T2> bool Request(\n        const std::string &_topic,\n        const T1 &_req,\n        const unsigned int &_timeout,\n        T2 &_rep,\n        bool &_result);\n```\nAs I understand I should create only req: \n```\n#!c++\n\nmsgs::Empty req;\n```\nand then the same code.", "markup": "markdown", "html": "<p><strong>Question 1:</strong></p>\n<p>I use <code>discovery_v2</code> branch.</p>\n<p>This is an example of code for a synchronous request.  What do you think about this code? </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">/// \\brief Request a new service without input parameter using a blocking call.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"kt\">bool</span> <span class=\"n\">Request</span><span class=\"p\">(</span>\n        <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span>\n        <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">_timeout</span><span class=\"p\">,</span>\n        <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span>\n        <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"n\">req</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nf\">Request</span><span class=\"p\">(</span><span class=\"n\">_topic</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">_timeout</span><span class=\"p\">,</span> <span class=\"n\">_rep</span><span class=\"p\">,</span> <span class=\"n\">_result</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I can copy the content of this method:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"c1\">/// \\brief Request a new service using a blocking call.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T1</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">T2</span><span class=\"o\">&gt;</span> <span class=\"kt\">bool</span> <span class=\"n\">Request</span><span class=\"p\">(</span>\n        <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span>\n        <span class=\"k\">const</span> <span class=\"n\">T1</span> <span class=\"o\">&amp;</span><span class=\"n\">_req</span><span class=\"p\">,</span>\n        <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">_timeout</span><span class=\"p\">,</span>\n        <span class=\"n\">T2</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span>\n        <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>As I understand I should create only req: </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"n\">req</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>and then the same code.</p>", "type": "rendered"}, "created_on": "2016-06-14T11:09:29.034039+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-14T11:33:31.705502+00:00", "type": "issue_comment", "id": 28493851}