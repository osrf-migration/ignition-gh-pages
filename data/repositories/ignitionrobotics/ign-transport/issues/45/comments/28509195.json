{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28509195.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28509195"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**Question 3:**\n\n@caguero I saw that you commented @amtj 's [code](https://bitbucket.org/amtj/ign-transport/commits/d4dc0f4bfd8b6bb0cee7488afd2c836c5d91495e?at=service_requests_without_response):\n\n\"This lambda function should have the response parameter hardcoded to ignition::msgs::Empty. Then, we can call the \"regular\" Advertise function with two parameters registering our lambda function as callback. \"\n\nI tried it in my code. \n```\n#!c++\n      /// \\brief Advertise a new service without input parameter.\n      /// In this version the callback is a free function.\n      public: template<typename T> bool Advertise(\n        const std::string &_topic,\n        void(*_cb)(T &_rep, bool &_result),\n        const AdvertiseOptions &_options = AdvertiseOptions())\n      {\n        std::function<void(const msgs::Empty &, T &, bool &)> f =\n          [_cb](T &_internalRep, bool &_internalResult)\n        {\n          (*_cb)(_internalRep, _internalResult);\n        };\n        return this->Advertise<msgs::Empty, T>(_topic, f, _options);\n      }\n```\nIt was built successfully, but I have an error compiling the examples.\n\n\n\n```\n#!c++\n\n/usr/include/ignition/transport1/ignition/transport/Node.hh:332:9: error: conversion from \u2018ignition::transport::Node::Advertise(const string&, void (*)(T&, bool&), const ignition::transport::AdvertiseOptions&) [with T = ignition::msgs::StringMsg; std::string = std::basic_string<char>]::__lambda8\u2019 to non-scalar type \u2018std::function<void(const ignition::msgs::Empty&, ignition::msgs::StringMsg&, bool&)>\u2019 requested\n\n```\n\nI modified ```responser.cc```:\n\n\n```\n#!c++\n\nvoid srvEcho(ignition::msgs::StringMsg &_rep, bool &_result)\n{\n  _rep.set_data(\"HELLO\");\n  _result = true;\n}\n```\n\n\nI think I have an error in lambda function, but I haven't found any examples how to define an additional parameter. \n\n**Question 2:**\nShould I add the changes in ```example``` folder in my pr?\n", "markup": "markdown", "html": "<p><strong>Question 3:</strong></p>\n<p>@caguero I saw that you commented @amtj 's <a data-is-external-link=\"true\" href=\"https://bitbucket.org/amtj/ign-transport/commits/d4dc0f4bfd8b6bb0cee7488afd2c836c5d91495e?at=service_requests_without_response\" rel=\"nofollow\">code</a>:</p>\n<p>\"This lambda function should have the response parameter hardcoded to ignition::msgs::Empty. Then, we can call the \"regular\" Advertise function with two parameters registering our lambda function as callback. \"</p>\n<p>I tried it in my code. </p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"c1\">/// \\brief Advertise a new service without input parameter.</span>\n      <span class=\"c1\">/// In this version the callback is a free function.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"kt\">bool</span> <span class=\"n\">Advertise</span><span class=\"p\">(</span>\n        <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span>\n        <span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_cb</span><span class=\"p\">)(</span><span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">),</span>\n        <span class=\"k\">const</span> <span class=\"n\">AdvertiseOptions</span> <span class=\"o\">&amp;</span><span class=\"n\">_options</span> <span class=\"o\">=</span> <span class=\"n\">AdvertiseOptions</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span>\n          <span class=\"p\">[</span><span class=\"n\">_cb</span><span class=\"p\">](</span><span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalResult</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n          <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_cb</span><span class=\"p\">)(</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span> <span class=\"n\">_internalResult</span><span class=\"p\">);</span>\n        <span class=\"p\">};</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_topic</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">_options</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>It was built successfully, but I have an error compiling the examples.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport1</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport</span><span class=\"o\">/</span><span class=\"n\">Node</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">332</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"nl\">error</span><span class=\"p\">:</span> <span class=\"n\">conversion</span> <span class=\"n\">from</span> <span class=\"err\">\u2018</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">::</span><span class=\"n\">Advertise</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">string</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">T</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span><span class=\"o\">&amp;</span><span class=\"p\">),</span> <span class=\"k\">const</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">AdvertiseOptions</span><span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">with</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"p\">;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">::</span><span class=\"n\">__lambda8</span><span class=\"err\">\u2019</span> <span class=\"n\">to</span> <span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">scalar</span> <span class=\"n\">type</span> <span class=\"err\">\u2018</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">\u2019</span> <span class=\"n\">requested</span>\n</pre></div>\n\n\n<p>I modified <code>responser.cc</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">srvEcho</span><span class=\"p\">(</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">_rep</span><span class=\"p\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"s\">&quot;HELLO&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">_result</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I think I have an error in lambda function, but I haven't found any examples how to define an additional parameter. </p>\n<p><strong>Question 2:</strong>\nShould I add the changes in <code>example</code> folder in my pr?</p>", "type": "rendered"}, "created_on": "2016-06-14T21:56:29.451251+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-14T22:07:26.272235+00:00", "type": "issue_comment", "id": 28509195}