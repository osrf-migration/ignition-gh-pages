{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28536363.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28536363"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "Question 3: The problem is that you're declaring the lambda type with three arguments, but then, your actual lambda only has two parameters. You're missing the input parameter `_internalReq`. It should look like this:\n\n```\n#!c++\n\nstd::function<void(const msgs::Empty &, T &, bool &)> f =\n  [_cb](const msgs::Empty &_internalReq,\n        T &_internalRep,\n        bool &_internalResult)\n{\n  (*_cb)(_internalRep, _internalResult);\n};\n```\n\nNote how we call the external callback (the user callback) in the body of the lambda function and we ignore the input parameter.\n\nQuestion 2: It would be nice to have three new files in the `example` directory. One new `responser`,  one new `requester` and one new `requester_async` that exercise this new functionality. ", "markup": "markdown", "html": "<p>Question 3: The problem is that you're declaring the lambda type with three arguments, but then, your actual lambda only has two parameters. You're missing the input parameter <code>_internalReq</code>. It should look like this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span>\n  <span class=\"p\">[</span><span class=\"n\">_cb</span><span class=\"p\">](</span><span class=\"k\">const</span> <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalReq</span><span class=\"p\">,</span>\n        <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span>\n        <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalResult</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_cb</span><span class=\"p\">)(</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span> <span class=\"n\">_internalResult</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>Note how we call the external callback (the user callback) in the body of the lambda function and we ignore the input parameter.</p>\n<p>Question 2: It would be nice to have three new files in the <code>example</code> directory. One new <code>responser</code>,  one new <code>requester</code> and one new <code>requester_async</code> that exercise this new functionality. </p>", "type": "rendered"}, "created_on": "2016-06-15T20:55:24.656095+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-15T20:57:11.788293+00:00", "type": "issue_comment", "id": 28536363}