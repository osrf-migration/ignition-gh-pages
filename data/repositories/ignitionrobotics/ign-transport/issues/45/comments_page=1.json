{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28082478.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28082478"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-05-26T23:53:51.300164+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 28082478}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28369949.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28369949"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-06-08T18:11:59.366195+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 28369949}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28493851.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28493851"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**Question 1:**\n\nI use ```discovery_v2``` branch.\n\nThis is an example of code for a synchronous request.  What do you think about this code? \n\n```\n#!c++\n/// \\brief Request a new service without input parameter using a blocking call.\n      public: template<typename T> bool Request(\n        const std::string &_topic,\n        const unsigned int &_timeout,\n        T &_rep,\n        bool &_result)\n      {\n        msgs::Empty req;\n        return Request(_topic, req, _timeout, _rep, _result);\n      }\n```\nI can copy the content of this method:\n\n```\n#!c++\n\n      /// \\brief Request a new service using a blocking call.\n      public: template<typename T1, typename T2> bool Request(\n        const std::string &_topic,\n        const T1 &_req,\n        const unsigned int &_timeout,\n        T2 &_rep,\n        bool &_result);\n```\nAs I understand I should create only req: \n```\n#!c++\n\nmsgs::Empty req;\n```\nand then the same code.", "markup": "markdown", "html": "<p><strong>Question 1:</strong></p>\n<p>I use <code>discovery_v2</code> branch.</p>\n<p>This is an example of code for a synchronous request.  What do you think about this code? </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">/// \\brief Request a new service without input parameter using a blocking call.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"kt\">bool</span> <span class=\"n\">Request</span><span class=\"p\">(</span>\n        <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span>\n        <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">_timeout</span><span class=\"p\">,</span>\n        <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span>\n        <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"n\">req</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nf\">Request</span><span class=\"p\">(</span><span class=\"n\">_topic</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">_timeout</span><span class=\"p\">,</span> <span class=\"n\">_rep</span><span class=\"p\">,</span> <span class=\"n\">_result</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I can copy the content of this method:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"c1\">/// \\brief Request a new service using a blocking call.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T1</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">T2</span><span class=\"o\">&gt;</span> <span class=\"kt\">bool</span> <span class=\"n\">Request</span><span class=\"p\">(</span>\n        <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span>\n        <span class=\"k\">const</span> <span class=\"n\">T1</span> <span class=\"o\">&amp;</span><span class=\"n\">_req</span><span class=\"p\">,</span>\n        <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">_timeout</span><span class=\"p\">,</span>\n        <span class=\"n\">T2</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span>\n        <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>As I understand I should create only req: </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"n\">req</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>and then the same code.</p>", "type": "rendered"}, "created_on": "2016-06-14T11:09:29.034039+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-14T11:33:31.705502+00:00", "type": "issue_comment", "id": 28493851}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28494154.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28494154"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**Question 2:**\n\nI used your recommendations about ```Ignition-msgs``` library. I included the line ```#include <ignition/msgs.hh>``` in ```Node.hh``` file for importing the header with all the message definitions. I used the code from this [page](#!/ignitionrobotics/ign-transport/branches/compare/srv_no_response%0Ddev_doc#diff). The ign-transport was built successfully.\n\nI have a problem. I want to build examples in ```example``` folder. I have an error:\n\n```\n#!c++\n\nIn file included from /usr/include/ignition/transport1/ignition/transport.hh:9:0,\n                 from /home/user/code/tutorial_45/publisher.cc:24:\n/usr/include/ignition/transport1/ignition/transport/Node.hh:37:28: fatal error: ignition/msgs.hh: No such file or directory\n #include <ignition/msgs.hh>\n                            ^\ncompilation terminated.\n\n```\nI tried to use the changes in ```example``` folder from [pub_cmd](#!/ignitionrobotics/ign-transport/pull-requests/130/pub_cmd/diff) pull_request, but there was the same error. I am not familiar with ```make``` command. Could you explain how to solve this problem, please?", "markup": "markdown", "html": "<p><strong>Question 2:</strong></p>\n<p>I used your recommendations about <code>Ignition-msgs</code> library. I included the line <code>#include &lt;ignition/msgs.hh&gt;</code> in <code>Node.hh</code> file for importing the header with all the message definitions. I used the code from this <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/branches/compare/srv_no_response%0Ddev_doc#diff\" rel=\"nofollow\">page</a>. The ign-transport was built successfully.</p>\n<p>I have a problem. I want to build examples in <code>example</code> folder. I have an error:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"n\">from</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport1</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                 <span class=\"n\">from</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">tutorial_45</span><span class=\"o\">/</span><span class=\"n\">publisher</span><span class=\"p\">.</span><span class=\"nl\">cc</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport1</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport</span><span class=\"o\">/</span><span class=\"n\">Node</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span> <span class=\"n\">fatal</span> <span class=\"nl\">error</span><span class=\"p\">:</span> <span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">msgs</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n <span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/msgs.hh&gt;</span><span class=\"cp\"></span>\n                            <span class=\"o\">^</span>\n<span class=\"n\">compilation</span> <span class=\"n\">terminated</span><span class=\"p\">.</span>\n</pre></div>\n\n\n<p>I tried to use the changes in <code>example</code> folder from <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/130/pub_cmd/diff\" rel=\"nofollow\">pub_cmd</a> pull_request, but there was the same error. I am not familiar with <code>make</code> command. Could you explain how to solve this problem, please?</p>", "type": "rendered"}, "created_on": "2016-06-14T11:20:45.821868+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-14T11:21:37.256585+00:00", "type": "issue_comment", "id": 28494154}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28504731.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28504731"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "Answer 1: The signature of the function and the body looks good to me.\n\nAnswer 2: This is because our library is not exporting the ignition::messages dependency yet. When pull request #130 is merged your code should work. In the meantime, add the following code to your example/CMakeLists.txt:\n\n\n```\n#!c++\n\n#################################################\n# Find ign msgs library\nfind_package(ignition-msgs0 QUIET)\nif (NOT ignition-msgs0_FOUND)\n  message(FATAL_ERROR \"Looking for ignition-msgs - not found\")\nelse()\n  message(STATUS \"Looking for ignition-msgs - found\")\n  include_directories(${IGNITION-MSGS_INCLUDE_DIRS})\n  link_directories(${IGNITION-MSGS_LIBRARY_DIRS})\nendif()\n```\n\nAlso add `${IGNITION-MSGS_LIBRARIES}` to the `target_link_libraries` section of each sample executable that needs to link against Ignition Msgs.\n\nThe other part missing is the `Advertise()` function for advertising a service without the input parameter. The callback signature should be:\n\n`void (T2 &_rep, bool &_result)`\n\nAlso, we should also allow an asynchronous `Request()`.", "markup": "markdown", "html": "<p>Answer 1: The signature of the function and the body looks good to me.</p>\n<p>Answer 2: This is because our library is not exporting the ignition::messages dependency yet. When <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/130/pub_cmd\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #130</a> is merged your code should work. In the meantime, add the following code to your example/CMakeLists.txt:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#################################################</span>\n<span class=\"cp\"># Find ign msgs library</span>\n<span class=\"n\">find_package</span><span class=\"p\">(</span><span class=\"n\">ignition</span><span class=\"o\">-</span><span class=\"n\">msgs0</span> <span class=\"n\">QUIET</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">NOT</span> <span class=\"n\">ignition</span><span class=\"o\">-</span><span class=\"n\">msgs0_FOUND</span><span class=\"p\">)</span>\n  <span class=\"n\">message</span><span class=\"p\">(</span><span class=\"n\">FATAL_ERROR</span> <span class=\"s\">&quot;Looking for ignition-msgs - not found&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">()</span>\n  <span class=\"n\">message</span><span class=\"p\">(</span><span class=\"n\">STATUS</span> <span class=\"s\">&quot;Looking for ignition-msgs - found&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">include_directories</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MSGS_INCLUDE_DIRS</span><span class=\"p\">})</span>\n  <span class=\"n\">link_directories</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MSGS_LIBRARY_DIRS</span><span class=\"p\">})</span>\n<span class=\"n\">endif</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>Also add <code>${IGNITION-MSGS_LIBRARIES}</code> to the <code>target_link_libraries</code> section of each sample executable that needs to link against Ignition Msgs.</p>\n<p>The other part missing is the <code>Advertise()</code> function for advertising a service without the input parameter. The callback signature should be:</p>\n<p><code>void (T2 &amp;_rep, bool &amp;_result)</code></p>\n<p>Also, we should also allow an asynchronous <code>Request()</code>.</p>", "type": "rendered"}, "created_on": "2016-06-14T17:53:18.153463+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-14T17:57:08.458347+00:00", "type": "issue_comment", "id": 28504731}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28509195.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28509195"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**Question 3:**\n\n@caguero I saw that you commented @amtj 's [code](https://bitbucket.org/amtj/ign-transport/commits/d4dc0f4bfd8b6bb0cee7488afd2c836c5d91495e?at=service_requests_without_response):\n\n\"This lambda function should have the response parameter hardcoded to ignition::msgs::Empty. Then, we can call the \"regular\" Advertise function with two parameters registering our lambda function as callback. \"\n\nI tried it in my code. \n```\n#!c++\n      /// \\brief Advertise a new service without input parameter.\n      /// In this version the callback is a free function.\n      public: template<typename T> bool Advertise(\n        const std::string &_topic,\n        void(*_cb)(T &_rep, bool &_result),\n        const AdvertiseOptions &_options = AdvertiseOptions())\n      {\n        std::function<void(const msgs::Empty &, T &, bool &)> f =\n          [_cb](T &_internalRep, bool &_internalResult)\n        {\n          (*_cb)(_internalRep, _internalResult);\n        };\n        return this->Advertise<msgs::Empty, T>(_topic, f, _options);\n      }\n```\nIt was built successfully, but I have an error compiling the examples.\n\n\n\n```\n#!c++\n\n/usr/include/ignition/transport1/ignition/transport/Node.hh:332:9: error: conversion from \u2018ignition::transport::Node::Advertise(const string&, void (*)(T&, bool&), const ignition::transport::AdvertiseOptions&) [with T = ignition::msgs::StringMsg; std::string = std::basic_string<char>]::__lambda8\u2019 to non-scalar type \u2018std::function<void(const ignition::msgs::Empty&, ignition::msgs::StringMsg&, bool&)>\u2019 requested\n\n```\n\nI modified ```responser.cc```:\n\n\n```\n#!c++\n\nvoid srvEcho(ignition::msgs::StringMsg &_rep, bool &_result)\n{\n  _rep.set_data(\"HELLO\");\n  _result = true;\n}\n```\n\n\nI think I have an error in lambda function, but I haven't found any examples how to define an additional parameter. \n\n**Question 2:**\nShould I add the changes in ```example``` folder in my pr?\n", "markup": "markdown", "html": "<p><strong>Question 3:</strong></p>\n<p>@caguero I saw that you commented @amtj 's <a data-is-external-link=\"true\" href=\"https://bitbucket.org/amtj/ign-transport/commits/d4dc0f4bfd8b6bb0cee7488afd2c836c5d91495e?at=service_requests_without_response\" rel=\"nofollow\">code</a>:</p>\n<p>\"This lambda function should have the response parameter hardcoded to ignition::msgs::Empty. Then, we can call the \"regular\" Advertise function with two parameters registering our lambda function as callback. \"</p>\n<p>I tried it in my code. </p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"c1\">/// \\brief Advertise a new service without input parameter.</span>\n      <span class=\"c1\">/// In this version the callback is a free function.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"kt\">bool</span> <span class=\"n\">Advertise</span><span class=\"p\">(</span>\n        <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span>\n        <span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_cb</span><span class=\"p\">)(</span><span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">),</span>\n        <span class=\"k\">const</span> <span class=\"n\">AdvertiseOptions</span> <span class=\"o\">&amp;</span><span class=\"n\">_options</span> <span class=\"o\">=</span> <span class=\"n\">AdvertiseOptions</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span>\n          <span class=\"p\">[</span><span class=\"n\">_cb</span><span class=\"p\">](</span><span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalResult</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n          <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_cb</span><span class=\"p\">)(</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span> <span class=\"n\">_internalResult</span><span class=\"p\">);</span>\n        <span class=\"p\">};</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_topic</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">_options</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>It was built successfully, but I have an error compiling the examples.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport1</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">transport</span><span class=\"o\">/</span><span class=\"n\">Node</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">332</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"nl\">error</span><span class=\"p\">:</span> <span class=\"n\">conversion</span> <span class=\"n\">from</span> <span class=\"err\">\u2018</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">::</span><span class=\"n\">Advertise</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">string</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">T</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span><span class=\"o\">&amp;</span><span class=\"p\">),</span> <span class=\"k\">const</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">AdvertiseOptions</span><span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">with</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"p\">;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">basic_string</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">::</span><span class=\"n\">__lambda8</span><span class=\"err\">\u2019</span> <span class=\"n\">to</span> <span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">scalar</span> <span class=\"n\">type</span> <span class=\"err\">\u2018</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">\u2019</span> <span class=\"n\">requested</span>\n</pre></div>\n\n\n<p>I modified <code>responser.cc</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">srvEcho</span><span class=\"p\">(</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_result</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">_rep</span><span class=\"p\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"s\">&quot;HELLO&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">_result</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I think I have an error in lambda function, but I haven't found any examples how to define an additional parameter. </p>\n<p><strong>Question 2:</strong>\nShould I add the changes in <code>example</code> folder in my pr?</p>", "type": "rendered"}, "created_on": "2016-06-14T21:56:29.451251+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-14T22:07:26.272235+00:00", "type": "issue_comment", "id": 28509195}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28535919.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28535919"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-06-15T20:29:15.495150+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 28535919}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28536363.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28536363"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "Question 3: The problem is that you're declaring the lambda type with three arguments, but then, your actual lambda only has two parameters. You're missing the input parameter `_internalReq`. It should look like this:\n\n```\n#!c++\n\nstd::function<void(const msgs::Empty &, T &, bool &)> f =\n  [_cb](const msgs::Empty &_internalReq,\n        T &_internalRep,\n        bool &_internalResult)\n{\n  (*_cb)(_internalRep, _internalResult);\n};\n```\n\nNote how we call the external callback (the user callback) in the body of the lambda function and we ignore the input parameter.\n\nQuestion 2: It would be nice to have three new files in the `example` directory. One new `responser`,  one new `requester` and one new `requester_async` that exercise this new functionality. ", "markup": "markdown", "html": "<p>Question 3: The problem is that you're declaring the lambda type with three arguments, but then, your actual lambda only has two parameters. You're missing the input parameter <code>_internalReq</code>. It should look like this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span>\n  <span class=\"p\">[</span><span class=\"n\">_cb</span><span class=\"p\">](</span><span class=\"k\">const</span> <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalReq</span><span class=\"p\">,</span>\n        <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span>\n        <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_internalResult</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_cb</span><span class=\"p\">)(</span><span class=\"n\">_internalRep</span><span class=\"p\">,</span> <span class=\"n\">_internalResult</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>Note how we call the external callback (the user callback) in the body of the lambda function and we ignore the input parameter.</p>\n<p>Question 2: It would be nice to have three new files in the <code>example</code> directory. One new <code>responser</code>,  one new <code>requester</code> and one new <code>requester_async</code> that exercise this new functionality. </p>", "type": "rendered"}, "created_on": "2016-06-15T20:55:24.656095+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-15T20:57:11.788293+00:00", "type": "issue_comment", "id": 28536363}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28744765.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28744765"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**Question 4:** I don't understand the logic of ```public: void WrongEcho()``` method and ```public: bool wrongCallbackSrvExecuted``` variable in ```src/Node_TEST.cc``` file in ```MyTestClass```. I think that ```EXPECT_FALSE(this->wrongCallbackSrvExecuted);``` is always false in ```TestServiceCall()```. Could you give some explanations, please?\n\n**Question 5:** I have declined this [pr](#!/ignitionrobotics/ign-transport/pull-requests/146/issue_45-service-requests-without-input/diff), because it was not ready for review. How can I reopen it?\n\n**Question 6:** What is the logic of the test ```test/integration/twoProcessesSrvCallStress.cc```?  Does it check that a lot of requests (15000) can be processed successfully?\n\n**Question 7:** What is the ```req``` type in ```ServiceInfo()``` for service without input? ```ignition.msgs.Empty```?", "markup": "markdown", "html": "<p><strong>Question 4:</strong> I don't understand the logic of <code>public: void WrongEcho()</code> method and <code>public: bool wrongCallbackSrvExecuted</code> variable in <code>src/Node_TEST.cc</code> file in <code>MyTestClass</code>. I think that <code>EXPECT_FALSE(this-&gt;wrongCallbackSrvExecuted);</code> is always false in <code>TestServiceCall()</code>. Could you give some explanations, please?</p>\n<p><strong>Question 5:</strong> I have declined this <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/146/issue_45-service-requests-without-input/diff\" rel=\"nofollow\">pr</a>, because it was not ready for review. How can I reopen it?</p>\n<p><strong>Question 6:</strong> What is the logic of the test <code>test/integration/twoProcessesSrvCallStress.cc</code>?  Does it check that a lot of requests (15000) can be processed successfully?</p>\n<p><strong>Question 7:</strong> What is the <code>req</code> type in <code>ServiceInfo()</code> for service without input? <code>ignition.msgs.Empty</code>?</p>", "type": "rendered"}, "created_on": "2016-06-23T14:46:10.450543+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-23T19:02:31.297256+00:00", "type": "issue_comment", "id": 28744765}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28751327.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28751327"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**4:** As far as I can tell `WrongEcho()` is not being used by the code at all and you are right about the `EXPECT_FALSE`. I looked where the last commit in the source affecting `WrongEcho( )` (blame function in bitbucket) was [but no luck](#!/ignitionrobotics/ign-transport/commits/e2ff137531a86b10f7e0e51c18ca74ed7bfa72bc)\n\n**5:** You can not open two pull request using the same branches at the same time but once declined you can reopen it in the same way, as usual.\n\n**6:** Reading the code I would say yes to your assumption. Which part is the one you don't understand?\n\n**7:** is this the [`ServiceInfo()`](#!/ignitionrobotics/ign-transport/src/75c1fc2c84b2ad6b2cd8ffa33aff92d22389f52b/include/ignition/transport/Node.hh?at=default&fileviewer=file-view-default#Node.hh-685) that you refer to? I can not find any req in the declaration.", "markup": "markdown", "html": "<p><strong>4:</strong> As far as I can tell <code>WrongEcho()</code> is not being used by the code at all and you are right about the <code>EXPECT_FALSE</code>. I looked where the last commit in the source affecting <code>WrongEcho( )</code> (blame function in bitbucket) was <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/commits/e2ff137531a86b10f7e0e51c18ca74ed7bfa72bc\" rel=\"nofollow\">but no luck</a></p>\n<p><strong>5:</strong> You can not open two pull request using the same branches at the same time but once declined you can reopen it in the same way, as usual.</p>\n<p><strong>6:</strong> Reading the code I would say yes to your assumption. Which part is the one you don't understand?</p>\n<p><strong>7:</strong> is this the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/src/75c1fc2c84b2ad6b2cd8ffa33aff92d22389f52b/include/ignition/transport/Node.hh?at=default&amp;fileviewer=file-view-default#Node.hh-685\" rel=\"nofollow\"><code>ServiceInfo()</code></a> that you refer to? I can not find any req in the declaration.</p>", "type": "rendered"}, "created_on": "2016-06-23T20:20:20.025765+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 28751327}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28753353.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28753353"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "**5:** I didn't understand how to reopen my previous pr. I created a new one.\n\nThanks! I think that all other questions are clear for me now.", "markup": "markdown", "html": "<p><strong>5:</strong> I didn't understand how to reopen my previous pr. I created a new one.</p>\n<p>Thanks! I think that all other questions are clear for me now.</p>", "type": "rendered"}, "created_on": "2016-06-23T22:44:47.248879+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28753353}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28903244.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28903244"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "See pull request #151", "markup": "markdown", "html": "<p>See <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/151/issue_45-service-requests-without-input\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #151</a></p>", "type": "rendered"}, "created_on": "2016-06-30T17:02:36.283744+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 28903244}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45/comments/28935486.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/45#comment-28935486"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Service requests without input parameter"}, "content": {"raw": "Done in pull request #151", "markup": "markdown", "html": "<p>Done in <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/151/issue_45-service-requests-without-input\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #151</a></p>", "type": "rendered"}, "created_on": "2016-07-02T00:20:52.000138+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 28935486}], "page": 1, "size": 13}