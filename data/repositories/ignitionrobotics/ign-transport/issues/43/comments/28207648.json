{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28207648.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28207648"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Some extra comments:\n\n1. We could add an extra check in `FullyQualifiedName()` while printing the error message with the topic that exceeded the maximum length. If it's bigger than 512? characters we won't print the entire topic, just the error message and the first 256 characters (making explicit that we're truncating the topic name). If we don't do this and someone tries to register topic names with 100MB size, we will be printing them on the console, which might be problematic too.\n\n1. You could start with `SubscriptionMessage::Unpack()` in your first pull request, and then, do a similar thing with the rest of the `Unpack()` functions that can receive a topic. You can return `0` if something goes wrong and we should check the return value in the places that we call `Unpack()` to make sure that we don't continue if the return value is not positive. I think is a good thing to add an extra check in all the methods that set a topic name (for example `SubscriptionMsg::SetTopic()` or in the constructor. The sooner we detect the problem the better. In the constructor case we may have to raise an exception if something goes wrong. I don't think we have to touch `Pack()` if we guarantee that the topic length is correct in the setter methods.\n\n1. I'd do the same thing in the `Publisher` class than in the previous point.\n\n1. One constant is better here for simplicity. You could add the constant in `Helpers.h`.\n\n1. Answered in your PR", "markup": "markdown", "html": "<p>Some extra comments:</p>\n<ol>\n<li>\n<p>We could add an extra check in <code>FullyQualifiedName()</code> while printing the error message with the topic that exceeded the maximum length. If it's bigger than 512? characters we won't print the entire topic, just the error message and the first 256 characters (making explicit that we're truncating the topic name). If we don't do this and someone tries to register topic names with 100MB size, we will be printing them on the console, which might be problematic too.</p>\n</li>\n<li>\n<p>You could start with <code>SubscriptionMessage::Unpack()</code> in your first pull request, and then, do a similar thing with the rest of the <code>Unpack()</code> functions that can receive a topic. You can return <code>0</code> if something goes wrong and we should check the return value in the places that we call <code>Unpack()</code> to make sure that we don't continue if the return value is not positive. I think is a good thing to add an extra check in all the methods that set a topic name (for example <code>SubscriptionMsg::SetTopic()</code> or in the constructor. The sooner we detect the problem the better. In the constructor case we may have to raise an exception if something goes wrong. I don't think we have to touch <code>Pack()</code> if we guarantee that the topic length is correct in the setter methods.</p>\n</li>\n<li>\n<p>I'd do the same thing in the <code>Publisher</code> class than in the previous point.</p>\n</li>\n<li>\n<p>One constant is better here for simplicity. You could add the constant in <code>Helpers.h</code>.</p>\n</li>\n<li>\n<p>Answered in your PR</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2016-06-01T18:41:03.235982+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-01T18:41:55.136866+00:00", "type": "issue_comment", "id": 28207648}