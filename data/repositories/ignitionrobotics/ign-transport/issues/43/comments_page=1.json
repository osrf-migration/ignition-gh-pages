{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28082484.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28082484"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-05-26T23:54:10.937313+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 28082484}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28125205.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28125205"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "There are several layers in ignition-transport library. \n\n1. Should I restrict the length on the node layer? I can add restriction in TopicUtils::FullyQualifiedName() method. It means that if \"@/partition@/namespace/topic\" is too long (> 255) then the person receives the error message \"Topic [topic] is invalid\". In this case I print message that topic is invalid, but the problem is that fully qualified topic is too long. Should I print fully qualified topic name?\n\n2. I should restrict topic length in SubscriptionMsg::Unpack() (I don't want to receive too long message). Should I also add restriction on the topic length 1) in this class or 2) only in pack method? The first case: there are no SubscriptionMsg with too long topic. The second case: I cannot send message with too long topic, but I can create it.\n\n3. The same question about Publisher.  I should restrict topic length in Publisher::Unpack() (I don't want to receive too long message). Should I also add restriction on the topic length 1) in this class or 2) only in pack method? The first case: there are no Publisher with too long topic. The second case: I cannot send message with too long topic, but I can create it.\n\n4. Should I create different constants (one per class) maxTopicLength or create one global constant? In the first case: TopicUtils::maxFullyQualifiedNameLength, SubscriptionMsg::maxTopicLength, Publisher::maxTopicLength.\n\n5. What should I do if I received too long message? I have some problems. I describe my problem in this [pr](#!/ignitionrobotics/ign-transport/pull-requests/137/issue-43/diff).", "markup": "markdown", "html": "<p>There are several layers in ignition-transport library. </p>\n<ol>\n<li>\n<p>Should I restrict the length on the node layer? I can add restriction in TopicUtils::FullyQualifiedName() method. It means that if \"@/partition@/namespace/topic\" is too long (&gt; 255) then the person receives the error message \"Topic [topic] is invalid\". In this case I print message that topic is invalid, but the problem is that fully qualified topic is too long. Should I print fully qualified topic name?</p>\n</li>\n<li>\n<p>I should restrict topic length in SubscriptionMsg::Unpack() (I don't want to receive too long message). Should I also add restriction on the topic length 1) in this class or 2) only in pack method? The first case: there are no SubscriptionMsg with too long topic. The second case: I cannot send message with too long topic, but I can create it.</p>\n</li>\n<li>\n<p>The same question about Publisher.  I should restrict topic length in Publisher::Unpack() (I don't want to receive too long message). Should I also add restriction on the topic length 1) in this class or 2) only in pack method? The first case: there are no Publisher with too long topic. The second case: I cannot send message with too long topic, but I can create it.</p>\n</li>\n<li>\n<p>Should I create different constants (one per class) maxTopicLength or create one global constant? In the first case: TopicUtils::maxFullyQualifiedNameLength, SubscriptionMsg::maxTopicLength, Publisher::maxTopicLength.</p>\n</li>\n<li>\n<p>What should I do if I received too long message? I have some problems. I describe my problem in this <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/137/issue-43/diff\" rel=\"nofollow\">pr</a>.</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2016-05-29T17:49:21.114010+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28125205}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28125232.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28125232"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "I work on this issue.", "markup": "markdown", "html": "<p>I work on this issue.</p>", "type": "rendered"}, "created_on": "2016-05-29T17:56:29.509870+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28125232}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28183153.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28183153"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Answering your points:\n\n1. I think that would be potentially confusing for the user saying that something is bigger than X and display that something has a length much smaller than X. So +1 to display the full qualified name.\n\n2. If we try to get rid of topics > 256 I currently don't see a use case where we want to create that topic but can not use it for sending messages so I my thinking is that the most restrictive the better for helping the user not to get confused.\n\n3. Same than 2.\n\n4. Without thinking too much on it I would bet for simplicity at this point. One value for all, one place in memory and code until we find a good reason to split the values. If you have a good reason, then I'm ok splitting them.\n\n5. Let's continue working on that pull request.", "markup": "markdown", "html": "<p>Answering your points:</p>\n<ol>\n<li>\n<p>I think that would be potentially confusing for the user saying that something is bigger than X and display that something has a length much smaller than X. So +1 to display the full qualified name.</p>\n</li>\n<li>\n<p>If we try to get rid of topics &gt; 256 I currently don't see a use case where we want to create that topic but can not use it for sending messages so I my thinking is that the most restrictive the better for helping the user not to get confused.</p>\n</li>\n<li>\n<p>Same than 2.</p>\n</li>\n<li>\n<p>Without thinking too much on it I would bet for simplicity at this point. One value for all, one place in memory and code until we find a good reason to split the values. If you have a good reason, then I'm ok splitting them.</p>\n</li>\n<li>\n<p>Let's continue working on that pull request.</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2016-05-31T23:53:02.419260+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 28183153}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28205762.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28205762"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "\"4.\" Where can I define constant for several header files? In \"helpers.h\" file?", "markup": "markdown", "html": "<p>\"4.\" Where can I define constant for several header files? In \"helpers.h\" file?</p>", "type": "rendered"}, "created_on": "2016-06-01T17:06:30.494819+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-02T16:01:42.100168+00:00", "type": "issue_comment", "id": 28205762}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28207648.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28207648"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Some extra comments:\n\n1. We could add an extra check in `FullyQualifiedName()` while printing the error message with the topic that exceeded the maximum length. If it's bigger than 512? characters we won't print the entire topic, just the error message and the first 256 characters (making explicit that we're truncating the topic name). If we don't do this and someone tries to register topic names with 100MB size, we will be printing them on the console, which might be problematic too.\n\n1. You could start with `SubscriptionMessage::Unpack()` in your first pull request, and then, do a similar thing with the rest of the `Unpack()` functions that can receive a topic. You can return `0` if something goes wrong and we should check the return value in the places that we call `Unpack()` to make sure that we don't continue if the return value is not positive. I think is a good thing to add an extra check in all the methods that set a topic name (for example `SubscriptionMsg::SetTopic()` or in the constructor. The sooner we detect the problem the better. In the constructor case we may have to raise an exception if something goes wrong. I don't think we have to touch `Pack()` if we guarantee that the topic length is correct in the setter methods.\n\n1. I'd do the same thing in the `Publisher` class than in the previous point.\n\n1. One constant is better here for simplicity. You could add the constant in `Helpers.h`.\n\n1. Answered in your PR", "markup": "markdown", "html": "<p>Some extra comments:</p>\n<ol>\n<li>\n<p>We could add an extra check in <code>FullyQualifiedName()</code> while printing the error message with the topic that exceeded the maximum length. If it's bigger than 512? characters we won't print the entire topic, just the error message and the first 256 characters (making explicit that we're truncating the topic name). If we don't do this and someone tries to register topic names with 100MB size, we will be printing them on the console, which might be problematic too.</p>\n</li>\n<li>\n<p>You could start with <code>SubscriptionMessage::Unpack()</code> in your first pull request, and then, do a similar thing with the rest of the <code>Unpack()</code> functions that can receive a topic. You can return <code>0</code> if something goes wrong and we should check the return value in the places that we call <code>Unpack()</code> to make sure that we don't continue if the return value is not positive. I think is a good thing to add an extra check in all the methods that set a topic name (for example <code>SubscriptionMsg::SetTopic()</code> or in the constructor. The sooner we detect the problem the better. In the constructor case we may have to raise an exception if something goes wrong. I don't think we have to touch <code>Pack()</code> if we guarantee that the topic length is correct in the setter methods.</p>\n</li>\n<li>\n<p>I'd do the same thing in the <code>Publisher</code> class than in the previous point.</p>\n</li>\n<li>\n<p>One constant is better here for simplicity. You could add the constant in <code>Helpers.h</code>.</p>\n</li>\n<li>\n<p>Answered in your PR</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2016-06-01T18:41:03.235982+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-01T18:41:55.136866+00:00", "type": "issue_comment", "id": 28207648}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28282763.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28282763"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "@caguero 6. How can I check that ```Unpack()``` works correct if I forbid to create a SubscriptionMessage with long topic? My question is about code in ```Packet_TEST.cc``` file. Now I create a SubscriptionMessage with long topic and check that ```SubscriptionMessage.Unpack()``` is equal to zero.", "markup": "markdown", "html": "<p>@caguero 6. How can I check that <code>Unpack()</code> works correct if I forbid to create a SubscriptionMessage with long topic? My question is about code in <code>Packet_TEST.cc</code> file. Now I create a SubscriptionMessage with long topic and check that <code>SubscriptionMessage.Unpack()</code> is equal to zero.</p>", "type": "rendered"}, "created_on": "2016-06-05T14:24:01.267460+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-05T14:24:23.692297+00:00", "type": "issue_comment", "id": 28282763}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28285290.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28285290"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Checking the return value looks like a good expectation to me. If the topic exceeds the maximum length we should expect a `0`, otherwise a value greater than `0`.\n\nI understand that right now you can create a `SubscriptionMessage` (for example) with a large topic, call to `Pack()`, and then, check that `Unpack()` returns `0`. However, at some point we will prevent to create a `SubscriptionMessage` with a large topic, so this test won't work in the future. I'd suggest to test `Unpack()` with a valid `SubscriptionMessage`, call `Pack()`, and then, manually modify the `topicLength` field in the serialized data. E.g.:\n\nSerialize a valid `SubscriptionMessage`:\n\n```\n#!c++\n\n// Pack a SubscriptionMsg.\nSubscriptionMsg subMsg(otherHeader, topic);\nbuffer.resize(subMsg.MsgLength());\nbytes = subMsg.Pack(&buffer[0]);\nEXPECT_EQ(bytes, subMsg.MsgLength());\n\n```\n\nManually modify the `topicLength` field of the serialized `SubscriptionMsg` before calling `Unpack()`:\n\n\n```\n#!c++\n\n// Unpack a SubscriptionMsg with a long topic.\nSubscriptionMsg otherSubMsg;\nheaderBytes = header.Unpack(&buffer[0]);\nEXPECT_EQ(headerBytes, static_cast<size_t>(header.HeaderLength()));\notherSubMsg.SetHeader(header);\npBody = &buffer[0] + header.HeaderLength();\n\n// Set the topic length to an illegal value.\nuint64_t topicLength = maxTopicLength + 1;\nmemcpy(pBody, &topicLength, sizeof(topicLength));\n\nEXPECT_EQ(otherSubMsg.Unpack(pBody), 0u);\n```\n", "markup": "markdown", "html": "<p>Checking the return value looks like a good expectation to me. If the topic exceeds the maximum length we should expect a <code>0</code>, otherwise a value greater than <code>0</code>.</p>\n<p>I understand that right now you can create a <code>SubscriptionMessage</code> (for example) with a large topic, call to <code>Pack()</code>, and then, check that <code>Unpack()</code> returns <code>0</code>. However, at some point we will prevent to create a <code>SubscriptionMessage</code> with a large topic, so this test won't work in the future. I'd suggest to test <code>Unpack()</code> with a valid <code>SubscriptionMessage</code>, call <code>Pack()</code>, and then, manually modify the <code>topicLength</code> field in the serialized data. E.g.:</p>\n<p>Serialize a valid <code>SubscriptionMessage</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Pack a SubscriptionMsg.</span>\n<span class=\"n\">SubscriptionMsg</span> <span class=\"nf\">subMsg</span><span class=\"p\">(</span><span class=\"n\">otherHeader</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">);</span>\n<span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">subMsg</span><span class=\"p\">.</span><span class=\"n\">MsgLength</span><span class=\"p\">());</span>\n<span class=\"n\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">subMsg</span><span class=\"p\">.</span><span class=\"n\">Pack</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n<span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">,</span> <span class=\"n\">subMsg</span><span class=\"p\">.</span><span class=\"n\">MsgLength</span><span class=\"p\">());</span>\n</pre></div>\n\n\n<p>Manually modify the <code>topicLength</code> field of the serialized <code>SubscriptionMsg</code> before calling <code>Unpack()</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Unpack a SubscriptionMsg with a long topic.</span>\n<span class=\"n\">SubscriptionMsg</span> <span class=\"n\">otherSubMsg</span><span class=\"p\">;</span>\n<span class=\"n\">headerBytes</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">Unpack</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n<span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"n\">headerBytes</span><span class=\"p\">,</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">size_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">HeaderLength</span><span class=\"p\">()));</span>\n<span class=\"n\">otherSubMsg</span><span class=\"p\">.</span><span class=\"n\">SetHeader</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">);</span>\n<span class=\"n\">pBody</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">HeaderLength</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Set the topic length to an illegal value.</span>\n<span class=\"kt\">uint64_t</span> <span class=\"n\">topicLength</span> <span class=\"o\">=</span> <span class=\"n\">maxTopicLength</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">pBody</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">topicLength</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">topicLength</span><span class=\"p\">));</span>\n\n<span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"n\">otherSubMsg</span><span class=\"p\">.</span><span class=\"n\">Unpack</span><span class=\"p\">(</span><span class=\"n\">pBody</span><span class=\"p\">),</span> <span class=\"mi\">0u</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "created_on": "2016-06-05T17:53:36.989077+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-05T22:04:24.375768+00:00", "type": "issue_comment", "id": 28285290}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28369142.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28369142"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-06-08T17:21:49.103602+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 28369142}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28373923.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28373923"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Should I update Discovery documentation (update the topic length type)?", "markup": "markdown", "html": "<p>Should I update Discovery documentation (update the topic length type)?</p>", "type": "rendered"}, "created_on": "2016-06-08T21:56:13.452586+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28373923}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28374727.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28374727"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "@nampi +1. The ideal way of doing it is include the update in the PR with code changes so all together go into the repository at the same time,", "markup": "markdown", "html": "<p>@nampi +1. The ideal way of doing it is include the update in the PR with code changes so all together go into the repository at the same time,</p>", "type": "rendered"}, "created_on": "2016-06-08T23:00:29.657863+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 28374727}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28847749.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28847749"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Should I update a documentation now? I can update all documentation (connected with my tasks) later together in one pull request.", "markup": "markdown", "html": "<p>Should I update a documentation now? I can update all documentation (connected with my tasks) later together in one pull request.</p>", "type": "rendered"}, "created_on": "2016-06-28T20:10:56.117224+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28847749}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28903211.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28903211"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "@nampi , please go ahead and create a new pull request to update the documentation.", "markup": "markdown", "html": "<p>@nampi , please go ahead and create a new pull request to update the documentation.</p>", "type": "rendered"}, "created_on": "2016-06-30T17:01:27.719525+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-30T17:01:33.777773+00:00", "type": "issue_comment", "id": 28903211}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/28977809.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-28977809"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Update doc [here](#!/ignitionrobotics/ign-transport/pull-requests/156/issue_43-update-doc-file/diff).", "markup": "markdown", "html": "<p>Update doc <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/156/issue_43-update-doc-file/diff\" rel=\"nofollow\">here</a>.</p>", "type": "rendered"}, "created_on": "2016-07-05T02:31:40.455356+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28977809}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43/comments/29607797.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/43#comment-29607797"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/43.json"}}, "type": "issue", "id": 43, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "Restrict maximum topic length"}, "content": {"raw": "Done in pull request #142, pull request #152 and changes documented in pull request #156.", "markup": "markdown", "html": "<p>Done in <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/142/restrict-a-topic-length\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #142</a>, <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/152/issue-50-adding-restriction-on-maximum\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #152</a> and changes documented in <a href=\"#!/ignitionrobotics/ign-transport/pull-requests/156/issue_43-update-doc-file\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #156</a>.</p>", "type": "rendered"}, "created_on": "2016-08-02T17:57:06.494378+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 29607797}], "page": 1, "size": 15}