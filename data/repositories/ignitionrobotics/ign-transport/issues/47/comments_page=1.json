{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28847881.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28847881"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "Here is a brief summary of a discussion:\n\n* A potential signature: \n```\n#!c++\n\nbool WaitForSubscribers(const std::string &_topic, const int _timeout = -1);\n```\n* A [branch](#!/ignitionrobotics/ign-transport/branches/compare/wait_for_subscribers%0Ddefault#diff) to start with", "markup": "markdown", "html": "<p>Here is a brief summary of a discussion:</p>\n<ul>\n<li>A potential signature: </li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">bool</span> <span class=\"nf\">WaitForSubscribers</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">_timeout</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<ul>\n<li>A <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/branches/compare/wait_for_subscribers%0Ddefault#diff\" rel=\"nofollow\">branch</a> to start with</li>\n</ul>", "type": "rendered"}, "created_on": "2016-06-28T20:16:55.192015+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-29T01:20:05.417758+00:00", "type": "issue_comment", "id": 28847881}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28898899.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28898899"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "@caguero \n\n1. Why do you use this method: ```std::find(advTopics.begin(), advTopics.end(), topic) == advTopics.end()```? Is is better than ```advTopics.find(topic) != advTopics.end()```?\n2. Why do you add this function ```bool TopicWatcher::Blocked() const```?", "markup": "markdown", "html": "<p>@caguero </p>\n<ol>\n<li>Why do you use this method: <code>std::find(advTopics.begin(), advTopics.end(), topic) == advTopics.end()</code>? Is is better than <code>advTopics.find(topic) != advTopics.end()</code>?</li>\n<li>Why do you add this function <code>bool TopicWatcher::Blocked() const</code>?</li>\n</ol>", "type": "rendered"}, "created_on": "2016-06-30T14:08:29.246471+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-06-30T16:10:01.441010+00:00", "type": "issue_comment", "id": 28898899}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28902197.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28902197"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "My thoughts:\n\n1. Being advTopics an `std::vector` are you sure that you can use `advTopics.find()` method? I don't see it in the API.\n2. When defining API functions for a class we need to thing about how the users of the class are going to use the functionality and create the appropriate functions. If we build an example, it is possible that it does not use all the functions in the APi. This does not mean that we should remove them.", "markup": "markdown", "html": "<p>My thoughts:</p>\n<ol>\n<li>Being advTopics an <code>std::vector</code> are you sure that you can use <code>advTopics.find()</code> method? I don't see it in the API.</li>\n<li>When defining API functions for a class we need to thing about how the users of the class are going to use the functionality and create the appropriate functions. If we build an example, it is possible that it does not use all the functions in the APi. This does not mean that we should remove them.</li>\n</ol>", "type": "rendered"}, "created_on": "2016-06-30T16:07:16.454996+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 28902197}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28902412.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28902412"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "1. Thanks. I didn't notice that ```std::vector<std::string> AdvertisedTopics() const;``` but ```std::unordered_set<std::string> &TopicsAdvertised() const;```. Why do you use different data structure for this function?", "markup": "markdown", "html": "<ol>\n<li>Thanks. I didn't notice that <code>std::vector&lt;std::string&gt; AdvertisedTopics() const;</code> but <code>std::unordered_set&lt;std::string&gt; &amp;TopicsAdvertised() const;</code>. Why do you use different data structure for this function?</li>\n</ol>", "type": "rendered"}, "created_on": "2016-06-30T16:17:29.734744+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28902412}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28903560.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28903560"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "1. Uhmm. I think this is a mistake. For some reason, `TopicsAdvertised()`, `TopicsSubscribed()` and `SrvsAdvertised()` are duplicated. We should keep only one version of them. Probably in a separate pull request. Good catch.", "markup": "markdown", "html": "<ol>\n<li>Uhmm. I think this is a mistake. For some reason, <code>TopicsAdvertised()</code>, <code>TopicsSubscribed()</code> and <code>SrvsAdvertised()</code> are duplicated. We should keep only one version of them. Probably in a separate pull request. Good catch.</li>\n</ol>", "type": "rendered"}, "created_on": "2016-06-30T17:21:59.030916+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-30T17:22:26.959447+00:00", "type": "issue_comment", "id": 28903560}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28903625.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28903625"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "2 . I don't quite remember the specific use case for `Blocked()` but it doesn't look to me like a crazy function. You can use it to check from a different thread if a topicWatcher is blocked. Keep it or not, it's your call.", "markup": "markdown", "html": "<p>2 . I don't quite remember the specific use case for <code>Blocked()</code> but it doesn't look to me like a crazy function. You can use it to check from a different thread if a topicWatcher is blocked. Keep it or not, it's your call.</p>", "type": "rendered"}, "created_on": "2016-06-30T17:25:43.988344+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-06-30T17:26:05.595046+00:00", "type": "issue_comment", "id": 28903625}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28906682.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28906682"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "3 . There is a new block in ```example/publisher.cc```:\n\n```\n#!c++\n\nif (!node.WaitForSubscribers(topic, 10000))\n{\n  std::cerr << \"No subscribers available\" << std::endl;\n  return 0;\n}\n```\nI cannot use ```CTRL-C``` to interrupt ```publisher```. I tried to use the same logic as in ```ReqHandler.hh``` to realize the functionality of ```WaitForSubscribers``` function. I can interrupt ```requester``` with ```CTRL-C```. Could you give any recommendations how can I debug this problem, please? My current code is [here](https://bitbucket.org/nampi/ign-transport/pull-requests/4/issue_47/diff). It is far from final version, but it works on my examples.", "markup": "markdown", "html": "<p>3 . There is a new block in <code>example/publisher.cc</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">WaitForSubscribers</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;No subscribers available&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I cannot use <code>CTRL-C</code> to interrupt <code>publisher</code>. I tried to use the same logic as in <code>ReqHandler.hh</code> to realize the functionality of <code>WaitForSubscribers</code> function. I can interrupt <code>requester</code> with <code>CTRL-C</code>. Could you give any recommendations how can I debug this problem, please? My current code is <a data-is-external-link=\"true\" href=\"https://bitbucket.org/nampi/ign-transport/pull-requests/4/issue_47/diff\" rel=\"nofollow\">here</a>. It is far from final version, but it works on my examples.</p>", "type": "rendered"}, "created_on": "2016-06-30T20:43:04.795133+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 28906682}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28935492.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28935492"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-07-02T00:21:35.422808+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 28935492}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/28935497.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-28935497"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-07-02T00:21:46.147124+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 28935497}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29049895.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29049895"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "3 . This is expected because we're capturing the CTRL-C in our signal handler and the only thing we're doing is setting a boolean variable `g_terminatePub` to true. This variable is only used in the `while` loop that sends messages every second. Our `WaitForSubscribers()` call is executed before the `while` loop, therefore changing the boolean variable doesn't have any effect.\n\nYou could modify the code for something like this:\n\n\n```\n#!c++\n\nint counter = 0;\nwhile (!node.WaitForSubscribers(topic, 1000))\n{\n  if (g_terminatePub)\n    return 0;\n\n  if (++counter == 10)\n  {\n    std::cerr << \"No subscribers available\" << std::endl;\n    return 0;\n  }\n}\n```\n\n\n", "markup": "markdown", "html": "<p>3 . This is expected because we're capturing the CTRL-C in our signal handler and the only thing we're doing is setting a boolean variable <code>g_terminatePub</code> to true. This variable is only used in the <code>while</code> loop that sends messages every second. Our <code>WaitForSubscribers()</code> call is executed before the <code>while</code> loop, therefore changing the boolean variable doesn't have any effect.</p>\n<p>You could modify the code for something like this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">WaitForSubscribers</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">g_terminatePub</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">counter</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;No subscribers available&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2016-07-07T17:28:15.626361+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-07-07T17:29:02.055021+00:00", "type": "issue_comment", "id": 29049895}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29077869.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29077869"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "3 . Ok. I'm writing tests now. I prepared some tests, but I am not confident that they covered all cases.", "markup": "markdown", "html": "<p>3 . Ok. I'm writing tests now. I prepared some tests, but I am not confident that they covered all cases.</p>", "type": "rendered"}, "created_on": "2016-07-08T18:52:41.840069+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 29077869}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29154258.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29154258"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "[pr](#!/ignitionrobotics/ign-transport/pull-requests/158/issue_47/diff).\n\n3 . I changed the place of signal handlers in ```publisher.cc```. It is shorter in my opinion. ", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/158/issue_47/diff\" rel=\"nofollow\">pr</a>.</p>\n<p>3 . I changed the place of signal handlers in <code>publisher.cc</code>. It is shorter in my opinion. </p>", "type": "rendered"}, "created_on": "2016-07-13T02:36:25.708832+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 29154258}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29197743.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29197743"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "4 . Why are some classes declared with ```IGNITION_TRANSPORT_VISIBLE```? For instance, why ```TopicStorage``` is  ```IGNITION_TRANSPORT_VISIBLE```, but ```HandlerStorage``` not?", "markup": "markdown", "html": "<p>4 . Why are some classes declared with <code>IGNITION_TRANSPORT_VISIBLE</code>? For instance, why <code>TopicStorage</code> is  <code>IGNITION_TRANSPORT_VISIBLE</code>, but <code>HandlerStorage</code> not?</p>", "type": "rendered"}, "created_on": "2016-07-14T12:09:30.276443+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-07-14T12:33:00.889750+00:00", "type": "issue_comment", "id": 29197743}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29207275.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29207275"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "`HandlerStorage` should have `IGNITION_TRANSPORT_VISIBLE`, it's a bug. Good catch. This is for declaring the symbol visibility in the library. ", "markup": "markdown", "html": "<p><code>HandlerStorage</code> should have <code>IGNITION_TRANSPORT_VISIBLE</code>, it's a bug. Good catch. This is for declaring the symbol visibility in the library. </p>", "type": "rendered"}, "created_on": "2016-07-14T19:09:05.205983+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 29207275}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29209478.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29209478"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "5 . I don't understand what to write in the ```\\class``` section for documentation if I move ```TopicWatcherPrivate``` class inside ```TopicWatcher.cc``` file.\n\n1)\n```\n#!c++\n\n /// \\class TopicWatcherPrivate TopicWatcher.cc\n /// ignition/transport/TopicWatcher.cc\n /// \\brief Private data for TopicWatcher class.\n class TopicWatcherPrivate\n```\n\n2)\n```\n#!c++\n\n /// \\class TopicWatcherPrivate TopicWatcher.hh\n /// ignition/transport/TopicWatcher.hh\n /// \\brief Private data for TopicWatcher class.\n class TopicWatcherPrivate\n```\n\nI find this template ```\\class <name> [<header-file>] [<header-name>]``` and I think that the second case is right.", "markup": "markdown", "html": "<p>5 . I don't understand what to write in the <code>\\class</code> section for documentation if I move <code>TopicWatcherPrivate</code> class inside <code>TopicWatcher.cc</code> file.</p>\n<p>1)</p>\n<div class=\"codehilite language-c++\"><pre><span></span> <span class=\"c1\">/// \\class TopicWatcherPrivate TopicWatcher.cc</span>\n <span class=\"c1\">/// ignition/transport/TopicWatcher.cc</span>\n <span class=\"c1\">/// \\brief Private data for TopicWatcher class.</span>\n <span class=\"k\">class</span> <span class=\"nc\">TopicWatcherPrivate</span>\n</pre></div>\n\n\n<p>2)</p>\n<div class=\"codehilite language-c++\"><pre><span></span> <span class=\"c1\">/// \\class TopicWatcherPrivate TopicWatcher.hh</span>\n <span class=\"c1\">/// ignition/transport/TopicWatcher.hh</span>\n <span class=\"c1\">/// \\brief Private data for TopicWatcher class.</span>\n <span class=\"k\">class</span> <span class=\"nc\">TopicWatcherPrivate</span>\n</pre></div>\n\n\n<p>I find this template <code>\\class &lt;name&gt; [&lt;header-file&gt;] [&lt;header-name&gt;]</code> and I think that the second case is right.</p>", "type": "rendered"}, "created_on": "2016-07-14T21:29:40.865309+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-07-14T21:30:15.813371+00:00", "type": "issue_comment", "id": 29209478}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29209613.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29209613"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "Quote (@caguero) : ```So, after the 2.0.0 release, if your patch is ABI compatible you should target it to ign-transport2, otherwise to default.```\n\n6 . What is the right branch for WaitForSubscribers issue?\n\n7 . How can I check is my patch is ABI compatible or not?", "markup": "markdown", "html": "<p>Quote (@caguero) : <code>So, after the 2.0.0 release, if your patch is ABI compatible you should target it to ign-transport2, otherwise to default.</code></p>\n<p>6 . What is the right branch for WaitForSubscribers issue?</p>\n<p>7 . How can I check is my patch is ABI compatible or not?</p>", "type": "rendered"}, "created_on": "2016-07-14T21:40:12.923325+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-07-14T21:41:29.760739+00:00", "type": "issue_comment", "id": 29209613}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29210925.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29210925"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "**5:** yes the second one seems to be like the corret option.\n\n**6:** as a general rule when implementing new features you should target to the latest released branch (in this case `ign-transport2`). Depending on the changes that you need to make in the code, if your code breaks the API/ABI (see **7**) then you can not use the latest released branch and the pull request should be pointed to `default` branch (which will become the ignition transport 3 release at some moment in the future).\n\n**7:** Theory: this [kde page](https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B) explains well what you can do and what you can not do in order to respect the ABI. For checking, you give a look at running the [ABI complicance checker](http://ispras.linuxbase.org/index.php/ABI_compliance_checker). For helping our developers and get rid of having to setup locally the ABI checker we have an automatic job in our building farm that can be used to check if two branches are ABI compatibles. Mail me if you want to use it and I will send you credentials.", "markup": "markdown", "html": "<p><strong>5:</strong> yes the second one seems to be like the corret option.</p>\n<p><strong>6:</strong> as a general rule when implementing new features you should target to the latest released branch (in this case <code>ign-transport2</code>). Depending on the changes that you need to make in the code, if your code breaks the API/ABI (see <strong>7</strong>) then you can not use the latest released branch and the pull request should be pointed to <code>default</code> branch (which will become the ignition transport 3 release at some moment in the future).</p>\n<p><strong>7:</strong> Theory: this <a data-is-external-link=\"true\" href=\"https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B\" rel=\"nofollow\">kde page</a> explains well what you can do and what you can not do in order to respect the ABI. For checking, you give a look at running the <a data-is-external-link=\"true\" href=\"http://ispras.linuxbase.org/index.php/ABI_compliance_checker\" rel=\"nofollow\">ABI complicance checker</a>. For helping our developers and get rid of having to setup locally the ABI checker we have an automatic job in our building farm that can be used to check if two branches are ABI compatibles. Mail me if you want to use it and I will send you credentials.</p>", "type": "rendered"}, "created_on": "2016-07-15T00:04:16.920964+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 29210925}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29230710.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29230710"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "8 . As I wrote before I should update the data structure of TopicWatcherStorage. What do you think about it?\n```std::map<std::pair<topic, topic type>, std::map<node uuid, std::vector<watcher uuid> > > data;```\n\ndata type:\n```std::map<std::pair<std::string, std::string>, std::map<std::string, std::vector<std::string> > > data;```\n\n", "markup": "markdown", "html": "<p>8 . As I wrote before I should update the data structure of TopicWatcherStorage. What do you think about it?\n<code>std::map&lt;std::pair&lt;topic, topic type&gt;, std::map&lt;node uuid, std::vector&lt;watcher uuid&gt; &gt; &gt; data;</code></p>\n<p>data type:\n<code>std::map&lt;std::pair&lt;std::string, std::string&gt;, std::map&lt;std::string, std::vector&lt;std::string&gt; &gt; &gt; data;</code></p>", "type": "rendered"}, "created_on": "2016-07-15T19:04:10.792730+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": null, "type": "issue_comment", "id": 29230710}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29232574.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29232574"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "8: I feel that the `TopicWatcher` class should contain some members and accessors about the topic and type that is watching. Then, the data structure to store all watchers might look like:\n\n`std::map<std::string, std::map<std::string, std::vector<TopicWatcher>>>`\n\nThe first string could be the topic and the second string could be the node UUID. What do you think?", "markup": "markdown", "html": "<p>8: I feel that the <code>TopicWatcher</code> class should contain some members and accessors about the topic and type that is watching. Then, the data structure to store all watchers might look like:</p>\n<p><code>std::map&lt;std::string, std::map&lt;std::string, std::vector&lt;TopicWatcher&gt;&gt;&gt;</code></p>\n<p>The first string could be the topic and the second string could be the node UUID. What do you think?</p>", "type": "rendered"}, "created_on": "2016-07-15T21:54:08.354175+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2016-07-15T21:54:14.552983+00:00", "type": "issue_comment", "id": 29232574}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47/comments/29882717.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/47#comment-29882717"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/47.json"}}, "type": "issue", "id": 47, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "title": "WaitForSubscribers in ign.cc"}, "content": {"raw": "I have a problem with ```TopicWatcherStorage::RemoveWatchersForTopic()``` function. I don't understand how to delete topic watcher.\n\n\n```\n#!c++\n\n      /// \\brief Remove all the watchers for the topic.\n      /// \\param[in] _topic Topic name.\n      /// \\param[in] _typeName Message type.\n      /// \\return True when at least one watcher was removed or false otherwise.\n      public: bool RemoveWatchersForTopic(const std::string &_topic,\n        const std::string &_typeName)\n      {\n        size_t count = 0;\n        if (this->data.find(_topic) != this->data.end())\n        {\n          WatchersPerNode_M watchers = this->data.at(_topic);\n          for (auto &node : watchers)\n          {\n            for (auto &watcher : node.second)\n            {\n              std::shared_ptr<TopicWatcher> watcherPtr = watcher;\n              if (watcherPtr) {\n                if (watcherPtr->TopicType() == _typeName) {\n                  //TODO: delete topic watcher\n                  //this->data[_topic][node].erase(watcherPtr);\n                }\n              }\n              else\n                std::cerr << \"Topic watcher is NULL\" << std::endl;\n            }\n          }\n        }\n\n        return count > 0;\n      }\n```\n\nI create a ```new_watchers``` structure, but I can change this part of code.", "markup": "markdown", "html": "<p>I have a problem with <code>TopicWatcherStorage::RemoveWatchersForTopic()</code> function. I don't understand how to delete topic watcher.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"c1\">/// \\brief Remove all the watchers for the topic.</span>\n      <span class=\"c1\">/// \\param[in] _topic Topic name.</span>\n      <span class=\"c1\">/// \\param[in] _typeName Message type.</span>\n      <span class=\"c1\">/// \\return True when at least one watcher was removed or false otherwise.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"kt\">bool</span> <span class=\"n\">RemoveWatchersForTopic</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span>\n        <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_typeName</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"kt\">size_t</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">_topic</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n        <span class=\"p\">{</span>\n          <span class=\"n\">WatchersPerNode_M</span> <span class=\"n\">watchers</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">_topic</span><span class=\"p\">);</span>\n          <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"nl\">node</span> <span class=\"p\">:</span> <span class=\"n\">watchers</span><span class=\"p\">)</span>\n          <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"nl\">watcher</span> <span class=\"p\">:</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n              <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">TopicWatcher</span><span class=\"o\">&gt;</span> <span class=\"n\">watcherPtr</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"p\">;</span>\n              <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">watcherPtr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">watcherPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">TopicType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">_typeName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                  <span class=\"c1\">//TODO: delete topic watcher</span>\n                  <span class=\"c1\">//this-&gt;data[_topic][node].erase(watcherPtr);</span>\n                <span class=\"p\">}</span>\n              <span class=\"p\">}</span>\n              <span class=\"k\">else</span>\n                <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Topic watcher is NULL&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I create a <code>new_watchers</code> structure, but I can change this part of code.</p>", "type": "rendered"}, "created_on": "2016-08-16T01:04:34.737563+00:00", "user": {"display_name": "nampi", "uuid": "{89a67bdd-09e6-4c17-8014-48d97fa5c4c8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D"}, "html": {"href": "https://bitbucket.org/%7B89a67bdd-09e6-4c17-8014-48d97fa5c4c8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8/38230840-603b-4875-93fb-c2e81928dd69/128"}}, "nickname": "nampi", "type": "user", "account_id": "557058:6509b6f8-6263-4504-9cee-d12b08b0b4e8"}, "updated_on": "2016-08-16T13:32:38.057922+00:00", "type": "issue_comment", "id": 29882717}], "page": 1, "size": 20}