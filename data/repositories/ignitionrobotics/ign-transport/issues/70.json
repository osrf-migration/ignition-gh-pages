{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/70/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/70.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/70/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/70/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/70/service-with-no-request-and-empty-reply"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/70/vote"}}, "reporter": {"display_name": "Hamza Merzi\u0107", "uuid": "{2100f54d-6bc6-4db0-ada5-db7be9320606}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2100f54d-6bc6-4db0-ada5-db7be9320606%7D"}, "html": {"href": "https://bitbucket.org/%7B2100f54d-6bc6-4db0-ada5-db7be9320606%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:172a2e1e-2bf2-4054-9b9b-9d541ddc8e4e/ab842f18-c8ca-4a0c-a82a-6d4d39ffdb37/128"}}, "nickname": "hamzaethz", "type": "user", "account_id": "557058:172a2e1e-2bf2-4054-9b9b-9d541ddc8e4e"}, "title": "Service with \"no\" request and empty reply hangs.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I am using a service call to reset the Gazebo8 simulation. I want to make sure that the simulation is reset, or else the simulation should crash. Because of that, I am not sending any requests, and I don't really need a reply - I only need to check if executed is true, so the reply is Empty.\r\n\r\nThis is the client side:\r\n\r\n\r\n```\r\n#!c++\r\nvoid reset_cli() {\r\n  ignition::msgs::Empty rep;\r\n\r\n  bool result;\r\n  unsigned int timeout = 60000;\r\n\r\n  std::cerr << \"REQ\" << std::endl;\r\n  bool executed = node_.Request(\"/reset\", timeout, rep, result);\r\n  std::cerr << \"REQX\" << \" \" << executed << std::endl;\r\n}\r\n\r\n```\r\n\r\nand this is the server side:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nvoid reset_srv(ignition::msgs::Empty& rep, bool& result) {\r\n  std::cerr << \"REP\" << std::endl;\r\n  world_->Reset();\r\n  std::cerr << \"REPX\" << std::endl;\r\n  result = true;\r\n}\r\n```\r\n\r\nThis is the output that I receive:\r\n\r\n\r\n```\r\n#!\r\n\r\nService call connection callback\r\nPublisher:\r\n\tTopic: [@/PC:hmerzic@/reset]\r\n\tAddress: tcp://172.17.0.1:43415\r\n\tProcess UUID: e17eb6be-e789-44ed-9581-747f6aeb8da6\r\n\tNode UUID: 555ba7ab-4958-447f-8c75-06914564d44f\r\n\tSocket ID: 213e4994-ae82-4f78-b36a-bcc745f266fe\r\n\tRequest type: ignition.msgs.Empty\r\n\tResponse type: ignition.msgs.Empty\r\nAdvertise options:\r\n\tScope: All\r\n\r\nREQ\r\nFound a service call responser at [tcp://172.17.0.1:43415]\r\nMessage received requesting a service call\r\nREP\r\nREPX\r\n**HERE IT HANGS FOR 60 SECONDS**\r\nREQX 0\r\n```\r\n\r\nWhen I change the rep message type from Empty to Boolean, it works as it should. \r\n\r\nI also have a couple of questions, which I am not sure where to post (answers.gazebo?). \r\n\r\n1. Is there a better way to handle my use case, since I only want to know that the service is executed, and I don't need a request nor a reply?\r\n2. Since I am communicating with Gazebo, I have both ignition::transport::Node and gazebo::transport::NodePtr in my code. Do I need both of them, and if not, how to make it uniform?\r\n3. Are there any instructions to make the transport work in Docker?", "markup": "markdown", "html": "<p>I am using a service call to reset the Gazebo8 simulation. I want to make sure that the simulation is reset, or else the simulation should crash. Because of that, I am not sending any requests, and I don't really need a reply - I only need to check if executed is true, so the reply is Empty.</p>\n<p>This is the client side:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">reset_cli</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span> <span class=\"n\">rep</span><span class=\"p\">;</span>\n\n  <span class=\"kt\">bool</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n  <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">60000</span><span class=\"p\">;</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;REQ&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">executed</span> <span class=\"o\">=</span> <span class=\"n\">node_</span><span class=\"p\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"s\">&quot;/reset&quot;</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">rep</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">);</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;REQX&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">executed</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and this is the server side:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">reset_srv</span><span class=\"p\">(</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Empty</span><span class=\"o\">&amp;</span> <span class=\"n\">rep</span><span class=\"p\">,</span> <span class=\"kt\">bool</span><span class=\"o\">&amp;</span> <span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;REP&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">Reset</span><span class=\"p\">();</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;REPX&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This is the output that I receive:</p>\n<div class=\"codehilite\"><pre><span></span>Service call connection callback\nPublisher:\n    Topic: [@/PC:hmerzic@/reset]\n    Address: tcp://172.17.0.1:43415\n    Process UUID: e17eb6be-e789-44ed-9581-747f6aeb8da6\n    Node UUID: 555ba7ab-4958-447f-8c75-06914564d44f\n    Socket ID: 213e4994-ae82-4f78-b36a-bcc745f266fe\n    Request type: ignition.msgs.Empty\n    Response type: ignition.msgs.Empty\nAdvertise options:\n    Scope: All\n\nREQ\nFound a service call responser at [tcp://172.17.0.1:43415]\nMessage received requesting a service call\nREP\nREPX\n**HERE IT HANGS FOR 60 SECONDS**\nREQX 0\n</pre></div>\n\n\n<p>When I change the rep message type from Empty to Boolean, it works as it should. </p>\n<p>I also have a couple of questions, which I am not sure where to post (answers.gazebo?). </p>\n<ol>\n<li>Is there a better way to handle my use case, since I only want to know that the service is executed, and I don't need a request nor a reply?</li>\n<li>Since I am communicating with Gazebo, I have both ignition::transport::Node and gazebo::transport::NodePtr in my code. Do I need both of them, and if not, how to make it uniform?</li>\n<li>Are there any instructions to make the transport work in Docker?</li>\n</ol>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-08-08T16:37:27.727151+00:00", "milestone": null, "updated_on": "2017-08-29T11:11:23.261020+00:00", "type": "issue", "id": 70}