{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/1/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/1/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/1/type-checking"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/1/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Type checking", "component": null, "votes": 0, "watches": 2, "content": {"raw": "When a node advertises a topic, it should specify a type:\r\n\r\n```\r\n#!c++\r\n\r\nnode.Advertise<TYPE>(\"topic\"). \r\n```\r\n\r\nWhen the same node publishes a message with:\r\n\r\n\r\n```\r\n#!c++\r\n\r\nnode.Publish(\"topic\", msg)\r\n```\r\n\r\nWe should check that msg matches <TYPE> before publishing the message.\r\n\r\nOn the other side of the communication, the subscriber also registers a callback that has a specific type. Ex:\r\n\r\n```\r\n#!c++\r\n\r\nvoid cb(const std::string &_topic, const robot_msgs::StringMsg &_msg)\r\n{\r\n ...\r\n}\r\n\r\nnode.Subscribe(\"topic\", cb)\r\n```\r\n\r\nWhen a new message arrives to the subscriber, we should check that the message received and the message expected in the callback matches. As a bonus, we could send a hash string (MD5 or SHA) of the message definition to make sure that the message version is the same between publisher and subscriber.\r\n", "markup": "markdown", "html": "<p>When a node advertises a topic, it should specify a type:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Advertise</span><span class=\"o\">&lt;</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;topic&quot;</span><span class=\"p\">).</span> \n</pre></div>\n\n\n<p>When the same node publishes a message with:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"s\">&quot;topic&quot;</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>We should check that msg matches &lt;TYPE&gt; before publishing the message.</p>\n<p>On the other side of the communication, the subscriber also registers a callback that has a specific type. Ex:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">cb</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_topic</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">robot_msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_msg</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"s\">&quot;topic&quot;</span><span class=\"p\">,</span> <span class=\"n\">cb</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>When a new message arrives to the subscriber, we should check that the message received and the message expected in the callback matches. As a bonus, we could send a hash string (MD5 or SHA) of the message definition to make sure that the message version is the same between publisher and subscriber.</p>", "type": "rendered"}, "assignee": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-06-12T18:10:44.006221+00:00", "milestone": null, "updated_on": "2016-01-21T16:02:50.258467+00:00", "type": "issue", "id": 1}