{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-transport.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4249390a-7f55-404b-990d-817ba94cc7ac}ts=1533306"}}, "type": "repository", "name": "ign-transport", "full_name": "ignitionrobotics/ign-transport", "uuid": "{4249390a-7f55-404b-990d-817ba94cc7ac}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/25/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/25.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/25/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-transport/issues/25/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-transport/issues/25/message-delivery-and-handling-unreliable"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-transport/issues/25/vote"}}, "reporter": {"display_name": "Andrew Hundt", "uuid": "{1e508588-c010-4693-87e5-4923df91390d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1e508588-c010-4693-87e5-4923df91390d%7D"}, "html": {"href": "https://bitbucket.org/%7B1e508588-c010-4693-87e5-4923df91390d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fb975596131ce08ea7e7472f09b8209dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-1.png"}}, "nickname": "ahundt", "type": "user", "account_id": "557058:f565cbf4-e097-4b3f-b4db-4889856f7417"}, "title": "Message Delivery and handling unreliable connections robustly", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Is the design being built to handle unreliable and/or time delayed connections robustly?\r\n\r\nAnother crucial component of a messaging system is handling unreliable connections robustly. If connections begin to drop packets it is often undesirable to resend the data because the new data will be arriving anyway. \r\n\r\nIf data transfer becomes constricted, particularly due to lost packets, it is important to allow prioritization so that small messages containing the most important data can get through, such as motion commands and heartbeats. Images and other large data can be critical, but depending on the application the priorities really matter and systems can often operate in a reduced functionality mode. \r\n\r\nThe best combination for this is a circular buffer for receiving messages and a priority queue (or really the circular buffer equivalent would be better) for sending messages. \r\n\r\nAre you using buffer disassembly and reassembly via UDP? TCP breaks the requirements of many robotics applications and fails in the wrong way when packets are dropped and the throughput drops below the rate data is being sent. The resending of packets can also cause a connection to collapse when if it simply dropped packets the way UDP does later data would get through successfully. \r\n\r\nAlso, don't simply take my word for all of this search the literature on robust communication in robotics and you will be able to reach a conclusion independently as well. As mentioned in the other issue the fundamentals of the system you are implementing look amazing at a high level. However circular buffers, a higher performance protocol, and prioritization are killer features for a system that can span beyond research projects into high performance commercial products on inexpensive hardware. \r\n\r\nRelated issues:\r\n#!/ignitionrobotics/ign-transport/issue/24/circular-buffers\r\n#!/ignitionrobotics/ign-transport/issue/23/consider-flatbuffers", "markup": "markdown", "html": "<p>Is the design being built to handle unreliable and/or time delayed connections robustly?</p>\n<p>Another crucial component of a messaging system is handling unreliable connections robustly. If connections begin to drop packets it is often undesirable to resend the data because the new data will be arriving anyway. </p>\n<p>If data transfer becomes constricted, particularly due to lost packets, it is important to allow prioritization so that small messages containing the most important data can get through, such as motion commands and heartbeats. Images and other large data can be critical, but depending on the application the priorities really matter and systems can often operate in a reduced functionality mode. </p>\n<p>The best combination for this is a circular buffer for receiving messages and a priority queue (or really the circular buffer equivalent would be better) for sending messages. </p>\n<p>Are you using buffer disassembly and reassembly via UDP? TCP breaks the requirements of many robotics applications and fails in the wrong way when packets are dropped and the throughput drops below the rate data is being sent. The resending of packets can also cause a connection to collapse when if it simply dropped packets the way UDP does later data would get through successfully. </p>\n<p>Also, don't simply take my word for all of this search the literature on robust communication in robotics and you will be able to reach a conclusion independently as well. As mentioned in the other issue the fundamentals of the system you are implementing look amazing at a high level. However circular buffers, a higher performance protocol, and prioritization are killer features for a system that can span beyond research projects into high performance commercial products on inexpensive hardware. </p>\n<p>Related issues:\n<a href=\"#!/ignitionrobotics/ign-transport/issue/24/circular-buffers\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-transport/issue/24/circular-buffers</a>\n<a href=\"#!/ignitionrobotics/ign-transport/issue/23/consider-flatbuffers\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-transport/issue/23/consider-flatbuffers</a></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2015-01-20T07:44:20.333520+00:00", "milestone": null, "updated_on": "2015-01-20T07:44:20.333520+00:00", "type": "issue", "id": 25}