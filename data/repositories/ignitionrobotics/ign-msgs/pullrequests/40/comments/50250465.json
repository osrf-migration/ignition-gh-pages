{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/40/comments/50250465.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/pull-requests/40/_/diff#comment-50250465"}}, "parent": {"id": 50168483, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/40/comments/50168483.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/pull-requests/40/_/diff#comment-50168483"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/40.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/pull-requests/40"}}, "title": "Use ignition CMake"}, "content": {"raw": "It seems that Visual Studio [doesn't let you differentiate](https://stackoverflow.com/a/2542006) between \"system\" headers and non-\"system\" headers.\n\nOur protoc plugin class [very adeptly adds suppressions for these warnings](#!/ignitionrobotics/ign-msgs/src/1bad2f95d5389492da789866bc1f9aa61576ee53/src/Generator.cc?at=default&fileviewer=file-view-default#Generator.cc-84), but the suppression is happening at the `includes` insertion point, which comes immediately *after* the protobuf headers that are emitting the warnings. Based on the [protoc plugin documentation](https://developers.google.com/protocol-buffers/docs/reference/cpp-generated#plugins) this is the earliest insertion point available. I'm not seeing any information on injecting code without using an insertion point, or creating our own insertion points, so it seems we won't be able to use the protoc plugin to handle this.\n\nI'm realizing that my earlier attempt to suppress the warnings actually did work; it just didn't go far enough, because it (intentionally) doesn't impact the `*.cc` translation units like `Factory.cc`, `ign.cc`, and all the unit tests.\n\nI think the next thing I'll try is, in all the files that we have control over, wrap any instances of `#include <google/protobuf/*.h>` and `#include <ignition/msgs/*.pb.h>` in MSVC warning suppression pragmas.\n\nIdeally, in the long-term it would be nice if we could leverage the warning suppression system in `ign-common` for this, but that would add a dependency to `ign-msgs`, which is kind of a big change to make, so for the short-term I'll just write the pragmas manually.\n\nI'm going to make a radical long-term proposal for us to chew on which we can discuss at a later date:\n\n1. Merge `ign-common` and `ign-cmake`, renaming it all to something like `ign-common` or `ign-utility`\n2. Anything in `ign-common` that has a dependency must be either taken over by another ignition project or made into its own ignition project\n\nThings like cmake utilities, filesystem utilities, and warning suppression utilities would be easily shared across the ignition projects without needless dependencies.", "markup": "markdown", "html": "<p>It seems that Visual Studio <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/a/2542006\" rel=\"nofollow\">doesn't let you differentiate</a> between \"system\" headers and non-\"system\" headers.</p>\n<p>Our protoc plugin class <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-msgs/src/1bad2f95d5389492da789866bc1f9aa61576ee53/src/Generator.cc?at=default&amp;fileviewer=file-view-default#Generator.cc-84\" rel=\"nofollow\">very adeptly adds suppressions for these warnings</a>, but the suppression is happening at the <code>includes</code> insertion point, which comes immediately <em>after</em> the protobuf headers that are emitting the warnings. Based on the <a data-is-external-link=\"true\" href=\"https://developers.google.com/protocol-buffers/docs/reference/cpp-generated#plugins\" rel=\"nofollow\">protoc plugin documentation</a> this is the earliest insertion point available. I'm not seeing any information on injecting code without using an insertion point, or creating our own insertion points, so it seems we won't be able to use the protoc plugin to handle this.</p>\n<p>I'm realizing that my earlier attempt to suppress the warnings actually did work; it just didn't go far enough, because it (intentionally) doesn't impact the <code>*.cc</code> translation units like <code>Factory.cc</code>, <code>ign.cc</code>, and all the unit tests.</p>\n<p>I think the next thing I'll try is, in all the files that we have control over, wrap any instances of <code>#include &lt;google/protobuf/*.h&gt;</code> and <code>#include &lt;ignition/msgs/*.pb.h&gt;</code> in MSVC warning suppression pragmas.</p>\n<p>Ideally, in the long-term it would be nice if we could leverage the warning suppression system in <code>ign-common</code> for this, but that would add a dependency to <code>ign-msgs</code>, which is kind of a big change to make, so for the short-term I'll just write the pragmas manually.</p>\n<p>I'm going to make a radical long-term proposal for us to chew on which we can discuss at a later date:</p>\n<ol>\n<li>Merge <code>ign-common</code> and <code>ign-cmake</code>, renaming it all to something like <code>ign-common</code> or <code>ign-utility</code></li>\n<li>Anything in <code>ign-common</code> that has a dependency must be either taken over by another ignition project or made into its own ignition project</li>\n</ol>\n<p>Things like cmake utilities, filesystem utilities, and warning suppression utilities would be easily shared across the ignition projects without needless dependencies.</p>", "type": "rendered"}, "created_on": "2017-11-22T20:03:39.987198+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-22T20:08:01.797740+00:00", "type": "pullrequest_comment", "id": 50250465}