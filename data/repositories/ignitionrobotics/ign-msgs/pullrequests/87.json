{"rendered": {"description": {"raw": "## Motivation\r\n\r\nOn Gazebo Classic\u2122,  entities had integer unique IDs, and also string names, so several messages accept both types of identification. See [pose.proto](#!/ignitionrobotics/ign-msgs/src/954c692189352b70b1946b4b14d0293416d14b78/proto/ignition/msgs/pose.proto?at=default&fileviewer=file-view-default#pose.proto-36) for example.\r\n\r\nWhile `id`s are efficient and unique, `name`s are user-friendly, so it's good to have both options.\r\n\r\n### Name uniqueness\r\n\r\nWe currently have several issues on Gazebo Classic due to names (and scoped names) not being unique. The `entity_info` service [can't tell links from joints](https://bitbucket.org/osrf/gazebo/issues/1451/modellistwidget-doesnt-display-joint-info), the `entity_delete` service can't tell models from lights...\r\n\r\nOne solution for this could involve enforcing unique scoped names. However, we would also like to let users rename entities after they've been created. This poses a problem in the ECS, because the name component will need to be writable, but we can't count on the systems to enforce uniqueness.\r\n\r\nSo my suggestion is to use the following assumptions:\r\n\r\n1. IDs are unique across all types.\r\n1. Names are not unique across types.\r\n1. Names may be unique within a type, but we will not enforce this.\r\n\r\n## Summary\r\n\r\nI propose the following message, which has `id`, `name` and `type`. The way I expect it to be used is:\r\n\r\n~~~\r\nif id not null\r\n  use id\r\nelse if name not null and type not null\r\n  use name + type\r\nelse\r\n  error\r\nend\r\n~~~\r\n\r\n> I considered using `oneof`, but certain use cases may want to use the message to notify all fields together, so they can all be set.\r\n\r\nWhen using `name` + `type`, the user should be aware that if many entities have the same combination, only one will be affected.\r\n\r\nIf this is accepted, `kNullEntity` should be changed to zero on `ign-gazebo`.\r\n\r\n## Immediate future\r\n\r\nIf this is accepted, its first user will be the new entity delete service, and in the future we should use it for any other commands that refer to specific entities.", "markup": "markdown", "html": "<h2 id=\"markdown-header-motivation\">Motivation</h2>\n<p>On Gazebo Classic\u2122,  entities had integer unique IDs, and also string names, so several messages accept both types of identification. See <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-msgs/src/954c692189352b70b1946b4b14d0293416d14b78/proto/ignition/msgs/pose.proto?at=default&amp;fileviewer=file-view-default#pose.proto-36\" rel=\"nofollow\">pose.proto</a> for example.</p>\n<p>While <code>id</code>s are efficient and unique, <code>name</code>s are user-friendly, so it's good to have both options.</p>\n<h3 id=\"markdown-header-name-uniqueness\">Name uniqueness</h3>\n<p>We currently have several issues on Gazebo Classic due to names (and scoped names) not being unique. The <code>entity_info</code> service <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/issues/1451/modellistwidget-doesnt-display-joint-info\" rel=\"nofollow\">can't tell links from joints</a>, the <code>entity_delete</code> service can't tell models from lights...</p>\n<p>One solution for this could involve enforcing unique scoped names. However, we would also like to let users rename entities after they've been created. This poses a problem in the ECS, because the name component will need to be writable, but we can't count on the systems to enforce uniqueness.</p>\n<p>So my suggestion is to use the following assumptions:</p>\n<ol>\n<li>IDs are unique across all types.</li>\n<li>Names are not unique across types.</li>\n<li>Names may be unique within a type, but we will not enforce this.</li>\n</ol>\n<h2 id=\"markdown-header-summary\">Summary</h2>\n<p>I propose the following message, which has <code>id</code>, <code>name</code> and <code>type</code>. The way I expect it to be used is:</p>\n<div class=\"codehilite\"><pre><span></span>if id not null\n  use id\nelse if name not null and type not null\n  use name + type\nelse\n  error\nend\n</pre></div>\n\n\n<blockquote>\n<p>I considered using <code>oneof</code>, but certain use cases may want to use the message to notify all fields together, so they can all be set.</p>\n</blockquote>\n<p>When using <code>name</code> + <code>type</code>, the user should be aware that if many entities have the same combination, only one will be affected.</p>\n<p>If this is accepted, <code>kNullEntity</code> should be changed to zero on <code>ign-gazebo</code>.</p>\n<h2 id=\"markdown-header-immediate-future\">Immediate future</h2>\n<p>If this is accepted, its first user will be the new entity delete service, and in the future we should use it for any other commands that refer to specific entities.</p>", "type": "rendered"}, "title": {"raw": "[A-6] Message to uniquely identify an entity", "markup": "markdown", "html": "<p>[A-6] Message to uniquely identify an entity</p>", "type": "rendered"}}, "type": "pullrequest", "description": "## Motivation\r\n\r\nOn Gazebo Classic\u2122,  entities had integer unique IDs, and also string names, so several messages accept both types of identification. See [pose.proto](#!/ignitionrobotics/ign-msgs/src/954c692189352b70b1946b4b14d0293416d14b78/proto/ignition/msgs/pose.proto?at=default&fileviewer=file-view-default#pose.proto-36) for example.\r\n\r\nWhile `id`s are efficient and unique, `name`s are user-friendly, so it's good to have both options.\r\n\r\n### Name uniqueness\r\n\r\nWe currently have several issues on Gazebo Classic due to names (and scoped names) not being unique. The `entity_info` service [can't tell links from joints](https://bitbucket.org/osrf/gazebo/issues/1451/modellistwidget-doesnt-display-joint-info), the `entity_delete` service can't tell models from lights...\r\n\r\nOne solution for this could involve enforcing unique scoped names. However, we would also like to let users rename entities after they've been created. This poses a problem in the ECS, because the name component will need to be writable, but we can't count on the systems to enforce uniqueness.\r\n\r\nSo my suggestion is to use the following assumptions:\r\n\r\n1. IDs are unique across all types.\r\n1. Names are not unique across types.\r\n1. Names may be unique within a type, but we will not enforce this.\r\n\r\n## Summary\r\n\r\nI propose the following message, which has `id`, `name` and `type`. The way I expect it to be used is:\r\n\r\n~~~\r\nif id not null\r\n  use id\r\nelse if name not null and type not null\r\n  use name + type\r\nelse\r\n  error\r\nend\r\n~~~\r\n\r\n> I considered using `oneof`, but certain use cases may want to use the message to notify all fields together, so they can all be set.\r\n\r\nWhen using `name` + `type`, the user should be aware that if many entities have the same combination, only one will be affected.\r\n\r\nIf this is accepted, `kNullEntity` should be changed to zero on `ign-gazebo`.\r\n\r\n## Immediate future\r\n\r\nIf this is accepted, its first user will be the new entity delete service, and in the future we should use it for any other commands that refer to specific entities.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-msgs/pullrequests/87/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-msgs/diffstat/ignitionrobotics/ign-msgs:2f8a97261926%0D5e4d888561ba?from_pullrequest_id=87"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/87/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/87.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/87/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-msgs/pullrequests/87/merge"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/pull-requests/87"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/87/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-msgs/diff/ignitionrobotics/ign-msgs:2f8a97261926%0D5e4d888561ba?from_pullrequest_id=87"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-msgs/pullrequests/87/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-msgs/pullrequests/87/statuses_page=1.json"}}, "title": "[A-6] Message to uniquely identify an entity", "close_source_branch": true, "reviewers": [], "id": 87, "destination": {"commit": {"hash": "5e4d888561ba", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs/commit/5e4d888561ba.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/commits/5e4d888561ba"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a9e7131f-94ac-4283-ae4e-330068146520}ts=1533307"}}, "type": "repository", "name": "ign-msgs", "full_name": "ignitionrobotics/ign-msgs", "uuid": "{a9e7131f-94ac-4283-ae4e-330068146520}"}, "branch": {"name": "gz11"}}, "created_on": "2019-02-02T02:12:37.609592+00:00", "summary": {"raw": "## Motivation\r\n\r\nOn Gazebo Classic\u2122,  entities had integer unique IDs, and also string names, so several messages accept both types of identification. See [pose.proto](#!/ignitionrobotics/ign-msgs/src/954c692189352b70b1946b4b14d0293416d14b78/proto/ignition/msgs/pose.proto?at=default&fileviewer=file-view-default#pose.proto-36) for example.\r\n\r\nWhile `id`s are efficient and unique, `name`s are user-friendly, so it's good to have both options.\r\n\r\n### Name uniqueness\r\n\r\nWe currently have several issues on Gazebo Classic due to names (and scoped names) not being unique. The `entity_info` service [can't tell links from joints](https://bitbucket.org/osrf/gazebo/issues/1451/modellistwidget-doesnt-display-joint-info), the `entity_delete` service can't tell models from lights...\r\n\r\nOne solution for this could involve enforcing unique scoped names. However, we would also like to let users rename entities after they've been created. This poses a problem in the ECS, because the name component will need to be writable, but we can't count on the systems to enforce uniqueness.\r\n\r\nSo my suggestion is to use the following assumptions:\r\n\r\n1. IDs are unique across all types.\r\n1. Names are not unique across types.\r\n1. Names may be unique within a type, but we will not enforce this.\r\n\r\n## Summary\r\n\r\nI propose the following message, which has `id`, `name` and `type`. The way I expect it to be used is:\r\n\r\n~~~\r\nif id not null\r\n  use id\r\nelse if name not null and type not null\r\n  use name + type\r\nelse\r\n  error\r\nend\r\n~~~\r\n\r\n> I considered using `oneof`, but certain use cases may want to use the message to notify all fields together, so they can all be set.\r\n\r\nWhen using `name` + `type`, the user should be aware that if many entities have the same combination, only one will be affected.\r\n\r\nIf this is accepted, `kNullEntity` should be changed to zero on `ign-gazebo`.\r\n\r\n## Immediate future\r\n\r\nIf this is accepted, its first user will be the new entity delete service, and in the future we should use it for any other commands that refer to specific entities.", "markup": "markdown", "html": "<h2 id=\"markdown-header-motivation\">Motivation</h2>\n<p>On Gazebo Classic\u2122,  entities had integer unique IDs, and also string names, so several messages accept both types of identification. See <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-msgs/src/954c692189352b70b1946b4b14d0293416d14b78/proto/ignition/msgs/pose.proto?at=default&amp;fileviewer=file-view-default#pose.proto-36\" rel=\"nofollow\">pose.proto</a> for example.</p>\n<p>While <code>id</code>s are efficient and unique, <code>name</code>s are user-friendly, so it's good to have both options.</p>\n<h3 id=\"markdown-header-name-uniqueness\">Name uniqueness</h3>\n<p>We currently have several issues on Gazebo Classic due to names (and scoped names) not being unique. The <code>entity_info</code> service <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/issues/1451/modellistwidget-doesnt-display-joint-info\" rel=\"nofollow\">can't tell links from joints</a>, the <code>entity_delete</code> service can't tell models from lights...</p>\n<p>One solution for this could involve enforcing unique scoped names. However, we would also like to let users rename entities after they've been created. This poses a problem in the ECS, because the name component will need to be writable, but we can't count on the systems to enforce uniqueness.</p>\n<p>So my suggestion is to use the following assumptions:</p>\n<ol>\n<li>IDs are unique across all types.</li>\n<li>Names are not unique across types.</li>\n<li>Names may be unique within a type, but we will not enforce this.</li>\n</ol>\n<h2 id=\"markdown-header-summary\">Summary</h2>\n<p>I propose the following message, which has <code>id</code>, <code>name</code> and <code>type</code>. The way I expect it to be used is:</p>\n<div class=\"codehilite\"><pre><span></span>if id not null\n  use id\nelse if name not null and type not null\n  use name + type\nelse\n  error\nend\n</pre></div>\n\n\n<blockquote>\n<p>I considered using <code>oneof</code>, but certain use cases may want to use the message to notify all fields together, so they can all be set.</p>\n</blockquote>\n<p>When using <code>name</code> + <code>type</code>, the user should be aware that if many entities have the same combination, only one will be affected.</p>\n<p>If this is accepted, <code>kNullEntity</code> should be changed to zero on <code>ign-gazebo</code>.</p>\n<h2 id=\"markdown-header-immediate-future\">Immediate future</h2>\n<p>If this is accepted, its first user will be the new entity delete service, and in the future we should use it for any other commands that refer to specific entities.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4e37219056db", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs/commit/4e37219056db.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/commits/4e37219056db"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a9e7131f-94ac-4283-ae4e-330068146520}ts=1533307"}}, "type": "repository", "name": "ign-msgs", "full_name": "ignitionrobotics/ign-msgs", "uuid": "{a9e7131f-94ac-4283-ae4e-330068146520}"}, "branch": {"name": "entity_msg"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-02-05T17:06:30.371048+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2019-02-02T05:06:08.006081+00:00", "type": "participant", "approved": false, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "PARTICIPANT", "participated_on": "2019-02-04T21:43:39.620198+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-02-05T17:06:46.887374+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "2f8a97261926", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs/commit/2f8a97261926.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/commits/2f8a97261926"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}