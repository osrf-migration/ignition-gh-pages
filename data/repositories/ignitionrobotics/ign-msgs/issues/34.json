{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-msgs.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a9e7131f-94ac-4283-ae4e-330068146520}ts=1533307"}}, "type": "repository", "name": "ign-msgs", "full_name": "ignitionrobotics/ign-msgs", "uuid": "{a9e7131f-94ac-4283-ae4e-330068146520}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-msgs/issues/34/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-msgs/issues/34.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-msgs/issues/34/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-msgs/issues/34/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-msgs/issues/34/add-support-for-cross-compilation"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-msgs/issues/34/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Add support for cross-compilation", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nIt would be great to be able to compile the C\\+\\+ library ignition-msgs, to compile it for target platform different from the one in which the project is being built \\(see [https://cmake.org/cmake/help/v3.12/manual/cmake-toolchains.7.html#cross-compiling](https://cmake.org/cmake/help/v3.12/manual/cmake-toolchains.7.html#cross-compiling) and [https://en.wikipedia.org/wiki/Cross\\_compiler](https://en.wikipedia.org/wiki/Cross_compiler) for some background on cross compilation\\). As ignition-msgs require code generation with tools that are compiled as part of the project itself, this is not trivial.\r\n\r\n# Motivation\r\n\r\nCross compilation is quite common, for example it is used when targeting embedded targets or [WebAssembly](https://webassembly.org).\r\n\r\n# Describe alternatives you&amp;#39;ve considered\r\n\r\nA typical approach for cross-compilation of projects that require code generation as this one, is to have a parallel installation of the code generator for the host machine, and use that for code generation. An alternative is just to use the host project build system to generate the necessary C\\+\\+ files, and use them directly in the cross compilation.\r\n\r\nBased on this, I think there are two main alternatives to tackle this:\r\n\r\n* One is to install the `ign_msgs_gen` protobuf plugin and install it in the host project, and then add options to manually specify an external `protoc` compiler and an external `ign_msgs_gen` protobuf plugin, that will be used in the cross-compiled project to use the host code generators.\r\n* An alternative is to add an option to install or export in some form the generate C\\+\\+ code \\(that will be used in the host project\\), and add an option to avoid generation of the C\\+\\+ code, and just use it externally \\(this option will be used in the cross-compiled project\\).\r\n\r\n# Additional context\r\n\r\nThe main motivation for tackling this issue is to be able to support all officially supported vcpkg triplets, see [https://github.com/microsoft/vcpkg/pull/8044](https://github.com/microsoft/vcpkg/pull/8044) .", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>It would be great to be able to compile the C++ library ignition-msgs, to compile it for target platform different from the one in which the project is being built (see <a data-is-external-link=\"true\" href=\"https://cmake.org/cmake/help/v3.12/manual/cmake-toolchains.7.html#cross-compiling\" rel=\"nofollow\">https://cmake.org/cmake/help/v3.12/manual/cmake-toolchains.7.html#cross-compiling</a> and <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Cross_compiler\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Cross_compiler</a> for some background on cross compilation). As ignition-msgs require code generation with tools that are compiled as part of the project itself, this is not trivial.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>Cross compilation is quite common, for example it is used when targeting embedded targets or <a data-is-external-link=\"true\" href=\"https://webassembly.org\" rel=\"nofollow\">WebAssembly</a>.</p>\n<h1 id=\"markdown-header-describe-alternatives-youwzxhzdk039ve-considered\">Describe alternatives you&amp;amp;#39;ve considered</h1>\n<p>A typical approach for cross-compilation of projects that require code generation as this one, is to have a parallel installation of the code generator for the host machine, and use that for code generation. An alternative is just to use the host project build system to generate the necessary C++ files, and use them directly in the cross compilation.</p>\n<p>Based on this, I think there are two main alternatives to tackle this:</p>\n<ul>\n<li>One is to install the <code>ign_msgs_gen</code> protobuf plugin and install it in the host project, and then add options to manually specify an external <code>protoc</code> compiler and an external <code>ign_msgs_gen</code> protobuf plugin, that will be used in the cross-compiled project to use the host code generators.</li>\n<li>An alternative is to add an option to install or export in some form the generate C++ code (that will be used in the host project), and add an option to avoid generation of the C++ code, and just use it externally (this option will be used in the cross-compiled project).</li>\n</ul>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>The main motivation for tackling this issue is to be able to support all officially supported vcpkg triplets, see <a data-is-external-link=\"true\" href=\"https://github.com/microsoft/vcpkg/pull/8044\" rel=\"nofollow\">https://github.com/microsoft/vcpkg/pull/8044</a> .</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-09-04T09:18:25.390990+00:00", "milestone": null, "updated_on": "2020-03-14T17:57:04.933198+00:00", "type": "issue", "id": 34}