{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-tools/issues/7/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/7/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/7/consider-binaries-to-implement-the"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-tools/issues/7/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Consider binaries to implement the functionality offered by `ign`", "component": null, "votes": 2, "watches": 3, "content": {"raw": "Right now, `ign` is a ruby script that offers several subcommands \\(topic, msg, etc.\\). Each subcommand is implemented by a function inside a versioned Ignition shared library. `ign` also keeps track of multiple versions of the same library. This approach has some issues, in particular we have detected:\r\n\r\n1. Difficulty for using `gdb` when running `ign`. Imagine for example running `ign gazebo \u2026`\r\n2. Portability issues. E.g.: On Windows, there are ABI problems interacting from Ruby \\(compiled with MinGW\\) and an Ignition shared library \\(compiled with Visual Studio\\).\r\n\r\nAn idea for mitigating these issues might be to move the functionality from a shared library to a binary \\(e.g.: `igntopic`\\). In this case, `ign` should invoke the right external binary. The solution to \\(1\\) is to run gdb with the binary directly without using `ign`.  \\(2\\) probably won\u2019t happen again as we wouldn\u2019t need to interact with a shared library anymore, just executing an external binary which looks less involved.\r\n\r\nOn the other hand, each Ignition library should do some refactor and expose a binary \\(or a collection of binaries\\) that capture all functionality to be executed from the command line. \r\n\r\n\u200c", "markup": "markdown", "html": "<p>Right now, <code>ign</code> is a ruby script that offers several subcommands (topic, msg, etc.). Each subcommand is implemented by a function inside a versioned Ignition shared library. <code>ign</code> also keeps track of multiple versions of the same library. This approach has some issues, in particular we have detected:</p>\n<ol>\n<li>Difficulty for using <code>gdb</code> when running <code>ign</code>. Imagine for example running <code>ign gazebo \u2026</code></li>\n<li>Portability issues. E.g.: On Windows, there are ABI problems interacting from Ruby (compiled with MinGW) and an Ignition shared library (compiled with Visual Studio).</li>\n</ol>\n<p>An idea for mitigating these issues might be to move the functionality from a shared library to a binary (e.g.: <code>igntopic</code>). In this case, <code>ign</code> should invoke the right external binary. The solution to (1) is to run gdb with the binary directly without using <code>ign</code>.  (2) probably won\u2019t happen again as we wouldn\u2019t need to interact with a shared library anymore, just executing an external binary which looks less involved.</p>\n<p>On the other hand, each Ignition library should do some refactor and expose a binary (or a collection of binaries) that capture all functionality to be executed from the command line. </p>\n<p>\u200c</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-11-20T21:41:36.972541+00:00", "milestone": null, "updated_on": "2019-11-20T21:41:36.972541+00:00", "type": "issue", "id": 7}