{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49571765.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49571765"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "Dear @caguero,\n\nI managed to install ignition tranport 5, ignition msgs 2 and ign tools from source so to make this work. I was able to use the `DESCRIPTORS` directive in `PROTOBUF_GENERATE_CPP()` and generate the respective descriptor files for the messages. I also exported the `IGN_DECRIPTOR_PATH` with the path where the descriptors are stored.\n\nSo to give an example of how the protobuf headers and descriptors are generated:\n\n1. On a `CMakeLists.txt` file:\n\n```cmake\nset(PROTOBUF_IMPORT_DIRS \"\")\nforeach(ITR ${GAZEBO_INCLUDE_DIRS})\n  if(ITR MATCHES \".*gazebo-[0-9.]+$\")\n    set(PROTOBUF_IMPORT_DIRS ${PROTOBUF_IMPORT_DIRS} \"${ITR}/gazebo/msgs/proto\")\n  endif()\nendforeach()\nif(${IGNITION-MSGS_INCLUDE_DIRS})\n  set(PROTOBUF_IMPORT_DIRS ${PROTOBUF_IMPORT_DIRS} \"${IGNITION-MSGS_INCLUDE_DIRS}/ignition/msgs\")\nendif()\n\n...\n\nset(mav_msgs\n  msgs/CommandMotorSpeed.proto\n  msgs/MotorOutput.proto\n)\nset(nav_msgs msgs/Odometry.proto)\nset(physics_msgs msgs/Wind.proto)\nset(std_msgs msgs/Int32.proto)\nset(sensor_msgs\n  msgs/Baro.proto\n  msgs/Diff_press.proto\n  msgs/Imu.proto\n  msgs/IRLock.proto\n  msgs/Float.proto\n  msgs/Groundtruth.proto\n  msgs/Range.proto\n  msgs/SITLGps.proto\n  msgs/OpticalFlow.proto\n)\n\nPROTOBUF_GENERATE_CPP(MAV_PROTO_SRCS MAV_PROTO_HDRS DESCRIPTORS MAV_PROTO_DESCS ${mav_msgs})\nPROTOBUF_GENERATE_CPP(NAV_PROTO_SRCS NAV_PROTO_HDRS DESCRIPTORS NAV_PROTO_DESCS ${nav_msgs})\nPROTOBUF_GENERATE_CPP(PHY_PROTO_SRCS PHY_PROTO_HDRS DESCRIPTORS PHY_PROTO_DESCS ${physics_msgs})\nPROTOBUF_GENERATE_CPP(STD_PROTO_SRCS STD_PROTO_HDRS DESCRIPTORS STD_PROTO_DESCS ${std_msgs})\nPROTOBUF_GENERATE_CPP(SEN_PROTO_SRCS SEN_PROTO_HDRS DESCRIPTORS SEN_PROTO_DESCS ${sensor_msgs})\n\nadd_library(mav_msgs SHARED ${MAV_PROTO_SRCS} ${MAV_PROTO_HDRS} ${MAV_PROTO_DESCS})\nadd_library(nav_msgs SHARED ${NAV_PROTO_SRCS} ${NAV_PROTO_HDRS} ${NAV_PROTO_DESCS})\nadd_library(physics_msgs SHARED ${PHY_PROTO_SRCS} ${PHY_PROTO_HDRS} ${PHY_PROTO_DESCS})\nadd_library(std_msgs SHARED ${STD_PROTO_SRCS} ${STD_PROTO_HDRS} ${STD_PROTO_DESCS})\nadd_library(sensor_msgs SHARED ${SEN_PROTO_SRCS} ${SEN_PROTO_HDRS} ${SEN_PROTO_DESCS})\n\nset(PROTO_SRC ${PROTO_SRC}${MAV_PROTO_SRCS} ${NAV_PROTO_SRCS} ${PHY_PROTO_SRCS} ${STD_PROTO_SRCS} ${SEN_PROTO_SRCS})\nset(PROTO_HEADER ${PROTO_HEADER}${MAV_PROTO_HDRS} ${NAV_PROTO_HDRS} ${PHY_PROTO_HDRS} ${STD_PROTO_HDRS} ${SEN_PROTO_HDRS})\nset(PROTO_DESCS ${PROTO_DESCS}${MAV_PROTO_DESCS} ${NAV_PROTO_DESCS} ${PHY_PROTO_DESCS} ${STD_PROTO_DESCS} ${SEN_PROTO_DESCS})\nset_source_files_properties(${PROTO_SRC} ${PROTO_HEADER} ${PROTO_DESCS} PROPERTIES GENERATED TRUE)\n\nadd_custom_target(protobuf_compilation DEPENDS mav_msgs nav_msgs physics_msgs std_msgs sensor_msgs)\n\nlink_libraries(mav_msgs nav_msgs physics_msgs std_msgs sensor_msgs)\n\n...\n\n# add msg hdrs and srcs as a dependency to the plugins\nforeach(plugin ${plugins})\n  add_dependencies(${plugin} protobuf_compilation)\nendforeach()\n```\n\n2. So the above generates the required msg headers, sources and descriptors based on custom protos, as the bellow:\n\n```\n// Odometry.proto\nsyntax = \"proto2\";\npackage nav_msgs.msgs;\nimport \"quaternion.proto\";\nimport \"vector3d.proto\";\n\nmessage Odometry\n{\n  required int64 time_usec                       = 1;\n  required gazebo.msgs.Vector3d position         = 2;\n  required gazebo.msgs.Quaternion orientation    = 3;\n  required gazebo.msgs.Vector3d linear_velocity  = 4;\n  required gazebo.msgs.Vector3d angular_velocity = 5;\n  repeated float pose_covariance                                  = 6 [packed=true]; // x.y.z.r.p.y.\n  repeated float twist_covariance                                  = 7 [packed=true]; // vx.vy.vz.rr.pr.yr\n}\n```\n\nSo all this builds correctly, and I get the hdrs, sources and descriptors generated to the same build dir, which I then use the path to set `IGN_DESCRIPTOR_PATH`. Though, when trying to use the `ign topic --echo -t` command, I get the following:\n```sh\n$ ign topic -e -t /gazebo/default/iris/baro\n[libprotobuf ERROR google/protobuf/descriptor.cc:3248] Invalid proto descriptor for file \"Wind.proto\":\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Wind.proto: Import \"vector3d.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   physics_msgs.msgs.Wind.force: \".gazebo.msgs.Vector3d\" is not defined.\nDynamicFactory(). Unable to place descriptors from [/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Wind.desc] in the descriptor pool\n[libprotobuf ERROR google/protobuf/descriptor.cc:3248] Invalid proto descriptor for file \"Odometry.proto\":\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Odometry.proto: Import \"quaternion.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Odometry.proto: Import \"vector3d.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.position: \".gazebo.msgs.Vector3d\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.orientation: \".gazebo.msgs.Quaternion\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.linear_velocity: \".gazebo.msgs.Vector3d\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.angular_velocity: \".gazebo.msgs.Vector3d\" is not defined.\nDynamicFactory(). Unable to place descriptors from [/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Odometry.desc] in the descriptor pool\n[libprotobuf ERROR google/protobuf/descriptor.cc:3248] Invalid proto descriptor for file \"Imu.proto\":\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Imu.proto: Import \"quaternion.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Imu.proto: Import \"vector3d.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   sensor_msgs.msgs.Imu.orientation: \".gazebo.msgs.Quaternion\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   sensor_msgs.msgs.Imu.angular_velocity: \".gazebo.msgs.Vector3d\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   sensor_msgs.msgs.Imu.linear_acceleration: \".gazebo.msgs.Vector3d\" is not defined.\nDynamicFactory(). Unable to place descriptors from [/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Imu.desc] in the descriptor pool\n```\n\nIt seems it is struggling with the definition of the gazebo msgs descriptors. Also, again, I cannot seem to get any data echoed (I tried to remove the generation of the descriptors for the msgs above and I still can't echo the topic above).\n\nSo currently there seems to be a problem when importing gazebo msg types into the protobuf. And again, I still can't echo the `/gazebo/default/iris/baro` topic, which is of a custom type.\n\nOnce again, thanks for your help!", "markup": "markdown", "html": "<p>Dear @caguero,</p>\n<p>I managed to install ignition tranport 5, ignition msgs 2 and ign tools from source so to make this work. I was able to use the <code>DESCRIPTORS</code> directive in <code>PROTOBUF_GENERATE_CPP()</code> and generate the respective descriptor files for the messages. I also exported the <code>IGN_DECRIPTOR_PATH</code> with the path where the descriptors are stored.</p>\n<p>So to give an example of how the protobuf headers and descriptors are generated:</p>\n<ol>\n<li>On a <code>CMakeLists.txt</code> file:</li>\n</ol>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_IMPORT_DIRS</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">ITR</span> <span class=\"o\">${</span><span class=\"nv\">GAZEBO_INCLUDE_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">ITR</span> <span class=\"s\">MATCHES</span> <span class=\"s2\">&quot;.*gazebo-[0-9.]+$&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_IMPORT_DIRS</span> <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_IMPORT_DIRS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${ITR}/gazebo/msgs/proto&quot;</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n<span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n<span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">IGNITION-MSGS_INCLUDE_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_IMPORT_DIRS</span> <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_IMPORT_DIRS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${IGNITION-MSGS_INCLUDE_DIRS}/ignition/msgs&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n<span class=\"err\">...</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">mav_msgs</span>\n  <span class=\"s\">msgs/CommandMotorSpeed.proto</span>\n  <span class=\"s\">msgs/MotorOutput.proto</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">nav_msgs</span> <span class=\"s\">msgs/Odometry.proto</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">physics_msgs</span> <span class=\"s\">msgs/Wind.proto</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">std_msgs</span> <span class=\"s\">msgs/Int32.proto</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">sensor_msgs</span>\n  <span class=\"s\">msgs/Baro.proto</span>\n  <span class=\"s\">msgs/Diff_press.proto</span>\n  <span class=\"s\">msgs/Imu.proto</span>\n  <span class=\"s\">msgs/IRLock.proto</span>\n  <span class=\"s\">msgs/Float.proto</span>\n  <span class=\"s\">msgs/Groundtruth.proto</span>\n  <span class=\"s\">msgs/Range.proto</span>\n  <span class=\"s\">msgs/SITLGps.proto</span>\n  <span class=\"s\">msgs/OpticalFlow.proto</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">MAV_PROTO_SRCS</span> <span class=\"s\">MAV_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">MAV_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">mav_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">NAV_PROTO_SRCS</span> <span class=\"s\">NAV_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">NAV_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">nav_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">PHY_PROTO_SRCS</span> <span class=\"s\">PHY_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">PHY_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">physics_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">STD_PROTO_SRCS</span> <span class=\"s\">STD_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">STD_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">std_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">SEN_PROTO_SRCS</span> <span class=\"s\">SEN_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">SEN_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">sensor_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">mav_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">MAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">MAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">MAV_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">nav_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">physics_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">std_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">sensor_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_SRC</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_SRC</span><span class=\"o\">}${</span><span class=\"nv\">MAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_SRCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_HEADER</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_HEADER</span><span class=\"o\">}${</span><span class=\"nv\">MAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_HDRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_DESCS</span><span class=\"o\">}${</span><span class=\"nv\">MAV_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set_source_files_properties</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">PROTO_SRC</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_HEADER</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"s\">PROPERTIES</span> <span class=\"s\">GENERATED</span> <span class=\"s\">TRUE</span><span class=\"p\">)</span>\n\n<span class=\"nb\">add_custom_target</span><span class=\"p\">(</span><span class=\"s\">protobuf_compilation</span> <span class=\"s\">DEPENDS</span> <span class=\"s\">mav_msgs</span> <span class=\"s\">nav_msgs</span> <span class=\"s\">physics_msgs</span> <span class=\"s\">std_msgs</span> <span class=\"s\">sensor_msgs</span><span class=\"p\">)</span>\n\n<span class=\"nb\">link_libraries</span><span class=\"p\">(</span><span class=\"s\">mav_msgs</span> <span class=\"s\">nav_msgs</span> <span class=\"s\">physics_msgs</span> <span class=\"s\">std_msgs</span> <span class=\"s\">sensor_msgs</span><span class=\"p\">)</span>\n\n<span class=\"err\">...</span>\n\n<span class=\"c\"># add msg hdrs and srcs as a dependency to the plugins</span>\n<span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">plugin</span> <span class=\"o\">${</span><span class=\"nv\">plugins</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">add_dependencies</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">plugin</span><span class=\"o\">}</span> <span class=\"s\">protobuf_compilation</span><span class=\"p\">)</span>\n<span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<ol>\n<li>So the above generates the required msg headers, sources and descriptors based on custom protos, as the bellow:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//</span> <span class=\"n\">Odometry</span><span class=\"o\">.</span><span class=\"n\">proto</span>\n<span class=\"n\">syntax</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;proto2&quot;</span><span class=\"p\">;</span>\n<span class=\"n\">package</span> <span class=\"n\">nav_msgs</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span> <span class=\"s2\">&quot;quaternion.proto&quot;</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span> <span class=\"s2\">&quot;vector3d.proto&quot;</span><span class=\"p\">;</span>\n\n<span class=\"n\">message</span> <span class=\"n\">Odometry</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">required</span> <span class=\"n\">int64</span> <span class=\"n\">time_usec</span>                       <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Vector3d</span> <span class=\"n\">position</span>         <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Quaternion</span> <span class=\"n\">orientation</span>    <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Vector3d</span> <span class=\"n\">linear_velocity</span>  <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Vector3d</span> <span class=\"n\">angular_velocity</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"n\">repeated</span> <span class=\"nb\">float</span> <span class=\"n\">pose_covariance</span>                                  <span class=\"o\">=</span> <span class=\"mi\">6</span> <span class=\"p\">[</span><span class=\"n\">packed</span><span class=\"o\">=</span><span class=\"n\">true</span><span class=\"p\">];</span> <span class=\"o\">//</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span>\n  <span class=\"n\">repeated</span> <span class=\"nb\">float</span> <span class=\"n\">twist_covariance</span>                                  <span class=\"o\">=</span> <span class=\"mi\">7</span> <span class=\"p\">[</span><span class=\"n\">packed</span><span class=\"o\">=</span><span class=\"n\">true</span><span class=\"p\">];</span> <span class=\"o\">//</span> <span class=\"n\">vx</span><span class=\"o\">.</span><span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">rr</span><span class=\"o\">.</span><span class=\"n\">pr</span><span class=\"o\">.</span><span class=\"n\">yr</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>So all this builds correctly, and I get the hdrs, sources and descriptors generated to the same build dir, which I then use the path to set <code>IGN_DESCRIPTOR_PATH</code>. Though, when trying to use the <code>ign topic --echo -t</code> command, I get the following:</p>\n<div class=\"codehilite language-sh\"><pre><span></span>$ ign topic -e -t /gazebo/default/iris/baro\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3248<span class=\"o\">]</span> Invalid proto descriptor <span class=\"k\">for</span> file <span class=\"s2\">&quot;Wind.proto&quot;</span>:\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Wind.proto: Import <span class=\"s2\">&quot;vector3d.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   physics_msgs.msgs.Wind.force: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\nDynamicFactory<span class=\"o\">()</span>. Unable to place descriptors from <span class=\"o\">[</span>/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Wind.desc<span class=\"o\">]</span> in the descriptor pool\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3248<span class=\"o\">]</span> Invalid proto descriptor <span class=\"k\">for</span> file <span class=\"s2\">&quot;Odometry.proto&quot;</span>:\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Odometry.proto: Import <span class=\"s2\">&quot;quaternion.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Odometry.proto: Import <span class=\"s2\">&quot;vector3d.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.position: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.orientation: <span class=\"s2\">&quot;.gazebo.msgs.Quaternion&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.linear_velocity: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.angular_velocity: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\nDynamicFactory<span class=\"o\">()</span>. Unable to place descriptors from <span class=\"o\">[</span>/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Odometry.desc<span class=\"o\">]</span> in the descriptor pool\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3248<span class=\"o\">]</span> Invalid proto descriptor <span class=\"k\">for</span> file <span class=\"s2\">&quot;Imu.proto&quot;</span>:\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Imu.proto: Import <span class=\"s2\">&quot;quaternion.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Imu.proto: Import <span class=\"s2\">&quot;vector3d.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   sensor_msgs.msgs.Imu.orientation: <span class=\"s2\">&quot;.gazebo.msgs.Quaternion&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   sensor_msgs.msgs.Imu.angular_velocity: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   sensor_msgs.msgs.Imu.linear_acceleration: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\nDynamicFactory<span class=\"o\">()</span>. Unable to place descriptors from <span class=\"o\">[</span>/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Imu.desc<span class=\"o\">]</span> in the descriptor pool\n</pre></div>\n\n\n<p>It seems it is struggling with the definition of the gazebo msgs descriptors. Also, again, I cannot seem to get any data echoed (I tried to remove the generation of the descriptors for the msgs above and I still can't echo the topic above).</p>\n<p>So currently there seems to be a problem when importing gazebo msg types into the protobuf. And again, I still can't echo the <code>/gazebo/default/iris/baro</code> topic, which is of a custom type.</p>\n<p>Once again, thanks for your help!</p>", "type": "rendered"}, "created_on": "2018-12-20T16:51:29.930157+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": "2018-12-20T16:54:33.997898+00:00", "type": "issue_comment", "id": 49571765}