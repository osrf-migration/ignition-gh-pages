{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49572985.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49572985"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "Here's a CMake function that you can use:\n\n```\n#!cmake\n##############################################################################\n# Find Protobuf\n##############################################################################\n\nfind_package(Protobuf REQUIRED)\n\n##############################################################################\n# Locate and configure the Google Protocol Buffers library\n#\n# Based on this pull request:\n# https://gitlab.kitware.com/cmake/cmake/blob/1299f4cc5ee5a996b051f7767049e239092a65a0/Modules/FindProtobuf.cmake\n# and modified to include the --include_imports option.\n##############################################################################\n#\n# This method will generate source, header and descriptor files for proto\n# messages.\n#\n# The method populates the following variable arguments:\n#\n# protobuf_SOURCES     : string list of of generated .c pathnames\n# protobuf_HEADERS     : string list of generated .h pathnames\n# protobuf_DESCRIPTORS : string list of generated .desc pathnames\n#\n# It optionally accepts the following named input arguments:\n#\n# IMPORT_DIRS : a string list of dirs to be searched for .proto dependencies\n#               (default: empty)\n# DESTINATION : destination of generated source/header/descriptor files\n#               (default: CMAKE_CURRENT_BINARY_DIR)\n# EXPORT_MACRO: any additional flags to be used\n#\n# The remaining argument should be a list of .proto pathnames.\n#\n# Example usage:\n#\n# protobuf_generate_cpp_with_descriptor(\n#   PROTO_SOURCES\n#   PROTO_HEADERS\n#   PROTO_DESCRIPTORS\n#   IMPORT_DIRS\n#     ${IGNITION-MSGS_INCLUDE_DIRS}\n#   ${PROTO_MESSAGES}\n# )\n#\nfunction(protobuf_generate_cpp_with_descriptor\n           protobuf_SOURCES\n           protobuf_HEADERS\n           protobuf_DESCRIPTORS\n         )\n  cmake_parse_arguments(protobuf \"\" \"EXPORT_MACRO;IMPORT_DIRS;DESTINATION\" \"\" ${ARGN})\n\n  set(PROTO_FILES \"${protobuf_UNPARSED_ARGUMENTS}\")\n\n  if(NOT PROTO_FILES)\n    message(SEND_ERROR \"Error: PROTOBUF_GENERATE_CPP() called without any proto files\")\n    return()\n  endif()\n\n  if(NOT protobuf_DESTINATION)\n    set(protobuf_DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n  endif()\n  file(MAKE_DIRECTORY ${protobuf_DESTINATION})\n\n  if(protobuf_EXPORT_MACRO)\n    set(DLL_EXPORT_DECL \"dllexport_decl=${protobuf_EXPORT_MACRO}:\")\n  endif()\n\n  set(${protobuf_SOURCES})\n  set(${protobuf_HEADERS})\n  set(${protobuf_DESCRIPTORS})\n\n  if(PROTOBUF_GENERATE_CPP_APPEND_PATH)\n    # Create an include path for each file specified\n    foreach(FIL ${PROTO_FILES})\n      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)\n      get_filename_component(ABS_PATH ${ABS_FIL} PATH)\n      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)\n      if(${_contains_already} EQUAL -1)\n          list(APPEND _protobuf_include_path -I ${ABS_PATH})\n      endif()\n    endforeach()\n  else()\n    set(_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})\n  endif()\n\n  foreach(DIR ${protobuf_IMPORT_DIRS})\n    get_filename_component(ABS_PATH ${DIR} ABSOLUTE)\n    list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)\n    if(${_contains_already} EQUAL -1)\n        list(APPEND _protobuf_include_path -I ${ABS_PATH})\n    endif()\n  endforeach()\n\n  foreach(FIL ${PROTO_FILES})\n    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)\n    get_filename_component(FIL_WE ${FIL} NAME_WE)\n    if(NOT PROTOBUF_GENERATE_CPP_APPEND_PATH)\n      get_filename_component(FIL_DIR ${FIL} DIRECTORY)\n      if(FIL_DIR)\n        set(FIL_WE \"${FIL_DIR}/${FIL_WE}\")\n      endif()\n    endif()\n\n    set(_protobuf_protoc_src \"${protobuf_DESTINATION}/${FIL_WE}.pb.cc\")\n    set(_protobuf_protoc_hdr \"${protobuf_DESTINATION}/${FIL_WE}.pb.h\")\n    list(APPEND ${protobuf_SOURCES} \"${_protobuf_protoc_src}\")\n    list(APPEND ${protobuf_HEADERS} \"${_protobuf_protoc_hdr}\")\n\n    set(_protobuf_protoc_desc \"${protobuf_DESTINATION}/${FIL_WE}.desc\")\n    set(_protobuf_protoc_flags\n        \"--include_imports\"\n        \"--descriptor_set_out=${_protobuf_protoc_desc}\")\n    list(APPEND ${protobuf_DESCRIPTORS} \"${_protobuf_protoc_desc}\")\n\n    add_custom_command(\n      OUTPUT \"${_protobuf_protoc_src}\"\n             \"${_protobuf_protoc_hdr}\"\n             ${_protobuf_protoc_desc}\n      COMMAND  protobuf::protoc\n               \"--cpp_out=${DLL_EXPORT_DECL}${protobuf_DESTINATION}\"\n               ${_protobuf_protoc_flags}\n               ${_protobuf_include_path} ${ABS_FIL}\n      DEPENDS ${ABS_FIL} protobuf::protoc\n      COMMENT \"Running C++ protocol buffer compiler on ${FIL}\"\n      VERBATIM )\n  endforeach()\n\n  # Odd that you need to re-set these to get parent scope on them\n  # (i.e. can't be done above when the variables are initially defined)\n  set(${protobuf_SOURCES}     \"${${protobuf_SOURCES}}\"     PARENT_SCOPE)\n  set(${protobuf_HEADERS}     \"${${protobuf_HEADERS}}\"     PARENT_SCOPE)\n  set(${protobuf_DESCRIPTORS} \"${${protobuf_DESCRIPTORS}}\" PARENT_SCOPE)\n\nendfunction()\n```\n\nAnd here's an example of how you can use the function:\n\n\n```\n#!cmake\n\n##############################################################################\n# Find Protobuf & Custom Macros\n##############################################################################\n\ninclude(${PROJECT_SOURCE_DIR}/cmake/Protobuf.cmake)\n\n##############################################################################\n# Generate Messages\n##############################################################################\n\nset(PROTO_MESSAGES\n  agent_state.proto\n  agent_state_v.proto\n  automotive_driving_command.proto\n  rpy_angles.proto\n  scene_request.proto\n  simulation_in_message.proto\n  viewer2_comms.proto\n  viewer_command.proto\n)\n\nprotobuf_generate_cpp_with_descriptor(\n  PROTO_SOURCES\n  PROTO_HEADERS\n  PROTO_DESCRIPTORS\n  IMPORT_DIRS\n    ${IGNITION-MSGS_INCLUDE_DIRS}\n  DESTINATION\n    ${PROJECT_BINARY_DIR}/include/delphyne/protobuf\n  ${PROTO_MESSAGES}\n)\n\n##############################################################################\n# Library\n##############################################################################\n\n# TODO: switch from PROTOBUF_INCLUDE_DIRS / PROTOBUF_LIBRARIES to\n#       protobuf::libprotobuf (currently creates a pthread_create problem)\n\nadd_library(protobuf_messages ${PROTO_SOURCES})\nset_target_properties(protobuf_messages PROPERTIES OUTPUT_NAME ${PROJECT_NAME}-protobuf-messages)\ntarget_include_directories(\n  protobuf_messages\n  PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n    ${PROTOBUF_INCLUDE_DIRS}\n)\ntarget_link_libraries(\n  protobuf_messages\n  PUBLIC\n    ${PROTOBUF_LIBRARIES}\n    ignition-msgs2::ignition-msgs2\n)\n\n##############################################################################\n# Install\n##############################################################################\n\ninstall(\n  FILES\n    ${PROTO_HEADERS}\n    ${PROTO_DESCRIPTORS}\n  DESTINATION\n    ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/protobuf\n)\n\ninstall(\n  FILES\n    ${PROTO_MESSAGES}\n  DESTINATION\n    ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/proto\n)\n\ninstall(TARGETS protobuf_messages EXPORT ${PROJECT_NAME}-targets\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\n```\n\nNote that when generating the descriptor information (as part of the CMake function), we're using the `--include-imports` option, that includes all dependencies of the input files in the set, so that the set is self-contained. Maybe the `invalid proto descriptor` error can be explained because you're not using this option.", "markup": "markdown", "html": "<p>Here's a CMake function that you can use:</p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Find Protobuf</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">Protobuf</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Locate and configure the Google Protocol Buffers library</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Based on this pull request:</span>\n<span class=\"c\"># https://gitlab.kitware.com/cmake/cmake/blob/1299f4cc5ee5a996b051f7767049e239092a65a0/Modules/FindProtobuf.cmake</span>\n<span class=\"c\"># and modified to include the --include_imports option.</span>\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># This method will generate source, header and descriptor files for proto</span>\n<span class=\"c\"># messages.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># The method populates the following variable arguments:</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># protobuf_SOURCES     : string list of of generated .c pathnames</span>\n<span class=\"c\"># protobuf_HEADERS     : string list of generated .h pathnames</span>\n<span class=\"c\"># protobuf_DESCRIPTORS : string list of generated .desc pathnames</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># It optionally accepts the following named input arguments:</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># IMPORT_DIRS : a string list of dirs to be searched for .proto dependencies</span>\n<span class=\"c\">#               (default: empty)</span>\n<span class=\"c\"># DESTINATION : destination of generated source/header/descriptor files</span>\n<span class=\"c\">#               (default: CMAKE_CURRENT_BINARY_DIR)</span>\n<span class=\"c\"># EXPORT_MACRO: any additional flags to be used</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># The remaining argument should be a list of .proto pathnames.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Example usage:</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># protobuf_generate_cpp_with_descriptor(</span>\n<span class=\"c\">#   PROTO_SOURCES</span>\n<span class=\"c\">#   PROTO_HEADERS</span>\n<span class=\"c\">#   PROTO_DESCRIPTORS</span>\n<span class=\"c\">#   IMPORT_DIRS</span>\n<span class=\"c\">#     ${IGNITION-MSGS_INCLUDE_DIRS}</span>\n<span class=\"c\">#   ${PROTO_MESSAGES}</span>\n<span class=\"c\"># )</span>\n<span class=\"c\">#</span>\n<span class=\"nb\">function</span><span class=\"p\">(</span><span class=\"s\">protobuf_generate_cpp_with_descriptor</span>\n           <span class=\"s\">protobuf_SOURCES</span>\n           <span class=\"s\">protobuf_HEADERS</span>\n           <span class=\"s\">protobuf_DESCRIPTORS</span>\n         <span class=\"p\">)</span>\n  <span class=\"nb\">cmake_parse_arguments</span><span class=\"p\">(</span><span class=\"s\">protobuf</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"s2\">&quot;EXPORT_MACRO;IMPORT_DIRS;DESTINATION&quot;</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">${</span><span class=\"nv\">ARGN</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_FILES</span> <span class=\"s2\">&quot;${protobuf_UNPARSED_ARGUMENTS}&quot;</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">PROTO_FILES</span><span class=\"p\">)</span>\n    <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s\">SEND_ERROR</span> <span class=\"s2\">&quot;Error: PROTOBUF_GENERATE_CPP() called without any proto files&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">return</span><span class=\"p\">()</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">protobuf_DESTINATION</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">protobuf_DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_CURRENT_BINARY_DIR</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n  <span class=\"nb\">file</span><span class=\"p\">(</span><span class=\"s\">MAKE_DIRECTORY</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_DESTINATION</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">protobuf_EXPORT_MACRO</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">DLL_EXPORT_DECL</span> <span class=\"s2\">&quot;dllexport_decl=${protobuf_EXPORT_MACRO}:&quot;</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_SOURCES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_HEADERS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_DESCRIPTORS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_GENERATE_CPP_APPEND_PATH</span><span class=\"p\">)</span>\n    <span class=\"c\"># Create an include path for each file specified</span>\n    <span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">FIL</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_FILES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n      <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_FIL</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">ABSOLUTE</span><span class=\"p\">)</span>\n      <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_PATH</span> <span class=\"o\">${</span><span class=\"nv\">ABS_FIL</span><span class=\"o\">}</span> <span class=\"s\">PATH</span><span class=\"p\">)</span>\n      <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">FIND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span> <span class=\"s\">_contains_already</span><span class=\"p\">)</span>\n      <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">_contains_already</span><span class=\"o\">}</span> <span class=\"s\">EQUAL</span> <span class=\"s\">-1</span><span class=\"p\">)</span>\n          <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"s\">-I</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span><span class=\"p\">)</span>\n      <span class=\"nb\">endif</span><span class=\"p\">()</span>\n    <span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n  <span class=\"nb\">else</span><span class=\"p\">()</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_include_path</span> <span class=\"s\">-I</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">DIR</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_IMPORT_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n    <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_PATH</span> <span class=\"o\">${</span><span class=\"nv\">DIR</span><span class=\"o\">}</span> <span class=\"s\">ABSOLUTE</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">FIND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span> <span class=\"s\">_contains_already</span><span class=\"p\">)</span>\n    <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">_contains_already</span><span class=\"o\">}</span> <span class=\"s\">EQUAL</span> <span class=\"s\">-1</span><span class=\"p\">)</span>\n        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"s\">-I</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span><span class=\"p\">)</span>\n    <span class=\"nb\">endif</span><span class=\"p\">()</span>\n  <span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">FIL</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_FILES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n    <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_FIL</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">ABSOLUTE</span><span class=\"p\">)</span>\n    <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">FIL_WE</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">NAME_WE</span><span class=\"p\">)</span>\n    <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">PROTOBUF_GENERATE_CPP_APPEND_PATH</span><span class=\"p\">)</span>\n      <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">FIL_DIR</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">DIRECTORY</span><span class=\"p\">)</span>\n      <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">FIL_DIR</span><span class=\"p\">)</span>\n        <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">FIL_WE</span> <span class=\"s2\">&quot;${FIL_DIR}/${FIL_WE}&quot;</span><span class=\"p\">)</span>\n      <span class=\"nb\">endif</span><span class=\"p\">()</span>\n    <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_src</span> <span class=\"s2\">&quot;${protobuf_DESTINATION}/${FIL_WE}.pb.cc&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_hdr</span> <span class=\"s2\">&quot;${protobuf_DESTINATION}/${FIL_WE}.pb.h&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_SOURCES</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${_protobuf_protoc_src}&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_HEADERS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${_protobuf_protoc_hdr}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_desc</span> <span class=\"s2\">&quot;${protobuf_DESTINATION}/${FIL_WE}.desc&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_flags</span>\n        <span class=\"s2\">&quot;--include_imports&quot;</span>\n        <span class=\"s2\">&quot;--descriptor_set_out=${_protobuf_protoc_desc}&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_DESCRIPTORS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${_protobuf_protoc_desc}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">add_custom_command</span><span class=\"p\">(</span>\n      <span class=\"s\">OUTPUT</span> <span class=\"s2\">&quot;${_protobuf_protoc_src}&quot;</span>\n             <span class=\"s2\">&quot;${_protobuf_protoc_hdr}&quot;</span>\n             <span class=\"o\">${</span><span class=\"nv\">_protobuf_protoc_desc</span><span class=\"o\">}</span>\n      <span class=\"s\">COMMAND</span>  <span class=\"s\">protobuf::protoc</span>\n               <span class=\"s2\">&quot;--cpp_out=${DLL_EXPORT_DECL}${protobuf_DESTINATION}&quot;</span>\n               <span class=\"o\">${</span><span class=\"nv\">_protobuf_protoc_flags</span><span class=\"o\">}</span>\n               <span class=\"o\">${</span><span class=\"nv\">_protobuf_include_path</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">ABS_FIL</span><span class=\"o\">}</span>\n      <span class=\"s\">DEPENDS</span> <span class=\"o\">${</span><span class=\"nv\">ABS_FIL</span><span class=\"o\">}</span> <span class=\"s\">protobuf::protoc</span>\n      <span class=\"s\">COMMENT</span> <span class=\"s2\">&quot;Running C++ protocol buffer compiler on ${FIL}&quot;</span>\n      <span class=\"s\">VERBATIM</span> <span class=\"p\">)</span>\n  <span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n\n  <span class=\"c\"># Odd that you need to re-set these to get parent scope on them</span>\n  <span class=\"c\"># (i.e. can&#39;t be done above when the variables are initially defined)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_SOURCES</span><span class=\"o\">}</span>     <span class=\"s2\">&quot;${${protobuf_SOURCES}}&quot;</span>     <span class=\"s\">PARENT_SCOPE</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_HEADERS</span><span class=\"o\">}</span>     <span class=\"s2\">&quot;${${protobuf_HEADERS}}&quot;</span>     <span class=\"s\">PARENT_SCOPE</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_DESCRIPTORS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${${protobuf_DESCRIPTORS}}&quot;</span> <span class=\"s\">PARENT_SCOPE</span><span class=\"p\">)</span>\n\n<span class=\"nb\">endfunction</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>And here's an example of how you can use the function:</p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Find Protobuf &amp; Custom Macros</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">include</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">PROJECT_SOURCE_DIR</span><span class=\"o\">}</span><span class=\"s\">/cmake/Protobuf.cmake</span><span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Generate Messages</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_MESSAGES</span>\n  <span class=\"s\">agent_state.proto</span>\n  <span class=\"s\">agent_state_v.proto</span>\n  <span class=\"s\">automotive_driving_command.proto</span>\n  <span class=\"s\">rpy_angles.proto</span>\n  <span class=\"s\">scene_request.proto</span>\n  <span class=\"s\">simulation_in_message.proto</span>\n  <span class=\"s\">viewer2_comms.proto</span>\n  <span class=\"s\">viewer_command.proto</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">protobuf_generate_cpp_with_descriptor</span><span class=\"p\">(</span>\n  <span class=\"s\">PROTO_SOURCES</span>\n  <span class=\"s\">PROTO_HEADERS</span>\n  <span class=\"s\">PROTO_DESCRIPTORS</span>\n  <span class=\"s\">IMPORT_DIRS</span>\n    <span class=\"o\">${</span><span class=\"nv\">IGNITION-MSGS_INCLUDE_DIRS</span><span class=\"o\">}</span>\n  <span class=\"s\">DESTINATION</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROJECT_BINARY_DIR</span><span class=\"o\">}</span><span class=\"s\">/include/delphyne/protobuf</span>\n  <span class=\"o\">${</span><span class=\"nv\">PROTO_MESSAGES</span><span class=\"o\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Library</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"c\"># TODO: switch from PROTOBUF_INCLUDE_DIRS / PROTOBUF_LIBRARIES to</span>\n<span class=\"c\">#       protobuf::libprotobuf (currently creates a pthread_create problem)</span>\n\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">protobuf_messages</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_SOURCES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set_target_properties</span><span class=\"p\">(</span><span class=\"s\">protobuf_messages</span> <span class=\"s\">PROPERTIES</span> <span class=\"s\">OUTPUT_NAME</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">-protobuf-messages</span><span class=\"p\">)</span>\n<span class=\"nb\">target_include_directories</span><span class=\"p\">(</span>\n  <span class=\"s\">protobuf_messages</span>\n  <span class=\"s\">PUBLIC</span>\n    <span class=\"o\">$&lt;</span><span class=\"nv\">BUILD_INTERFACE:${PROJECT_BINARY_DIR}</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">$&lt;</span><span class=\"nv\">INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_INCLUDE_DIRS</span><span class=\"o\">}</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>\n  <span class=\"s\">protobuf_messages</span>\n  <span class=\"s\">PUBLIC</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_LIBRARIES</span><span class=\"o\">}</span>\n    <span class=\"s\">ignition-msgs2::ignition-msgs2</span>\n<span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Install</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">install</span><span class=\"p\">(</span>\n  <span class=\"s\">FILES</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTO_HEADERS</span><span class=\"o\">}</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTO_DESCRIPTORS</span><span class=\"o\">}</span>\n  <span class=\"s\">DESTINATION</span>\n    <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_INCLUDEDIR</span><span class=\"o\">}</span><span class=\"s\">/</span><span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">/protobuf</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">install</span><span class=\"p\">(</span>\n  <span class=\"s\">FILES</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTO_MESSAGES</span><span class=\"o\">}</span>\n  <span class=\"s\">DESTINATION</span>\n    <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_DATAROOTDIR</span><span class=\"o\">}</span><span class=\"s\">/</span><span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">/proto</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">install</span><span class=\"p\">(</span><span class=\"s\">TARGETS</span> <span class=\"s\">protobuf_messages</span> <span class=\"s\">EXPORT</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">-targets</span>\n  <span class=\"s\">RUNTIME</span> <span class=\"s\">DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_BINDIR</span><span class=\"o\">}</span>\n  <span class=\"s\">LIBRARY</span> <span class=\"s\">DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_LIBDIR</span><span class=\"o\">}</span>\n  <span class=\"s\">ARCHIVE</span> <span class=\"s\">DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_LIBDIR</span><span class=\"o\">}</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Note that when generating the descriptor information (as part of the CMake function), we're using the <code>--include-imports</code> option, that includes all dependencies of the input files in the set, so that the set is self-contained. Maybe the <code>invalid proto descriptor</code> error can be explained because you're not using this option.</p>", "type": "rendered"}, "created_on": "2018-12-20T18:23:20.137948+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2018-12-20T18:24:15.520757+00:00", "type": "issue_comment", "id": 49572985}