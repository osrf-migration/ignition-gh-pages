{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49554690.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49554690"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2018-12-19T19:59:12.256931+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": null, "type": "issue_comment", "id": 49554690}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49556827.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49556827"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "Hi @TSC21. This functionality has been added to Ignition Msgs 2.x . The version of Ignition Transport that you tested (4.x) depends on Ignition Msgs 1.x, that doesn't have that functionality.\n\nYou'll need to compile Ignition Transport `default` (5.x) or wait until the next Ignition Transport release. \n\nHere are two relevant pull requests that might be useful:\n\n#!/ignitionrobotics/ign-msgs/pull-requests/61/extend-factory-class/diff\n#!/ignitionrobotics/ign-msgs/pull-requests/66/rename-ign_descriptor_dir-with/diff\n\nYou'll see that you need to generate your messages with descriptor information, and then, point the `IGN_DESCRIPTOR_PATH` environment variable to the directory where the descriptor information is located.", "markup": "markdown", "html": "<p>Hi @TSC21. This functionality has been added to Ignition Msgs 2.x . The version of Ignition Transport that you tested (4.x) depends on Ignition Msgs 1.x, that doesn't have that functionality.</p>\n<p>You'll need to compile Ignition Transport <code>default</code> (5.x) or wait until the next Ignition Transport release. </p>\n<p>Here are two relevant pull requests that might be useful:</p>\n<p><a href=\"#!/ignitionrobotics/ign-msgs/pull-requests/61/extend-factory-class/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/pull-requests/61/extend-factory-class/diff</a>\n<a href=\"#!/ignitionrobotics/ign-msgs/pull-requests/66/rename-ign_descriptor_dir-with/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/pull-requests/66/rename-ign_descriptor_dir-with/diff</a></p>\n<p>You'll see that you need to generate your messages with descriptor information, and then, point the <code>IGN_DESCRIPTOR_PATH</code> environment variable to the directory where the descriptor information is located.</p>", "type": "rendered"}, "created_on": "2018-12-19T23:05:55.513079+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2018-12-19T23:07:17.115191+00:00", "type": "issue_comment", "id": 49556827}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49557449.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49557449"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "@caguero thank you very much for your feedback!\n\nSo just a couple of questions regarding your answer:\n1. I am currently running Ubuntu 18.04 with Gazebo 9, with which some of the ignition dependencies were installed. I looked for a newer deb release for version 5 and couldn't find it. Do you know when that release is going to happen?\n2. Is there a guide on how to generate the descriptor information using CMake directives? Since I am compiling already created custom messages without any descriptors associated. Any link you can point me in too so I can have that working? Also, can the `IGN_DESCRIPTOR_PATH` be added to `bashrc` for example so it can be considered every time one wants to interpret custom protobuf messages?", "markup": "markdown", "html": "<p>@caguero thank you very much for your feedback!</p>\n<p>So just a couple of questions regarding your answer:\n1. I am currently running Ubuntu 18.04 with Gazebo 9, with which some of the ignition dependencies were installed. I looked for a newer deb release for version 5 and couldn't find it. Do you know when that release is going to happen?\n2. Is there a guide on how to generate the descriptor information using CMake directives? Since I am compiling already created custom messages without any descriptors associated. Any link you can point me in too so I can have that working? Also, can the <code>IGN_DESCRIPTOR_PATH</code> be added to <code>bashrc</code> for example so it can be considered every time one wants to interpret custom protobuf messages?</p>", "type": "rendered"}, "created_on": "2018-12-20T00:03:23.717077+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": null, "type": "issue_comment", "id": 49557449}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49571765.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49571765"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "Dear @caguero,\n\nI managed to install ignition tranport 5, ignition msgs 2 and ign tools from source so to make this work. I was able to use the `DESCRIPTORS` directive in `PROTOBUF_GENERATE_CPP()` and generate the respective descriptor files for the messages. I also exported the `IGN_DECRIPTOR_PATH` with the path where the descriptors are stored.\n\nSo to give an example of how the protobuf headers and descriptors are generated:\n\n1. On a `CMakeLists.txt` file:\n\n```cmake\nset(PROTOBUF_IMPORT_DIRS \"\")\nforeach(ITR ${GAZEBO_INCLUDE_DIRS})\n  if(ITR MATCHES \".*gazebo-[0-9.]+$\")\n    set(PROTOBUF_IMPORT_DIRS ${PROTOBUF_IMPORT_DIRS} \"${ITR}/gazebo/msgs/proto\")\n  endif()\nendforeach()\nif(${IGNITION-MSGS_INCLUDE_DIRS})\n  set(PROTOBUF_IMPORT_DIRS ${PROTOBUF_IMPORT_DIRS} \"${IGNITION-MSGS_INCLUDE_DIRS}/ignition/msgs\")\nendif()\n\n...\n\nset(mav_msgs\n  msgs/CommandMotorSpeed.proto\n  msgs/MotorOutput.proto\n)\nset(nav_msgs msgs/Odometry.proto)\nset(physics_msgs msgs/Wind.proto)\nset(std_msgs msgs/Int32.proto)\nset(sensor_msgs\n  msgs/Baro.proto\n  msgs/Diff_press.proto\n  msgs/Imu.proto\n  msgs/IRLock.proto\n  msgs/Float.proto\n  msgs/Groundtruth.proto\n  msgs/Range.proto\n  msgs/SITLGps.proto\n  msgs/OpticalFlow.proto\n)\n\nPROTOBUF_GENERATE_CPP(MAV_PROTO_SRCS MAV_PROTO_HDRS DESCRIPTORS MAV_PROTO_DESCS ${mav_msgs})\nPROTOBUF_GENERATE_CPP(NAV_PROTO_SRCS NAV_PROTO_HDRS DESCRIPTORS NAV_PROTO_DESCS ${nav_msgs})\nPROTOBUF_GENERATE_CPP(PHY_PROTO_SRCS PHY_PROTO_HDRS DESCRIPTORS PHY_PROTO_DESCS ${physics_msgs})\nPROTOBUF_GENERATE_CPP(STD_PROTO_SRCS STD_PROTO_HDRS DESCRIPTORS STD_PROTO_DESCS ${std_msgs})\nPROTOBUF_GENERATE_CPP(SEN_PROTO_SRCS SEN_PROTO_HDRS DESCRIPTORS SEN_PROTO_DESCS ${sensor_msgs})\n\nadd_library(mav_msgs SHARED ${MAV_PROTO_SRCS} ${MAV_PROTO_HDRS} ${MAV_PROTO_DESCS})\nadd_library(nav_msgs SHARED ${NAV_PROTO_SRCS} ${NAV_PROTO_HDRS} ${NAV_PROTO_DESCS})\nadd_library(physics_msgs SHARED ${PHY_PROTO_SRCS} ${PHY_PROTO_HDRS} ${PHY_PROTO_DESCS})\nadd_library(std_msgs SHARED ${STD_PROTO_SRCS} ${STD_PROTO_HDRS} ${STD_PROTO_DESCS})\nadd_library(sensor_msgs SHARED ${SEN_PROTO_SRCS} ${SEN_PROTO_HDRS} ${SEN_PROTO_DESCS})\n\nset(PROTO_SRC ${PROTO_SRC}${MAV_PROTO_SRCS} ${NAV_PROTO_SRCS} ${PHY_PROTO_SRCS} ${STD_PROTO_SRCS} ${SEN_PROTO_SRCS})\nset(PROTO_HEADER ${PROTO_HEADER}${MAV_PROTO_HDRS} ${NAV_PROTO_HDRS} ${PHY_PROTO_HDRS} ${STD_PROTO_HDRS} ${SEN_PROTO_HDRS})\nset(PROTO_DESCS ${PROTO_DESCS}${MAV_PROTO_DESCS} ${NAV_PROTO_DESCS} ${PHY_PROTO_DESCS} ${STD_PROTO_DESCS} ${SEN_PROTO_DESCS})\nset_source_files_properties(${PROTO_SRC} ${PROTO_HEADER} ${PROTO_DESCS} PROPERTIES GENERATED TRUE)\n\nadd_custom_target(protobuf_compilation DEPENDS mav_msgs nav_msgs physics_msgs std_msgs sensor_msgs)\n\nlink_libraries(mav_msgs nav_msgs physics_msgs std_msgs sensor_msgs)\n\n...\n\n# add msg hdrs and srcs as a dependency to the plugins\nforeach(plugin ${plugins})\n  add_dependencies(${plugin} protobuf_compilation)\nendforeach()\n```\n\n2. So the above generates the required msg headers, sources and descriptors based on custom protos, as the bellow:\n\n```\n// Odometry.proto\nsyntax = \"proto2\";\npackage nav_msgs.msgs;\nimport \"quaternion.proto\";\nimport \"vector3d.proto\";\n\nmessage Odometry\n{\n  required int64 time_usec                       = 1;\n  required gazebo.msgs.Vector3d position         = 2;\n  required gazebo.msgs.Quaternion orientation    = 3;\n  required gazebo.msgs.Vector3d linear_velocity  = 4;\n  required gazebo.msgs.Vector3d angular_velocity = 5;\n  repeated float pose_covariance                                  = 6 [packed=true]; // x.y.z.r.p.y.\n  repeated float twist_covariance                                  = 7 [packed=true]; // vx.vy.vz.rr.pr.yr\n}\n```\n\nSo all this builds correctly, and I get the hdrs, sources and descriptors generated to the same build dir, which I then use the path to set `IGN_DESCRIPTOR_PATH`. Though, when trying to use the `ign topic --echo -t` command, I get the following:\n```sh\n$ ign topic -e -t /gazebo/default/iris/baro\n[libprotobuf ERROR google/protobuf/descriptor.cc:3248] Invalid proto descriptor for file \"Wind.proto\":\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Wind.proto: Import \"vector3d.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   physics_msgs.msgs.Wind.force: \".gazebo.msgs.Vector3d\" is not defined.\nDynamicFactory(). Unable to place descriptors from [/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Wind.desc] in the descriptor pool\n[libprotobuf ERROR google/protobuf/descriptor.cc:3248] Invalid proto descriptor for file \"Odometry.proto\":\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Odometry.proto: Import \"quaternion.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Odometry.proto: Import \"vector3d.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.position: \".gazebo.msgs.Vector3d\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.orientation: \".gazebo.msgs.Quaternion\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.linear_velocity: \".gazebo.msgs.Vector3d\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   nav_msgs.msgs.Odometry.angular_velocity: \".gazebo.msgs.Vector3d\" is not defined.\nDynamicFactory(). Unable to place descriptors from [/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Odometry.desc] in the descriptor pool\n[libprotobuf ERROR google/protobuf/descriptor.cc:3248] Invalid proto descriptor for file \"Imu.proto\":\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Imu.proto: Import \"quaternion.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   Imu.proto: Import \"vector3d.proto\" has not been loaded.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   sensor_msgs.msgs.Imu.orientation: \".gazebo.msgs.Quaternion\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   sensor_msgs.msgs.Imu.angular_velocity: \".gazebo.msgs.Vector3d\" is not defined.\n[libprotobuf ERROR google/protobuf/descriptor.cc:3251]   sensor_msgs.msgs.Imu.linear_acceleration: \".gazebo.msgs.Vector3d\" is not defined.\nDynamicFactory(). Unable to place descriptors from [/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Imu.desc] in the descriptor pool\n```\n\nIt seems it is struggling with the definition of the gazebo msgs descriptors. Also, again, I cannot seem to get any data echoed (I tried to remove the generation of the descriptors for the msgs above and I still can't echo the topic above).\n\nSo currently there seems to be a problem when importing gazebo msg types into the protobuf. And again, I still can't echo the `/gazebo/default/iris/baro` topic, which is of a custom type.\n\nOnce again, thanks for your help!", "markup": "markdown", "html": "<p>Dear @caguero,</p>\n<p>I managed to install ignition tranport 5, ignition msgs 2 and ign tools from source so to make this work. I was able to use the <code>DESCRIPTORS</code> directive in <code>PROTOBUF_GENERATE_CPP()</code> and generate the respective descriptor files for the messages. I also exported the <code>IGN_DECRIPTOR_PATH</code> with the path where the descriptors are stored.</p>\n<p>So to give an example of how the protobuf headers and descriptors are generated:</p>\n<ol>\n<li>On a <code>CMakeLists.txt</code> file:</li>\n</ol>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_IMPORT_DIRS</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">ITR</span> <span class=\"o\">${</span><span class=\"nv\">GAZEBO_INCLUDE_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">ITR</span> <span class=\"s\">MATCHES</span> <span class=\"s2\">&quot;.*gazebo-[0-9.]+$&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_IMPORT_DIRS</span> <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_IMPORT_DIRS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${ITR}/gazebo/msgs/proto&quot;</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n<span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n<span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">IGNITION-MSGS_INCLUDE_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_IMPORT_DIRS</span> <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_IMPORT_DIRS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${IGNITION-MSGS_INCLUDE_DIRS}/ignition/msgs&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n<span class=\"err\">...</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">mav_msgs</span>\n  <span class=\"s\">msgs/CommandMotorSpeed.proto</span>\n  <span class=\"s\">msgs/MotorOutput.proto</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">nav_msgs</span> <span class=\"s\">msgs/Odometry.proto</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">physics_msgs</span> <span class=\"s\">msgs/Wind.proto</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">std_msgs</span> <span class=\"s\">msgs/Int32.proto</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">sensor_msgs</span>\n  <span class=\"s\">msgs/Baro.proto</span>\n  <span class=\"s\">msgs/Diff_press.proto</span>\n  <span class=\"s\">msgs/Imu.proto</span>\n  <span class=\"s\">msgs/IRLock.proto</span>\n  <span class=\"s\">msgs/Float.proto</span>\n  <span class=\"s\">msgs/Groundtruth.proto</span>\n  <span class=\"s\">msgs/Range.proto</span>\n  <span class=\"s\">msgs/SITLGps.proto</span>\n  <span class=\"s\">msgs/OpticalFlow.proto</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">MAV_PROTO_SRCS</span> <span class=\"s\">MAV_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">MAV_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">mav_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">NAV_PROTO_SRCS</span> <span class=\"s\">NAV_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">NAV_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">nav_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">PHY_PROTO_SRCS</span> <span class=\"s\">PHY_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">PHY_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">physics_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">STD_PROTO_SRCS</span> <span class=\"s\">STD_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">STD_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">std_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">PROTOBUF_GENERATE_CPP</span><span class=\"p\">(</span><span class=\"s\">SEN_PROTO_SRCS</span> <span class=\"s\">SEN_PROTO_HDRS</span> <span class=\"s\">DESCRIPTORS</span> <span class=\"s\">SEN_PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">sensor_msgs</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">mav_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">MAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">MAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">MAV_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">nav_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">physics_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">std_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">sensor_msgs</span> <span class=\"s\">SHARED</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_SRC</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_SRC</span><span class=\"o\">}${</span><span class=\"nv\">MAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_SRCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_HEADER</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_HEADER</span><span class=\"o\">}${</span><span class=\"nv\">MAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_HDRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_HDRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_DESCS</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_DESCS</span><span class=\"o\">}${</span><span class=\"nv\">MAV_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">NAV_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PHY_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">STD_PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">SEN_PROTO_DESCS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set_source_files_properties</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">PROTO_SRC</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_HEADER</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_DESCS</span><span class=\"o\">}</span> <span class=\"s\">PROPERTIES</span> <span class=\"s\">GENERATED</span> <span class=\"s\">TRUE</span><span class=\"p\">)</span>\n\n<span class=\"nb\">add_custom_target</span><span class=\"p\">(</span><span class=\"s\">protobuf_compilation</span> <span class=\"s\">DEPENDS</span> <span class=\"s\">mav_msgs</span> <span class=\"s\">nav_msgs</span> <span class=\"s\">physics_msgs</span> <span class=\"s\">std_msgs</span> <span class=\"s\">sensor_msgs</span><span class=\"p\">)</span>\n\n<span class=\"nb\">link_libraries</span><span class=\"p\">(</span><span class=\"s\">mav_msgs</span> <span class=\"s\">nav_msgs</span> <span class=\"s\">physics_msgs</span> <span class=\"s\">std_msgs</span> <span class=\"s\">sensor_msgs</span><span class=\"p\">)</span>\n\n<span class=\"err\">...</span>\n\n<span class=\"c\"># add msg hdrs and srcs as a dependency to the plugins</span>\n<span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">plugin</span> <span class=\"o\">${</span><span class=\"nv\">plugins</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">add_dependencies</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">plugin</span><span class=\"o\">}</span> <span class=\"s\">protobuf_compilation</span><span class=\"p\">)</span>\n<span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<ol>\n<li>So the above generates the required msg headers, sources and descriptors based on custom protos, as the bellow:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//</span> <span class=\"n\">Odometry</span><span class=\"o\">.</span><span class=\"n\">proto</span>\n<span class=\"n\">syntax</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;proto2&quot;</span><span class=\"p\">;</span>\n<span class=\"n\">package</span> <span class=\"n\">nav_msgs</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span> <span class=\"s2\">&quot;quaternion.proto&quot;</span><span class=\"p\">;</span>\n<span class=\"kn\">import</span> <span class=\"s2\">&quot;vector3d.proto&quot;</span><span class=\"p\">;</span>\n\n<span class=\"n\">message</span> <span class=\"n\">Odometry</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">required</span> <span class=\"n\">int64</span> <span class=\"n\">time_usec</span>                       <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Vector3d</span> <span class=\"n\">position</span>         <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Quaternion</span> <span class=\"n\">orientation</span>    <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Vector3d</span> <span class=\"n\">linear_velocity</span>  <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span> <span class=\"n\">gazebo</span><span class=\"o\">.</span><span class=\"n\">msgs</span><span class=\"o\">.</span><span class=\"n\">Vector3d</span> <span class=\"n\">angular_velocity</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"n\">repeated</span> <span class=\"nb\">float</span> <span class=\"n\">pose_covariance</span>                                  <span class=\"o\">=</span> <span class=\"mi\">6</span> <span class=\"p\">[</span><span class=\"n\">packed</span><span class=\"o\">=</span><span class=\"n\">true</span><span class=\"p\">];</span> <span class=\"o\">//</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span>\n  <span class=\"n\">repeated</span> <span class=\"nb\">float</span> <span class=\"n\">twist_covariance</span>                                  <span class=\"o\">=</span> <span class=\"mi\">7</span> <span class=\"p\">[</span><span class=\"n\">packed</span><span class=\"o\">=</span><span class=\"n\">true</span><span class=\"p\">];</span> <span class=\"o\">//</span> <span class=\"n\">vx</span><span class=\"o\">.</span><span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">rr</span><span class=\"o\">.</span><span class=\"n\">pr</span><span class=\"o\">.</span><span class=\"n\">yr</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>So all this builds correctly, and I get the hdrs, sources and descriptors generated to the same build dir, which I then use the path to set <code>IGN_DESCRIPTOR_PATH</code>. Though, when trying to use the <code>ign topic --echo -t</code> command, I get the following:</p>\n<div class=\"codehilite language-sh\"><pre><span></span>$ ign topic -e -t /gazebo/default/iris/baro\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3248<span class=\"o\">]</span> Invalid proto descriptor <span class=\"k\">for</span> file <span class=\"s2\">&quot;Wind.proto&quot;</span>:\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Wind.proto: Import <span class=\"s2\">&quot;vector3d.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   physics_msgs.msgs.Wind.force: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\nDynamicFactory<span class=\"o\">()</span>. Unable to place descriptors from <span class=\"o\">[</span>/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Wind.desc<span class=\"o\">]</span> in the descriptor pool\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3248<span class=\"o\">]</span> Invalid proto descriptor <span class=\"k\">for</span> file <span class=\"s2\">&quot;Odometry.proto&quot;</span>:\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Odometry.proto: Import <span class=\"s2\">&quot;quaternion.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Odometry.proto: Import <span class=\"s2\">&quot;vector3d.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.position: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.orientation: <span class=\"s2\">&quot;.gazebo.msgs.Quaternion&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.linear_velocity: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   nav_msgs.msgs.Odometry.angular_velocity: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\nDynamicFactory<span class=\"o\">()</span>. Unable to place descriptors from <span class=\"o\">[</span>/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Odometry.desc<span class=\"o\">]</span> in the descriptor pool\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3248<span class=\"o\">]</span> Invalid proto descriptor <span class=\"k\">for</span> file <span class=\"s2\">&quot;Imu.proto&quot;</span>:\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Imu.proto: Import <span class=\"s2\">&quot;quaternion.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   Imu.proto: Import <span class=\"s2\">&quot;vector3d.proto&quot;</span> has not been loaded.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   sensor_msgs.msgs.Imu.orientation: <span class=\"s2\">&quot;.gazebo.msgs.Quaternion&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   sensor_msgs.msgs.Imu.angular_velocity: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\n<span class=\"o\">[</span>libprotobuf ERROR google/protobuf/descriptor.cc:3251<span class=\"o\">]</span>   sensor_msgs.msgs.Imu.linear_acceleration: <span class=\"s2\">&quot;.gazebo.msgs.Vector3d&quot;</span> is not defined.\nDynamicFactory<span class=\"o\">()</span>. Unable to place descriptors from <span class=\"o\">[</span>/home/nuno/Client_Projects/SwiftEngineering/Firmware/build/posix_sitl_default/build_gazebo/Imu.desc<span class=\"o\">]</span> in the descriptor pool\n</pre></div>\n\n\n<p>It seems it is struggling with the definition of the gazebo msgs descriptors. Also, again, I cannot seem to get any data echoed (I tried to remove the generation of the descriptors for the msgs above and I still can't echo the topic above).</p>\n<p>So currently there seems to be a problem when importing gazebo msg types into the protobuf. And again, I still can't echo the <code>/gazebo/default/iris/baro</code> topic, which is of a custom type.</p>\n<p>Once again, thanks for your help!</p>", "type": "rendered"}, "created_on": "2018-12-20T16:51:29.930157+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": "2018-12-20T16:54:33.997898+00:00", "type": "issue_comment", "id": 49571765}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49572357.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49572357"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "@caguero never mind about the topic not echoing! Already got it to work:\n```sh\npressure: 100902.8\ntemperature: 287.92102\npressure_alt: 35.247627\n\npressure: 100903.9\ntemperature: 287.92102\npressure_alt: 35.339039\n\npressure: 100904.24\ntemperature: 287.92102\npressure_alt: 35.368294\n```\n\nThough the problem persists regarding the `Invalid proto descriptor`.", "markup": "markdown", "html": "<p>@caguero never mind about the topic not echoing! Already got it to work:</p>\n<div class=\"codehilite language-sh\"><pre><span></span>pressure: <span class=\"m\">100902</span>.8\ntemperature: <span class=\"m\">287</span>.92102\npressure_alt: <span class=\"m\">35</span>.247627\n\npressure: <span class=\"m\">100903</span>.9\ntemperature: <span class=\"m\">287</span>.92102\npressure_alt: <span class=\"m\">35</span>.339039\n\npressure: <span class=\"m\">100904</span>.24\ntemperature: <span class=\"m\">287</span>.92102\npressure_alt: <span class=\"m\">35</span>.368294\n</pre></div>\n\n\n<p>Though the problem persists regarding the <code>Invalid proto descriptor</code>.</p>", "type": "rendered"}, "created_on": "2018-12-20T17:33:43.679470+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": null, "type": "issue_comment", "id": 49572357}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49572985.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49572985"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "Here's a CMake function that you can use:\n\n```\n#!cmake\n##############################################################################\n# Find Protobuf\n##############################################################################\n\nfind_package(Protobuf REQUIRED)\n\n##############################################################################\n# Locate and configure the Google Protocol Buffers library\n#\n# Based on this pull request:\n# https://gitlab.kitware.com/cmake/cmake/blob/1299f4cc5ee5a996b051f7767049e239092a65a0/Modules/FindProtobuf.cmake\n# and modified to include the --include_imports option.\n##############################################################################\n#\n# This method will generate source, header and descriptor files for proto\n# messages.\n#\n# The method populates the following variable arguments:\n#\n# protobuf_SOURCES     : string list of of generated .c pathnames\n# protobuf_HEADERS     : string list of generated .h pathnames\n# protobuf_DESCRIPTORS : string list of generated .desc pathnames\n#\n# It optionally accepts the following named input arguments:\n#\n# IMPORT_DIRS : a string list of dirs to be searched for .proto dependencies\n#               (default: empty)\n# DESTINATION : destination of generated source/header/descriptor files\n#               (default: CMAKE_CURRENT_BINARY_DIR)\n# EXPORT_MACRO: any additional flags to be used\n#\n# The remaining argument should be a list of .proto pathnames.\n#\n# Example usage:\n#\n# protobuf_generate_cpp_with_descriptor(\n#   PROTO_SOURCES\n#   PROTO_HEADERS\n#   PROTO_DESCRIPTORS\n#   IMPORT_DIRS\n#     ${IGNITION-MSGS_INCLUDE_DIRS}\n#   ${PROTO_MESSAGES}\n# )\n#\nfunction(protobuf_generate_cpp_with_descriptor\n           protobuf_SOURCES\n           protobuf_HEADERS\n           protobuf_DESCRIPTORS\n         )\n  cmake_parse_arguments(protobuf \"\" \"EXPORT_MACRO;IMPORT_DIRS;DESTINATION\" \"\" ${ARGN})\n\n  set(PROTO_FILES \"${protobuf_UNPARSED_ARGUMENTS}\")\n\n  if(NOT PROTO_FILES)\n    message(SEND_ERROR \"Error: PROTOBUF_GENERATE_CPP() called without any proto files\")\n    return()\n  endif()\n\n  if(NOT protobuf_DESTINATION)\n    set(protobuf_DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n  endif()\n  file(MAKE_DIRECTORY ${protobuf_DESTINATION})\n\n  if(protobuf_EXPORT_MACRO)\n    set(DLL_EXPORT_DECL \"dllexport_decl=${protobuf_EXPORT_MACRO}:\")\n  endif()\n\n  set(${protobuf_SOURCES})\n  set(${protobuf_HEADERS})\n  set(${protobuf_DESCRIPTORS})\n\n  if(PROTOBUF_GENERATE_CPP_APPEND_PATH)\n    # Create an include path for each file specified\n    foreach(FIL ${PROTO_FILES})\n      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)\n      get_filename_component(ABS_PATH ${ABS_FIL} PATH)\n      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)\n      if(${_contains_already} EQUAL -1)\n          list(APPEND _protobuf_include_path -I ${ABS_PATH})\n      endif()\n    endforeach()\n  else()\n    set(_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})\n  endif()\n\n  foreach(DIR ${protobuf_IMPORT_DIRS})\n    get_filename_component(ABS_PATH ${DIR} ABSOLUTE)\n    list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)\n    if(${_contains_already} EQUAL -1)\n        list(APPEND _protobuf_include_path -I ${ABS_PATH})\n    endif()\n  endforeach()\n\n  foreach(FIL ${PROTO_FILES})\n    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)\n    get_filename_component(FIL_WE ${FIL} NAME_WE)\n    if(NOT PROTOBUF_GENERATE_CPP_APPEND_PATH)\n      get_filename_component(FIL_DIR ${FIL} DIRECTORY)\n      if(FIL_DIR)\n        set(FIL_WE \"${FIL_DIR}/${FIL_WE}\")\n      endif()\n    endif()\n\n    set(_protobuf_protoc_src \"${protobuf_DESTINATION}/${FIL_WE}.pb.cc\")\n    set(_protobuf_protoc_hdr \"${protobuf_DESTINATION}/${FIL_WE}.pb.h\")\n    list(APPEND ${protobuf_SOURCES} \"${_protobuf_protoc_src}\")\n    list(APPEND ${protobuf_HEADERS} \"${_protobuf_protoc_hdr}\")\n\n    set(_protobuf_protoc_desc \"${protobuf_DESTINATION}/${FIL_WE}.desc\")\n    set(_protobuf_protoc_flags\n        \"--include_imports\"\n        \"--descriptor_set_out=${_protobuf_protoc_desc}\")\n    list(APPEND ${protobuf_DESCRIPTORS} \"${_protobuf_protoc_desc}\")\n\n    add_custom_command(\n      OUTPUT \"${_protobuf_protoc_src}\"\n             \"${_protobuf_protoc_hdr}\"\n             ${_protobuf_protoc_desc}\n      COMMAND  protobuf::protoc\n               \"--cpp_out=${DLL_EXPORT_DECL}${protobuf_DESTINATION}\"\n               ${_protobuf_protoc_flags}\n               ${_protobuf_include_path} ${ABS_FIL}\n      DEPENDS ${ABS_FIL} protobuf::protoc\n      COMMENT \"Running C++ protocol buffer compiler on ${FIL}\"\n      VERBATIM )\n  endforeach()\n\n  # Odd that you need to re-set these to get parent scope on them\n  # (i.e. can't be done above when the variables are initially defined)\n  set(${protobuf_SOURCES}     \"${${protobuf_SOURCES}}\"     PARENT_SCOPE)\n  set(${protobuf_HEADERS}     \"${${protobuf_HEADERS}}\"     PARENT_SCOPE)\n  set(${protobuf_DESCRIPTORS} \"${${protobuf_DESCRIPTORS}}\" PARENT_SCOPE)\n\nendfunction()\n```\n\nAnd here's an example of how you can use the function:\n\n\n```\n#!cmake\n\n##############################################################################\n# Find Protobuf & Custom Macros\n##############################################################################\n\ninclude(${PROJECT_SOURCE_DIR}/cmake/Protobuf.cmake)\n\n##############################################################################\n# Generate Messages\n##############################################################################\n\nset(PROTO_MESSAGES\n  agent_state.proto\n  agent_state_v.proto\n  automotive_driving_command.proto\n  rpy_angles.proto\n  scene_request.proto\n  simulation_in_message.proto\n  viewer2_comms.proto\n  viewer_command.proto\n)\n\nprotobuf_generate_cpp_with_descriptor(\n  PROTO_SOURCES\n  PROTO_HEADERS\n  PROTO_DESCRIPTORS\n  IMPORT_DIRS\n    ${IGNITION-MSGS_INCLUDE_DIRS}\n  DESTINATION\n    ${PROJECT_BINARY_DIR}/include/delphyne/protobuf\n  ${PROTO_MESSAGES}\n)\n\n##############################################################################\n# Library\n##############################################################################\n\n# TODO: switch from PROTOBUF_INCLUDE_DIRS / PROTOBUF_LIBRARIES to\n#       protobuf::libprotobuf (currently creates a pthread_create problem)\n\nadd_library(protobuf_messages ${PROTO_SOURCES})\nset_target_properties(protobuf_messages PROPERTIES OUTPUT_NAME ${PROJECT_NAME}-protobuf-messages)\ntarget_include_directories(\n  protobuf_messages\n  PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n    ${PROTOBUF_INCLUDE_DIRS}\n)\ntarget_link_libraries(\n  protobuf_messages\n  PUBLIC\n    ${PROTOBUF_LIBRARIES}\n    ignition-msgs2::ignition-msgs2\n)\n\n##############################################################################\n# Install\n##############################################################################\n\ninstall(\n  FILES\n    ${PROTO_HEADERS}\n    ${PROTO_DESCRIPTORS}\n  DESTINATION\n    ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/protobuf\n)\n\ninstall(\n  FILES\n    ${PROTO_MESSAGES}\n  DESTINATION\n    ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/proto\n)\n\ninstall(TARGETS protobuf_messages EXPORT ${PROJECT_NAME}-targets\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\n```\n\nNote that when generating the descriptor information (as part of the CMake function), we're using the `--include-imports` option, that includes all dependencies of the input files in the set, so that the set is self-contained. Maybe the `invalid proto descriptor` error can be explained because you're not using this option.", "markup": "markdown", "html": "<p>Here's a CMake function that you can use:</p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Find Protobuf</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">Protobuf</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Locate and configure the Google Protocol Buffers library</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Based on this pull request:</span>\n<span class=\"c\"># https://gitlab.kitware.com/cmake/cmake/blob/1299f4cc5ee5a996b051f7767049e239092a65a0/Modules/FindProtobuf.cmake</span>\n<span class=\"c\"># and modified to include the --include_imports option.</span>\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># This method will generate source, header and descriptor files for proto</span>\n<span class=\"c\"># messages.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># The method populates the following variable arguments:</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># protobuf_SOURCES     : string list of of generated .c pathnames</span>\n<span class=\"c\"># protobuf_HEADERS     : string list of generated .h pathnames</span>\n<span class=\"c\"># protobuf_DESCRIPTORS : string list of generated .desc pathnames</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># It optionally accepts the following named input arguments:</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># IMPORT_DIRS : a string list of dirs to be searched for .proto dependencies</span>\n<span class=\"c\">#               (default: empty)</span>\n<span class=\"c\"># DESTINATION : destination of generated source/header/descriptor files</span>\n<span class=\"c\">#               (default: CMAKE_CURRENT_BINARY_DIR)</span>\n<span class=\"c\"># EXPORT_MACRO: any additional flags to be used</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># The remaining argument should be a list of .proto pathnames.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Example usage:</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># protobuf_generate_cpp_with_descriptor(</span>\n<span class=\"c\">#   PROTO_SOURCES</span>\n<span class=\"c\">#   PROTO_HEADERS</span>\n<span class=\"c\">#   PROTO_DESCRIPTORS</span>\n<span class=\"c\">#   IMPORT_DIRS</span>\n<span class=\"c\">#     ${IGNITION-MSGS_INCLUDE_DIRS}</span>\n<span class=\"c\">#   ${PROTO_MESSAGES}</span>\n<span class=\"c\"># )</span>\n<span class=\"c\">#</span>\n<span class=\"nb\">function</span><span class=\"p\">(</span><span class=\"s\">protobuf_generate_cpp_with_descriptor</span>\n           <span class=\"s\">protobuf_SOURCES</span>\n           <span class=\"s\">protobuf_HEADERS</span>\n           <span class=\"s\">protobuf_DESCRIPTORS</span>\n         <span class=\"p\">)</span>\n  <span class=\"nb\">cmake_parse_arguments</span><span class=\"p\">(</span><span class=\"s\">protobuf</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"s2\">&quot;EXPORT_MACRO;IMPORT_DIRS;DESTINATION&quot;</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">${</span><span class=\"nv\">ARGN</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_FILES</span> <span class=\"s2\">&quot;${protobuf_UNPARSED_ARGUMENTS}&quot;</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">PROTO_FILES</span><span class=\"p\">)</span>\n    <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s\">SEND_ERROR</span> <span class=\"s2\">&quot;Error: PROTOBUF_GENERATE_CPP() called without any proto files&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">return</span><span class=\"p\">()</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">protobuf_DESTINATION</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">protobuf_DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_CURRENT_BINARY_DIR</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n  <span class=\"nb\">file</span><span class=\"p\">(</span><span class=\"s\">MAKE_DIRECTORY</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_DESTINATION</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">protobuf_EXPORT_MACRO</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">DLL_EXPORT_DECL</span> <span class=\"s2\">&quot;dllexport_decl=${protobuf_EXPORT_MACRO}:&quot;</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_SOURCES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_HEADERS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_DESCRIPTORS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">PROTOBUF_GENERATE_CPP_APPEND_PATH</span><span class=\"p\">)</span>\n    <span class=\"c\"># Create an include path for each file specified</span>\n    <span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">FIL</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_FILES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n      <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_FIL</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">ABSOLUTE</span><span class=\"p\">)</span>\n      <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_PATH</span> <span class=\"o\">${</span><span class=\"nv\">ABS_FIL</span><span class=\"o\">}</span> <span class=\"s\">PATH</span><span class=\"p\">)</span>\n      <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">FIND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span> <span class=\"s\">_contains_already</span><span class=\"p\">)</span>\n      <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">_contains_already</span><span class=\"o\">}</span> <span class=\"s\">EQUAL</span> <span class=\"s\">-1</span><span class=\"p\">)</span>\n          <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"s\">-I</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span><span class=\"p\">)</span>\n      <span class=\"nb\">endif</span><span class=\"p\">()</span>\n    <span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n  <span class=\"nb\">else</span><span class=\"p\">()</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_include_path</span> <span class=\"s\">-I</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"o\">}</span><span class=\"p\">)</span>\n  <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">DIR</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_IMPORT_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n    <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_PATH</span> <span class=\"o\">${</span><span class=\"nv\">DIR</span><span class=\"o\">}</span> <span class=\"s\">ABSOLUTE</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">FIND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span> <span class=\"s\">_contains_already</span><span class=\"p\">)</span>\n    <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">_contains_already</span><span class=\"o\">}</span> <span class=\"s\">EQUAL</span> <span class=\"s\">-1</span><span class=\"p\">)</span>\n        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"s\">_protobuf_include_path</span> <span class=\"s\">-I</span> <span class=\"o\">${</span><span class=\"nv\">ABS_PATH</span><span class=\"o\">}</span><span class=\"p\">)</span>\n    <span class=\"nb\">endif</span><span class=\"p\">()</span>\n  <span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">foreach</span><span class=\"p\">(</span><span class=\"s\">FIL</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_FILES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n    <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">ABS_FIL</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">ABSOLUTE</span><span class=\"p\">)</span>\n    <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">FIL_WE</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">NAME_WE</span><span class=\"p\">)</span>\n    <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">PROTOBUF_GENERATE_CPP_APPEND_PATH</span><span class=\"p\">)</span>\n      <span class=\"nb\">get_filename_component</span><span class=\"p\">(</span><span class=\"s\">FIL_DIR</span> <span class=\"o\">${</span><span class=\"nv\">FIL</span><span class=\"o\">}</span> <span class=\"s\">DIRECTORY</span><span class=\"p\">)</span>\n      <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">FIL_DIR</span><span class=\"p\">)</span>\n        <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">FIL_WE</span> <span class=\"s2\">&quot;${FIL_DIR}/${FIL_WE}&quot;</span><span class=\"p\">)</span>\n      <span class=\"nb\">endif</span><span class=\"p\">()</span>\n    <span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_src</span> <span class=\"s2\">&quot;${protobuf_DESTINATION}/${FIL_WE}.pb.cc&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_hdr</span> <span class=\"s2\">&quot;${protobuf_DESTINATION}/${FIL_WE}.pb.h&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_SOURCES</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${_protobuf_protoc_src}&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_HEADERS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${_protobuf_protoc_hdr}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_desc</span> <span class=\"s2\">&quot;${protobuf_DESTINATION}/${FIL_WE}.desc&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_flags</span>\n        <span class=\"s2\">&quot;--include_imports&quot;</span>\n        <span class=\"s2\">&quot;--descriptor_set_out=${_protobuf_protoc_desc}&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">APPEND</span> <span class=\"o\">${</span><span class=\"nv\">protobuf_DESCRIPTORS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${_protobuf_protoc_desc}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">add_custom_command</span><span class=\"p\">(</span>\n      <span class=\"s\">OUTPUT</span> <span class=\"s2\">&quot;${_protobuf_protoc_src}&quot;</span>\n             <span class=\"s2\">&quot;${_protobuf_protoc_hdr}&quot;</span>\n             <span class=\"o\">${</span><span class=\"nv\">_protobuf_protoc_desc</span><span class=\"o\">}</span>\n      <span class=\"s\">COMMAND</span>  <span class=\"s\">protobuf::protoc</span>\n               <span class=\"s2\">&quot;--cpp_out=${DLL_EXPORT_DECL}${protobuf_DESTINATION}&quot;</span>\n               <span class=\"o\">${</span><span class=\"nv\">_protobuf_protoc_flags</span><span class=\"o\">}</span>\n               <span class=\"o\">${</span><span class=\"nv\">_protobuf_include_path</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">ABS_FIL</span><span class=\"o\">}</span>\n      <span class=\"s\">DEPENDS</span> <span class=\"o\">${</span><span class=\"nv\">ABS_FIL</span><span class=\"o\">}</span> <span class=\"s\">protobuf::protoc</span>\n      <span class=\"s\">COMMENT</span> <span class=\"s2\">&quot;Running C++ protocol buffer compiler on ${FIL}&quot;</span>\n      <span class=\"s\">VERBATIM</span> <span class=\"p\">)</span>\n  <span class=\"nb\">endforeach</span><span class=\"p\">()</span>\n\n  <span class=\"c\"># Odd that you need to re-set these to get parent scope on them</span>\n  <span class=\"c\"># (i.e. can&#39;t be done above when the variables are initially defined)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_SOURCES</span><span class=\"o\">}</span>     <span class=\"s2\">&quot;${${protobuf_SOURCES}}&quot;</span>     <span class=\"s\">PARENT_SCOPE</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_HEADERS</span><span class=\"o\">}</span>     <span class=\"s2\">&quot;${${protobuf_HEADERS}}&quot;</span>     <span class=\"s\">PARENT_SCOPE</span><span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">protobuf_DESCRIPTORS</span><span class=\"o\">}</span> <span class=\"s2\">&quot;${${protobuf_DESCRIPTORS}}&quot;</span> <span class=\"s\">PARENT_SCOPE</span><span class=\"p\">)</span>\n\n<span class=\"nb\">endfunction</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>And here's an example of how you can use the function:</p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Find Protobuf &amp; Custom Macros</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">include</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">PROJECT_SOURCE_DIR</span><span class=\"o\">}</span><span class=\"s\">/cmake/Protobuf.cmake</span><span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Generate Messages</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">PROTO_MESSAGES</span>\n  <span class=\"s\">agent_state.proto</span>\n  <span class=\"s\">agent_state_v.proto</span>\n  <span class=\"s\">automotive_driving_command.proto</span>\n  <span class=\"s\">rpy_angles.proto</span>\n  <span class=\"s\">scene_request.proto</span>\n  <span class=\"s\">simulation_in_message.proto</span>\n  <span class=\"s\">viewer2_comms.proto</span>\n  <span class=\"s\">viewer_command.proto</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">protobuf_generate_cpp_with_descriptor</span><span class=\"p\">(</span>\n  <span class=\"s\">PROTO_SOURCES</span>\n  <span class=\"s\">PROTO_HEADERS</span>\n  <span class=\"s\">PROTO_DESCRIPTORS</span>\n  <span class=\"s\">IMPORT_DIRS</span>\n    <span class=\"o\">${</span><span class=\"nv\">IGNITION-MSGS_INCLUDE_DIRS</span><span class=\"o\">}</span>\n  <span class=\"s\">DESTINATION</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROJECT_BINARY_DIR</span><span class=\"o\">}</span><span class=\"s\">/include/delphyne/protobuf</span>\n  <span class=\"o\">${</span><span class=\"nv\">PROTO_MESSAGES</span><span class=\"o\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Library</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"c\"># TODO: switch from PROTOBUF_INCLUDE_DIRS / PROTOBUF_LIBRARIES to</span>\n<span class=\"c\">#       protobuf::libprotobuf (currently creates a pthread_create problem)</span>\n\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">protobuf_messages</span> <span class=\"o\">${</span><span class=\"nv\">PROTO_SOURCES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">set_target_properties</span><span class=\"p\">(</span><span class=\"s\">protobuf_messages</span> <span class=\"s\">PROPERTIES</span> <span class=\"s\">OUTPUT_NAME</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">-protobuf-messages</span><span class=\"p\">)</span>\n<span class=\"nb\">target_include_directories</span><span class=\"p\">(</span>\n  <span class=\"s\">protobuf_messages</span>\n  <span class=\"s\">PUBLIC</span>\n    <span class=\"o\">$&lt;</span><span class=\"nv\">BUILD_INTERFACE:${PROJECT_BINARY_DIR}</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">$&lt;</span><span class=\"nv\">INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_INCLUDE_DIRS</span><span class=\"o\">}</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>\n  <span class=\"s\">protobuf_messages</span>\n  <span class=\"s\">PUBLIC</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTOBUF_LIBRARIES</span><span class=\"o\">}</span>\n    <span class=\"s\">ignition-msgs2::ignition-msgs2</span>\n<span class=\"p\">)</span>\n\n<span class=\"c\">##############################################################################</span>\n<span class=\"c\"># Install</span>\n<span class=\"c\">##############################################################################</span>\n\n<span class=\"nb\">install</span><span class=\"p\">(</span>\n  <span class=\"s\">FILES</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTO_HEADERS</span><span class=\"o\">}</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTO_DESCRIPTORS</span><span class=\"o\">}</span>\n  <span class=\"s\">DESTINATION</span>\n    <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_INCLUDEDIR</span><span class=\"o\">}</span><span class=\"s\">/</span><span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">/protobuf</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">install</span><span class=\"p\">(</span>\n  <span class=\"s\">FILES</span>\n    <span class=\"o\">${</span><span class=\"nv\">PROTO_MESSAGES</span><span class=\"o\">}</span>\n  <span class=\"s\">DESTINATION</span>\n    <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_DATAROOTDIR</span><span class=\"o\">}</span><span class=\"s\">/</span><span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">/proto</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">install</span><span class=\"p\">(</span><span class=\"s\">TARGETS</span> <span class=\"s\">protobuf_messages</span> <span class=\"s\">EXPORT</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">-targets</span>\n  <span class=\"s\">RUNTIME</span> <span class=\"s\">DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_BINDIR</span><span class=\"o\">}</span>\n  <span class=\"s\">LIBRARY</span> <span class=\"s\">DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_LIBDIR</span><span class=\"o\">}</span>\n  <span class=\"s\">ARCHIVE</span> <span class=\"s\">DESTINATION</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_INSTALL_LIBDIR</span><span class=\"o\">}</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Note that when generating the descriptor information (as part of the CMake function), we're using the <code>--include-imports</code> option, that includes all dependencies of the input files in the set, so that the set is self-contained. Maybe the <code>invalid proto descriptor</code> error can be explained because you're not using this option.</p>", "type": "rendered"}, "created_on": "2018-12-20T18:23:20.137948+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2018-12-20T18:24:15.520757+00:00", "type": "issue_comment", "id": 49572985}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49582303.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49582303"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "@caguero thank you for your feedback! Really useful! Though shouldn't `PROTOBUF_GENERATE_CPP(PROTO_SRC PROTO_HDR DESCRIPTORS PROTO_DESCS ${protos})` or similar do the same as `protobuf_generate_cpp_with_descriptor()`? As far as I know `PROTOBUF_GENERATE_CPP()` is still a supported CMake function.", "markup": "markdown", "html": "<p>@caguero thank you for your feedback! Really useful! Though shouldn't <code>PROTOBUF_GENERATE_CPP(PROTO_SRC PROTO_HDR DESCRIPTORS PROTO_DESCS ${protos})</code> or similar do the same as <code>protobuf_generate_cpp_with_descriptor()</code>? As far as I know <code>PROTOBUF_GENERATE_CPP()</code> is still a supported CMake function.</p>", "type": "rendered"}, "created_on": "2018-12-21T09:26:16.281686+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": "2018-12-21T09:30:06.814282+00:00", "type": "issue_comment", "id": 49582303}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49582322.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49582322"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "Also, where in your CMake you are using `--include-imports`? I was looking to find it.", "markup": "markdown", "html": "<p>Also, where in your CMake you are using <code>--include-imports</code>? I was looking to find it.</p>", "type": "rendered"}, "created_on": "2018-12-21T09:27:05.696087+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": null, "type": "issue_comment", "id": 49582322}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49590662.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49590662"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "The latests versions of  `PROTOBUF_GENERATE_CPP` can generate descriptor information but if I'm not wrong, you cannot pass  extra arguments, like `--include-imports`. I'm not 100% sure and it might be the case that the current `PROTOBUF_GENERATE_CPP` function is enough.\n\nIf you still need a custom CMake function, you can see how we do it in this line:\n\n\n```\n#!cmake\n\nset(_protobuf_protoc_flags\n        \"--include_imports\"\n        \"--descriptor_set_out=${_protobuf_protoc_desc}\")\n```\n\nand this variable is used in the following command:\n\n```\n#!cmake\n\n...\n COMMAND  protobuf::protoc\n               \"--cpp_out=${DLL_EXPORT_DECL}${protobuf_DESTINATION}\"\n               ${_protobuf_protoc_flags}\n               ${_protobuf_include_path} ${ABS_FIL}\n\n```", "markup": "markdown", "html": "<p>The latests versions of  <code>PROTOBUF_GENERATE_CPP</code> can generate descriptor information but if I'm not wrong, you cannot pass  extra arguments, like <code>--include-imports</code>. I'm not 100% sure and it might be the case that the current <code>PROTOBUF_GENERATE_CPP</code> function is enough.</p>\n<p>If you still need a custom CMake function, you can see how we do it in this line:</p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">_protobuf_protoc_flags</span>\n        <span class=\"s2\">&quot;--include_imports&quot;</span>\n        <span class=\"s2\">&quot;--descriptor_set_out=${_protobuf_protoc_desc}&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and this variable is used in the following command:</p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"err\">...</span>\n <span class=\"err\">COMMAND</span>  <span class=\"err\">protobuf::protoc</span>\n               <span class=\"err\">&quot;--cpp_out=${DLL_EXPORT_DECL}${protobuf_DESTINATION}&quot;</span>\n               <span class=\"err\">${_protobuf_protoc_flags}</span>\n               <span class=\"err\">${_protobuf_include_path}</span> <span class=\"err\">${ABS_FIL}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-12-21T18:49:33.373189+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 49590662}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49593428.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49593428"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "@caguero thank you! I will try that and let you know.\n\nAlso regarding custom topics: I am using Gazebo 9, and I am trying to use the GUI real time plotting tool of it. I cannot plot any data from custom topics - the ones going over Gazebo Transport are detected but I can't select any field to plot, and the ones going over Ignition Tools don't even show up.\n\nSo my question is: do you have a suggestion for a tool that allows to real plot custom topics, without depending on ROS for that? (I know I could publish the data as ROS topics but that's not intended of course) Or, is there some recommendation you can give regarding this? Do I have to build Gazebo 9 from source to be able to plot custom topics? Or do I need some sort of plugin that assembles this data and plots it using some plotting tool?", "markup": "markdown", "html": "<p>@caguero thank you! I will try that and let you know.</p>\n<p>Also regarding custom topics: I am using Gazebo 9, and I am trying to use the GUI real time plotting tool of it. I cannot plot any data from custom topics - the ones going over Gazebo Transport are detected but I can't select any field to plot, and the ones going over Ignition Tools don't even show up.</p>\n<p>So my question is: do you have a suggestion for a tool that allows to real plot custom topics, without depending on ROS for that? (I know I could publish the data as ROS topics but that's not intended of course) Or, is there some recommendation you can give regarding this? Do I have to build Gazebo 9 from source to be able to plot custom topics? Or do I need some sort of plugin that assembles this data and plots it using some plotting tool?</p>", "type": "rendered"}, "created_on": "2018-12-21T23:42:32.288900+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": null, "type": "issue_comment", "id": 49593428}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49710523.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49710523"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "Nuno, did you manage to solve this issue? Let's move the Gazebo question to the Gazebo issue tracker to keep it clean if you don't mind :)", "markup": "markdown", "html": "<p>Nuno, did you manage to solve this issue? Let's move the Gazebo question to the Gazebo issue tracker to keep it clean if you don't mind :)</p>", "type": "rendered"}, "created_on": "2019-01-02T18:22:26.557676+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2019-01-02T18:22:54.075933+00:00", "type": "issue_comment", "id": 49710523}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5/comments/49710865.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/issues/5#comment-49710865"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "title": "ign tools echo command unable to output data from custom Protobuf messages."}, "content": {"raw": "@caguero Hi and happy new year! I have not gave a try yet for your Cmake build script but should do it soon.\n\nAbout the Gazebo question: yes I will move it there then so to keep this clean. Thanks!", "markup": "markdown", "html": "<p>@caguero Hi and happy new year! I have not gave a try yet for your Cmake build script but should do it soon.</p>\n<p>About the Gazebo question: yes I will move it there then so to keep this clean. Thanks!</p>", "type": "rendered"}, "created_on": "2019-01-02T18:51:57.790721+00:00", "user": {"display_name": "Nuno Marques", "uuid": "{a7356a80-a26a-4ab7-af5b-494fe038a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba7356a80-a26a-4ab7-af5b-494fe038a1c7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52/20fd74f9-d763-4f0e-b57f-c4570327e595/128"}}, "nickname": "TSC21", "type": "user", "account_id": "557058:2ae57099-6545-4ef4-8e48-3cd5f87b7f52"}, "updated_on": null, "type": "issue_comment", "id": 49710865}], "page": 1, "size": 12}