{"rendered": {"description": {"raw": "I'm working on bash tab completion, and I need `ign` to output just a list of the available commands. \r\n\r\nThe following is my current tab-completion script, which is not done. You can cut-and-paste this script into a file, source the file, and then try to tab complete an `ign` command.\r\n\r\n```\r\nfunction _ign\r\n{\r\n  local cmd cur prev opts\r\n  COMPREPLY=()\r\n  cur=\"$2\"\r\n  prev=\"$3\"\r\n\r\n  # searching for the command\r\n  for ((i=1; $i<=$COMP_CWORD; i++)); do\r\n    if [[ ${COMP_WORDS[i]} != -* ]]; then\r\n      cmd=\"${COMP_WORDS[i]}\"\r\n      break\r\n    fi\r\n  done\r\n  # echo \"COMP_CWORD[$COMP_CWORD] cmd[$cmd] cur[$cur] prev[$prev]\"\r\n\r\n  # Get all the available commands\r\n  if [[ $COMP_CWORD == 1 ]]; then\r\n    opts=`ign --commands`\r\n  else\r\n    opts=`ign ${cmd} --complete ${prev}`\r\n  fi\r\n  COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}))\r\n}\r\n\r\ncomplete -F \"_ign\" \"ign\"\r\n```", "markup": "markdown", "html": "<p>I'm working on bash tab completion, and I need <code>ign</code> to output just a list of the available commands. </p>\n<p>The following is my current tab-completion script, which is not done. You can cut-and-paste this script into a file, source the file, and then try to tab complete an <code>ign</code> command.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">function</span> <span class=\"nx\">_ign</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">local</span> <span class=\"nx\">cmd</span> <span class=\"nx\">cur</span> <span class=\"nx\">prev</span> <span class=\"nx\">opts</span>\n  <span class=\"nx\">COMPREPLY</span><span class=\"o\">=</span><span class=\"p\">()</span>\n  <span class=\"nx\">cur</span><span class=\"o\">=</span><span class=\"s2\">&quot;$2&quot;</span>\n  <span class=\"nx\">prev</span><span class=\"o\">=</span><span class=\"s2\">&quot;$3&quot;</span>\n\n  <span class=\"err\">#</span> <span class=\"nx\">searching</span> <span class=\"k\">for</span> <span class=\"nx\">the</span> <span class=\"nx\">command</span>\n  <span class=\"k\">for</span> <span class=\"p\">((</span><span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">$i</span><span class=\"o\">&lt;=</span><span class=\"nx\">$COMP_CWORD</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">));</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"p\">[[</span> <span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">COMP_WORDS</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]}</span> <span class=\"o\">!=</span> <span class=\"o\">-*</span> <span class=\"p\">]];</span> <span class=\"nx\">then</span>\n      <span class=\"nx\">cmd</span><span class=\"o\">=</span><span class=\"s2\">&quot;${COMP_WORDS[i]}&quot;</span>\n      <span class=\"k\">break</span>\n    <span class=\"nx\">fi</span>\n  <span class=\"nx\">done</span>\n  <span class=\"err\">#</span> <span class=\"nx\">echo</span> <span class=\"s2\">&quot;COMP_CWORD[$COMP_CWORD] cmd[$cmd] cur[$cur] prev[$prev]&quot;</span>\n\n  <span class=\"err\">#</span> <span class=\"nx\">Get</span> <span class=\"nx\">all</span> <span class=\"nx\">the</span> <span class=\"nx\">available</span> <span class=\"nx\">commands</span>\n  <span class=\"k\">if</span> <span class=\"p\">[[</span> <span class=\"nx\">$COMP_CWORD</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"p\">]];</span> <span class=\"nx\">then</span>\n    <span class=\"nx\">opts</span><span class=\"o\">=</span><span class=\"sb\">`ign --commands`</span>\n  <span class=\"k\">else</span>\n    <span class=\"nx\">opts</span><span class=\"o\">=</span><span class=\"sb\">`ign </span><span class=\"si\">${</span><span class=\"nx\">cmd</span><span class=\"si\">}</span><span class=\"sb\"> --complete </span><span class=\"si\">${</span><span class=\"nx\">prev</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"nx\">fi</span>\n  <span class=\"nx\">COMPREPLY</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">compgen</span> <span class=\"o\">-</span><span class=\"nx\">W</span> <span class=\"s2\">&quot;${opts}&quot;</span> <span class=\"o\">--</span> <span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">cur</span><span class=\"p\">}))</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">complete</span> <span class=\"o\">-</span><span class=\"nx\">F</span> <span class=\"s2\">&quot;_ign&quot;</span> <span class=\"s2\">&quot;ign&quot;</span>\n</pre></div>", "type": "rendered"}, "title": {"raw": "Added --commands", "markup": "markdown", "html": "<p>Added --commands</p>", "type": "rendered"}}, "type": "pullrequest", "description": "I'm working on bash tab completion, and I need `ign` to output just a list of the available commands. \r\n\r\nThe following is my current tab-completion script, which is not done. You can cut-and-paste this script into a file, source the file, and then try to tab complete an `ign` command.\r\n\r\n```\r\nfunction _ign\r\n{\r\n  local cmd cur prev opts\r\n  COMPREPLY=()\r\n  cur=\"$2\"\r\n  prev=\"$3\"\r\n\r\n  # searching for the command\r\n  for ((i=1; $i<=$COMP_CWORD; i++)); do\r\n    if [[ ${COMP_WORDS[i]} != -* ]]; then\r\n      cmd=\"${COMP_WORDS[i]}\"\r\n      break\r\n    fi\r\n  done\r\n  # echo \"COMP_CWORD[$COMP_CWORD] cmd[$cmd] cur[$cur] prev[$prev]\"\r\n\r\n  # Get all the available commands\r\n  if [[ $COMP_CWORD == 1 ]]; then\r\n    opts=`ign --commands`\r\n  else\r\n    opts=`ign ${cmd} --complete ${prev}`\r\n  fi\r\n  COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}))\r\n}\r\n\r\ncomplete -F \"_ign\" \"ign\"\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-tools/pullrequests/23/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-tools/diffstat/ignitionrobotics/ign-tools:e796eeeec753%0D5fa88f10b1ea?from_pullrequest_id=23"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-tools/pullrequests/23/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-tools/pullrequests/23.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-tools/pullrequests/23/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-tools/pullrequests/23/merge"}, "html": {"href": "#!/ignitionrobotics/ign-tools/pull-requests/23"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-tools/pullrequests/23/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-tools/diff/ignitionrobotics/ign-tools:e796eeeec753%0D5fa88f10b1ea?from_pullrequest_id=23"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-tools/pullrequests/23/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-tools/pullrequests/23/statuses_page=1.json"}}, "title": "Added --commands", "close_source_branch": true, "reviewers": [], "id": 23, "destination": {"commit": {"hash": "5fa88f10b1ea", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/commit/5fa88f10b1ea.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/commits/5fa88f10b1ea"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "branch": {"name": "ign-tools0"}}, "created_on": "2020-02-26T21:28:17.715030+00:00", "summary": {"raw": "I'm working on bash tab completion, and I need `ign` to output just a list of the available commands. \r\n\r\nThe following is my current tab-completion script, which is not done. You can cut-and-paste this script into a file, source the file, and then try to tab complete an `ign` command.\r\n\r\n```\r\nfunction _ign\r\n{\r\n  local cmd cur prev opts\r\n  COMPREPLY=()\r\n  cur=\"$2\"\r\n  prev=\"$3\"\r\n\r\n  # searching for the command\r\n  for ((i=1; $i<=$COMP_CWORD; i++)); do\r\n    if [[ ${COMP_WORDS[i]} != -* ]]; then\r\n      cmd=\"${COMP_WORDS[i]}\"\r\n      break\r\n    fi\r\n  done\r\n  # echo \"COMP_CWORD[$COMP_CWORD] cmd[$cmd] cur[$cur] prev[$prev]\"\r\n\r\n  # Get all the available commands\r\n  if [[ $COMP_CWORD == 1 ]]; then\r\n    opts=`ign --commands`\r\n  else\r\n    opts=`ign ${cmd} --complete ${prev}`\r\n  fi\r\n  COMPREPLY=($(compgen -W \"${opts}\" -- ${cur}))\r\n}\r\n\r\ncomplete -F \"_ign\" \"ign\"\r\n```", "markup": "markdown", "html": "<p>I'm working on bash tab completion, and I need <code>ign</code> to output just a list of the available commands. </p>\n<p>The following is my current tab-completion script, which is not done. You can cut-and-paste this script into a file, source the file, and then try to tab complete an <code>ign</code> command.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">function</span> <span class=\"nx\">_ign</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">local</span> <span class=\"nx\">cmd</span> <span class=\"nx\">cur</span> <span class=\"nx\">prev</span> <span class=\"nx\">opts</span>\n  <span class=\"nx\">COMPREPLY</span><span class=\"o\">=</span><span class=\"p\">()</span>\n  <span class=\"nx\">cur</span><span class=\"o\">=</span><span class=\"s2\">&quot;$2&quot;</span>\n  <span class=\"nx\">prev</span><span class=\"o\">=</span><span class=\"s2\">&quot;$3&quot;</span>\n\n  <span class=\"err\">#</span> <span class=\"nx\">searching</span> <span class=\"k\">for</span> <span class=\"nx\">the</span> <span class=\"nx\">command</span>\n  <span class=\"k\">for</span> <span class=\"p\">((</span><span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">$i</span><span class=\"o\">&lt;=</span><span class=\"nx\">$COMP_CWORD</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">));</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"p\">[[</span> <span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">COMP_WORDS</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]}</span> <span class=\"o\">!=</span> <span class=\"o\">-*</span> <span class=\"p\">]];</span> <span class=\"nx\">then</span>\n      <span class=\"nx\">cmd</span><span class=\"o\">=</span><span class=\"s2\">&quot;${COMP_WORDS[i]}&quot;</span>\n      <span class=\"k\">break</span>\n    <span class=\"nx\">fi</span>\n  <span class=\"nx\">done</span>\n  <span class=\"err\">#</span> <span class=\"nx\">echo</span> <span class=\"s2\">&quot;COMP_CWORD[$COMP_CWORD] cmd[$cmd] cur[$cur] prev[$prev]&quot;</span>\n\n  <span class=\"err\">#</span> <span class=\"nx\">Get</span> <span class=\"nx\">all</span> <span class=\"nx\">the</span> <span class=\"nx\">available</span> <span class=\"nx\">commands</span>\n  <span class=\"k\">if</span> <span class=\"p\">[[</span> <span class=\"nx\">$COMP_CWORD</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"p\">]];</span> <span class=\"nx\">then</span>\n    <span class=\"nx\">opts</span><span class=\"o\">=</span><span class=\"sb\">`ign --commands`</span>\n  <span class=\"k\">else</span>\n    <span class=\"nx\">opts</span><span class=\"o\">=</span><span class=\"sb\">`ign </span><span class=\"si\">${</span><span class=\"nx\">cmd</span><span class=\"si\">}</span><span class=\"sb\"> --complete </span><span class=\"si\">${</span><span class=\"nx\">prev</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"nx\">fi</span>\n  <span class=\"nx\">COMPREPLY</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">compgen</span> <span class=\"o\">-</span><span class=\"nx\">W</span> <span class=\"s2\">&quot;${opts}&quot;</span> <span class=\"o\">--</span> <span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">cur</span><span class=\"p\">}))</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">complete</span> <span class=\"o\">-</span><span class=\"nx\">F</span> <span class=\"s2\">&quot;_ign&quot;</span> <span class=\"s2\">&quot;ign&quot;</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "1e7bd049def5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/commit/1e7bd049def5.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/commits/1e7bd049def5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1d3755e4-eb8f-4c81-9519-830fae2fbba8}ts=ruby"}}, "type": "repository", "name": "ign-tools", "full_name": "ignitionrobotics/ign-tools", "uuid": "{1d3755e4-eb8f-4c81-9519-830fae2fbba8}"}, "branch": {"name": "commands"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-02-29T01:03:01.527426+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2020-03-02T15:33:34.132163+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2020-03-02T15:33:34.132163+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": {"hash": "e796eeeec753", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-tools/commit/e796eeeec753.json"}, "html": {"href": "#!/ignitionrobotics/ign-tools/commits/e796eeeec753"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}