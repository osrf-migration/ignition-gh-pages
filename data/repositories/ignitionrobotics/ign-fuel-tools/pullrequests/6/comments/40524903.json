{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-fuel-tools/pullrequests/6/comments/40524903.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-fuel-tools/diff/ignitionrobotics/ign-fuel-tools:0ccae02c403b..888eb1079f2c?path=include%2Fignition%2Ffuel-tools%2FREST.hh"}, "html": {"href": "#!/ignitionrobotics/ign-fuel-tools/pull-requests/6/_/diff#comment-40524903"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 6, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-fuel-tools/pullrequests/6.json"}, "html": {"href": "#!/ignitionrobotics/ign-fuel-tools/pull-requests/6"}}, "title": "Add REST class"}, "content": {"raw": "I've been reading through [gmock docs](https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md). It looks like `gmock` is easiest with virtual methods.\n\nInstead of a static method, this class could look like\n\n```\n#!c++\nclass ... REST\n{\n  ...\n  public: virtual RESTResponse Request(...) const;\n};\n```\n\nWith the mock looking like\n\n```\n#!c++\n#include <ignition/fuel-tools/REST.hh>\n...\nclass MockREST : public REST {\n public:\n  ...\n  MOCK_CONST_METHOD6(Request, RESTResponse(const std::string &, const std::string &, const std::string &, const std::vector<std::string> &, const std::vector<std::string> &, const std::string &);\n};\n```\n\nThen it could be used by giving `FuelClient` a constructor with a default argument `FuelClient(REST _rest=REST());`. The unit tests would pass a `MockREST` instance instead.\n", "markup": "markdown", "html": "<p>I've been reading through <a data-is-external-link=\"true\" href=\"https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md\" rel=\"nofollow\">gmock docs</a>. It looks like <code>gmock</code> is easiest with virtual methods.</p>\n<p>Instead of a static method, this class could look like</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">class</span> <span class=\"err\">... </span><span class=\"nc\">REST</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">virtual</span> <span class=\"n\">RESTResponse</span> <span class=\"n\">Request</span><span class=\"p\">(...)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>With the mock looking like</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/fuel-tools/REST.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"p\">...</span>\n<span class=\"k\">class</span> <span class=\"nc\">MockREST</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">REST</span> <span class=\"p\">{</span>\n <span class=\"k\">public</span><span class=\"o\">:</span>\n  <span class=\"p\">...</span>\n  <span class=\"n\">MOCK_CONST_METHOD6</span><span class=\"p\">(</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">RESTResponse</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>Then it could be used by giving <code>FuelClient</code> a constructor with a default argument <code>FuelClient(REST _rest=REST());</code>. The unit tests would pass a <code>MockREST</code> instance instead.</p>", "type": "rendered"}, "created_on": "2017-07-11T16:47:42.202730+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": 60, "from": null, "outdated": true, "path": "include/ignition/fuel-tools/REST.hh"}, "updated_on": "2017-07-11T16:47:42.205973+00:00", "type": "pullrequest_comment", "id": 40524903}