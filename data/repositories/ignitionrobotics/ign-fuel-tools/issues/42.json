{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-fuel-tools.json"}, "html": {"href": "#!/ignitionrobotics/ign-fuel-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{2c96e7f5-2f59-4a4a-877a-87e8f39e29fb}ts=default"}}, "type": "repository", "name": "ign-fuel-tools", "full_name": "ignitionrobotics/ign-fuel-tools", "uuid": "{2c96e7f5-2f59-4a4a-877a-87e8f39e29fb}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-fuel-tools/issues/42/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-fuel-tools/issues/42.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-fuel-tools/issues/42/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-fuel-tools/issues/42/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-fuel-tools/issues/42/fuelclient-support-range-based-for-loops"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-fuel-tools/issues/42/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "FuelClient support range-based for-loops", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently `FuelClient::Models(...)` returns an instance `ModelIter`. Iterating over all models looks like\r\n\r\n```C++\r\nauto iter = client.Models(server);\r\nfor (; iter; ++iter)\r\n{\r\n  Model & model = *iter;\r\n  // ...\r\n}\r\n```\r\n\r\nIt would be more convenient to use range based for loops\r\n\r\n```C++\r\nfor (Model & model : client.Models(server))\r\n{\r\n  // ...\r\n}\r\n```\r\n\r\nThis can be done by making a function return an object with special methods `begin()` and `end()` where begin returns what `FuelClient::Models(...)` returns now, and end returns an iterator that compares inequal to a valid iterator.\r\n\r\n```C++\r\nclass Models\r\n{\r\n    /// \\brief special method to support range-based for-loops; must be lowercase\r\n   public: ModelIter begin();\r\n\r\n    /// \\brief special method to support range-based for-loops; must be lowercase\r\n   public: ModelIter end();\r\n}\r\n```\r\n\r\n\r\nSince fuel-tools has already been released and a function's return type is not part of its signature, tick-tocking this requires changing the name of the function on `FuelClient`.\r\n\r\n```C++\r\n     /// old and busted\r\n     public: IGN_DEPRECATED(2) ModelIter Models(const ServerConfig &_server);\r\n\r\n     /// new hotness\r\n     public: Models QueryModels(const ServerConfig &_server);\r\n```", "markup": "markdown", "html": "<p>Currently <code>FuelClient::Models(...)</code> returns an instance <code>ModelIter</code>. Iterating over all models looks like</p>\n<div class=\"codehilite language-C++\"><pre><span></span><span class=\"k\">auto</span> <span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">Models</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">iter</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Model</span> <span class=\"o\">&amp;</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">;</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>It would be more convenient to use range based for loops</p>\n<div class=\"codehilite language-C++\"><pre><span></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">Model</span> <span class=\"o\">&amp;</span> <span class=\"nl\">model</span> <span class=\"p\">:</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">Models</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This can be done by making a function return an object with special methods <code>begin()</code> and <code>end()</code> where begin returns what <code>FuelClient::Models(...)</code> returns now, and end returns an iterator that compares inequal to a valid iterator.</p>\n<div class=\"codehilite language-C++\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Models</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">/// \\brief special method to support range-based for-loops; must be lowercase</span>\n   <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">ModelIter</span> <span class=\"n\">begin</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">/// \\brief special method to support range-based for-loops; must be lowercase</span>\n   <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">ModelIter</span> <span class=\"n\">end</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Since fuel-tools has already been released and a function's return type is not part of its signature, tick-tocking this requires changing the name of the function on <code>FuelClient</code>.</p>\n<div class=\"codehilite language-C++\"><pre><span></span>     <span class=\"c1\">/// old and busted</span>\n     <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">IGN_DEPRECATED</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">ModelIter</span> <span class=\"n\">Models</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ServerConfig</span> <span class=\"o\">&amp;</span><span class=\"n\">_server</span><span class=\"p\">);</span>\n\n     <span class=\"c1\">/// new hotness</span>\n     <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">Models</span> <span class=\"n\">QueryModels</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ServerConfig</span> <span class=\"o\">&amp;</span><span class=\"n\">_server</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-05T21:47:50.020324+00:00", "milestone": null, "updated_on": "2018-03-05T21:47:50.020324+00:00", "type": "issue", "id": 42}