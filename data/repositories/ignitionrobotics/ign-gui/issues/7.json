{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/issues/7/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/7/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/7/remove-tinyxml-from-public-api"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/issues/7/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Remove tinyxml from public API", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We're currently using `tinyxml2::XMLElement` pointers on some functions which handle configuration files, such as [ loadPlugin(const std::string &_filename,  const tinyxml2::XMLElement *_pluginElem)](#!/ignitionrobotics/ign-gui/src/25e6a6c72d47c09e51bbc762444bcbadc860fd50/include/ignition/gui/Iface.hh?fileviewer=file-view-default#Iface.hh-67). It would be interesting not to make users create tinyxml elements to use Ignition GUI.\r\n\r\nOn another part of the API, we're passing an xml file as a string, see [Plugin::ConfigStr()](#!/ignitionrobotics/ign-gui/src/25e6a6c72d47c09e51bbc762444bcbadc860fd50/src/Plugin.cc?fileviewer=file-view-default#Plugin.cc-33). It was done that way due to the fact it isn't straightforward to deep-copy tinyxml elements.\r\n\r\nNow I'm leaning towards moving to `std::string` for passing configuration files everywhere. This way, each plugin can parse the string to the format of their choice. For example, if a plugin wants to use json, they can embed that into our XML:\r\n\r\n~~~\r\n<plugin filename=\"PluginThatUsesJson\">\r\n{\r\n  \"example\": {\r\n    \"banana\" : \"raspberry\"\r\n  }\r\n}\r\n</plugin>\r\n~~~\r\n\r\nAll Ignition GUI-specific configurations will need to be passed as arguments inside `<plugin>`. Currently, we handle nested elements like `<title>` or `<title_bar>` before passing the configuration forward to the plugin, these will become arguments.", "markup": "markdown", "html": "<p>We're currently using <code>tinyxml2::XMLElement</code> pointers on some functions which handle configuration files, such as <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gui/src/25e6a6c72d47c09e51bbc762444bcbadc860fd50/include/ignition/gui/Iface.hh?fileviewer=file-view-default#Iface.hh-67\" rel=\"nofollow\"> loadPlugin(const std::string &amp;_filename,  const tinyxml2::XMLElement *_pluginElem)</a>. It would be interesting not to make users create tinyxml elements to use Ignition GUI.</p>\n<p>On another part of the API, we're passing an xml file as a string, see <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gui/src/25e6a6c72d47c09e51bbc762444bcbadc860fd50/src/Plugin.cc?fileviewer=file-view-default#Plugin.cc-33\" rel=\"nofollow\">Plugin::ConfigStr()</a>. It was done that way due to the fact it isn't straightforward to deep-copy tinyxml elements.</p>\n<p>Now I'm leaning towards moving to <code>std::string</code> for passing configuration files everywhere. This way, each plugin can parse the string to the format of their choice. For example, if a plugin wants to use json, they can embed that into our XML:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;plugin</span> <span class=\"na\">filename=</span><span class=\"s\">&quot;PluginThatUsesJson&quot;</span><span class=\"nt\">&gt;</span>\n{\n  &quot;example&quot;: {\n    &quot;banana&quot; : &quot;raspberry&quot;\n  }\n}\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</pre></div>\n\n\n<p>All Ignition GUI-specific configurations will need to be passed as arguments inside <code>&lt;plugin&gt;</code>. Currently, we handle nested elements like <code>&lt;title&gt;</code> or <code>&lt;title_bar&gt;</code> before passing the configuration forward to the plugin, these will become arguments.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-10-04T17:37:58.068414+00:00", "milestone": null, "updated_on": "2017-10-04T17:37:58.068414+00:00", "type": "issue", "id": 7}