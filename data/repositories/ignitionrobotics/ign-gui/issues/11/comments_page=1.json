{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/41186713.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-41186713"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "From the documentation of [QPluginLoader](http://doc.qt.io/qt-5/qpluginloader.html):\n\n> An instance of a QPluginLoader object operates on a single shared library file, which we call a plugin.\n\nNote that in Qt terminology, a \"plugin\" is equivalent to a \"shared library\".\n\n> Once loaded, plugins remain in memory until all instances of QPluginLoader has been unloaded, or until the application terminates.\n\nNote the use of the word \"unloaded\" here. It seems that \"unloaded\" means explicitly calling the `unload()` function.\n\nFrom the description of the `QPluginLoader` destructor:\n\n> Unless unload() was called explicitly, the plugin stays in memory until the application terminates.\n\nThis means that the burden of keeping track of whether a shared library is still in use falls on us. We can load a shared library, spawn a QWidget from it, and throw away its `QPluginLoader` without calling `unload()`, and that would ensure that the shared library used by the QWidget remains loaded forever. But that also means that we will never be able to unload the shared library once the widget is no longer in use. The only way we could ever safely unload a plugin's shared library is if we take responsibility for keeping track of all the widgets that use the library, and also hang onto the `QPluginLoader` that spawned them.\n\nI think if we care about being able to safely unload libraries that are no longer in use, we'll want to stick with the `ignition-common` implementation. If that's not a concern for the QWidgets, then the Qt Plugin framework should be fine, and it would make some implementation details simpler for us.\n\n(@chapulina Note that this is different than what I had said to you earlier. I thought the destructor of `QPluginLoader` would call its `unload()` function, but it does not; it just allows the plugin library to remain loaded forever if you never explicitly called `unload()`.)", "markup": "markdown", "html": "<p>From the documentation of <a data-is-external-link=\"true\" href=\"http://doc.qt.io/qt-5/qpluginloader.html\" rel=\"nofollow\">QPluginLoader</a>:</p>\n<blockquote>\n<p>An instance of a QPluginLoader object operates on a single shared library file, which we call a plugin.</p>\n</blockquote>\n<p>Note that in Qt terminology, a \"plugin\" is equivalent to a \"shared library\".</p>\n<blockquote>\n<p>Once loaded, plugins remain in memory until all instances of QPluginLoader has been unloaded, or until the application terminates.</p>\n</blockquote>\n<p>Note the use of the word \"unloaded\" here. It seems that \"unloaded\" means explicitly calling the <code>unload()</code> function.</p>\n<p>From the description of the <code>QPluginLoader</code> destructor:</p>\n<blockquote>\n<p>Unless unload() was called explicitly, the plugin stays in memory until the application terminates.</p>\n</blockquote>\n<p>This means that the burden of keeping track of whether a shared library is still in use falls on us. We can load a shared library, spawn a QWidget from it, and throw away its <code>QPluginLoader</code> without calling <code>unload()</code>, and that would ensure that the shared library used by the QWidget remains loaded forever. But that also means that we will never be able to unload the shared library once the widget is no longer in use. The only way we could ever safely unload a plugin's shared library is if we take responsibility for keeping track of all the widgets that use the library, and also hang onto the <code>QPluginLoader</code> that spawned them.</p>\n<p>I think if we care about being able to safely unload libraries that are no longer in use, we'll want to stick with the <code>ignition-common</code> implementation. If that's not a concern for the QWidgets, then the Qt Plugin framework should be fine, and it would make some implementation details simpler for us.</p>\n<p>(@chapulina Note that this is different than what I had said to you earlier. I thought the destructor of <code>QPluginLoader</code> would call its <code>unload()</code> function, but it does not; it just allows the plugin library to remain loaded forever if you never explicitly called <code>unload()</code>.)</p>", "type": "rendered"}, "created_on": "2017-11-13T21:29:06.520897+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-13T21:29:23.452418+00:00", "type": "issue_comment", "id": 41186713}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/41187901.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-41187901"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "Thanks for digging, you're right, it looks like we'd need to keep track of when widgets are closed and can be unloaded anyway. [This](https://steveire.wordpress.com/2010/03/05/the-mother-goose-plugin-loader-pattern/) post brings some good info too.", "markup": "markdown", "html": "<p>Thanks for digging, you're right, it looks like we'd need to keep track of when widgets are closed and can be unloaded anyway. <a data-is-external-link=\"true\" href=\"https://steveire.wordpress.com/2010/03/05/the-mother-goose-plugin-loader-pattern/\" rel=\"nofollow\">This</a> post brings some good info too.</p>", "type": "rendered"}, "created_on": "2017-11-13T23:18:28.774436+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 41187901}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/41188329.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-41188329"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "Interestingly, the post you linked to is using a conceptually identical library management model to what we have in `ignition-common`, except it builds off of the `QtPluginLoader` instead of the `dl` library.\n\nThis is making me think we would be best off sticking to the `ignition-common` implementation, and going with the \"self-aware factory\" (terminology pending) proposal. The issue with that choice is that some of the necessary infrastructure for making it work nicely is not quite available yet. One solution would be to pretend like the infrastructure is there, but don't actually use it for now. That would allow us to design widgets that are forwards-compatible. Here's what I'm envisioning...\n\nSomewhere in `ignition-gui` we would define these three classes + two macros:\n\n```\nclass Widget\n{\n  template <typename> friend class WidgetFactoryTemplate;\n  private: std::shared_ptr<const void> plugin;\n};\n\nclass WidgetFactory\n{\n  public: virtual Widget *CreateGuiWidget() const = 0;\n};\n\ntemplate <typename WidgetType>\nclass WidgetFactoryTemplate : public virtual WidgetFactory\n{\n  static_assert(std::is_base_of<Widget, WidgetType>::value, \"WidgetFactoryTemplate can only be used on ignition::gui::Widget classes\");\n  public: Widget *CreateGuiWidget() const override\n  {\n    return new WidgetType;\n  };\n};\n\n#define IGN_GUI_MAKE_FACTORY( w ) \\\n  using w ## Factory = ignition::gui::WidgetFactoryTemplate< w >;\n\n#define IGN_GUI_REGISTER_WIDGET( w ) \\\n  IGN_COMMON_ADD_PLUGIN( w ## Factory, ignition::gui::WidgetFactory );\n```\n\nThen the user-code would look like this:\n\n```\nnamespace MyLibrary {\nnamespace MyNamespace {\n\nclass MyCustomGuiWidget : public ignition::gui::Widget\n{\n  /* ... the actual content of MyCustomGUIWidget ... */\n};\n\nIGN_GUI_MAKE_FACTORY(MyCustomGuiWidget);\n\n} // MyNamespace\n} // MyLibrary\n\nIGN_GUI_REGISTER_WIDGET(MyLibrary::MyNamespace::MyCustomGuiWidget);\n```\n\nLater on, once the self-aware plugin infrastructure is ready, we can tweak the implementation of the `WidgetFactoryTemplate` and registration macro:\n\n```\ntemplate <typename WidgetType>\nclass WidgetFactoryTemplate : public virtual WidgetFactory, public virtual EnablePluginFromThis\n{\n  static_assert(std::is_base_of<Widget, WidgetType>::value, \"WidgetFactoryTemplate can only be used on ignition::gui::Widget classes\");\n  public: Widget *CreateGuiWidget() const override\n  {\n    WidgetType *widget = new WidgetType;\n    widget->plugin = this->PluginFromThis();\n    return new WidgetType;\n  };\n};\n\n#define IGN_GUI_REGISTER_WIDGET( w ) \\\n  IGN_COMMON_ADD_PLUGIN( w ## Factory, ignition::gui::WidgetFactory ); \\\n  IGN_COMMON_ADD_PLUGIN( w ## Factory, ignition::gui::EnablePluginFromThis );\n```\n\nThe user wouldn't have to make any change to their code, and as soon as they recompile against the latest version of `ignition-gui`, they will immediately benefit from the additional library-management safety.\n\nFor the record, I'm kind of upset that I can't think of a way to use one macro instead of two, but we kind of need one of those macros to be called inside of the user's namespaces while the other macro needs to be called outside of those namespaces, so I can't think of a way to merge them into one macro.", "markup": "markdown", "html": "<p>Interestingly, the post you linked to is using a conceptually identical library management model to what we have in <code>ignition-common</code>, except it builds off of the <code>QtPluginLoader</code> instead of the <code>dl</code> library.</p>\n<p>This is making me think we would be best off sticking to the <code>ignition-common</code> implementation, and going with the \"self-aware factory\" (terminology pending) proposal. The issue with that choice is that some of the necessary infrastructure for making it work nicely is not quite available yet. One solution would be to pretend like the infrastructure is there, but don't actually use it for now. That would allow us to design widgets that are forwards-compatible. Here's what I'm envisioning...</p>\n<p>Somewhere in <code>ignition-gui</code> we would define these three classes + two macros:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">Widget</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">template</span> <span class=\"o\">&lt;</span><span class=\"nx\">typename</span><span class=\"o\">&gt;</span> <span class=\"nx\">friend</span> <span class=\"kr\">class</span> <span class=\"nx\">WidgetFactoryTemplate</span><span class=\"p\">;</span>\n  <span class=\"kr\">private</span><span class=\"o\">:</span> <span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"kr\">const</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"nx\">plugin</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">WidgetFactory</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">virtual</span> <span class=\"nx\">Widget</span> <span class=\"o\">*</span><span class=\"nx\">CreateGuiWidget</span><span class=\"p\">()</span> <span class=\"kr\">const</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">template</span> <span class=\"o\">&lt;</span><span class=\"nx\">typename</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;</span>\n<span class=\"kr\">class</span> <span class=\"nx\">WidgetFactoryTemplate</span> : <span class=\"kt\">public</span> <span class=\"nx\">virtual</span> <span class=\"nx\">WidgetFactory</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">static_assert</span><span class=\"p\">(</span><span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">is_base_of</span><span class=\"o\">&lt;</span><span class=\"nx\">Widget</span><span class=\"p\">,</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;::</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;WidgetFactoryTemplate can only be used on ignition::gui::Widget classes&quot;</span><span class=\"p\">);</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Widget</span> <span class=\"o\">*</span><span class=\"nx\">CreateGuiWidget</span><span class=\"p\">()</span> <span class=\"kr\">const</span> <span class=\"nx\">override</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">WidgetType</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"err\">#</span><span class=\"nx\">define</span> <span class=\"nx\">IGN_GUI_MAKE_FACTORY</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"p\">)</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">using</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span> <span class=\"o\">=</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">WidgetFactoryTemplate</span><span class=\"o\">&lt;</span> <span class=\"nx\">w</span> <span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"err\">#</span><span class=\"nx\">define</span> <span class=\"nx\">IGN_GUI_REGISTER_WIDGET</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"p\">)</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">IGN_COMMON_ADD_PLUGIN</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span><span class=\"p\">,</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">WidgetFactory</span> <span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Then the user-code would look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">namespace</span> <span class=\"nx\">MyLibrary</span> <span class=\"p\">{</span>\n<span class=\"nx\">namespace</span> <span class=\"nx\">MyNamespace</span> <span class=\"p\">{</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">MyCustomGuiWidget</span> : <span class=\"kt\">public</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">Widget</span>\n<span class=\"p\">{</span>\n  <span class=\"cm\">/* ... the actual content of MyCustomGUIWidget ... */</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">IGN_GUI_MAKE_FACTORY</span><span class=\"p\">(</span><span class=\"nx\">MyCustomGuiWidget</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span> <span class=\"c1\">// MyNamespace</span>\n<span class=\"p\">}</span> <span class=\"c1\">// MyLibrary</span>\n\n<span class=\"nx\">IGN_GUI_REGISTER_WIDGET</span><span class=\"p\">(</span><span class=\"nx\">MyLibrary</span><span class=\"o\">::</span><span class=\"nx\">MyNamespace</span><span class=\"o\">::</span><span class=\"nx\">MyCustomGuiWidget</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Later on, once the self-aware plugin infrastructure is ready, we can tweak the implementation of the <code>WidgetFactoryTemplate</code> and registration macro:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">template</span> <span class=\"o\">&lt;</span><span class=\"nx\">typename</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;</span>\n<span class=\"kr\">class</span> <span class=\"nx\">WidgetFactoryTemplate</span> : <span class=\"kt\">public</span> <span class=\"nx\">virtual</span> <span class=\"nx\">WidgetFactory</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">virtual</span> <span class=\"nx\">EnablePluginFromThis</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">static_assert</span><span class=\"p\">(</span><span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">is_base_of</span><span class=\"o\">&lt;</span><span class=\"nx\">Widget</span><span class=\"p\">,</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;::</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;WidgetFactoryTemplate can only be used on ignition::gui::Widget classes&quot;</span><span class=\"p\">);</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Widget</span> <span class=\"o\">*</span><span class=\"nx\">CreateGuiWidget</span><span class=\"p\">()</span> <span class=\"kr\">const</span> <span class=\"nx\">override</span>\n  <span class=\"p\">{</span>\n    <span class=\"nx\">WidgetType</span> <span class=\"o\">*</span><span class=\"nx\">widget</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">WidgetType</span><span class=\"p\">;</span>\n    <span class=\"nx\">widget</span><span class=\"o\">-&gt;</span><span class=\"nx\">plugin</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"nx\">PluginFromThis</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">WidgetType</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"err\">#</span><span class=\"nx\">define</span> <span class=\"nx\">IGN_GUI_REGISTER_WIDGET</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"p\">)</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">IGN_COMMON_ADD_PLUGIN</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span><span class=\"p\">,</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">WidgetFactory</span> <span class=\"p\">);</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">IGN_COMMON_ADD_PLUGIN</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span><span class=\"p\">,</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">EnablePluginFromThis</span> <span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The user wouldn't have to make any change to their code, and as soon as they recompile against the latest version of <code>ignition-gui</code>, they will immediately benefit from the additional library-management safety.</p>\n<p>For the record, I'm kind of upset that I can't think of a way to use one macro instead of two, but we kind of need one of those macros to be called inside of the user's namespaces while the other macro needs to be called outside of those namespaces, so I can't think of a way to merge them into one macro.</p>", "type": "rendered"}, "created_on": "2017-11-14T00:18:19.164463+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-14T01:44:37.257075+00:00", "type": "issue_comment", "id": 41188329}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/41239584.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-41239584"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "pull request #65 has a temporary solution", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-gui/pull-requests/65/use-ignition-commons-new-plugin-framework\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #65</a> has a temporary solution</p>", "type": "rendered"}, "created_on": "2017-11-16T01:00:17.948830+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 41239584}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/46381295.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-46381295"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "Is this still relevant now that we are moving to qtquick?", "markup": "markdown", "html": "<p>Is this still relevant now that we are moving to qtquick?</p>", "type": "rendered"}, "created_on": "2018-06-22T15:59:19.521873+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 46381295}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/46381482.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-46381482"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2018-06-22T16:08:21.055136+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 46381482}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/46381665.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-46381665"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "With QtQuick, our interfaces are not `QWidget`s anymore, but plain `QObject`s which serve as a \"backend\" to a QML \"frontend\". This gives us a bit more control over their ownership.\n\nAs of now, the main window object is keeping ownership of all plugin objects and releasing the shared pointer when the plugin is closed. So I think the original \"temporary\" solution from pull request #65 is still working.\n\nHowever, I'd like to keep this issue here at least until all pending features have been added to ign-common's plugin framework - it is my understanding that there are more pull requests on the way and I'm not sure how they will affect ign-gui.", "markup": "markdown", "html": "<p>With QtQuick, our interfaces are not <code>QWidget</code>s anymore, but plain <code>QObject</code>s which serve as a \"backend\" to a QML \"frontend\". This gives us a bit more control over their ownership.</p>\n<p>As of now, the main window object is keeping ownership of all plugin objects and releasing the shared pointer when the plugin is closed. So I think the original \"temporary\" solution from <a href=\"#!/ignitionrobotics/ign-gui/pull-requests/65/use-ignition-commons-new-plugin-framework\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #65</a> is still working.</p>\n<p>However, I'd like to keep this issue here at least until all pending features have been added to ign-common's plugin framework - it is my understanding that there are more pull requests on the way and I'm not sure how they will affect ign-gui.</p>", "type": "rendered"}, "created_on": "2018-06-22T16:20:26.793171+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 46381665}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/48146656.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-48146656"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "The ignition-plugin framework is now stable, or at least no additional features are planned.", "markup": "markdown", "html": "<p>The ignition-plugin framework is now stable, or at least no additional features are planned.</p>", "type": "rendered"}, "created_on": "2018-10-03T14:34:16.871166+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 48146656}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/48146845.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-48146845"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "I can start migrating to ign-plugin in the coming days.", "markup": "markdown", "html": "<p>I can start migrating to ign-plugin in the coming days.</p>", "type": "rendered"}, "created_on": "2018-10-03T14:42:51.565253+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 48146845}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/48151765.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-48151765"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "sounds good.", "markup": "markdown", "html": "<p>sounds good.</p>", "type": "rendered"}, "created_on": "2018-10-03T19:03:46.998226+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 48151765}], "page": 1, "size": 10}