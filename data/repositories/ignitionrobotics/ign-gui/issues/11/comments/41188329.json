{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11/comments/41188329.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/issues/11#comment-41188329"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "title": "Consider using Qt's plugin framework instead of ignition's"}, "content": {"raw": "Interestingly, the post you linked to is using a conceptually identical library management model to what we have in `ignition-common`, except it builds off of the `QtPluginLoader` instead of the `dl` library.\n\nThis is making me think we would be best off sticking to the `ignition-common` implementation, and going with the \"self-aware factory\" (terminology pending) proposal. The issue with that choice is that some of the necessary infrastructure for making it work nicely is not quite available yet. One solution would be to pretend like the infrastructure is there, but don't actually use it for now. That would allow us to design widgets that are forwards-compatible. Here's what I'm envisioning...\n\nSomewhere in `ignition-gui` we would define these three classes + two macros:\n\n```\nclass Widget\n{\n  template <typename> friend class WidgetFactoryTemplate;\n  private: std::shared_ptr<const void> plugin;\n};\n\nclass WidgetFactory\n{\n  public: virtual Widget *CreateGuiWidget() const = 0;\n};\n\ntemplate <typename WidgetType>\nclass WidgetFactoryTemplate : public virtual WidgetFactory\n{\n  static_assert(std::is_base_of<Widget, WidgetType>::value, \"WidgetFactoryTemplate can only be used on ignition::gui::Widget classes\");\n  public: Widget *CreateGuiWidget() const override\n  {\n    return new WidgetType;\n  };\n};\n\n#define IGN_GUI_MAKE_FACTORY( w ) \\\n  using w ## Factory = ignition::gui::WidgetFactoryTemplate< w >;\n\n#define IGN_GUI_REGISTER_WIDGET( w ) \\\n  IGN_COMMON_ADD_PLUGIN( w ## Factory, ignition::gui::WidgetFactory );\n```\n\nThen the user-code would look like this:\n\n```\nnamespace MyLibrary {\nnamespace MyNamespace {\n\nclass MyCustomGuiWidget : public ignition::gui::Widget\n{\n  /* ... the actual content of MyCustomGUIWidget ... */\n};\n\nIGN_GUI_MAKE_FACTORY(MyCustomGuiWidget);\n\n} // MyNamespace\n} // MyLibrary\n\nIGN_GUI_REGISTER_WIDGET(MyLibrary::MyNamespace::MyCustomGuiWidget);\n```\n\nLater on, once the self-aware plugin infrastructure is ready, we can tweak the implementation of the `WidgetFactoryTemplate` and registration macro:\n\n```\ntemplate <typename WidgetType>\nclass WidgetFactoryTemplate : public virtual WidgetFactory, public virtual EnablePluginFromThis\n{\n  static_assert(std::is_base_of<Widget, WidgetType>::value, \"WidgetFactoryTemplate can only be used on ignition::gui::Widget classes\");\n  public: Widget *CreateGuiWidget() const override\n  {\n    WidgetType *widget = new WidgetType;\n    widget->plugin = this->PluginFromThis();\n    return new WidgetType;\n  };\n};\n\n#define IGN_GUI_REGISTER_WIDGET( w ) \\\n  IGN_COMMON_ADD_PLUGIN( w ## Factory, ignition::gui::WidgetFactory ); \\\n  IGN_COMMON_ADD_PLUGIN( w ## Factory, ignition::gui::EnablePluginFromThis );\n```\n\nThe user wouldn't have to make any change to their code, and as soon as they recompile against the latest version of `ignition-gui`, they will immediately benefit from the additional library-management safety.\n\nFor the record, I'm kind of upset that I can't think of a way to use one macro instead of two, but we kind of need one of those macros to be called inside of the user's namespaces while the other macro needs to be called outside of those namespaces, so I can't think of a way to merge them into one macro.", "markup": "markdown", "html": "<p>Interestingly, the post you linked to is using a conceptually identical library management model to what we have in <code>ignition-common</code>, except it builds off of the <code>QtPluginLoader</code> instead of the <code>dl</code> library.</p>\n<p>This is making me think we would be best off sticking to the <code>ignition-common</code> implementation, and going with the \"self-aware factory\" (terminology pending) proposal. The issue with that choice is that some of the necessary infrastructure for making it work nicely is not quite available yet. One solution would be to pretend like the infrastructure is there, but don't actually use it for now. That would allow us to design widgets that are forwards-compatible. Here's what I'm envisioning...</p>\n<p>Somewhere in <code>ignition-gui</code> we would define these three classes + two macros:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">Widget</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">template</span> <span class=\"o\">&lt;</span><span class=\"nx\">typename</span><span class=\"o\">&gt;</span> <span class=\"nx\">friend</span> <span class=\"kr\">class</span> <span class=\"nx\">WidgetFactoryTemplate</span><span class=\"p\">;</span>\n  <span class=\"kr\">private</span><span class=\"o\">:</span> <span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"kr\">const</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"nx\">plugin</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">WidgetFactory</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">virtual</span> <span class=\"nx\">Widget</span> <span class=\"o\">*</span><span class=\"nx\">CreateGuiWidget</span><span class=\"p\">()</span> <span class=\"kr\">const</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">template</span> <span class=\"o\">&lt;</span><span class=\"nx\">typename</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;</span>\n<span class=\"kr\">class</span> <span class=\"nx\">WidgetFactoryTemplate</span> : <span class=\"kt\">public</span> <span class=\"nx\">virtual</span> <span class=\"nx\">WidgetFactory</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">static_assert</span><span class=\"p\">(</span><span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">is_base_of</span><span class=\"o\">&lt;</span><span class=\"nx\">Widget</span><span class=\"p\">,</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;::</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;WidgetFactoryTemplate can only be used on ignition::gui::Widget classes&quot;</span><span class=\"p\">);</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Widget</span> <span class=\"o\">*</span><span class=\"nx\">CreateGuiWidget</span><span class=\"p\">()</span> <span class=\"kr\">const</span> <span class=\"nx\">override</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">WidgetType</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"err\">#</span><span class=\"nx\">define</span> <span class=\"nx\">IGN_GUI_MAKE_FACTORY</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"p\">)</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">using</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span> <span class=\"o\">=</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">WidgetFactoryTemplate</span><span class=\"o\">&lt;</span> <span class=\"nx\">w</span> <span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"err\">#</span><span class=\"nx\">define</span> <span class=\"nx\">IGN_GUI_REGISTER_WIDGET</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"p\">)</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">IGN_COMMON_ADD_PLUGIN</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span><span class=\"p\">,</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">WidgetFactory</span> <span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Then the user-code would look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">namespace</span> <span class=\"nx\">MyLibrary</span> <span class=\"p\">{</span>\n<span class=\"nx\">namespace</span> <span class=\"nx\">MyNamespace</span> <span class=\"p\">{</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">MyCustomGuiWidget</span> : <span class=\"kt\">public</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">Widget</span>\n<span class=\"p\">{</span>\n  <span class=\"cm\">/* ... the actual content of MyCustomGUIWidget ... */</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">IGN_GUI_MAKE_FACTORY</span><span class=\"p\">(</span><span class=\"nx\">MyCustomGuiWidget</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span> <span class=\"c1\">// MyNamespace</span>\n<span class=\"p\">}</span> <span class=\"c1\">// MyLibrary</span>\n\n<span class=\"nx\">IGN_GUI_REGISTER_WIDGET</span><span class=\"p\">(</span><span class=\"nx\">MyLibrary</span><span class=\"o\">::</span><span class=\"nx\">MyNamespace</span><span class=\"o\">::</span><span class=\"nx\">MyCustomGuiWidget</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Later on, once the self-aware plugin infrastructure is ready, we can tweak the implementation of the <code>WidgetFactoryTemplate</code> and registration macro:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">template</span> <span class=\"o\">&lt;</span><span class=\"nx\">typename</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;</span>\n<span class=\"kr\">class</span> <span class=\"nx\">WidgetFactoryTemplate</span> : <span class=\"kt\">public</span> <span class=\"nx\">virtual</span> <span class=\"nx\">WidgetFactory</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">virtual</span> <span class=\"nx\">EnablePluginFromThis</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">static_assert</span><span class=\"p\">(</span><span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">is_base_of</span><span class=\"o\">&lt;</span><span class=\"nx\">Widget</span><span class=\"p\">,</span> <span class=\"nx\">WidgetType</span><span class=\"o\">&gt;::</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;WidgetFactoryTemplate can only be used on ignition::gui::Widget classes&quot;</span><span class=\"p\">);</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Widget</span> <span class=\"o\">*</span><span class=\"nx\">CreateGuiWidget</span><span class=\"p\">()</span> <span class=\"kr\">const</span> <span class=\"nx\">override</span>\n  <span class=\"p\">{</span>\n    <span class=\"nx\">WidgetType</span> <span class=\"o\">*</span><span class=\"nx\">widget</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">WidgetType</span><span class=\"p\">;</span>\n    <span class=\"nx\">widget</span><span class=\"o\">-&gt;</span><span class=\"nx\">plugin</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"nx\">PluginFromThis</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">WidgetType</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"err\">#</span><span class=\"nx\">define</span> <span class=\"nx\">IGN_GUI_REGISTER_WIDGET</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"p\">)</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">IGN_COMMON_ADD_PLUGIN</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span><span class=\"p\">,</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">WidgetFactory</span> <span class=\"p\">);</span> <span class=\"o\">\\</span>\n  <span class=\"nx\">IGN_COMMON_ADD_PLUGIN</span><span class=\"p\">(</span> <span class=\"nx\">w</span> <span class=\"err\">##</span> <span class=\"nx\">Factory</span><span class=\"p\">,</span> <span class=\"nx\">ignition</span><span class=\"o\">::</span><span class=\"nx\">gui</span><span class=\"o\">::</span><span class=\"nx\">EnablePluginFromThis</span> <span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The user wouldn't have to make any change to their code, and as soon as they recompile against the latest version of <code>ignition-gui</code>, they will immediately benefit from the additional library-management safety.</p>\n<p>For the record, I'm kind of upset that I can't think of a way to use one macro instead of two, but we kind of need one of those macros to be called inside of the user's namespaces while the other macro needs to be called outside of those namespaces, so I can't think of a way to merge them into one macro.</p>", "type": "rendered"}, "created_on": "2017-11-14T00:18:19.164463+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-14T01:44:37.257075+00:00", "type": "issue_comment", "id": 41188329}