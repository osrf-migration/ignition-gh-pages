{"rendered": {"description": {"raw": "This is the first of a series of pull requests to add functionality to automatically generate widgets from Ignition Messages.\r\n\r\nThese widgets can be used in a variety of ways, the plugin `TopicInterface` shows how they can be used to display data as it comes through an Ignition Transport topic. Other ways to use it include, for example, substituting the free-form text field in `plugins::Publisher` with widgets.\r\n\r\nMost of the development is happening on branch `topic_interface`. On this branch, I took the core features and one widget type as a minimal working example.\r\n\r\nThe code here started as a refactor of `gazebo::gui::ConfigWidget` and keeps much of its functionality, but is more modular. Especially the tests have been kept very similar to those of `ConfigWidget_TEST` to make sure we offer the same features.\r\n\r\nThere is more documentation on each header, here's a summary:\r\n\r\n* `plugins::TopicInterface`: the plugin holds a `MessageWidget` and provides Ignition Transport interfaces to it. For now, all it does is subscribing to a topic and updating the widget as new messages arrive. In the future, it will offer other parameters to configure things such as which widgets are visible and enabled, and also publish messages as the user inputs data.\r\n\r\n* `MessageWidget`: a widget generated from a protobuf message. Each field in the message corresponds to a `PropertyWidget`. There will be more features coming here as well, mainly ways to configure each property.\r\n\r\n* `PropertyWidget`: abstract base class for widgets holding properties.\r\n\r\n* `StringWidget`: a `PropertyWidget` which holds a string value. Other property widgets can be seen on the `topic_interface` branch and will be added in future pull requests.\r\n\r\n* `CollapsibleWidget`: A widget which can be collapsed.\r\n\r\n# Run example\r\n\r\nExample showing 2 widgets, one generated from a `msgs::StringMsg` and another from a `msgs::Plugin`:\r\n\r\n`ign gui -v 4 -c examples/config/topicInterface.config`\r\n\r\n![stringmsg.gif](data/bitbucket.org/repo/64K5zaR/images/4046020107-stringmsg.gif)\r\n\r\n![pluginmsg.gif](data/bitbucket.org/repo/64K5zaR/images/2424589113-pluginmsg.gif)", "markup": "markdown", "html": "<p>This is the first of a series of pull requests to add functionality to automatically generate widgets from Ignition Messages.</p>\n<p>These widgets can be used in a variety of ways, the plugin <code>TopicInterface</code> shows how they can be used to display data as it comes through an Ignition Transport topic. Other ways to use it include, for example, substituting the free-form text field in <code>plugins::Publisher</code> with widgets.</p>\n<p>Most of the development is happening on branch <code>topic_interface</code>. On this branch, I took the core features and one widget type as a minimal working example.</p>\n<p>The code here started as a refactor of <code>gazebo::gui::ConfigWidget</code> and keeps much of its functionality, but is more modular. Especially the tests have been kept very similar to those of <code>ConfigWidget_TEST</code> to make sure we offer the same features.</p>\n<p>There is more documentation on each header, here's a summary:</p>\n<ul>\n<li>\n<p><code>plugins::TopicInterface</code>: the plugin holds a <code>MessageWidget</code> and provides Ignition Transport interfaces to it. For now, all it does is subscribing to a topic and updating the widget as new messages arrive. In the future, it will offer other parameters to configure things such as which widgets are visible and enabled, and also publish messages as the user inputs data.</p>\n</li>\n<li>\n<p><code>MessageWidget</code>: a widget generated from a protobuf message. Each field in the message corresponds to a <code>PropertyWidget</code>. There will be more features coming here as well, mainly ways to configure each property.</p>\n</li>\n<li>\n<p><code>PropertyWidget</code>: abstract base class for widgets holding properties.</p>\n</li>\n<li>\n<p><code>StringWidget</code>: a <code>PropertyWidget</code> which holds a string value. Other property widgets can be seen on the <code>topic_interface</code> branch and will be added in future pull requests.</p>\n</li>\n<li>\n<p><code>CollapsibleWidget</code>: A widget which can be collapsed.</p>\n</li>\n</ul>\n<h1 id=\"markdown-header-run-example\">Run example</h1>\n<p>Example showing 2 widgets, one generated from a <code>msgs::StringMsg</code> and another from a <code>msgs::Plugin</code>:</p>\n<p><code>ign gui -v 4 -c examples/config/topicInterface.config</code></p>\n<p><img alt=\"stringmsg.gif\" src=\"data/bitbucket.org/repo/64K5zaR/images/4046020107-stringmsg.gif\" /></p>\n<p><img alt=\"pluginmsg.gif\" src=\"data/bitbucket.org/repo/64K5zaR/images/2424589113-pluginmsg.gif\" /></p>", "type": "rendered"}, "title": {"raw": "Widgets from messages (part 1)", "markup": "markdown", "html": "<p>Widgets from messages (part 1)</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is the first of a series of pull requests to add functionality to automatically generate widgets from Ignition Messages.\r\n\r\nThese widgets can be used in a variety of ways, the plugin `TopicInterface` shows how they can be used to display data as it comes through an Ignition Transport topic. Other ways to use it include, for example, substituting the free-form text field in `plugins::Publisher` with widgets.\r\n\r\nMost of the development is happening on branch `topic_interface`. On this branch, I took the core features and one widget type as a minimal working example.\r\n\r\nThe code here started as a refactor of `gazebo::gui::ConfigWidget` and keeps much of its functionality, but is more modular. Especially the tests have been kept very similar to those of `ConfigWidget_TEST` to make sure we offer the same features.\r\n\r\nThere is more documentation on each header, here's a summary:\r\n\r\n* `plugins::TopicInterface`: the plugin holds a `MessageWidget` and provides Ignition Transport interfaces to it. For now, all it does is subscribing to a topic and updating the widget as new messages arrive. In the future, it will offer other parameters to configure things such as which widgets are visible and enabled, and also publish messages as the user inputs data.\r\n\r\n* `MessageWidget`: a widget generated from a protobuf message. Each field in the message corresponds to a `PropertyWidget`. There will be more features coming here as well, mainly ways to configure each property.\r\n\r\n* `PropertyWidget`: abstract base class for widgets holding properties.\r\n\r\n* `StringWidget`: a `PropertyWidget` which holds a string value. Other property widgets can be seen on the `topic_interface` branch and will be added in future pull requests.\r\n\r\n* `CollapsibleWidget`: A widget which can be collapsed.\r\n\r\n# Run example\r\n\r\nExample showing 2 widgets, one generated from a `msgs::StringMsg` and another from a `msgs::Plugin`:\r\n\r\n`ign gui -v 4 -c examples/config/topicInterface.config`\r\n\r\n![stringmsg.gif](data/bitbucket.org/repo/64K5zaR/images/4046020107-stringmsg.gif)\r\n\r\n![pluginmsg.gif](data/bitbucket.org/repo/64K5zaR/images/2424589113-pluginmsg.gif)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/pullrequests/38/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/diffstat/ignitionrobotics/ign-gui:93cb2ea98d8a%0D39e2c55745e1?from_pullrequest_id=38"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/38/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/38.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/38/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/pullrequests/38/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gui/pull-requests/38"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/38/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/diff/ignitionrobotics/ign-gui:93cb2ea98d8a%0D39e2c55745e1?from_pullrequest_id=38"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/pullrequests/38/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/38/statuses_page=1.json"}}, "title": "Widgets from messages (part 1)", "close_source_branch": true, "reviewers": [], "id": 38, "destination": {"commit": {"hash": "39e2c55745e1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/commit/39e2c55745e1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/commits/39e2c55745e1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "branch": {"name": "default"}}, "created_on": "2017-10-02T17:33:31.747423+00:00", "summary": {"raw": "This is the first of a series of pull requests to add functionality to automatically generate widgets from Ignition Messages.\r\n\r\nThese widgets can be used in a variety of ways, the plugin `TopicInterface` shows how they can be used to display data as it comes through an Ignition Transport topic. Other ways to use it include, for example, substituting the free-form text field in `plugins::Publisher` with widgets.\r\n\r\nMost of the development is happening on branch `topic_interface`. On this branch, I took the core features and one widget type as a minimal working example.\r\n\r\nThe code here started as a refactor of `gazebo::gui::ConfigWidget` and keeps much of its functionality, but is more modular. Especially the tests have been kept very similar to those of `ConfigWidget_TEST` to make sure we offer the same features.\r\n\r\nThere is more documentation on each header, here's a summary:\r\n\r\n* `plugins::TopicInterface`: the plugin holds a `MessageWidget` and provides Ignition Transport interfaces to it. For now, all it does is subscribing to a topic and updating the widget as new messages arrive. In the future, it will offer other parameters to configure things such as which widgets are visible and enabled, and also publish messages as the user inputs data.\r\n\r\n* `MessageWidget`: a widget generated from a protobuf message. Each field in the message corresponds to a `PropertyWidget`. There will be more features coming here as well, mainly ways to configure each property.\r\n\r\n* `PropertyWidget`: abstract base class for widgets holding properties.\r\n\r\n* `StringWidget`: a `PropertyWidget` which holds a string value. Other property widgets can be seen on the `topic_interface` branch and will be added in future pull requests.\r\n\r\n* `CollapsibleWidget`: A widget which can be collapsed.\r\n\r\n# Run example\r\n\r\nExample showing 2 widgets, one generated from a `msgs::StringMsg` and another from a `msgs::Plugin`:\r\n\r\n`ign gui -v 4 -c examples/config/topicInterface.config`\r\n\r\n![stringmsg.gif](data/bitbucket.org/repo/64K5zaR/images/4046020107-stringmsg.gif)\r\n\r\n![pluginmsg.gif](data/bitbucket.org/repo/64K5zaR/images/2424589113-pluginmsg.gif)", "markup": "markdown", "html": "<p>This is the first of a series of pull requests to add functionality to automatically generate widgets from Ignition Messages.</p>\n<p>These widgets can be used in a variety of ways, the plugin <code>TopicInterface</code> shows how they can be used to display data as it comes through an Ignition Transport topic. Other ways to use it include, for example, substituting the free-form text field in <code>plugins::Publisher</code> with widgets.</p>\n<p>Most of the development is happening on branch <code>topic_interface</code>. On this branch, I took the core features and one widget type as a minimal working example.</p>\n<p>The code here started as a refactor of <code>gazebo::gui::ConfigWidget</code> and keeps much of its functionality, but is more modular. Especially the tests have been kept very similar to those of <code>ConfigWidget_TEST</code> to make sure we offer the same features.</p>\n<p>There is more documentation on each header, here's a summary:</p>\n<ul>\n<li>\n<p><code>plugins::TopicInterface</code>: the plugin holds a <code>MessageWidget</code> and provides Ignition Transport interfaces to it. For now, all it does is subscribing to a topic and updating the widget as new messages arrive. In the future, it will offer other parameters to configure things such as which widgets are visible and enabled, and also publish messages as the user inputs data.</p>\n</li>\n<li>\n<p><code>MessageWidget</code>: a widget generated from a protobuf message. Each field in the message corresponds to a <code>PropertyWidget</code>. There will be more features coming here as well, mainly ways to configure each property.</p>\n</li>\n<li>\n<p><code>PropertyWidget</code>: abstract base class for widgets holding properties.</p>\n</li>\n<li>\n<p><code>StringWidget</code>: a <code>PropertyWidget</code> which holds a string value. Other property widgets can be seen on the <code>topic_interface</code> branch and will be added in future pull requests.</p>\n</li>\n<li>\n<p><code>CollapsibleWidget</code>: A widget which can be collapsed.</p>\n</li>\n</ul>\n<h1 id=\"markdown-header-run-example\">Run example</h1>\n<p>Example showing 2 widgets, one generated from a <code>msgs::StringMsg</code> and another from a <code>msgs::Plugin</code>:</p>\n<p><code>ign gui -v 4 -c examples/config/topicInterface.config</code></p>\n<p><img alt=\"stringmsg.gif\" src=\"data/bitbucket.org/repo/64K5zaR/images/4046020107-stringmsg.gif\" /></p>\n<p><img alt=\"pluginmsg.gif\" src=\"data/bitbucket.org/repo/64K5zaR/images/2424589113-pluginmsg.gif\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "b1b403eed31b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/commit/b1b403eed31b.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/commits/b1b403eed31b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "branch": {"name": "topic_interface_1"}}, "comment_count": 28, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-10-03T23:42:00.076689+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-04T00:41:52.730023+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-05T18:08:47.968870+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2017-10-05T21:57:08.628577+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "93cb2ea98d8a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/commit/93cb2ea98d8a.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/commits/93cb2ea98d8a"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}