{"rendered": {"description": {"raw": "This needs [this](#!/ignitionrobotics/ign-common/pull-requests/73) Ignition Common pull request.\r\n\r\nRelated to issue #11\r\n\r\n## Context\r\n\r\nIgnition common's plugin framework is going through changes to make sure shared libraries are properly unloaded when they are no longer being used. To achieve this, the plugin framework needs to keep ownership of the interfaces it provides. To that end, it only makes shared pointers available, and when those pointers are released, the library is unloaded.\r\n\r\n## Problem\r\n\r\nQt likes to keep ownership of its objects. So as long as our plugin interfaces are `QObject`s, we need to share the interface's  underlying raw pointer.\r\n\r\n## The \"right\" solution\r\n\r\n@mxgrey has a lot of detailed insights on issue #11, and proposed a solution which involves having the interface not be a `QObject`, but a factory of `QObject`s.\r\n\r\nWhile the proposed solution sounds robust, it would require changes on ign-common and ign-gui. And, arguably more importantly, on user code.\r\n\r\nSo I propose we keep the factory approach in mind, but for now implement a less invasive solution just to make sure we don't block ign-common's progress. Once the plugin framework is more complete, we can revisit this and see if the factory approach still makes sense.\r\n\r\n## The current solution\r\n\r\nThe approach on this pull request is based on the following goals:\r\n\r\n1. Never let Qt delete our plugins\r\n\r\n    > This is achieved by intercepting close/reject events on plugin parents (`Dock`s and `Dialog`s) and removing the plugin from the parent before the parent dies.\r\n\r\n2. Detect when Qt would like to delete the plugin and release our `shared_ptr` so ign-common can unload the library if needed\r\n\r\n    > This is done by emitting a `Closing` signal", "markup": "markdown", "html": "<p>This needs <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/73\" rel=\"nofollow\">this</a> Ignition Common pull request.</p>\n<p>Related to issue <a href=\"#!/ignitionrobotics/ign-gui/issues/11/consider-using-qts-plugin-framework\" rel=\"nofollow\" title=\"Consider using Qt&#39;s plugin framework instead of ignition&#39;s\" class=\"ap-connect-link\">#11</a></p>\n<h2 id=\"markdown-header-context\">Context</h2>\n<p>Ignition common's plugin framework is going through changes to make sure shared libraries are properly unloaded when they are no longer being used. To achieve this, the plugin framework needs to keep ownership of the interfaces it provides. To that end, it only makes shared pointers available, and when those pointers are released, the library is unloaded.</p>\n<h2 id=\"markdown-header-problem\">Problem</h2>\n<p>Qt likes to keep ownership of its objects. So as long as our plugin interfaces are <code>QObject</code>s, we need to share the interface's  underlying raw pointer.</p>\n<h2 id=\"markdown-header-the-right-solution\">The \"right\" solution</h2>\n<p>@mxgrey has a lot of detailed insights on issue <a href=\"#!/ignitionrobotics/ign-gui/issues/11/consider-using-qts-plugin-framework\" rel=\"nofollow\" title=\"Consider using Qt&#39;s plugin framework instead of ignition&#39;s\" class=\"ap-connect-link\">#11</a>, and proposed a solution which involves having the interface not be a <code>QObject</code>, but a factory of <code>QObject</code>s.</p>\n<p>While the proposed solution sounds robust, it would require changes on ign-common and ign-gui. And, arguably more importantly, on user code.</p>\n<p>So I propose we keep the factory approach in mind, but for now implement a less invasive solution just to make sure we don't block ign-common's progress. Once the plugin framework is more complete, we can revisit this and see if the factory approach still makes sense.</p>\n<h2 id=\"markdown-header-the-current-solution\">The current solution</h2>\n<p>The approach on this pull request is based on the following goals:</p>\n<ol>\n<li>\n<p>Never let Qt delete our plugins</p>\n<blockquote>\n<p>This is achieved by intercepting close/reject events on plugin parents (<code>Dock</code>s and <code>Dialog</code>s) and removing the plugin from the parent before the parent dies.</p>\n</blockquote>\n</li>\n<li>\n<p>Detect when Qt would like to delete the plugin and release our <code>shared_ptr</code> so ign-common can unload the library if needed</p>\n<blockquote>\n<p>This is done by emitting a <code>Closing</code> signal</p>\n</blockquote>\n</li>\n</ol>", "type": "rendered"}, "title": {"raw": "Use Ignition Common's new plugin framework", "markup": "markdown", "html": "<p>Use Ignition Common's new plugin framework</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This needs [this](#!/ignitionrobotics/ign-common/pull-requests/73) Ignition Common pull request.\r\n\r\nRelated to issue #11\r\n\r\n## Context\r\n\r\nIgnition common's plugin framework is going through changes to make sure shared libraries are properly unloaded when they are no longer being used. To achieve this, the plugin framework needs to keep ownership of the interfaces it provides. To that end, it only makes shared pointers available, and when those pointers are released, the library is unloaded.\r\n\r\n## Problem\r\n\r\nQt likes to keep ownership of its objects. So as long as our plugin interfaces are `QObject`s, we need to share the interface's  underlying raw pointer.\r\n\r\n## The \"right\" solution\r\n\r\n@mxgrey has a lot of detailed insights on issue #11, and proposed a solution which involves having the interface not be a `QObject`, but a factory of `QObject`s.\r\n\r\nWhile the proposed solution sounds robust, it would require changes on ign-common and ign-gui. And, arguably more importantly, on user code.\r\n\r\nSo I propose we keep the factory approach in mind, but for now implement a less invasive solution just to make sure we don't block ign-common's progress. Once the plugin framework is more complete, we can revisit this and see if the factory approach still makes sense.\r\n\r\n## The current solution\r\n\r\nThe approach on this pull request is based on the following goals:\r\n\r\n1. Never let Qt delete our plugins\r\n\r\n    > This is achieved by intercepting close/reject events on plugin parents (`Dock`s and `Dialog`s) and removing the plugin from the parent before the parent dies.\r\n\r\n2. Detect when Qt would like to delete the plugin and release our `shared_ptr` so ign-common can unload the library if needed\r\n\r\n    > This is done by emitting a `Closing` signal", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/pullrequests/65/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/diffstat/ignitionrobotics/ign-gui:ff9508db7590%0D709d1e3dc7b1?from_pullrequest_id=65"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/65/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/65.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/65/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/pullrequests/65/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gui/pull-requests/65"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/65/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/diff/ignitionrobotics/ign-gui:ff9508db7590%0D709d1e3dc7b1?from_pullrequest_id=65"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gui/pullrequests/65/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gui/pullrequests/65/statuses_page=1.json"}}, "title": "Use Ignition Common's new plugin framework", "close_source_branch": true, "reviewers": [], "id": 65, "destination": {"commit": {"hash": "709d1e3dc7b1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/commit/709d1e3dc7b1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/commits/709d1e3dc7b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "branch": {"name": "default"}}, "created_on": "2017-11-16T00:28:54.018842+00:00", "summary": {"raw": "This needs [this](#!/ignitionrobotics/ign-common/pull-requests/73) Ignition Common pull request.\r\n\r\nRelated to issue #11\r\n\r\n## Context\r\n\r\nIgnition common's plugin framework is going through changes to make sure shared libraries are properly unloaded when they are no longer being used. To achieve this, the plugin framework needs to keep ownership of the interfaces it provides. To that end, it only makes shared pointers available, and when those pointers are released, the library is unloaded.\r\n\r\n## Problem\r\n\r\nQt likes to keep ownership of its objects. So as long as our plugin interfaces are `QObject`s, we need to share the interface's  underlying raw pointer.\r\n\r\n## The \"right\" solution\r\n\r\n@mxgrey has a lot of detailed insights on issue #11, and proposed a solution which involves having the interface not be a `QObject`, but a factory of `QObject`s.\r\n\r\nWhile the proposed solution sounds robust, it would require changes on ign-common and ign-gui. And, arguably more importantly, on user code.\r\n\r\nSo I propose we keep the factory approach in mind, but for now implement a less invasive solution just to make sure we don't block ign-common's progress. Once the plugin framework is more complete, we can revisit this and see if the factory approach still makes sense.\r\n\r\n## The current solution\r\n\r\nThe approach on this pull request is based on the following goals:\r\n\r\n1. Never let Qt delete our plugins\r\n\r\n    > This is achieved by intercepting close/reject events on plugin parents (`Dock`s and `Dialog`s) and removing the plugin from the parent before the parent dies.\r\n\r\n2. Detect when Qt would like to delete the plugin and release our `shared_ptr` so ign-common can unload the library if needed\r\n\r\n    > This is done by emitting a `Closing` signal", "markup": "markdown", "html": "<p>This needs <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/73\" rel=\"nofollow\">this</a> Ignition Common pull request.</p>\n<p>Related to issue <a href=\"#!/ignitionrobotics/ign-gui/issues/11/consider-using-qts-plugin-framework\" rel=\"nofollow\" title=\"Consider using Qt&#39;s plugin framework instead of ignition&#39;s\" class=\"ap-connect-link\">#11</a></p>\n<h2 id=\"markdown-header-context\">Context</h2>\n<p>Ignition common's plugin framework is going through changes to make sure shared libraries are properly unloaded when they are no longer being used. To achieve this, the plugin framework needs to keep ownership of the interfaces it provides. To that end, it only makes shared pointers available, and when those pointers are released, the library is unloaded.</p>\n<h2 id=\"markdown-header-problem\">Problem</h2>\n<p>Qt likes to keep ownership of its objects. So as long as our plugin interfaces are <code>QObject</code>s, we need to share the interface's  underlying raw pointer.</p>\n<h2 id=\"markdown-header-the-right-solution\">The \"right\" solution</h2>\n<p>@mxgrey has a lot of detailed insights on issue <a href=\"#!/ignitionrobotics/ign-gui/issues/11/consider-using-qts-plugin-framework\" rel=\"nofollow\" title=\"Consider using Qt&#39;s plugin framework instead of ignition&#39;s\" class=\"ap-connect-link\">#11</a>, and proposed a solution which involves having the interface not be a <code>QObject</code>, but a factory of <code>QObject</code>s.</p>\n<p>While the proposed solution sounds robust, it would require changes on ign-common and ign-gui. And, arguably more importantly, on user code.</p>\n<p>So I propose we keep the factory approach in mind, but for now implement a less invasive solution just to make sure we don't block ign-common's progress. Once the plugin framework is more complete, we can revisit this and see if the factory approach still makes sense.</p>\n<h2 id=\"markdown-header-the-current-solution\">The current solution</h2>\n<p>The approach on this pull request is based on the following goals:</p>\n<ol>\n<li>\n<p>Never let Qt delete our plugins</p>\n<blockquote>\n<p>This is achieved by intercepting close/reject events on plugin parents (<code>Dock</code>s and <code>Dialog</code>s) and removing the plugin from the parent before the parent dies.</p>\n</blockquote>\n</li>\n<li>\n<p>Detect when Qt would like to delete the plugin and release our <code>shared_ptr</code> so ign-common can unload the library if needed</p>\n<blockquote>\n<p>This is done by emitting a <code>Closing</code> signal</p>\n</blockquote>\n</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "4a787839fcf9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/commit/4a787839fcf9.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/commits/4a787839fcf9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}ts=1406854"}}, "type": "repository", "name": "ign-gui", "full_name": "ignitionrobotics/ign-gui", "uuid": "{d80b97c2-f3f9-42b2-86b0-8c1fd4aa845f}"}, "branch": {"name": "new_plugin_framework"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-11-17T08:42:16.483957+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-11-17T17:07:40.383040+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2017-11-17T17:07:47.526830+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "ff9508db7590", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gui/commit/ff9508db7590.json"}, "html": {"href": "#!/ignitionrobotics/ign-gui/commits/ff9508db7590"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}