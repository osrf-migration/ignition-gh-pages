{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/69/comments/49340494.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/69/_/diff#comment-49340494"}}, "parent": {"id": 49339331, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/69/comments/49339331.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/69/_/diff#comment-49339331"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/69.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/69"}}, "title": "Refactoring the cmake scripts to use ignition-cmake"}, "content": {"raw": "This is an irritating idiom of Windows where member fields that use template arguments do not automatically get exported, despite the visibility of the class that contains them.\n\n[A list of possible solutions is described here](https://stackoverflow.com/a/22054743).\n\nIf all of these member variables are private (like our PIMPL `std::unique_ptr`s), then I'd suggest we just suppress the message. I could pull the platform-independent warning suppression feature out of the existing plugin PRs and put it into its own PR, and that should help with this concern.\n\nFor the member variables that aren't `std::unique_ptr`, we should probably consider tucking them away behind a PIMPL, unless there's some compelling reason that we can't or shouldn't.", "markup": "markdown", "html": "<p>This is an irritating idiom of Windows where member fields that use template arguments do not automatically get exported, despite the visibility of the class that contains them.</p>\n<p><a data-is-external-link=\"true\" href=\"https://stackoverflow.com/a/22054743\" rel=\"nofollow\">A list of possible solutions is described here</a>.</p>\n<p>If all of these member variables are private (like our PIMPL <code>std::unique_ptr</code>s), then I'd suggest we just suppress the message. I could pull the platform-independent warning suppression feature out of the existing plugin PRs and put it into its own PR, and that should help with this concern.</p>\n<p>For the member variables that aren't <code>std::unique_ptr</code>, we should probably consider tucking them away behind a PIMPL, unless there's some compelling reason that we can't or shouldn't.</p>", "type": "rendered"}, "created_on": "2017-11-10T21:22:24.796881+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-10T21:22:24.798864+00:00", "type": "pullrequest_comment", "id": 49340494}