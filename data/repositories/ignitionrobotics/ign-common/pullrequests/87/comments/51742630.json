{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/87/comments/51742630.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/87/_/diff#comment-51742630"}}, "parent": {"id": 51739708, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/87/comments/51739708.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/87/_/diff#comment-51739708"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 87, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/87.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/87"}}, "title": "Support new ErrorStr API in tinyxml2 6.0.0 (#28)"}, "content": {"raw": "`config.hh` itself is super valuable and important. In fact the issue in this PR could have been avoided much more easily if tinyxml2 had provided a proper `config.hh` of its own, so we should definitely do our due diligence and provide them for our projects. My main point is that our `config.hh` should (ideally) only contain information about the library that it belongs to and not its dependencies.\n\nTo try to illustrate that for this case, suppose our API exposed tinyxml2 to the public interface, so we were using this header macro to determine which version of the tinyxml2 API we were exposing. If the user configures and installs `ign-common` with one version of tinyxml2 installed, but then later on installs a different version of tinyxml2 and links their project to it, there could easily be header confusion that breaks their code. (Edit: but to be clear, this wouldn't have actually been an issue in this specific case because tinyxml2 is only used internally.)\n\nBasically, putting dependency information into `config.hh` is like a blunt instrument, and we should prefer more nuanced approaches to configuring whenever possible.", "markup": "markdown", "html": "<p><code>config.hh</code> itself is super valuable and important. In fact the issue in this PR could have been avoided much more easily if tinyxml2 had provided a proper <code>config.hh</code> of its own, so we should definitely do our due diligence and provide them for our projects. My main point is that our <code>config.hh</code> should (ideally) only contain information about the library that it belongs to and not its dependencies.</p>\n<p>To try to illustrate that for this case, suppose our API exposed tinyxml2 to the public interface, so we were using this header macro to determine which version of the tinyxml2 API we were exposing. If the user configures and installs <code>ign-common</code> with one version of tinyxml2 installed, but then later on installs a different version of tinyxml2 and links their project to it, there could easily be header confusion that breaks their code. (Edit: but to be clear, this wouldn't have actually been an issue in this specific case because tinyxml2 is only used internally.)</p>\n<p>Basically, putting dependency information into <code>config.hh</code> is like a blunt instrument, and we should prefer more nuanced approaches to configuring whenever possible.</p>", "type": "rendered"}, "created_on": "2017-12-12T16:14:25.015029+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-12T17:57:56.579843+00:00", "type": "pullrequest_comment", "id": 51742630}