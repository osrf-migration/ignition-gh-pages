{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/57/comments/42221792.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/57/_/diff#comment-42221792"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 57, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/57.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/57"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "We might want to hold off on reviewing this PR, since I realized there's some inconsistency in the `PluginPtr` semantics. Specifically, a `const PluginPtr` has the properties:\n\n1. Cannot change the plugin instance that is being pointed to.\n2. Only provides const-qualified interfaces.\n\nProperty (1) is correct and reasonable, but property (2) violates smart pointer semantics. A better set of properties would be that `const PluginPtr`:\n\n1. Cannot change the plugin instance that is being pointed to.\n2. Provides both const-qualified and const-unqualified interfaces.\n\nMeanwhile, there would be a `ConstPluginPtr` type that:\n\n1. Can change the plugin instance that is being pointed to.\n2. Only provides const-qualified interfaces.\n\nThen the properties of a `const ConstPluginPtr` would be:\n\n1. Cannot change the plugin instance that is being pointed to.\n2. Only provides const-qualified interfaces.\n\nAnd of course we should be able to cast from `PluginPtr` to `ConstPluginPtr` but not the other way around.\n\nThe constness of the smart pointer object should not affect the constness of the instance that it refers to.  That violates well-established smart pointer semantics, which is not something I'm comfortable with.\n\nAlso, I have an idea that should allow us to optionally give the user interfaces in `std::shared_ptr` objects, which would allow users to decouple their use of plugins from this `PluginPtr` framework without causing any harm.", "markup": "markdown", "html": "<p>We might want to hold off on reviewing this PR, since I realized there's some inconsistency in the <code>PluginPtr</code> semantics. Specifically, a <code>const PluginPtr</code> has the properties:</p>\n<ol>\n<li>Cannot change the plugin instance that is being pointed to.</li>\n<li>Only provides const-qualified interfaces.</li>\n</ol>\n<p>Property (1) is correct and reasonable, but property (2) violates smart pointer semantics. A better set of properties would be that <code>const PluginPtr</code>:</p>\n<ol>\n<li>Cannot change the plugin instance that is being pointed to.</li>\n<li>Provides both const-qualified and const-unqualified interfaces.</li>\n</ol>\n<p>Meanwhile, there would be a <code>ConstPluginPtr</code> type that:</p>\n<ol>\n<li>Can change the plugin instance that is being pointed to.</li>\n<li>Only provides const-qualified interfaces.</li>\n</ol>\n<p>Then the properties of a <code>const ConstPluginPtr</code> would be:</p>\n<ol>\n<li>Cannot change the plugin instance that is being pointed to.</li>\n<li>Only provides const-qualified interfaces.</li>\n</ol>\n<p>And of course we should be able to cast from <code>PluginPtr</code> to <code>ConstPluginPtr</code> but not the other way around.</p>\n<p>The constness of the smart pointer object should not affect the constness of the instance that it refers to.  That violates well-established smart pointer semantics, which is not something I'm comfortable with.</p>\n<p>Also, I have an idea that should allow us to optionally give the user interfaces in <code>std::shared_ptr</code> objects, which would allow users to decouple their use of plugins from this <code>PluginPtr</code> framework without causing any harm.</p>", "type": "rendered"}, "created_on": "2017-08-04T17:26:40.478864+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-08-04T17:29:33.306450+00:00", "type": "pullrequest_comment", "id": 42221792}], "page": 1, "size": 1}