{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/65999499.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-65999499"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "All tests pass on my Windows machine \\(except \\[av\\] and \\[graphics\\] components, which I don\u2019t build on Windows\\).", "markup": "markdown", "html": "<p>All tests pass on my Windows machine (except [av] and [graphics] components, which I don\u2019t build on Windows).</p>", "type": "rendered"}, "created_on": "2018-06-02T17:08:38.975013+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2018-06-02T17:08:39.018174+00:00", "type": "pullrequest_comment", "id": 65999499}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/66357693.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-66357693"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Tests on my Linux machine including \\[av\\] and \\[graphics\\] went well.", "markup": "markdown", "html": "<p>Tests on my Linux machine including [av] and [graphics] went well.</p>", "type": "rendered"}, "created_on": "2018-06-06T14:41:27.505577+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2018-06-06T14:41:27.554713+00:00", "type": "pullrequest_comment", "id": 66357693}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/66370329.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-66370329"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Thanks for the PR, @peci1. Do you have a suggestion on how to handle encoding? On ign-fuel-tools we [use](#!/ignitionrobotics/ign-fuel-tools/src/e7ecca51aa5e18527aea3b2be47f8a1213e7e723/src/REST.cc?at=default&fileviewer=file-view-default#REST.cc-122) CURL's `curl_easy_escape`, but it would be nice to have a solution on ign-common which doesn't require CURL.", "markup": "markdown", "html": "<p>Thanks for the PR, @peci1. Do you have a suggestion on how to handle encoding? On ign-fuel-tools we <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-fuel-tools/src/e7ecca51aa5e18527aea3b2be47f8a1213e7e723/src/REST.cc?at=default&amp;fileviewer=file-view-default#REST.cc-122\" rel=\"nofollow\">use</a> CURL's <code>curl_easy_escape</code>, but it would be nice to have a solution on ign-common which doesn't require CURL.</p>", "type": "rendered"}, "created_on": "2018-06-06T16:05:22.444923+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-06-06T16:05:22.582527+00:00", "type": "pullrequest_comment", "id": 66370329}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/66458202.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-66458202"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "I think curl\\_easy\\_escape would not help if you\u2019d like to escape scheme, path, query and fragment separately\u2026 So far, I\u2019ve looked into Mozilla\u2019s source code, and the encoding shouldn\u2019t be that difficult to write. I\u2019ll have a look at it.\n\nA question is how to add it to to exising ign-common code. My idea is adding an optional parameter to URI.Parse\\(\\) \\(and URIPath.Parse\\(\\) and so on\\) that would tell whether the given string should be encoded or not.", "markup": "markdown", "html": "<p>I think curl_easy_escape would not help if you\u2019d like to escape scheme, path, query and fragment separately\u2026 So far, I\u2019ve looked into Mozilla\u2019s source code, and the encoding shouldn\u2019t be that difficult to write. I\u2019ll have a look at it.</p>\n<p>A question is how to add it to to exising ign-common code. My idea is adding an optional parameter to URI.Parse() (and URIPath.Parse() and so on) that would tell whether the given string should be encoded or not.</p>", "type": "rendered"}, "created_on": "2018-06-07T10:37:47.728903+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2018-06-07T10:37:47.808308+00:00", "type": "pullrequest_comment", "id": 66458202}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/66507805.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-66507805"}}, "parent": {"id": 66458202, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/66458202.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-66458202"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Awesome, thanks for looking into the Mozilla approach. I think that adding a parameter is a good idea, but it can be tricky to keep it API/ABI compatible, so we'd have to go through a deprecation cycle... Maybe a less intrusive option could be to add something like an `URI.Encoding()`flag which allows setting the encoding type, or maybe just a static `URI.Encode()` function could also get the job done.", "markup": "markdown", "html": "<p>Awesome, thanks for looking into the Mozilla approach. I think that adding a parameter is a good idea, but it can be tricky to keep it API/ABI compatible, so we'd have to go through a deprecation cycle... Maybe a less intrusive option could be to add something like an <code>URI.Encoding()</code>flag which allows setting the encoding type, or maybe just a static <code>URI.Encode()</code> function could also get the job done.</p>", "type": "rendered"}, "created_on": "2018-06-07T16:13:59.035922+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-06-07T16:13:59.044967+00:00", "type": "pullrequest_comment", "id": 66507805}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71455680.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71455680"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "@peci1 , what do you think of removing the whitespace changes from this PR so we can get the fragments in quickly, and revisit the space handling later with a migration plan for ign-fuel-tools? Do the following changes work for you?\n\n~~~\ndiff -r dab2bddb362d include/ignition/common/URI.hh\n--- a/include/ignition/common/URI.hh    Wed Jun 06 16:52:23 2018 +0200\n+++ b/include/ignition/common/URI.hh    Mon Jul 30 13:43:37 2018 -0700\n@@ -83,7 +83,7 @@\n       /// \\return The path as a string, with each path part separated by _delim.\n       public: std::string Str(const std::string &_delim = \"/\") const;\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _path Another URIPath.\n       /// \\return Itself.\n       public: URIPath &operator=(const URIPath &_path);\n@@ -135,7 +135,7 @@\n       public: void Insert(const std::string &_key,\n                           const std::string &_value);\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _query another URIQuery.\n       /// \\return Itself.\n       public: URIQuery &operator=(const URIQuery &_query);\n@@ -192,12 +192,12 @@\n       /// \\brief Remove all values of the fragment\n       public: void Clear();\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &operator=(const URIFragment &_fragment);\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &operator=(const std::string &_fragment);\n@@ -292,7 +292,7 @@\n       /// \\return A const reference of the fragment.\n       public: const URIFragment &Fragment() const;\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _uri Another URI.\n       /// \\return Itself.\n       public: URI &operator=(const URI &_uri);\ndiff -r dab2bddb362d src/URI.cc\n--- a/src/URI.cc        Wed Jun 06 16:52:23 2018 +0200\n+++ b/src/URI.cc        Mon Jul 30 13:43:37 2018 -0700\n@@ -35,7 +35,7 @@\n   public: std::list<std::string> path;\n \n   /// \\brief Whether the path is absolute (starts with slash) or not.\n-  public: bool isAbsolute;\n+  public: bool isAbsolute{false};\n \n   /// \\brief A helper method to determine if the given string represents\n   ///        an absolute path starting segment or not.\n@@ -202,7 +202,7 @@\n                                    \"%\"\n                                    \"-._~\"\n                                    \"!$&'()*+,;=\"\n-                                   \"[]\";\n+                                   \"[] \";\n   if (str.find_first_not_of(allowedChars) != std::string::npos)\n     return false;\n \ndiff -r dab2bddb362d src/URI_TEST.cc\n--- a/src/URI_TEST.cc   Wed Jun 06 16:52:23 2018 +0200\n+++ b/src/URI_TEST.cc   Mon Jul 30 13:43:37 2018 -0700\n@@ -31,14 +31,14 @@\n   EXPECT_EQ(path1.Str(), \"part1\");\n   path1.PushBack(\"part2\");\n   EXPECT_EQ(path1.Str(), \"part1/part2\");\n-  path1.PushFront(\"part%200\");\n-  EXPECT_EQ(path1.Str(), \"part%200/part1/part2\");\n+  path1.PushFront(\"part 0\");\n+  EXPECT_EQ(path1.Str(), \"part 0/part1/part2\");\n \n   path2 = path1 / \"part3\";\n-  EXPECT_EQ(path2.Str(), \"part%200/part1/part2/part3\");\n+  EXPECT_EQ(path2.Str(), \"part 0/part1/part2/part3\");\n \n   path1 /= \"part3\";\n-  EXPECT_EQ(path1.Str(), \"part%200/part1/part2/part3\");\n+  EXPECT_EQ(path1.Str(), \"part 0/part1/part2/part3\");\n \n   EXPECT_TRUE(path1 == path2);\n \n@@ -85,9 +85,7 @@\n   EXPECT_TRUE(URIPath::Valid(\"/part1/\"));\n   EXPECT_TRUE(URIPath::Valid(\"/part1/part2\"));\n   EXPECT_TRUE(URIPath::Valid(\"/part1/part2/\"));\n-  EXPECT_FALSE(URIPath::Valid(\"/part 1/part 2/\"));\n-  EXPECT_TRUE(URIPath::Valid(\"/part+1/part+2\"));\n-  EXPECT_TRUE(URIPath::Valid(\"/part%201/part%202\"));\n+  EXPECT_TRUE(URIPath::Valid(\"/part 1/part 2/\"));\n \n   EXPECT_FALSE(path.Parse(\"\"));\n   EXPECT_FALSE(path.Parse(\"//\"));\n@@ -103,9 +101,7 @@\n   EXPECT_TRUE(path.Parse(\"/part1/\"));\n   EXPECT_TRUE(path.Parse(\"/part1/part2\"));\n   EXPECT_TRUE(path.Parse(\"/part1/part2/\"));\n-  EXPECT_FALSE(path.Parse(\"/part 1/part 2/\"));\n-  EXPECT_TRUE(path.Parse(\"/part+1/part+2\"));\n-  EXPECT_TRUE(path.Parse(\"/part%201/part%202\"));\n+  EXPECT_TRUE(path.Parse(\"/part 1/part 2/\"));\n \n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(\"\").Valid()));\n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(\"//\").Valid()));\n@@ -122,8 +118,6 @@\n   EXPECT_NO_THROW(URIPath(\"/part1/\"));\n   EXPECT_NO_THROW(URIPath(\"/part1/part2\"));\n   EXPECT_NO_THROW(URIPath(\"/part 1/part2/\"));\n-  EXPECT_NO_THROW(URIPath(\"/part+1/part+2\"));\n-  EXPECT_NO_THROW(URIPath(\"/part%201/part%202\"));\n }\n \n /////////////////////////////////////////////////\n@@ -266,7 +260,6 @@\n \n   EXPECT_TRUE(URIFragment::Valid(\"\"));\n   EXPECT_TRUE(URIFragment::Valid(\"#fragment\"));\n-  EXPECT_TRUE(URIFragment::Valid(\"#fragment/?!$&'()*+,;=:@%20fragment\"));\n \n   EXPECT_FALSE(fragment.Parse(\"##\"));\n   EXPECT_FALSE(fragment.Parse(\"invalid#\"));\n@@ -280,7 +273,6 @@\n \n   EXPECT_TRUE(fragment.Parse(\"\"));\n   EXPECT_TRUE(fragment.Parse(\"#fragment\"));\n-  EXPECT_TRUE(fragment.Parse(\"#fragment/?!$&'()*+,;=:@%20FRAGMENT\"));\n   // it should still be valid\n   EXPECT_TRUE(fragment.Valid());\n \n@@ -292,7 +284,6 @@\n~~~", "markup": "markdown", "html": "<p>@peci1 , what do you think of removing the whitespace changes from this PR so we can get the fragments in quickly, and revisit the space handling later with a migration plan for ign-fuel-tools? Do the following changes work for you?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r dab2bddb362d include/ignition/common/URI.hh</span>\n<span class=\"gd\">--- a/include/ignition/common/URI.hh    Wed Jun 06 16:52:23 2018 +0200</span>\n<span class=\"gi\">+++ b/include/ignition/common/URI.hh    Mon Jul 30 13:43:37 2018 -0700</span>\n<span class=\"gu\">@@ -83,7 +83,7 @@</span>\n       /// \\return The path as a string, with each path part separated by _delim.\n       public: std::string Str(const std::string &amp;_delim = &quot;/&quot;) const;\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _path Another URIPath.\n       /// \\return Itself.\n       public: URIPath &amp;operator=(const URIPath &amp;_path);\n<span class=\"gu\">@@ -135,7 +135,7 @@</span>\n       public: void Insert(const std::string &amp;_key,\n                           const std::string &amp;_value);\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _query another URIQuery.\n       /// \\return Itself.\n       public: URIQuery &amp;operator=(const URIQuery &amp;_query);\n<span class=\"gu\">@@ -192,12 +192,12 @@</span>\n       /// \\brief Remove all values of the fragment\n       public: void Clear();\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &amp;operator=(const URIFragment &amp;_fragment);\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &amp;operator=(const std::string &amp;_fragment);\n<span class=\"gu\">@@ -292,7 +292,7 @@</span>\n       /// \\return A const reference of the fragment.\n       public: const URIFragment &amp;Fragment() const;\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _uri Another URI.\n       /// \\return Itself.\n       public: URI &amp;operator=(const URI &amp;_uri);\n<span class=\"gh\">diff -r dab2bddb362d src/URI.cc</span>\n<span class=\"gd\">--- a/src/URI.cc        Wed Jun 06 16:52:23 2018 +0200</span>\n<span class=\"gi\">+++ b/src/URI.cc        Mon Jul 30 13:43:37 2018 -0700</span>\n<span class=\"gu\">@@ -35,7 +35,7 @@</span>\n   public: std::list&lt;std::string&gt; path;\n\n   /// \\brief Whether the path is absolute (starts with slash) or not.\n<span class=\"gd\">-  public: bool isAbsolute;</span>\n<span class=\"gi\">+  public: bool isAbsolute{false};</span>\n\n   /// \\brief A helper method to determine if the given string represents\n   ///        an absolute path starting segment or not.\n<span class=\"gu\">@@ -202,7 +202,7 @@</span>\n                                    &quot;%&quot;\n                                    &quot;-._~&quot;\n                                    &quot;!$&amp;&#39;()*+,;=&quot;\n<span class=\"gd\">-                                   &quot;[]&quot;;</span>\n<span class=\"gi\">+                                   &quot;[] &quot;;</span>\n   if (str.find_first_not_of(allowedChars) != std::string::npos)\n     return false;\n\n<span class=\"gh\">diff -r dab2bddb362d src/URI_TEST.cc</span>\n<span class=\"gd\">--- a/src/URI_TEST.cc   Wed Jun 06 16:52:23 2018 +0200</span>\n<span class=\"gi\">+++ b/src/URI_TEST.cc   Mon Jul 30 13:43:37 2018 -0700</span>\n<span class=\"gu\">@@ -31,14 +31,14 @@</span>\n   EXPECT_EQ(path1.Str(), &quot;part1&quot;);\n   path1.PushBack(&quot;part2&quot;);\n   EXPECT_EQ(path1.Str(), &quot;part1/part2&quot;);\n<span class=\"gd\">-  path1.PushFront(&quot;part%200&quot;);</span>\n<span class=\"gd\">-  EXPECT_EQ(path1.Str(), &quot;part%200/part1/part2&quot;);</span>\n<span class=\"gi\">+  path1.PushFront(&quot;part 0&quot;);</span>\n<span class=\"gi\">+  EXPECT_EQ(path1.Str(), &quot;part 0/part1/part2&quot;);</span>\n\n   path2 = path1 / &quot;part3&quot;;\n<span class=\"gd\">-  EXPECT_EQ(path2.Str(), &quot;part%200/part1/part2/part3&quot;);</span>\n<span class=\"gi\">+  EXPECT_EQ(path2.Str(), &quot;part 0/part1/part2/part3&quot;);</span>\n\n   path1 /= &quot;part3&quot;;\n<span class=\"gd\">-  EXPECT_EQ(path1.Str(), &quot;part%200/part1/part2/part3&quot;);</span>\n<span class=\"gi\">+  EXPECT_EQ(path1.Str(), &quot;part 0/part1/part2/part3&quot;);</span>\n\n   EXPECT_TRUE(path1 == path2);\n\n<span class=\"gu\">@@ -85,9 +85,7 @@</span>\n   EXPECT_TRUE(URIPath::Valid(&quot;/part1/&quot;));\n   EXPECT_TRUE(URIPath::Valid(&quot;/part1/part2&quot;));\n   EXPECT_TRUE(URIPath::Valid(&quot;/part1/part2/&quot;));\n<span class=\"gd\">-  EXPECT_FALSE(URIPath::Valid(&quot;/part 1/part 2/&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(URIPath::Valid(&quot;/part+1/part+2&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(URIPath::Valid(&quot;/part%201/part%202&quot;));</span>\n<span class=\"gi\">+  EXPECT_TRUE(URIPath::Valid(&quot;/part 1/part 2/&quot;));</span>\n\n   EXPECT_FALSE(path.Parse(&quot;&quot;));\n   EXPECT_FALSE(path.Parse(&quot;//&quot;));\n<span class=\"gu\">@@ -103,9 +101,7 @@</span>\n   EXPECT_TRUE(path.Parse(&quot;/part1/&quot;));\n   EXPECT_TRUE(path.Parse(&quot;/part1/part2&quot;));\n   EXPECT_TRUE(path.Parse(&quot;/part1/part2/&quot;));\n<span class=\"gd\">-  EXPECT_FALSE(path.Parse(&quot;/part 1/part 2/&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(path.Parse(&quot;/part+1/part+2&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(path.Parse(&quot;/part%201/part%202&quot;));</span>\n<span class=\"gi\">+  EXPECT_TRUE(path.Parse(&quot;/part 1/part 2/&quot;));</span>\n\n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(&quot;&quot;).Valid()));\n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(&quot;//&quot;).Valid()));\n<span class=\"gu\">@@ -122,8 +118,6 @@</span>\n   EXPECT_NO_THROW(URIPath(&quot;/part1/&quot;));\n   EXPECT_NO_THROW(URIPath(&quot;/part1/part2&quot;));\n   EXPECT_NO_THROW(URIPath(&quot;/part 1/part2/&quot;));\n<span class=\"gd\">-  EXPECT_NO_THROW(URIPath(&quot;/part+1/part+2&quot;));</span>\n<span class=\"gd\">-  EXPECT_NO_THROW(URIPath(&quot;/part%201/part%202&quot;));</span>\n }\n\n /////////////////////////////////////////////////\n<span class=\"gu\">@@ -266,7 +260,6 @@</span>\n\n   EXPECT_TRUE(URIFragment::Valid(&quot;&quot;));\n   EXPECT_TRUE(URIFragment::Valid(&quot;#fragment&quot;));\n<span class=\"gd\">-  EXPECT_TRUE(URIFragment::Valid(&quot;#fragment/?!$&amp;&#39;()*+,;=:@%20fragment&quot;));</span>\n\n   EXPECT_FALSE(fragment.Parse(&quot;##&quot;));\n   EXPECT_FALSE(fragment.Parse(&quot;invalid#&quot;));\n<span class=\"gu\">@@ -280,7 +273,6 @@</span>\n\n   EXPECT_TRUE(fragment.Parse(&quot;&quot;));\n   EXPECT_TRUE(fragment.Parse(&quot;#fragment&quot;));\n<span class=\"gd\">-  EXPECT_TRUE(fragment.Parse(&quot;#fragment/?!$&amp;&#39;()*+,;=:@%20FRAGMENT&quot;));</span>\n   // it should still be valid\n   EXPECT_TRUE(fragment.Valid());\n\n<span class=\"gu\">@@ -292,7 +284,6 @@</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-07-30T20:46:12.124622+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-07-30T20:46:12.141624+00:00", "type": "pullrequest_comment", "id": 71455680}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71456268.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71456268"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Hmm, and what about commenting out the nonpassing tests with a TODO comment to enable them once whitespace is handled correctly? But that\u2019s not a strong request, do what you think is best :slight_smile: ", "markup": "markdown", "html": "<p>Hmm, and what about commenting out the nonpassing tests with a TODO comment to enable them once whitespace is handled correctly? But that\u2019s not a strong request, do what you think is best <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f642.png\" alt=\"\ud83d\ude42\" title=\":slight_smile:\" data-emoji-short-name=\":slight_smile:\" /> </p>", "type": "rendered"}, "created_on": "2018-07-30T20:53:11.856287+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2018-07-30T20:53:11.917168+00:00", "type": "pullrequest_comment", "id": 71456268}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71460052.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71460052"}}, "parent": {"id": 71456268, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71456268.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71456268"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Commenting out sounds good to me. We should also ticket an issue to make sure this doesn't get lost ;)", "markup": "markdown", "html": "<p>Commenting out sounds good to me. We should also ticket an issue to make sure this doesn't get lost ;)</p>", "type": "rendered"}, "created_on": "2018-07-30T21:37:36.774427+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-07-30T21:37:36.784247+00:00", "type": "pullrequest_comment", "id": 71460052}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71472129.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71472129"}}, "parent": {"id": 71460052, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71460052.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71460052"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Okay, I made the changes you suggested.", "markup": "markdown", "html": "<p>Okay, I made the changes you suggested.</p>", "type": "rendered"}, "created_on": "2018-07-31T01:44:12.262811+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2018-07-31T01:44:12.302100+00:00", "type": "pullrequest_comment", "id": 71472129}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71875579.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71875579"}}, "parent": {"id": 71472129, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71472129.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71472129"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Ticketed issue #38", "markup": "markdown", "html": "<p>Ticketed issue <a href=\"#!/ignitionrobotics/ign-common/issues/38/support-uri-encoding\" rel=\"nofollow\" title=\"Support URI encoding\" class=\"ap-connect-link\">#38</a></p>", "type": "rendered"}, "created_on": "2018-08-02T21:39:54.715820+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-08-02T21:39:54.723134+00:00", "type": "pullrequest_comment", "id": 71875579}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71593236.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:dba1f9f4abed..babfafcc5a26?path=src%2FURI.cc"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71593236"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Do we expect parts starting with `/` to be pushed? I don't think it makes much sense to store parts containing slashes, I tried this test for example:\n\n~~~\n   URIPath path7;\n   path7.PushFront(\"/abs\");\n   EXPECT_EQ(path7.Str(), \"/abs\");\n \n   path7.PushFront(\"/abs2\");\n   EXPECT_EQ(path7.Str(), \"/abs2/abs\");\n~~~\n\nResulting in\n\n~~~\n/mnt/TERA/code/ign-common/src/URI_TEST.cc:70: Failure\nValue of: \"/abs\"\nExpected: path7.Str()\nWhich is: \"//abs\"\n/mnt/TERA/code/ign-common/src/URI_TEST.cc:73: Failure\nValue of: \"/abs2/abs\"\nExpected: path7.Str()\nWhich is: \"//abs2//abs\"\n~~~", "markup": "markdown", "html": "<p>Do we expect parts starting with <code>/</code> to be pushed? I don't think it makes much sense to store parts containing slashes, I tried this test for example:</p>\n<div class=\"codehilite\"><pre><span></span>   URIPath path7;\n   path7.PushFront(&quot;/abs&quot;);\n   EXPECT_EQ(path7.Str(), &quot;/abs&quot;);\n\n   path7.PushFront(&quot;/abs2&quot;);\n   EXPECT_EQ(path7.Str(), &quot;/abs2/abs&quot;);\n</pre></div>\n\n\n<p>Resulting in</p>\n<div class=\"codehilite\"><pre><span></span>/mnt/TERA/code/ign-common/src/URI_TEST.cc:70: Failure\nValue of: &quot;/abs&quot;\nExpected: path7.Str()\nWhich is: &quot;//abs&quot;\n/mnt/TERA/code/ign-common/src/URI_TEST.cc:73: Failure\nValue of: &quot;/abs2/abs&quot;\nExpected: path7.Str()\nWhich is: &quot;//abs2//abs&quot;\n</pre></div>", "type": "rendered"}, "created_on": "2018-07-31T20:04:06.898595+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 112, "from": null, "path": "src/URI.cc"}, "updated_on": "2018-07-31T20:04:06.906565+00:00", "type": "pullrequest_comment", "id": 71593236}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71593765.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:dba1f9f4abed..babfafcc5a26?path=src%2FURI.cc"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71593765"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Style: `{` in a new line", "markup": "markdown", "html": "<p>Style: <code>{</code> in a new line</p>", "type": "rendered"}, "created_on": "2018-07-31T20:10:16.610589+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 417, "from": null, "path": "src/URI.cc"}, "updated_on": "2018-07-31T20:10:16.618593+00:00", "type": "pullrequest_comment", "id": 71593765}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71594143.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:dba1f9f4abed..babfafcc5a26?path=src%2FURI.cc"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71594143"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Must take `isAbsolute` into account here\n\n~~~\n   URIPath path5(\"/absolute/path\");\n   EXPECT_EQ(path5.Str(), \"/absolute/path\");\n \n   URIPath path7 = path5;\n   EXPECT_EQ(path7.Str(), path5.Str());\n~~~\n\n~~~\n/mnt/TERA/code/ign-common/src/URI_TEST.cc:66: Failure\nValue of: path5.Str()\n  Actual: \"/absolute/path\"\nExpected: path7.Str()\nWhich is: \"absolute/path\"\n~~~", "markup": "markdown", "html": "<p>Must take <code>isAbsolute</code> into account here</p>\n<div class=\"codehilite\"><pre><span></span>   URIPath path5(&quot;/absolute/path&quot;);\n   EXPECT_EQ(path5.Str(), &quot;/absolute/path&quot;);\n\n   URIPath path7 = path5;\n   EXPECT_EQ(path7.Str(), path5.Str());\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>/mnt/TERA/code/ign-common/src/URI_TEST.cc:66: Failure\nValue of: path5.Str()\n  Actual: &quot;/absolute/path&quot;\nExpected: path7.Str()\nWhich is: &quot;absolute/path&quot;\n</pre></div>", "type": "rendered"}, "created_on": "2018-07-31T20:15:07.646287+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": 131, "path": "src/URI.cc"}, "updated_on": "2018-07-31T20:15:07.654470+00:00", "type": "pullrequest_comment", "id": 71594143}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71594207.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:dba1f9f4abed..babfafcc5a26?path=src%2FURI.cc"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71594207"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Set `isAbsolute` to false?", "markup": "markdown", "html": "<p>Set <code>isAbsolute</code> to false?</p>", "type": "rendered"}, "created_on": "2018-07-31T20:15:52.701806+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": 138, "path": "src/URI.cc"}, "updated_on": "2018-07-31T20:15:52.709204+00:00", "type": "pullrequest_comment", "id": 71594207}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71615546.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71615546"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Fixed handling of absolute paths.\n\nI had to decide on what to do in `URIPath::PushFront` and `URIPath::PushBack` when the parameter contains slashes. I came to the following solution:\n\n* I added explicit methods for setting the URIPath absolute/relative. The methods aren\u2019t virtual, so ABI should not be affected.\n* if `_part` is empty: ignore the call at all\n* if `_part` starts with a slash\n\n    *  `URIPath::PushFront`: make the URI absolute, strip the slash, and issue a warning\n    * `URIPath::PushBack`: if the URI is empty, then make it absolute, strip the slash and issue a warning\n    \n* if `_part` has slashes inside \\(even on the end\\): the slashes are encoded to `%2F`\n\nI hope this is a suitable solution. Another option would be to encode even the leading slash and do not treat it special, but I somehow feel this way it might be a bit more user-friendly \\(e.g. constructs like `URIPath path = \u201d/my\u201d / \u201dabsolute\u201d / \u201duri\u201d;`\\).", "markup": "markdown", "html": "<p>Fixed handling of absolute paths.</p>\n<p>I had to decide on what to do in <code>URIPath::PushFront</code> and <code>URIPath::PushBack</code> when the parameter contains slashes. I came to the following solution:</p>\n<ul>\n<li>I added explicit methods for setting the URIPath absolute/relative. The methods aren\u2019t virtual, so ABI should not be affected.</li>\n<li>if <code>_part</code> is empty: ignore the call at all</li>\n<li>\n<p>if <code>_part</code> starts with a slash</p>\n<ul>\n<li><code>URIPath::PushFront</code>: make the URI absolute, strip the slash, and issue a warning</li>\n<li><code>URIPath::PushBack</code>: if the URI is empty, then make it absolute, strip the slash and issue a warning</li>\n</ul>\n</li>\n<li>\n<p>if <code>_part</code> has slashes inside (even on the end): the slashes are encoded to <code>%2F</code></p>\n</li>\n</ul>\n<p>I hope this is a suitable solution. Another option would be to encode even the leading slash and do not treat it special, but I somehow feel this way it might be a bit more user-friendly (e.g. constructs like <code>URIPath path = \u201d/my\u201d / \u201dabsolute\u201d / \u201duri\u201d;</code>).</p>", "type": "rendered"}, "created_on": "2018-08-01T02:53:52.455053+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2018-08-01T02:53:52.549099+00:00", "type": "pullrequest_comment", "id": 71615546}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71877029.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71877029"}}, "parent": {"id": 71615546, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71615546.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71615546"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Thanks for addressing the comments, looking good to me!\n\nI have a suggestion to add a few more checks on [this PR](https://bitbucket.org/peci1/ign-common/pull-requests/2/add-test-checks-to-fragment-absolute-pr/diff). I think we're ready to merge after that.", "markup": "markdown", "html": "<p>Thanks for addressing the comments, looking good to me!</p>\n<p>I have a suggestion to add a few more checks on <a data-is-external-link=\"true\" href=\"https://bitbucket.org/peci1/ign-common/pull-requests/2/add-test-checks-to-fragment-absolute-pr/diff\" rel=\"nofollow\">this PR</a>. I think we're ready to merge after that.</p>", "type": "rendered"}, "created_on": "2018-08-02T22:00:25.505984+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-08-02T22:00:25.512540+00:00", "type": "pullrequest_comment", "id": 71877029}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/72139481.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-72139481"}}, "parent": {"id": 71877029, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71877029.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71877029"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Approved and fixed a few cppcheck warnings I had missed / caused earlier.\n\nCI results pre-merge:\n\n* Homebrew [![Build Status](https://build.osrfoundation.org/buildStatus/icon?job=ignition_common-ci-pr_any-homebrew-amd64&build=228)](https://build.osrfoundation.org/job/ignition_common-ci-pr_any-homebrew-amd64/228/)\n* Xenial [![Build Status](https://build.osrfoundation.org/buildStatus/icon?job=ignition_common-ci-pr_any-ubuntu_auto-amd64&build=10)](https://build.osrfoundation.org/job/ignition_common-ci-pr_any-ubuntu_auto-amd64/10/) (warnings fixed in e06998d)\n* Windows [![Build Status](https://build.osrfoundation.org/buildStatus/icon?job=ignition_common-ci-pr_any-windows7-amd64&build=470)](https://build.osrfoundation.org/job/ignition_common-ci-pr_any-windows7-amd64/470/) (no related failures / warnings)", "markup": "markdown", "html": "<p>Approved and fixed a few cppcheck warnings I had missed / caused earlier.</p>\n<p>CI results pre-merge:</p>\n<ul>\n<li>Homebrew <a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/ignition_common-ci-pr_any-homebrew-amd64/228/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=ignition_common-ci-pr_any-homebrew-amd64&amp;build=228\" /></a></li>\n<li>Xenial <a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/ignition_common-ci-pr_any-ubuntu_auto-amd64/10/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=ignition_common-ci-pr_any-ubuntu_auto-amd64&amp;build=10\" /></a> (warnings fixed in <a href=\"#!/ignitionrobotics/ign-common/commits/e06998d\" rel=\"nofollow\" class=\"ap-connect-link\">e06998d</a>)</li>\n<li>Windows <a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/ignition_common-ci-pr_any-windows7-amd64/470/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=ignition_common-ci-pr_any-windows7-amd64&amp;build=470\" /></a> (no related failures / warnings)</li>\n</ul>", "type": "rendered"}, "created_on": "2018-08-06T22:41:36.896636+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-08-06T22:41:36.902508+00:00", "type": "pullrequest_comment", "id": 72139481}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71869407.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:cd07cc2f3ecd..babfafcc5a26?path=include%2Fignition%2Fcommon%2FURI.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71869407"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Nit: missing `\\return`", "markup": "markdown", "html": "<p>Nit: missing <code>\\return</code></p>", "type": "rendered"}, "created_on": "2018-08-02T20:26:55.215206+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 57, "from": null, "path": "include/ignition/common/URI.hh"}, "updated_on": "2018-08-02T20:26:55.225897+00:00", "type": "pullrequest_comment", "id": 71869407}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71869429.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:cd07cc2f3ecd..babfafcc5a26?path=include%2Fignition%2Fcommon%2FURI.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71869429"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "`const bool`", "markup": "markdown", "html": "<p><code>const bool</code></p>", "type": "rendered"}, "created_on": "2018-08-02T20:27:11.281278+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 62, "from": null, "path": "include/ignition/common/URI.hh"}, "updated_on": "2018-08-02T20:27:11.287037+00:00", "type": "pullrequest_comment", "id": 71869429}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71869673.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:cd07cc2f3ecd..babfafcc5a26?path=include%2Fignition%2Fcommon%2FURI.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71869673"}}, "parent": {"id": 71869429, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71869429.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71869429"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Are you sure it should be there in the header? Since the parameter is copied, the caller doesn\u2019t care of constness. But adding it to the .cc file should be okay.", "markup": "markdown", "html": "<p>Are you sure it should be there in the header? Since the parameter is copied, the caller doesn\u2019t care of constness. But adding it to the .cc file should be okay.</p>", "type": "rendered"}, "created_on": "2018-08-02T20:29:59.336717+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "inline": {"to": null, "from": null, "path": "include/ignition/common/URI.hh"}, "updated_on": "2018-08-02T20:29:59.399156+00:00", "type": "pullrequest_comment", "id": 71869673}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71874413.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:cd07cc2f3ecd..babfafcc5a26?path=include%2Fignition%2Fcommon%2FURI.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71874413"}}, "parent": {"id": 71869673, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71869673.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71869673"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "I think you can't add just to the cc, because the function would have a different signature.", "markup": "markdown", "html": "<p>I think you can't add just to the cc, because the function would have a different signature.</p>", "type": "rendered"}, "created_on": "2018-08-02T21:25:39.066811+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": null, "path": "include/ignition/common/URI.hh"}, "updated_on": "2018-08-02T21:25:39.073978+00:00", "type": "pullrequest_comment", "id": 71874413}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71888284.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:b90d351a2447..7a6fdbb8d534?path=include%2Fignition%2Fcommon%2FURI.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71888284"}}, "parent": {"id": 71874413, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71874413.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71874413"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Nope, you can do it with parameters passed by value. And clang-tidy even issues a warning when you put the const in declaration.", "markup": "markdown", "html": "<p>Nope, you can do it with parameters passed by value. And clang-tidy even issues a warning when you put the const in declaration.</p>", "type": "rendered"}, "created_on": "2018-08-03T02:29:03.360404+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "inline": {"to": null, "from": null, "path": "include/ignition/common/URI.hh"}, "updated_on": "2018-08-03T02:29:03.442687+00:00", "type": "pullrequest_comment", "id": 71888284}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/72138115.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/peci1/ign-common:b90d351a2447..7a6fdbb8d534?path=include%2Fignition%2Fcommon%2FURI.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-72138115"}}, "parent": {"id": 71888284, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71888284.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71888284"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Oh I had actually seen something similar recently somewhere else too. Interesting that clang-tidy would complain. Thanks for the info!", "markup": "markdown", "html": "<p>Oh I had actually seen something similar recently somewhere else too. Interesting that clang-tidy would complain. Thanks for the info!</p>", "type": "rendered"}, "created_on": "2018-08-06T22:14:18.780691+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": null, "path": "include/ignition/common/URI.hh"}, "updated_on": "2018-08-06T22:14:18.788231+00:00", "type": "pullrequest_comment", "id": 72138115}], "page": 1, "size": 23}