{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71615546.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71615546"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "Fixed handling of absolute paths.\n\nI had to decide on what to do in `URIPath::PushFront` and `URIPath::PushBack` when the parameter contains slashes. I came to the following solution:\n\n* I added explicit methods for setting the URIPath absolute/relative. The methods aren\u2019t virtual, so ABI should not be affected.\n* if `_part` is empty: ignore the call at all\n* if `_part` starts with a slash\n\n    *  `URIPath::PushFront`: make the URI absolute, strip the slash, and issue a warning\n    * `URIPath::PushBack`: if the URI is empty, then make it absolute, strip the slash and issue a warning\n    \n* if `_part` has slashes inside \\(even on the end\\): the slashes are encoded to `%2F`\n\nI hope this is a suitable solution. Another option would be to encode even the leading slash and do not treat it special, but I somehow feel this way it might be a bit more user-friendly \\(e.g. constructs like `URIPath path = \u201d/my\u201d / \u201dabsolute\u201d / \u201duri\u201d;`\\).", "markup": "markdown", "html": "<p>Fixed handling of absolute paths.</p>\n<p>I had to decide on what to do in <code>URIPath::PushFront</code> and <code>URIPath::PushBack</code> when the parameter contains slashes. I came to the following solution:</p>\n<ul>\n<li>I added explicit methods for setting the URIPath absolute/relative. The methods aren\u2019t virtual, so ABI should not be affected.</li>\n<li>if <code>_part</code> is empty: ignore the call at all</li>\n<li>\n<p>if <code>_part</code> starts with a slash</p>\n<ul>\n<li><code>URIPath::PushFront</code>: make the URI absolute, strip the slash, and issue a warning</li>\n<li><code>URIPath::PushBack</code>: if the URI is empty, then make it absolute, strip the slash and issue a warning</li>\n</ul>\n</li>\n<li>\n<p>if <code>_part</code> has slashes inside (even on the end): the slashes are encoded to <code>%2F</code></p>\n</li>\n</ul>\n<p>I hope this is a suitable solution. Another option would be to encode even the leading slash and do not treat it special, but I somehow feel this way it might be a bit more user-friendly (e.g. constructs like <code>URIPath path = \u201d/my\u201d / \u201dabsolute\u201d / \u201duri\u201d;</code>).</p>", "type": "rendered"}, "created_on": "2018-08-01T02:53:52.455053+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2018-08-01T02:53:52.549099+00:00", "type": "pullrequest_comment", "id": 71615546}