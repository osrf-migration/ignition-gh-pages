{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130/comments/71455680.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130/_/diff#comment-71455680"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/130.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/130"}}, "title": "Several improvements to URI class."}, "content": {"raw": "@peci1 , what do you think of removing the whitespace changes from this PR so we can get the fragments in quickly, and revisit the space handling later with a migration plan for ign-fuel-tools? Do the following changes work for you?\n\n~~~\ndiff -r dab2bddb362d include/ignition/common/URI.hh\n--- a/include/ignition/common/URI.hh    Wed Jun 06 16:52:23 2018 +0200\n+++ b/include/ignition/common/URI.hh    Mon Jul 30 13:43:37 2018 -0700\n@@ -83,7 +83,7 @@\n       /// \\return The path as a string, with each path part separated by _delim.\n       public: std::string Str(const std::string &_delim = \"/\") const;\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _path Another URIPath.\n       /// \\return Itself.\n       public: URIPath &operator=(const URIPath &_path);\n@@ -135,7 +135,7 @@\n       public: void Insert(const std::string &_key,\n                           const std::string &_value);\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _query another URIQuery.\n       /// \\return Itself.\n       public: URIQuery &operator=(const URIQuery &_query);\n@@ -192,12 +192,12 @@\n       /// \\brief Remove all values of the fragment\n       public: void Clear();\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &operator=(const URIFragment &_fragment);\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &operator=(const std::string &_fragment);\n@@ -292,7 +292,7 @@\n       /// \\return A const reference of the fragment.\n       public: const URIFragment &Fragment() const;\n \n-      /// \\brief Equal operator.\n+      /// \\brief Assignment operator.\n       /// \\param[in] _uri Another URI.\n       /// \\return Itself.\n       public: URI &operator=(const URI &_uri);\ndiff -r dab2bddb362d src/URI.cc\n--- a/src/URI.cc        Wed Jun 06 16:52:23 2018 +0200\n+++ b/src/URI.cc        Mon Jul 30 13:43:37 2018 -0700\n@@ -35,7 +35,7 @@\n   public: std::list<std::string> path;\n \n   /// \\brief Whether the path is absolute (starts with slash) or not.\n-  public: bool isAbsolute;\n+  public: bool isAbsolute{false};\n \n   /// \\brief A helper method to determine if the given string represents\n   ///        an absolute path starting segment or not.\n@@ -202,7 +202,7 @@\n                                    \"%\"\n                                    \"-._~\"\n                                    \"!$&'()*+,;=\"\n-                                   \"[]\";\n+                                   \"[] \";\n   if (str.find_first_not_of(allowedChars) != std::string::npos)\n     return false;\n \ndiff -r dab2bddb362d src/URI_TEST.cc\n--- a/src/URI_TEST.cc   Wed Jun 06 16:52:23 2018 +0200\n+++ b/src/URI_TEST.cc   Mon Jul 30 13:43:37 2018 -0700\n@@ -31,14 +31,14 @@\n   EXPECT_EQ(path1.Str(), \"part1\");\n   path1.PushBack(\"part2\");\n   EXPECT_EQ(path1.Str(), \"part1/part2\");\n-  path1.PushFront(\"part%200\");\n-  EXPECT_EQ(path1.Str(), \"part%200/part1/part2\");\n+  path1.PushFront(\"part 0\");\n+  EXPECT_EQ(path1.Str(), \"part 0/part1/part2\");\n \n   path2 = path1 / \"part3\";\n-  EXPECT_EQ(path2.Str(), \"part%200/part1/part2/part3\");\n+  EXPECT_EQ(path2.Str(), \"part 0/part1/part2/part3\");\n \n   path1 /= \"part3\";\n-  EXPECT_EQ(path1.Str(), \"part%200/part1/part2/part3\");\n+  EXPECT_EQ(path1.Str(), \"part 0/part1/part2/part3\");\n \n   EXPECT_TRUE(path1 == path2);\n \n@@ -85,9 +85,7 @@\n   EXPECT_TRUE(URIPath::Valid(\"/part1/\"));\n   EXPECT_TRUE(URIPath::Valid(\"/part1/part2\"));\n   EXPECT_TRUE(URIPath::Valid(\"/part1/part2/\"));\n-  EXPECT_FALSE(URIPath::Valid(\"/part 1/part 2/\"));\n-  EXPECT_TRUE(URIPath::Valid(\"/part+1/part+2\"));\n-  EXPECT_TRUE(URIPath::Valid(\"/part%201/part%202\"));\n+  EXPECT_TRUE(URIPath::Valid(\"/part 1/part 2/\"));\n \n   EXPECT_FALSE(path.Parse(\"\"));\n   EXPECT_FALSE(path.Parse(\"//\"));\n@@ -103,9 +101,7 @@\n   EXPECT_TRUE(path.Parse(\"/part1/\"));\n   EXPECT_TRUE(path.Parse(\"/part1/part2\"));\n   EXPECT_TRUE(path.Parse(\"/part1/part2/\"));\n-  EXPECT_FALSE(path.Parse(\"/part 1/part 2/\"));\n-  EXPECT_TRUE(path.Parse(\"/part+1/part+2\"));\n-  EXPECT_TRUE(path.Parse(\"/part%201/part%202\"));\n+  EXPECT_TRUE(path.Parse(\"/part 1/part 2/\"));\n \n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(\"\").Valid()));\n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(\"//\").Valid()));\n@@ -122,8 +118,6 @@\n   EXPECT_NO_THROW(URIPath(\"/part1/\"));\n   EXPECT_NO_THROW(URIPath(\"/part1/part2\"));\n   EXPECT_NO_THROW(URIPath(\"/part 1/part2/\"));\n-  EXPECT_NO_THROW(URIPath(\"/part+1/part+2\"));\n-  EXPECT_NO_THROW(URIPath(\"/part%201/part%202\"));\n }\n \n /////////////////////////////////////////////////\n@@ -266,7 +260,6 @@\n \n   EXPECT_TRUE(URIFragment::Valid(\"\"));\n   EXPECT_TRUE(URIFragment::Valid(\"#fragment\"));\n-  EXPECT_TRUE(URIFragment::Valid(\"#fragment/?!$&'()*+,;=:@%20fragment\"));\n \n   EXPECT_FALSE(fragment.Parse(\"##\"));\n   EXPECT_FALSE(fragment.Parse(\"invalid#\"));\n@@ -280,7 +273,6 @@\n \n   EXPECT_TRUE(fragment.Parse(\"\"));\n   EXPECT_TRUE(fragment.Parse(\"#fragment\"));\n-  EXPECT_TRUE(fragment.Parse(\"#fragment/?!$&'()*+,;=:@%20FRAGMENT\"));\n   // it should still be valid\n   EXPECT_TRUE(fragment.Valid());\n \n@@ -292,7 +284,6 @@\n~~~", "markup": "markdown", "html": "<p>@peci1 , what do you think of removing the whitespace changes from this PR so we can get the fragments in quickly, and revisit the space handling later with a migration plan for ign-fuel-tools? Do the following changes work for you?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r dab2bddb362d include/ignition/common/URI.hh</span>\n<span class=\"gd\">--- a/include/ignition/common/URI.hh    Wed Jun 06 16:52:23 2018 +0200</span>\n<span class=\"gi\">+++ b/include/ignition/common/URI.hh    Mon Jul 30 13:43:37 2018 -0700</span>\n<span class=\"gu\">@@ -83,7 +83,7 @@</span>\n       /// \\return The path as a string, with each path part separated by _delim.\n       public: std::string Str(const std::string &amp;_delim = &quot;/&quot;) const;\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _path Another URIPath.\n       /// \\return Itself.\n       public: URIPath &amp;operator=(const URIPath &amp;_path);\n<span class=\"gu\">@@ -135,7 +135,7 @@</span>\n       public: void Insert(const std::string &amp;_key,\n                           const std::string &amp;_value);\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _query another URIQuery.\n       /// \\return Itself.\n       public: URIQuery &amp;operator=(const URIQuery &amp;_query);\n<span class=\"gu\">@@ -192,12 +192,12 @@</span>\n       /// \\brief Remove all values of the fragment\n       public: void Clear();\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &amp;operator=(const URIFragment &amp;_fragment);\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _fragment another URIFragment.\n       /// \\return Itself.\n       public: URIFragment &amp;operator=(const std::string &amp;_fragment);\n<span class=\"gu\">@@ -292,7 +292,7 @@</span>\n       /// \\return A const reference of the fragment.\n       public: const URIFragment &amp;Fragment() const;\n\n<span class=\"gd\">-      /// \\brief Equal operator.</span>\n<span class=\"gi\">+      /// \\brief Assignment operator.</span>\n       /// \\param[in] _uri Another URI.\n       /// \\return Itself.\n       public: URI &amp;operator=(const URI &amp;_uri);\n<span class=\"gh\">diff -r dab2bddb362d src/URI.cc</span>\n<span class=\"gd\">--- a/src/URI.cc        Wed Jun 06 16:52:23 2018 +0200</span>\n<span class=\"gi\">+++ b/src/URI.cc        Mon Jul 30 13:43:37 2018 -0700</span>\n<span class=\"gu\">@@ -35,7 +35,7 @@</span>\n   public: std::list&lt;std::string&gt; path;\n\n   /// \\brief Whether the path is absolute (starts with slash) or not.\n<span class=\"gd\">-  public: bool isAbsolute;</span>\n<span class=\"gi\">+  public: bool isAbsolute{false};</span>\n\n   /// \\brief A helper method to determine if the given string represents\n   ///        an absolute path starting segment or not.\n<span class=\"gu\">@@ -202,7 +202,7 @@</span>\n                                    &quot;%&quot;\n                                    &quot;-._~&quot;\n                                    &quot;!$&amp;&#39;()*+,;=&quot;\n<span class=\"gd\">-                                   &quot;[]&quot;;</span>\n<span class=\"gi\">+                                   &quot;[] &quot;;</span>\n   if (str.find_first_not_of(allowedChars) != std::string::npos)\n     return false;\n\n<span class=\"gh\">diff -r dab2bddb362d src/URI_TEST.cc</span>\n<span class=\"gd\">--- a/src/URI_TEST.cc   Wed Jun 06 16:52:23 2018 +0200</span>\n<span class=\"gi\">+++ b/src/URI_TEST.cc   Mon Jul 30 13:43:37 2018 -0700</span>\n<span class=\"gu\">@@ -31,14 +31,14 @@</span>\n   EXPECT_EQ(path1.Str(), &quot;part1&quot;);\n   path1.PushBack(&quot;part2&quot;);\n   EXPECT_EQ(path1.Str(), &quot;part1/part2&quot;);\n<span class=\"gd\">-  path1.PushFront(&quot;part%200&quot;);</span>\n<span class=\"gd\">-  EXPECT_EQ(path1.Str(), &quot;part%200/part1/part2&quot;);</span>\n<span class=\"gi\">+  path1.PushFront(&quot;part 0&quot;);</span>\n<span class=\"gi\">+  EXPECT_EQ(path1.Str(), &quot;part 0/part1/part2&quot;);</span>\n\n   path2 = path1 / &quot;part3&quot;;\n<span class=\"gd\">-  EXPECT_EQ(path2.Str(), &quot;part%200/part1/part2/part3&quot;);</span>\n<span class=\"gi\">+  EXPECT_EQ(path2.Str(), &quot;part 0/part1/part2/part3&quot;);</span>\n\n   path1 /= &quot;part3&quot;;\n<span class=\"gd\">-  EXPECT_EQ(path1.Str(), &quot;part%200/part1/part2/part3&quot;);</span>\n<span class=\"gi\">+  EXPECT_EQ(path1.Str(), &quot;part 0/part1/part2/part3&quot;);</span>\n\n   EXPECT_TRUE(path1 == path2);\n\n<span class=\"gu\">@@ -85,9 +85,7 @@</span>\n   EXPECT_TRUE(URIPath::Valid(&quot;/part1/&quot;));\n   EXPECT_TRUE(URIPath::Valid(&quot;/part1/part2&quot;));\n   EXPECT_TRUE(URIPath::Valid(&quot;/part1/part2/&quot;));\n<span class=\"gd\">-  EXPECT_FALSE(URIPath::Valid(&quot;/part 1/part 2/&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(URIPath::Valid(&quot;/part+1/part+2&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(URIPath::Valid(&quot;/part%201/part%202&quot;));</span>\n<span class=\"gi\">+  EXPECT_TRUE(URIPath::Valid(&quot;/part 1/part 2/&quot;));</span>\n\n   EXPECT_FALSE(path.Parse(&quot;&quot;));\n   EXPECT_FALSE(path.Parse(&quot;//&quot;));\n<span class=\"gu\">@@ -103,9 +101,7 @@</span>\n   EXPECT_TRUE(path.Parse(&quot;/part1/&quot;));\n   EXPECT_TRUE(path.Parse(&quot;/part1/part2&quot;));\n   EXPECT_TRUE(path.Parse(&quot;/part1/part2/&quot;));\n<span class=\"gd\">-  EXPECT_FALSE(path.Parse(&quot;/part 1/part 2/&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(path.Parse(&quot;/part+1/part+2&quot;));</span>\n<span class=\"gd\">-  EXPECT_TRUE(path.Parse(&quot;/part%201/part%202&quot;));</span>\n<span class=\"gi\">+  EXPECT_TRUE(path.Parse(&quot;/part 1/part 2/&quot;));</span>\n\n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(&quot;&quot;).Valid()));\n   EXPECT_NO_THROW(EXPECT_FALSE(URIPath(&quot;//&quot;).Valid()));\n<span class=\"gu\">@@ -122,8 +118,6 @@</span>\n   EXPECT_NO_THROW(URIPath(&quot;/part1/&quot;));\n   EXPECT_NO_THROW(URIPath(&quot;/part1/part2&quot;));\n   EXPECT_NO_THROW(URIPath(&quot;/part 1/part2/&quot;));\n<span class=\"gd\">-  EXPECT_NO_THROW(URIPath(&quot;/part+1/part+2&quot;));</span>\n<span class=\"gd\">-  EXPECT_NO_THROW(URIPath(&quot;/part%201/part%202&quot;));</span>\n }\n\n /////////////////////////////////////////////////\n<span class=\"gu\">@@ -266,7 +260,6 @@</span>\n\n   EXPECT_TRUE(URIFragment::Valid(&quot;&quot;));\n   EXPECT_TRUE(URIFragment::Valid(&quot;#fragment&quot;));\n<span class=\"gd\">-  EXPECT_TRUE(URIFragment::Valid(&quot;#fragment/?!$&amp;&#39;()*+,;=:@%20fragment&quot;));</span>\n\n   EXPECT_FALSE(fragment.Parse(&quot;##&quot;));\n   EXPECT_FALSE(fragment.Parse(&quot;invalid#&quot;));\n<span class=\"gu\">@@ -280,7 +273,6 @@</span>\n\n   EXPECT_TRUE(fragment.Parse(&quot;&quot;));\n   EXPECT_TRUE(fragment.Parse(&quot;#fragment&quot;));\n<span class=\"gd\">-  EXPECT_TRUE(fragment.Parse(&quot;#fragment/?!$&amp;&#39;()*+,;=:@%20FRAGMENT&quot;));</span>\n   // it should still be valid\n   EXPECT_TRUE(fragment.Valid());\n\n<span class=\"gu\">@@ -292,7 +284,6 @@</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-07-30T20:46:12.124622+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-07-30T20:46:12.141624+00:00", "type": "pullrequest_comment", "id": 71455680}