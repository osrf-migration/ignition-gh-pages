{"rendered": {"reason": {"raw": "This PR will transition over to the upcoming `ign-plugin` repo.", "markup": "markdown", "html": "<p>This PR will transition over to the upcoming <code>ign-plugin</code> repo.</p>", "type": "rendered"}, "description": {"raw": "~~This should be my very last PR related to plugin features. After this change, the plugin framework will have 100% of the features and safeties that I was hoping for.~~ I was wrong, see [here](#!/ignitionrobotics/ign-common/pull-requests/98/).\r\n\r\nNote that this PR is meant to be reviewed after pull request #59 is merged; this is not meant to replace it. If you do review this PR before pull request #59 is merged, then I recommend only looking at commit 7510fd1 because that will show the diff between the two.\r\n\r\nThe purpose of this PR is to ensure that dynamically linked libraries are able to unload when they are no longer being used. Without these changes, any library that gets loaded by the `PluginLoader` will remain loaded throughout the remaining lifespan of the executable. I view this is a potential source of \"memory leaking\", because the shared library will take up space in the system memory even if all the plugins which were using it have been deleted. If a user wanted to hotswap between a bunch of different implementations of some interface where each implementation is provided by a different shared library, those shared libraries would begin to pile up for as long as the program is running, even if the library is no longer being used or referenced.\r\n\r\nWith the changes here, we are able to track whether any plugins (or `PluginLoader`s) are referencing the shared libraries which have been loaded. When all references for a library have dropped to zero, the library is instructed to unload using `dlclose`. (Note that instructing the shared library to unload does not guarantee that it will actually unload, because it is up to the operating system to decide if it will actually bother doing so.)\r\n\r\nNote that there is one fragile aspect of this implementation: The ordering of some of the member variables in the class definitions for `PluginWithDlHandle` (which is a new class in this PR) and in `PluginLoaderPrivate` are very important, because they need to be destructed in the correct order. This importance is very strongly noted in the inline documentation for those classes, and I've written a sequence of tests which will fail spectacularly if this ordering is violated, so we shouldn't have to worry much. Just know that if you innocently modify those class definitions and the tests start to fail on you in surprising ways, it's probably because you inadvertently reordered those member variables.", "markup": "markdown", "html": "<p><del>This should be my very last PR related to plugin features. After this change, the plugin framework will have 100% of the features and safeties that I was hoping for.</del> I was wrong, see <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/98/\" rel=\"nofollow\">here</a>.</p>\n<p>Note that this PR is meant to be reviewed after <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #59</a> is merged; this is not meant to replace it. If you do review this PR before <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #59</a> is merged, then I recommend only looking at commit <a href=\"#!/ignitionrobotics/ign-common/commits/7510fd1\" rel=\"nofollow\" class=\"ap-connect-link\">7510fd1</a> because that will show the diff between the two.</p>\n<p>The purpose of this PR is to ensure that dynamically linked libraries are able to unload when they are no longer being used. Without these changes, any library that gets loaded by the <code>PluginLoader</code> will remain loaded throughout the remaining lifespan of the executable. I view this is a potential source of \"memory leaking\", because the shared library will take up space in the system memory even if all the plugins which were using it have been deleted. If a user wanted to hotswap between a bunch of different implementations of some interface where each implementation is provided by a different shared library, those shared libraries would begin to pile up for as long as the program is running, even if the library is no longer being used or referenced.</p>\n<p>With the changes here, we are able to track whether any plugins (or <code>PluginLoader</code>s) are referencing the shared libraries which have been loaded. When all references for a library have dropped to zero, the library is instructed to unload using <code>dlclose</code>. (Note that instructing the shared library to unload does not guarantee that it will actually unload, because it is up to the operating system to decide if it will actually bother doing so.)</p>\n<p>Note that there is one fragile aspect of this implementation: The ordering of some of the member variables in the class definitions for <code>PluginWithDlHandle</code> (which is a new class in this PR) and in <code>PluginLoaderPrivate</code> are very important, because they need to be destructed in the correct order. This importance is very strongly noted in the inline documentation for those classes, and I've written a sequence of tests which will fail spectacularly if this ordering is violated, so we shouldn't have to worry much. Just know that if you innocently modify those class definitions and the tests start to fail on you in surprising ways, it's probably because you inadvertently reordered those member variables.</p>", "type": "rendered"}, "title": {"raw": "Automatically unloading libraries when they are no longer being referenced", "markup": "markdown", "html": "<p>Automatically unloading libraries when they are no longer being referenced</p>", "type": "rendered"}}, "type": "pullrequest", "description": "~~This should be my very last PR related to plugin features. After this change, the plugin framework will have 100% of the features and safeties that I was hoping for.~~ I was wrong, see [here](#!/ignitionrobotics/ign-common/pull-requests/98/).\r\n\r\nNote that this PR is meant to be reviewed after pull request #59 is merged; this is not meant to replace it. If you do review this PR before pull request #59 is merged, then I recommend only looking at commit 7510fd1 because that will show the diff between the two.\r\n\r\nThe purpose of this PR is to ensure that dynamically linked libraries are able to unload when they are no longer being used. Without these changes, any library that gets loaded by the `PluginLoader` will remain loaded throughout the remaining lifespan of the executable. I view this is a potential source of \"memory leaking\", because the shared library will take up space in the system memory even if all the plugins which were using it have been deleted. If a user wanted to hotswap between a bunch of different implementations of some interface where each implementation is provided by a different shared library, those shared libraries would begin to pile up for as long as the program is running, even if the library is no longer being used or referenced.\r\n\r\nWith the changes here, we are able to track whether any plugins (or `PluginLoader`s) are referencing the shared libraries which have been loaded. When all references for a library have dropped to zero, the library is instructed to unload using `dlclose`. (Note that instructing the shared library to unload does not guarantee that it will actually unload, because it is up to the operating system to decide if it will actually bother doing so.)\r\n\r\nNote that there is one fragile aspect of this implementation: The ordering of some of the member variables in the class definitions for `PluginWithDlHandle` (which is a new class in this PR) and in `PluginLoaderPrivate` are very important, because they need to be destructed in the correct order. This importance is very strongly noted in the inline documentation for those classes, and I've written a sequence of tests which will fail spectacularly if this ordering is violated, so we shouldn't have to worry much. Just know that if you innocently modify those class definitions and the tests start to fail on you in surprising ways, it's probably because you inadvertently reordered those member variables.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/61/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diffstat/ignitionrobotics/ign-common:cba7e7790d60%0Dee16dcc8fc6a?from_pullrequest_id=61"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/61/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/61.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/61/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/61/merge"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/61"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/61/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:cba7e7790d60%0Dee16dcc8fc6a?from_pullrequest_id=61"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/61/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/61/statuses_page=1.json"}}, "title": "Automatically unloading libraries when they are no longer being referenced", "close_source_branch": false, "reviewers": [], "id": 61, "destination": {"commit": {"hash": "ee16dcc8fc6a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/ee16dcc8fc6a.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/ee16dcc8fc6a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "created_on": "2017-08-10T17:24:13.710395+00:00", "summary": {"raw": "~~This should be my very last PR related to plugin features. After this change, the plugin framework will have 100% of the features and safeties that I was hoping for.~~ I was wrong, see [here](#!/ignitionrobotics/ign-common/pull-requests/98/).\r\n\r\nNote that this PR is meant to be reviewed after pull request #59 is merged; this is not meant to replace it. If you do review this PR before pull request #59 is merged, then I recommend only looking at commit 7510fd1 because that will show the diff between the two.\r\n\r\nThe purpose of this PR is to ensure that dynamically linked libraries are able to unload when they are no longer being used. Without these changes, any library that gets loaded by the `PluginLoader` will remain loaded throughout the remaining lifespan of the executable. I view this is a potential source of \"memory leaking\", because the shared library will take up space in the system memory even if all the plugins which were using it have been deleted. If a user wanted to hotswap between a bunch of different implementations of some interface where each implementation is provided by a different shared library, those shared libraries would begin to pile up for as long as the program is running, even if the library is no longer being used or referenced.\r\n\r\nWith the changes here, we are able to track whether any plugins (or `PluginLoader`s) are referencing the shared libraries which have been loaded. When all references for a library have dropped to zero, the library is instructed to unload using `dlclose`. (Note that instructing the shared library to unload does not guarantee that it will actually unload, because it is up to the operating system to decide if it will actually bother doing so.)\r\n\r\nNote that there is one fragile aspect of this implementation: The ordering of some of the member variables in the class definitions for `PluginWithDlHandle` (which is a new class in this PR) and in `PluginLoaderPrivate` are very important, because they need to be destructed in the correct order. This importance is very strongly noted in the inline documentation for those classes, and I've written a sequence of tests which will fail spectacularly if this ordering is violated, so we shouldn't have to worry much. Just know that if you innocently modify those class definitions and the tests start to fail on you in surprising ways, it's probably because you inadvertently reordered those member variables.", "markup": "markdown", "html": "<p><del>This should be my very last PR related to plugin features. After this change, the plugin framework will have 100% of the features and safeties that I was hoping for.</del> I was wrong, see <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/98/\" rel=\"nofollow\">here</a>.</p>\n<p>Note that this PR is meant to be reviewed after <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #59</a> is merged; this is not meant to replace it. If you do review this PR before <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #59</a> is merged, then I recommend only looking at commit <a href=\"#!/ignitionrobotics/ign-common/commits/7510fd1\" rel=\"nofollow\" class=\"ap-connect-link\">7510fd1</a> because that will show the diff between the two.</p>\n<p>The purpose of this PR is to ensure that dynamically linked libraries are able to unload when they are no longer being used. Without these changes, any library that gets loaded by the <code>PluginLoader</code> will remain loaded throughout the remaining lifespan of the executable. I view this is a potential source of \"memory leaking\", because the shared library will take up space in the system memory even if all the plugins which were using it have been deleted. If a user wanted to hotswap between a bunch of different implementations of some interface where each implementation is provided by a different shared library, those shared libraries would begin to pile up for as long as the program is running, even if the library is no longer being used or referenced.</p>\n<p>With the changes here, we are able to track whether any plugins (or <code>PluginLoader</code>s) are referencing the shared libraries which have been loaded. When all references for a library have dropped to zero, the library is instructed to unload using <code>dlclose</code>. (Note that instructing the shared library to unload does not guarantee that it will actually unload, because it is up to the operating system to decide if it will actually bother doing so.)</p>\n<p>Note that there is one fragile aspect of this implementation: The ordering of some of the member variables in the class definitions for <code>PluginWithDlHandle</code> (which is a new class in this PR) and in <code>PluginLoaderPrivate</code> are very important, because they need to be destructed in the correct order. This importance is very strongly noted in the inline documentation for those classes, and I've written a sequence of tests which will fail spectacularly if this ordering is violated, so we shouldn't have to worry much. Just know that if you innocently modify those class definitions and the tests start to fail on you in surprising ways, it's probably because you inadvertently reordered those member variables.</p>", "type": "rendered"}, "source": {"commit": {"hash": "cba7e7790d60", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/cba7e7790d60.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/cba7e7790d60"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "DllManagement"}}, "comment_count": 16, "state": "DECLINED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-12-01T01:13:36.806010+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2017-12-01T02:32:28.527926+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-13T22:07:56.807928+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}}], "reason": "This PR will transition over to the upcoming `ign-plugin` repo.", "updated_on": "2018-04-30T22:16:19.144544+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": null, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}