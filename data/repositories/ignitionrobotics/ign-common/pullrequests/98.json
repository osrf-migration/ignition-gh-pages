{"rendered": {"reason": {"raw": "This PR will transition over to the upcoming `ign-plugin` repo.", "markup": "markdown", "html": "<p>This PR will transition over to the upcoming <code>ign-plugin</code> repo.</p>", "type": "rendered"}, "description": {"raw": "This pull request introduces numerous quality of life improvements for users, as well as improvements to robustness, type safety, comprehensiveness of the library, and forward compatibility with possible future revisions of the library. I'll break down the description into quality of life, type safety, and forward compatibility:\r\n\r\n## Quality of life\r\n\r\nUp until now, there have been some onerous restrictions on how and where a user must register a plugin. The following restrictions are **no longer** required, as of this PR:\r\n\r\n1. All plugins must be registered in one translation unit (now you can register across arbitrarily many translation units)\r\n1. All plugins must be registered in one block which is enclosed by `IGN_COMMON_BEGIN_ADDING_PLUGINS` and `IGN_COMMON_FINISH_ADDING_PLUGINS` (those macros are no longer needed, ever)\r\n1. Each interface must be registered in a separate macro (the macros are now variadic, so you can specify a list of interfaces all at once).\r\n1. All plugins must be registered in the global namespace (the macro can be called in any namespace now)\r\n\r\n## Type Safety\r\n\r\nWe have eliminated all use of strings when referring to interfaces (except where it provides tangible value to do so, like asking for meta-information about some interface). Plugin pointer specializations can be used with all interface types, without needing to put a macro into the interface class.\r\n\r\nMost importantly, we can now robustly handle plugin classes and plugin interfaces that are defined by templates. There are no limitations to what kinds of classes can be used as interfaces or plugin classes (except that the plugin class needs to be fully concrete, but that requirement is a given).\r\n\r\nThis template support is crucial for the upcoming \"feature system\" concept of `ign-physics`.\r\n\r\n## Forward Compatibility\r\n\r\nThe hook for extracting plugins from a library now has a handshake routine where the loader and the loadee can communicate with each other about what versions they expect. This will allow us to add additional features in the future while perfectly continuing to support older versions, both for loading plugins and for being loaded.\r\n\r\nIronically, this will intentionally break compatibility with previous versions, but I think now is the ideal time to do so, since the use of this plugin library is still predominantly internal.", "markup": "markdown", "html": "<p>This pull request introduces numerous quality of life improvements for users, as well as improvements to robustness, type safety, comprehensiveness of the library, and forward compatibility with possible future revisions of the library. I'll break down the description into quality of life, type safety, and forward compatibility:</p>\n<h2 id=\"markdown-header-quality-of-life\">Quality of life</h2>\n<p>Up until now, there have been some onerous restrictions on how and where a user must register a plugin. The following restrictions are <strong>no longer</strong> required, as of this PR:</p>\n<ol>\n<li>All plugins must be registered in one translation unit (now you can register across arbitrarily many translation units)</li>\n<li>All plugins must be registered in one block which is enclosed by <code>IGN_COMMON_BEGIN_ADDING_PLUGINS</code> and <code>IGN_COMMON_FINISH_ADDING_PLUGINS</code> (those macros are no longer needed, ever)</li>\n<li>Each interface must be registered in a separate macro (the macros are now variadic, so you can specify a list of interfaces all at once).</li>\n<li>All plugins must be registered in the global namespace (the macro can be called in any namespace now)</li>\n</ol>\n<h2 id=\"markdown-header-type-safety\">Type Safety</h2>\n<p>We have eliminated all use of strings when referring to interfaces (except where it provides tangible value to do so, like asking for meta-information about some interface). Plugin pointer specializations can be used with all interface types, without needing to put a macro into the interface class.</p>\n<p>Most importantly, we can now robustly handle plugin classes and plugin interfaces that are defined by templates. There are no limitations to what kinds of classes can be used as interfaces or plugin classes (except that the plugin class needs to be fully concrete, but that requirement is a given).</p>\n<p>This template support is crucial for the upcoming \"feature system\" concept of <code>ign-physics</code>.</p>\n<h2 id=\"markdown-header-forward-compatibility\">Forward Compatibility</h2>\n<p>The hook for extracting plugins from a library now has a handshake routine where the loader and the loadee can communicate with each other about what versions they expect. This will allow us to add additional features in the future while perfectly continuing to support older versions, both for loading plugins and for being loaded.</p>\n<p>Ironically, this will intentionally break compatibility with previous versions, but I think now is the ideal time to do so, since the use of this plugin library is still predominantly internal.</p>", "type": "rendered"}, "title": {"raw": "Better plugin registration", "markup": "markdown", "html": "<p>Better plugin registration</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request introduces numerous quality of life improvements for users, as well as improvements to robustness, type safety, comprehensiveness of the library, and forward compatibility with possible future revisions of the library. I'll break down the description into quality of life, type safety, and forward compatibility:\r\n\r\n## Quality of life\r\n\r\nUp until now, there have been some onerous restrictions on how and where a user must register a plugin. The following restrictions are **no longer** required, as of this PR:\r\n\r\n1. All plugins must be registered in one translation unit (now you can register across arbitrarily many translation units)\r\n1. All plugins must be registered in one block which is enclosed by `IGN_COMMON_BEGIN_ADDING_PLUGINS` and `IGN_COMMON_FINISH_ADDING_PLUGINS` (those macros are no longer needed, ever)\r\n1. Each interface must be registered in a separate macro (the macros are now variadic, so you can specify a list of interfaces all at once).\r\n1. All plugins must be registered in the global namespace (the macro can be called in any namespace now)\r\n\r\n## Type Safety\r\n\r\nWe have eliminated all use of strings when referring to interfaces (except where it provides tangible value to do so, like asking for meta-information about some interface). Plugin pointer specializations can be used with all interface types, without needing to put a macro into the interface class.\r\n\r\nMost importantly, we can now robustly handle plugin classes and plugin interfaces that are defined by templates. There are no limitations to what kinds of classes can be used as interfaces or plugin classes (except that the plugin class needs to be fully concrete, but that requirement is a given).\r\n\r\nThis template support is crucial for the upcoming \"feature system\" concept of `ign-physics`.\r\n\r\n## Forward Compatibility\r\n\r\nThe hook for extracting plugins from a library now has a handshake routine where the loader and the loadee can communicate with each other about what versions they expect. This will allow us to add additional features in the future while perfectly continuing to support older versions, both for loading plugins and for being loaded.\r\n\r\nIronically, this will intentionally break compatibility with previous versions, but I think now is the ideal time to do so, since the use of this plugin library is still predominantly internal.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/98/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diffstat/ignitionrobotics/ign-common:34c404340193%0Dcba7e7790d60?from_pullrequest_id=98"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/98/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/98.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/98/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/98/merge"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/98"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/98/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:34c404340193%0Dcba7e7790d60?from_pullrequest_id=98"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/98/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/98/statuses_page=1.json"}}, "title": "Better plugin registration", "close_source_branch": false, "reviewers": [], "id": 98, "destination": {"commit": {"hash": "cba7e7790d60", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/cba7e7790d60.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/cba7e7790d60"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "DllManagement"}}, "created_on": "2018-01-31T02:23:24.598373+00:00", "summary": {"raw": "This pull request introduces numerous quality of life improvements for users, as well as improvements to robustness, type safety, comprehensiveness of the library, and forward compatibility with possible future revisions of the library. I'll break down the description into quality of life, type safety, and forward compatibility:\r\n\r\n## Quality of life\r\n\r\nUp until now, there have been some onerous restrictions on how and where a user must register a plugin. The following restrictions are **no longer** required, as of this PR:\r\n\r\n1. All plugins must be registered in one translation unit (now you can register across arbitrarily many translation units)\r\n1. All plugins must be registered in one block which is enclosed by `IGN_COMMON_BEGIN_ADDING_PLUGINS` and `IGN_COMMON_FINISH_ADDING_PLUGINS` (those macros are no longer needed, ever)\r\n1. Each interface must be registered in a separate macro (the macros are now variadic, so you can specify a list of interfaces all at once).\r\n1. All plugins must be registered in the global namespace (the macro can be called in any namespace now)\r\n\r\n## Type Safety\r\n\r\nWe have eliminated all use of strings when referring to interfaces (except where it provides tangible value to do so, like asking for meta-information about some interface). Plugin pointer specializations can be used with all interface types, without needing to put a macro into the interface class.\r\n\r\nMost importantly, we can now robustly handle plugin classes and plugin interfaces that are defined by templates. There are no limitations to what kinds of classes can be used as interfaces or plugin classes (except that the plugin class needs to be fully concrete, but that requirement is a given).\r\n\r\nThis template support is crucial for the upcoming \"feature system\" concept of `ign-physics`.\r\n\r\n## Forward Compatibility\r\n\r\nThe hook for extracting plugins from a library now has a handshake routine where the loader and the loadee can communicate with each other about what versions they expect. This will allow us to add additional features in the future while perfectly continuing to support older versions, both for loading plugins and for being loaded.\r\n\r\nIronically, this will intentionally break compatibility with previous versions, but I think now is the ideal time to do so, since the use of this plugin library is still predominantly internal.", "markup": "markdown", "html": "<p>This pull request introduces numerous quality of life improvements for users, as well as improvements to robustness, type safety, comprehensiveness of the library, and forward compatibility with possible future revisions of the library. I'll break down the description into quality of life, type safety, and forward compatibility:</p>\n<h2 id=\"markdown-header-quality-of-life\">Quality of life</h2>\n<p>Up until now, there have been some onerous restrictions on how and where a user must register a plugin. The following restrictions are <strong>no longer</strong> required, as of this PR:</p>\n<ol>\n<li>All plugins must be registered in one translation unit (now you can register across arbitrarily many translation units)</li>\n<li>All plugins must be registered in one block which is enclosed by <code>IGN_COMMON_BEGIN_ADDING_PLUGINS</code> and <code>IGN_COMMON_FINISH_ADDING_PLUGINS</code> (those macros are no longer needed, ever)</li>\n<li>Each interface must be registered in a separate macro (the macros are now variadic, so you can specify a list of interfaces all at once).</li>\n<li>All plugins must be registered in the global namespace (the macro can be called in any namespace now)</li>\n</ol>\n<h2 id=\"markdown-header-type-safety\">Type Safety</h2>\n<p>We have eliminated all use of strings when referring to interfaces (except where it provides tangible value to do so, like asking for meta-information about some interface). Plugin pointer specializations can be used with all interface types, without needing to put a macro into the interface class.</p>\n<p>Most importantly, we can now robustly handle plugin classes and plugin interfaces that are defined by templates. There are no limitations to what kinds of classes can be used as interfaces or plugin classes (except that the plugin class needs to be fully concrete, but that requirement is a given).</p>\n<p>This template support is crucial for the upcoming \"feature system\" concept of <code>ign-physics</code>.</p>\n<h2 id=\"markdown-header-forward-compatibility\">Forward Compatibility</h2>\n<p>The hook for extracting plugins from a library now has a handshake routine where the loader and the loadee can communicate with each other about what versions they expect. This will allow us to add additional features in the future while perfectly continuing to support older versions, both for loading plugins and for being loaded.</p>\n<p>Ironically, this will intentionally break compatibility with previous versions, but I think now is the ideal time to do so, since the use of this plugin library is still predominantly internal.</p>", "type": "rendered"}, "source": {"commit": {"hash": "34c404340193", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/34c404340193.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/34c404340193"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "BetterPluginRegistration_DllManagement"}}, "comment_count": 0, "state": "DECLINED", "task_count": 0, "participants": [], "reason": "This PR will transition over to the upcoming `ign-plugin` repo.", "updated_on": "2018-04-30T22:15:57.869566+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": null, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}