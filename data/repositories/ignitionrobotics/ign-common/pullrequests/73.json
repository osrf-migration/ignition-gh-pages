{"rendered": {"description": {"raw": "This is a reduced version of the Plugin Framework Pull Request #59.\r\n\r\nThis PR does not have the template specializations (which are needed for good performance) nor the `PluginPtr` class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.\r\n\r\nUltimately, I expect the template specializations and `PluginPtr` to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).\r\n\r\nNote that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.\r\n\r\nAs a quick overview of what this PR specifically offers:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.\r\n\r\n2. The `PluginLoader` class now returns a generic `PluginPtr` (in this PR the `PluginPtr` is a `std::shared_ptr<Plugin>`, but that will change in pull request #59). The generic `Plugin` object grants access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is one of the interfaces provided by the loaded plugin. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the generic `PluginPtr` that was originally returned by the `PluginLoader`.", "markup": "markdown", "html": "<p>This is a reduced version of the Plugin Framework <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">Pull Request #59</a>.</p>\n<p>This PR does not have the template specializations (which are needed for good performance) nor the <code>PluginPtr</code> class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.</p>\n<p>Ultimately, I expect the template specializations and <code>PluginPtr</code> to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).</p>\n<p>Note that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.</p>\n<p>As a quick overview of what this PR specifically offers:</p>\n<ol>\n<li>\n<p>The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.</p>\n</li>\n<li>\n<p>The <code>PluginLoader</code> class now returns a generic <code>PluginPtr</code> (in this PR the <code>PluginPtr</code> is a <code>std::shared_ptr&lt;Plugin&gt;</code>, but that will change in <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #59</a>). The generic <code>Plugin</code> object grants access to the interfaces provided by the plugin that was loaded.</p>\n</li>\n<li>\n<p>Interfaces can be retrieved as <code>std::shared_ptr&lt;T&gt;</code> objects where <code>T</code> is one of the interfaces provided by the loaded plugin. This allows a user to simply query the <code>Plugin</code> for the specific interfaces that they want, and then discard the generic <code>PluginPtr</code> that was originally returned by the <code>PluginLoader</code>.</p>\n</li>\n</ol>", "type": "rendered"}, "title": {"raw": "Slimmed down the Plugin pull request (no more template specializations)", "markup": "markdown", "html": "<p>Slimmed down the Plugin pull request (no more template specializations)</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is a reduced version of the Plugin Framework Pull Request #59.\r\n\r\nThis PR does not have the template specializations (which are needed for good performance) nor the `PluginPtr` class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.\r\n\r\nUltimately, I expect the template specializations and `PluginPtr` to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).\r\n\r\nNote that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.\r\n\r\nAs a quick overview of what this PR specifically offers:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.\r\n\r\n2. The `PluginLoader` class now returns a generic `PluginPtr` (in this PR the `PluginPtr` is a `std::shared_ptr<Plugin>`, but that will change in pull request #59). The generic `Plugin` object grants access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is one of the interfaces provided by the loaded plugin. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the generic `PluginPtr` that was originally returned by the `PluginLoader`.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/73/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diffstat/ignitionrobotics/ign-common:865ce2664630%0D76d416addd2f?from_pullrequest_id=73"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/73/merge"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:865ce2664630%0D76d416addd2f?from_pullrequest_id=73"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/73/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/statuses_page=1.json"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)", "close_source_branch": true, "reviewers": [], "id": 73, "destination": {"commit": {"hash": "76d416addd2f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/76d416addd2f.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/76d416addd2f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "created_on": "2017-10-06T18:31:00.711286+00:00", "summary": {"raw": "This is a reduced version of the Plugin Framework Pull Request #59.\r\n\r\nThis PR does not have the template specializations (which are needed for good performance) nor the `PluginPtr` class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.\r\n\r\nUltimately, I expect the template specializations and `PluginPtr` to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).\r\n\r\nNote that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.\r\n\r\nAs a quick overview of what this PR specifically offers:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.\r\n\r\n2. The `PluginLoader` class now returns a generic `PluginPtr` (in this PR the `PluginPtr` is a `std::shared_ptr<Plugin>`, but that will change in pull request #59). The generic `Plugin` object grants access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is one of the interfaces provided by the loaded plugin. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the generic `PluginPtr` that was originally returned by the `PluginLoader`.", "markup": "markdown", "html": "<p>This is a reduced version of the Plugin Framework <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">Pull Request #59</a>.</p>\n<p>This PR does not have the template specializations (which are needed for good performance) nor the <code>PluginPtr</code> class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.</p>\n<p>Ultimately, I expect the template specializations and <code>PluginPtr</code> to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).</p>\n<p>Note that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.</p>\n<p>As a quick overview of what this PR specifically offers:</p>\n<ol>\n<li>\n<p>The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.</p>\n</li>\n<li>\n<p>The <code>PluginLoader</code> class now returns a generic <code>PluginPtr</code> (in this PR the <code>PluginPtr</code> is a <code>std::shared_ptr&lt;Plugin&gt;</code>, but that will change in <a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #59</a>). The generic <code>Plugin</code> object grants access to the interfaces provided by the plugin that was loaded.</p>\n</li>\n<li>\n<p>Interfaces can be retrieved as <code>std::shared_ptr&lt;T&gt;</code> objects where <code>T</code> is one of the interfaces provided by the loaded plugin. This allows a user to simply query the <code>Plugin</code> for the specific interfaces that they want, and then discard the generic <code>PluginPtr</code> that was originally returned by the <code>PluginLoader</code>.</p>\n</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "f1cd35a237ee", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/f1cd35a237ee.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/f1cd35a237ee"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginClassOnly"}}, "comment_count": 177, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-10-27T00:30:07.762006+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-10T21:30:17.826989+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-11-14T23:42:17.825731+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2017-11-16T18:23:56.256597+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"role": "PARTICIPANT", "participated_on": "2017-11-16T00:35:00.148280+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2017-11-17T02:59:43.526891+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "865ce2664630", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/865ce2664630.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/865ce2664630"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}