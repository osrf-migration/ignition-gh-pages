{"rendered": {"reason": {"raw": "Replaced by a newer PR", "markup": "markdown", "html": "<p>Replaced by a newer PR</p>", "type": "rendered"}, "description": {"raw": "The previous pull request which expanded the plugin framework has been closed and replaced with this one, because much of the implementation performed in the prior PR has been nearly rewritten here. This PR still serves the same purpose:\r\n\r\n1. Allow multiple plugins per library\r\n2. Allow multiple interfaces per plugin\r\n3. Squash some subtle bugs in the implementation of plugins\r\n\r\nAdditionally it comes with some new semantics for plugin usage and management:\r\n\r\n1. Instances of plugins are managed by a `PluginPtr` which is able to behave like a `std::shared_ptr` if desired.\r\n2. You can define `SpecializedPluginPtr` objects which provide extremely low-cost access to the interfaces that are provided by a plugin instance (as long as you can anticipate the existence of those interfaces at compile time).\r\n3. `PluginPtr` objects can be \"cast\" to `SpecializedPluginPtr` objects (thanks to the `std::shared_ptr`-esque behavior) and different types of `SpecializedPluginPtr`s can be \"cast\" between each other.\r\n\r\nThis pull request also eliminates backwards compatibility with the earlier version of the plugin framework because the backwards compatibility was seen as unnecessarily burdensome since this version has not been released yet. After this has been released, we will be able to implement reasonable backwards compatibility measures for any future changes to the API or ABI.", "markup": "markdown", "html": "<p>The previous pull request which expanded the plugin framework has been closed and replaced with this one, because much of the implementation performed in the prior PR has been nearly rewritten here. This PR still serves the same purpose:</p>\n<ol>\n<li>Allow multiple plugins per library</li>\n<li>Allow multiple interfaces per plugin</li>\n<li>Squash some subtle bugs in the implementation of plugins</li>\n</ol>\n<p>Additionally it comes with some new semantics for plugin usage and management:</p>\n<ol>\n<li>Instances of plugins are managed by a <code>PluginPtr</code> which is able to behave like a <code>std::shared_ptr</code> if desired.</li>\n<li>You can define <code>SpecializedPluginPtr</code> objects which provide extremely low-cost access to the interfaces that are provided by a plugin instance (as long as you can anticipate the existence of those interfaces at compile time).</li>\n<li><code>PluginPtr</code> objects can be \"cast\" to <code>SpecializedPluginPtr</code> objects (thanks to the <code>std::shared_ptr</code>-esque behavior) and different types of <code>SpecializedPluginPtr</code>s can be \"cast\" between each other.</li>\n</ol>\n<p>This pull request also eliminates backwards compatibility with the earlier version of the plugin framework because the backwards compatibility was seen as unnecessarily burdensome since this version has not been released yet. After this has been released, we will be able to implement reasonable backwards compatibility measures for any future changes to the API or ABI.</p>", "type": "rendered"}, "title": {"raw": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "markup": "markdown", "html": "<p>Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The previous pull request which expanded the plugin framework has been closed and replaced with this one, because much of the implementation performed in the prior PR has been nearly rewritten here. This PR still serves the same purpose:\r\n\r\n1. Allow multiple plugins per library\r\n2. Allow multiple interfaces per plugin\r\n3. Squash some subtle bugs in the implementation of plugins\r\n\r\nAdditionally it comes with some new semantics for plugin usage and management:\r\n\r\n1. Instances of plugins are managed by a `PluginPtr` which is able to behave like a `std::shared_ptr` if desired.\r\n2. You can define `SpecializedPluginPtr` objects which provide extremely low-cost access to the interfaces that are provided by a plugin instance (as long as you can anticipate the existence of those interfaces at compile time).\r\n3. `PluginPtr` objects can be \"cast\" to `SpecializedPluginPtr` objects (thanks to the `std::shared_ptr`-esque behavior) and different types of `SpecializedPluginPtr`s can be \"cast\" between each other.\r\n\r\nThis pull request also eliminates backwards compatibility with the earlier version of the plugin framework because the backwards compatibility was seen as unnecessarily burdensome since this version has not been released yet. After this has been released, we will be able to implement reasonable backwards compatibility measures for any future changes to the API or ABI.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/57/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diffstat/ignitionrobotics/ign-common:b77080a81097%0D727286640fa2?from_pullrequest_id=57"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/57/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/57.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/57/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/57/merge"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/57"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/57/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:b77080a81097%0D727286640fa2?from_pullrequest_id=57"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/57/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/57/statuses_page=1.json"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "close_source_branch": false, "reviewers": [{"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}], "id": 57, "destination": {"commit": {"hash": "727286640fa2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/727286640fa2.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/727286640fa2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "created_on": "2017-08-02T00:29:15.287119+00:00", "summary": {"raw": "The previous pull request which expanded the plugin framework has been closed and replaced with this one, because much of the implementation performed in the prior PR has been nearly rewritten here. This PR still serves the same purpose:\r\n\r\n1. Allow multiple plugins per library\r\n2. Allow multiple interfaces per plugin\r\n3. Squash some subtle bugs in the implementation of plugins\r\n\r\nAdditionally it comes with some new semantics for plugin usage and management:\r\n\r\n1. Instances of plugins are managed by a `PluginPtr` which is able to behave like a `std::shared_ptr` if desired.\r\n2. You can define `SpecializedPluginPtr` objects which provide extremely low-cost access to the interfaces that are provided by a plugin instance (as long as you can anticipate the existence of those interfaces at compile time).\r\n3. `PluginPtr` objects can be \"cast\" to `SpecializedPluginPtr` objects (thanks to the `std::shared_ptr`-esque behavior) and different types of `SpecializedPluginPtr`s can be \"cast\" between each other.\r\n\r\nThis pull request also eliminates backwards compatibility with the earlier version of the plugin framework because the backwards compatibility was seen as unnecessarily burdensome since this version has not been released yet. After this has been released, we will be able to implement reasonable backwards compatibility measures for any future changes to the API or ABI.", "markup": "markdown", "html": "<p>The previous pull request which expanded the plugin framework has been closed and replaced with this one, because much of the implementation performed in the prior PR has been nearly rewritten here. This PR still serves the same purpose:</p>\n<ol>\n<li>Allow multiple plugins per library</li>\n<li>Allow multiple interfaces per plugin</li>\n<li>Squash some subtle bugs in the implementation of plugins</li>\n</ol>\n<p>Additionally it comes with some new semantics for plugin usage and management:</p>\n<ol>\n<li>Instances of plugins are managed by a <code>PluginPtr</code> which is able to behave like a <code>std::shared_ptr</code> if desired.</li>\n<li>You can define <code>SpecializedPluginPtr</code> objects which provide extremely low-cost access to the interfaces that are provided by a plugin instance (as long as you can anticipate the existence of those interfaces at compile time).</li>\n<li><code>PluginPtr</code> objects can be \"cast\" to <code>SpecializedPluginPtr</code> objects (thanks to the <code>std::shared_ptr</code>-esque behavior) and different types of <code>SpecializedPluginPtr</code>s can be \"cast\" between each other.</li>\n</ol>\n<p>This pull request also eliminates backwards compatibility with the earlier version of the plugin framework because the backwards compatibility was seen as unnecessarily burdensome since this version has not been released yet. After this has been released, we will be able to implement reasonable backwards compatibility measures for any future changes to the API or ABI.</p>", "type": "rendered"}, "source": {"commit": {"hash": "b77080a81097", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/b77080a81097.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/b77080a81097"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtr"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-08-04T17:29:33.306450+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "Replaced by a newer PR", "updated_on": "2017-08-07T17:31:44.509831+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": null, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}