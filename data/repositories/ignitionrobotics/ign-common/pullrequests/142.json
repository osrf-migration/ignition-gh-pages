{"rendered": {"description": {"raw": "This is targeting a branch that is still a work in progress (WIP); I'm just making this to show @mxgrey some problems I'm seeing with that branch.\r\n\r\nOn bionic and osx, the `INTEGRATION_plugin` test fails for me, as no plugins are able to be loaded. To reduce console spam when that happens, this pull request adds some extra checks that will cause the test to fail early if plugins aren't loaded properly:\r\n\r\n~~~\r\n[ RUN      ] PluginLoader.LoadExistingLibrary\r\n[Err] [PluginLoader.cc:454] Library [lib/libIGNDummyPlugins.so] does not export any plugins. The symbol [IGNCOMMONInputOrOutputPluginInfo] is missing, or it is not externally visible.\r\ntest/integration/plugin.cc:87: Failure\r\nExpected: (pluginNames.size()) > (0u), actual: 0 vs 0\r\n[  FAILED  ] PluginLoader.LoadExistingLibrary (0 ms)\r\n~~~\r\n\r\nI've tracked it down to the use of the `inline` keyword for the `IGNCOMMONInputOrOutputPluginInfo` symbol in `detail/RegisterPlugin.hh`.\r\n\r\nIf I add the following patch on top of this pull request, the test makes it a little farther:\r\n\r\n~~~\r\ndiff -r 744a4ede9948 include/ignition/common/detail/RegisterPlugin.hh\r\n--- a/include/ignition/common/detail/RegisterPlugin.hh\tMon Jun 11 14:15:41 2018 -0700\r\n+++ b/include/ignition/common/detail/RegisterPlugin.hh\tTue Jun 19 00:45:22 2018 +0000\r\n@@ -56,7 +56,7 @@\r\n   ///\r\n   /// The symbol is explicitly exported (visibility is turned on) using\r\n   /// DETAIL_IGN_PLUGIN_VISIBLE to ensure that dlsym(~) is able to find it.\r\n-  DETAIL_IGN_PLUGIN_VISIBLE inline void IGNCOMMONInputOrOutputPluginInfo(\r\n+  DETAIL_IGN_PLUGIN_VISIBLE void IGNCOMMONInputOrOutputPluginInfo(\r\n       const void *_inputSingleInfo,\r\n       const void ** const _outputAllInfo,\r\n       int *_inputAndOutputAPIVersion,\r\ndiff -r 744a4ede9948 test/plugins/CMakeLists.txt\r\n--- a/test/plugins/CMakeLists.txt\tMon Jun 11 14:15:41 2018 -0700\r\n+++ b/test/plugins/CMakeLists.txt\tTue Jun 19 00:45:22 2018 +0000\r\n@@ -4,8 +4,7 @@\r\n add_library(IGNBadPluginSize          SHARED BadPluginSize.cc)\r\n add_library(IGNTemplatedPlugins       SHARED TemplatedPlugins.cc)\r\n add_library(IGNDummyPlugins SHARED\r\n-  DummyPlugins.cc\r\n-  DummyPluginsOtherTranslationUnit.cc)\r\n+  DummyPlugins.cc)\r\n \r\n foreach(plugin_target\r\n     IGNBadPluginAlign\r\n~~~\r\n\r\nconsole output on bionic:\r\n\r\n~~~\r\n[ RUN      ] PluginLoader.LoadExistingLibrary\r\nPluginLoader State\r\n\tKnown Interfaces: 2\r\n\t\ttest::util::DummyNameBase\r\n\t\ttest::util::DummyGetSomeObjectBase\r\n\tKnown Plugins: 2\r\n\t\t[test::util::DummyMultiPlugin] which implements 2 interfaces:\r\n\t\t\ttest::util::DummyGetSomeObjectBase\r\n\t\t\ttest::util::DummyNameBase\r\n\t\t[test::util::DummySinglePlugin] which implements 1 interface:\r\n\t\t\ttest::util::DummyNameBase\r\n\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:94: Failure\r\nValue of: pl.InterfacesImplemented().size()\r\n  Actual: 2\r\nExpected: 5u\r\nWhich is: 5\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:102: Failure\r\nValue of: pl.PluginsImplementing<::test::util::DummyDoubleBase>().size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:103: Failure\r\nValue of: pl.PluginsImplementing(\"test::util::DummyDoubleBase\").size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:105: Failure\r\nValue of: pl.PluginsImplementing( typeid(test::util::DummyDoubleBase).name(), false).size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:131: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummyDoubleBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:132: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummyDoubleBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:134: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummyIntBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:135: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummyIntBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:137: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummySetterBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:138: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummySetterBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:155: Failure\r\nExpected: (nullptr) != (doubleBase), actual: 8-byte object <00-00 00-00 00-00 00-00> vs NULL\r\n[  FAILED  ] PluginLoader.LoadExistingLibrary (1 ms)\r\n~~~", "markup": "markdown", "html": "<p>This is targeting a branch that is still a work in progress (WIP); I'm just making this to show @mxgrey some problems I'm seeing with that branch.</p>\n<p>On bionic and osx, the <code>INTEGRATION_plugin</code> test fails for me, as no plugins are able to be loaded. To reduce console spam when that happens, this pull request adds some extra checks that will cause the test to fail early if plugins aren't loaded properly:</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] PluginLoader.LoadExistingLibrary\n[Err] [PluginLoader.cc:454] Library [lib/libIGNDummyPlugins.so] does not export any plugins. The symbol [IGNCOMMONInputOrOutputPluginInfo] is missing, or it is not externally visible.\ntest/integration/plugin.cc:87: Failure\nExpected: (pluginNames.size()) &gt; (0u), actual: 0 vs 0\n[  FAILED  ] PluginLoader.LoadExistingLibrary (0 ms)\n</pre></div>\n\n\n<p>I've tracked it down to the use of the <code>inline</code> keyword for the <code>IGNCOMMONInputOrOutputPluginInfo</code> symbol in <code>detail/RegisterPlugin.hh</code>.</p>\n<p>If I add the following patch on top of this pull request, the test makes it a little farther:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 744a4ede9948 include/ignition/common/detail/RegisterPlugin.hh</span>\n<span class=\"gd\">--- a/include/ignition/common/detail/RegisterPlugin.hh  Mon Jun 11 14:15:41 2018 -0700</span>\n<span class=\"gi\">+++ b/include/ignition/common/detail/RegisterPlugin.hh  Tue Jun 19 00:45:22 2018 +0000</span>\n<span class=\"gu\">@@ -56,7 +56,7 @@</span>\n   ///\n   /// The symbol is explicitly exported (visibility is turned on) using\n   /// DETAIL_IGN_PLUGIN_VISIBLE to ensure that dlsym(~) is able to find it.\n<span class=\"gd\">-  DETAIL_IGN_PLUGIN_VISIBLE inline void IGNCOMMONInputOrOutputPluginInfo(</span>\n<span class=\"gi\">+  DETAIL_IGN_PLUGIN_VISIBLE void IGNCOMMONInputOrOutputPluginInfo(</span>\n       const void *_inputSingleInfo,\n       const void ** const _outputAllInfo,\n       int *_inputAndOutputAPIVersion,\n<span class=\"gh\">diff -r 744a4ede9948 test/plugins/CMakeLists.txt</span>\n<span class=\"gd\">--- a/test/plugins/CMakeLists.txt   Mon Jun 11 14:15:41 2018 -0700</span>\n<span class=\"gi\">+++ b/test/plugins/CMakeLists.txt   Tue Jun 19 00:45:22 2018 +0000</span>\n<span class=\"gu\">@@ -4,8 +4,7 @@</span>\n add_library(IGNBadPluginSize          SHARED BadPluginSize.cc)\n add_library(IGNTemplatedPlugins       SHARED TemplatedPlugins.cc)\n add_library(IGNDummyPlugins SHARED\n<span class=\"gd\">-  DummyPlugins.cc</span>\n<span class=\"gd\">-  DummyPluginsOtherTranslationUnit.cc)</span>\n<span class=\"gi\">+  DummyPlugins.cc)</span>\n\n foreach(plugin_target\n     IGNBadPluginAlign\n</pre></div>\n\n\n<p>console output on bionic:</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] PluginLoader.LoadExistingLibrary\nPluginLoader State\n    Known Interfaces: 2\n        test::util::DummyNameBase\n        test::util::DummyGetSomeObjectBase\n    Known Plugins: 2\n        [test::util::DummyMultiPlugin] which implements 2 interfaces:\n            test::util::DummyGetSomeObjectBase\n            test::util::DummyNameBase\n        [test::util::DummySinglePlugin] which implements 1 interface:\n            test::util::DummyNameBase\n\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:94: Failure\nValue of: pl.InterfacesImplemented().size()\n  Actual: 2\nExpected: 5u\nWhich is: 5\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:102: Failure\nValue of: pl.PluginsImplementing&lt;::test::util::DummyDoubleBase&gt;().size()\n  Actual: 0\nExpected: 1u\nWhich is: 1\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:103: Failure\nValue of: pl.PluginsImplementing(&quot;test::util::DummyDoubleBase&quot;).size()\n  Actual: 0\nExpected: 1u\nWhich is: 1\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:105: Failure\nValue of: pl.PluginsImplementing( typeid(test::util::DummyDoubleBase).name(), false).size()\n  Actual: 0\nExpected: 1u\nWhich is: 1\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:131: Failure\nValue of: secondPlugin-&gt;HasInterface&lt;test::util::DummyDoubleBase&gt;()\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:132: Failure\nValue of: secondPlugin-&gt;HasInterface(&quot;test::util::DummyDoubleBase&quot;)\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:134: Failure\nValue of: secondPlugin-&gt;HasInterface&lt;test::util::DummyIntBase&gt;()\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:135: Failure\nValue of: secondPlugin-&gt;HasInterface(&quot;test::util::DummyIntBase&quot;)\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:137: Failure\nValue of: secondPlugin-&gt;HasInterface&lt;test::util::DummySetterBase&gt;()\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:138: Failure\nValue of: secondPlugin-&gt;HasInterface(&quot;test::util::DummySetterBase&quot;)\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:155: Failure\nExpected: (nullptr) != (doubleBase), actual: 8-byte object &lt;00-00 00-00 00-00 00-00&gt; vs NULL\n[  FAILED  ] PluginLoader.LoadExistingLibrary (1 ms)\n</pre></div>", "type": "rendered"}, "title": {"raw": "WIP BetterPluginRegistration_DllManagement: add more error-checking", "markup": "markdown", "html": "<p>WIP BetterPluginRegistration_DllManagement: add more error-checking</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is targeting a branch that is still a work in progress (WIP); I'm just making this to show @mxgrey some problems I'm seeing with that branch.\r\n\r\nOn bionic and osx, the `INTEGRATION_plugin` test fails for me, as no plugins are able to be loaded. To reduce console spam when that happens, this pull request adds some extra checks that will cause the test to fail early if plugins aren't loaded properly:\r\n\r\n~~~\r\n[ RUN      ] PluginLoader.LoadExistingLibrary\r\n[Err] [PluginLoader.cc:454] Library [lib/libIGNDummyPlugins.so] does not export any plugins. The symbol [IGNCOMMONInputOrOutputPluginInfo] is missing, or it is not externally visible.\r\ntest/integration/plugin.cc:87: Failure\r\nExpected: (pluginNames.size()) > (0u), actual: 0 vs 0\r\n[  FAILED  ] PluginLoader.LoadExistingLibrary (0 ms)\r\n~~~\r\n\r\nI've tracked it down to the use of the `inline` keyword for the `IGNCOMMONInputOrOutputPluginInfo` symbol in `detail/RegisterPlugin.hh`.\r\n\r\nIf I add the following patch on top of this pull request, the test makes it a little farther:\r\n\r\n~~~\r\ndiff -r 744a4ede9948 include/ignition/common/detail/RegisterPlugin.hh\r\n--- a/include/ignition/common/detail/RegisterPlugin.hh\tMon Jun 11 14:15:41 2018 -0700\r\n+++ b/include/ignition/common/detail/RegisterPlugin.hh\tTue Jun 19 00:45:22 2018 +0000\r\n@@ -56,7 +56,7 @@\r\n   ///\r\n   /// The symbol is explicitly exported (visibility is turned on) using\r\n   /// DETAIL_IGN_PLUGIN_VISIBLE to ensure that dlsym(~) is able to find it.\r\n-  DETAIL_IGN_PLUGIN_VISIBLE inline void IGNCOMMONInputOrOutputPluginInfo(\r\n+  DETAIL_IGN_PLUGIN_VISIBLE void IGNCOMMONInputOrOutputPluginInfo(\r\n       const void *_inputSingleInfo,\r\n       const void ** const _outputAllInfo,\r\n       int *_inputAndOutputAPIVersion,\r\ndiff -r 744a4ede9948 test/plugins/CMakeLists.txt\r\n--- a/test/plugins/CMakeLists.txt\tMon Jun 11 14:15:41 2018 -0700\r\n+++ b/test/plugins/CMakeLists.txt\tTue Jun 19 00:45:22 2018 +0000\r\n@@ -4,8 +4,7 @@\r\n add_library(IGNBadPluginSize          SHARED BadPluginSize.cc)\r\n add_library(IGNTemplatedPlugins       SHARED TemplatedPlugins.cc)\r\n add_library(IGNDummyPlugins SHARED\r\n-  DummyPlugins.cc\r\n-  DummyPluginsOtherTranslationUnit.cc)\r\n+  DummyPlugins.cc)\r\n \r\n foreach(plugin_target\r\n     IGNBadPluginAlign\r\n~~~\r\n\r\nconsole output on bionic:\r\n\r\n~~~\r\n[ RUN      ] PluginLoader.LoadExistingLibrary\r\nPluginLoader State\r\n\tKnown Interfaces: 2\r\n\t\ttest::util::DummyNameBase\r\n\t\ttest::util::DummyGetSomeObjectBase\r\n\tKnown Plugins: 2\r\n\t\t[test::util::DummyMultiPlugin] which implements 2 interfaces:\r\n\t\t\ttest::util::DummyGetSomeObjectBase\r\n\t\t\ttest::util::DummyNameBase\r\n\t\t[test::util::DummySinglePlugin] which implements 1 interface:\r\n\t\t\ttest::util::DummyNameBase\r\n\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:94: Failure\r\nValue of: pl.InterfacesImplemented().size()\r\n  Actual: 2\r\nExpected: 5u\r\nWhich is: 5\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:102: Failure\r\nValue of: pl.PluginsImplementing<::test::util::DummyDoubleBase>().size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:103: Failure\r\nValue of: pl.PluginsImplementing(\"test::util::DummyDoubleBase\").size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:105: Failure\r\nValue of: pl.PluginsImplementing( typeid(test::util::DummyDoubleBase).name(), false).size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:131: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummyDoubleBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:132: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummyDoubleBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:134: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummyIntBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:135: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummyIntBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:137: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummySetterBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:138: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummySetterBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:155: Failure\r\nExpected: (nullptr) != (doubleBase), actual: 8-byte object <00-00 00-00 00-00 00-00> vs NULL\r\n[  FAILED  ] PluginLoader.LoadExistingLibrary (1 ms)\r\n~~~", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/142/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diffstat/ignitionrobotics/ign-common:3e8f013f2129%0D744a4ede9948?from_pullrequest_id=142"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/142/merge"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:3e8f013f2129%0D744a4ede9948?from_pullrequest_id=142"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/142/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/statuses_page=1.json"}}, "title": "WIP BetterPluginRegistration_DllManagement: add more error-checking", "close_source_branch": false, "reviewers": [{"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}], "id": 142, "destination": {"commit": {"hash": "744a4ede9948", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/744a4ede9948.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/744a4ede9948"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "BetterPluginRegistration_DllManagement"}}, "created_on": "2018-06-19T01:22:33.455602+00:00", "summary": {"raw": "This is targeting a branch that is still a work in progress (WIP); I'm just making this to show @mxgrey some problems I'm seeing with that branch.\r\n\r\nOn bionic and osx, the `INTEGRATION_plugin` test fails for me, as no plugins are able to be loaded. To reduce console spam when that happens, this pull request adds some extra checks that will cause the test to fail early if plugins aren't loaded properly:\r\n\r\n~~~\r\n[ RUN      ] PluginLoader.LoadExistingLibrary\r\n[Err] [PluginLoader.cc:454] Library [lib/libIGNDummyPlugins.so] does not export any plugins. The symbol [IGNCOMMONInputOrOutputPluginInfo] is missing, or it is not externally visible.\r\ntest/integration/plugin.cc:87: Failure\r\nExpected: (pluginNames.size()) > (0u), actual: 0 vs 0\r\n[  FAILED  ] PluginLoader.LoadExistingLibrary (0 ms)\r\n~~~\r\n\r\nI've tracked it down to the use of the `inline` keyword for the `IGNCOMMONInputOrOutputPluginInfo` symbol in `detail/RegisterPlugin.hh`.\r\n\r\nIf I add the following patch on top of this pull request, the test makes it a little farther:\r\n\r\n~~~\r\ndiff -r 744a4ede9948 include/ignition/common/detail/RegisterPlugin.hh\r\n--- a/include/ignition/common/detail/RegisterPlugin.hh\tMon Jun 11 14:15:41 2018 -0700\r\n+++ b/include/ignition/common/detail/RegisterPlugin.hh\tTue Jun 19 00:45:22 2018 +0000\r\n@@ -56,7 +56,7 @@\r\n   ///\r\n   /// The symbol is explicitly exported (visibility is turned on) using\r\n   /// DETAIL_IGN_PLUGIN_VISIBLE to ensure that dlsym(~) is able to find it.\r\n-  DETAIL_IGN_PLUGIN_VISIBLE inline void IGNCOMMONInputOrOutputPluginInfo(\r\n+  DETAIL_IGN_PLUGIN_VISIBLE void IGNCOMMONInputOrOutputPluginInfo(\r\n       const void *_inputSingleInfo,\r\n       const void ** const _outputAllInfo,\r\n       int *_inputAndOutputAPIVersion,\r\ndiff -r 744a4ede9948 test/plugins/CMakeLists.txt\r\n--- a/test/plugins/CMakeLists.txt\tMon Jun 11 14:15:41 2018 -0700\r\n+++ b/test/plugins/CMakeLists.txt\tTue Jun 19 00:45:22 2018 +0000\r\n@@ -4,8 +4,7 @@\r\n add_library(IGNBadPluginSize          SHARED BadPluginSize.cc)\r\n add_library(IGNTemplatedPlugins       SHARED TemplatedPlugins.cc)\r\n add_library(IGNDummyPlugins SHARED\r\n-  DummyPlugins.cc\r\n-  DummyPluginsOtherTranslationUnit.cc)\r\n+  DummyPlugins.cc)\r\n \r\n foreach(plugin_target\r\n     IGNBadPluginAlign\r\n~~~\r\n\r\nconsole output on bionic:\r\n\r\n~~~\r\n[ RUN      ] PluginLoader.LoadExistingLibrary\r\nPluginLoader State\r\n\tKnown Interfaces: 2\r\n\t\ttest::util::DummyNameBase\r\n\t\ttest::util::DummyGetSomeObjectBase\r\n\tKnown Plugins: 2\r\n\t\t[test::util::DummyMultiPlugin] which implements 2 interfaces:\r\n\t\t\ttest::util::DummyGetSomeObjectBase\r\n\t\t\ttest::util::DummyNameBase\r\n\t\t[test::util::DummySinglePlugin] which implements 1 interface:\r\n\t\t\ttest::util::DummyNameBase\r\n\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:94: Failure\r\nValue of: pl.InterfacesImplemented().size()\r\n  Actual: 2\r\nExpected: 5u\r\nWhich is: 5\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:102: Failure\r\nValue of: pl.PluginsImplementing<::test::util::DummyDoubleBase>().size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:103: Failure\r\nValue of: pl.PluginsImplementing(\"test::util::DummyDoubleBase\").size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:105: Failure\r\nValue of: pl.PluginsImplementing( typeid(test::util::DummyDoubleBase).name(), false).size()\r\n  Actual: 0\r\nExpected: 1u\r\nWhich is: 1\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:131: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummyDoubleBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:132: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummyDoubleBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:134: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummyIntBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:135: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummyIntBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:137: Failure\r\nValue of: secondPlugin->HasInterface<test::util::DummySetterBase>()\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:138: Failure\r\nValue of: secondPlugin->HasInterface(\"test::util::DummySetterBase\")\r\n  Actual: false\r\nExpected: true\r\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:155: Failure\r\nExpected: (nullptr) != (doubleBase), actual: 8-byte object <00-00 00-00 00-00 00-00> vs NULL\r\n[  FAILED  ] PluginLoader.LoadExistingLibrary (1 ms)\r\n~~~", "markup": "markdown", "html": "<p>This is targeting a branch that is still a work in progress (WIP); I'm just making this to show @mxgrey some problems I'm seeing with that branch.</p>\n<p>On bionic and osx, the <code>INTEGRATION_plugin</code> test fails for me, as no plugins are able to be loaded. To reduce console spam when that happens, this pull request adds some extra checks that will cause the test to fail early if plugins aren't loaded properly:</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] PluginLoader.LoadExistingLibrary\n[Err] [PluginLoader.cc:454] Library [lib/libIGNDummyPlugins.so] does not export any plugins. The symbol [IGNCOMMONInputOrOutputPluginInfo] is missing, or it is not externally visible.\ntest/integration/plugin.cc:87: Failure\nExpected: (pluginNames.size()) &gt; (0u), actual: 0 vs 0\n[  FAILED  ] PluginLoader.LoadExistingLibrary (0 ms)\n</pre></div>\n\n\n<p>I've tracked it down to the use of the <code>inline</code> keyword for the <code>IGNCOMMONInputOrOutputPluginInfo</code> symbol in <code>detail/RegisterPlugin.hh</code>.</p>\n<p>If I add the following patch on top of this pull request, the test makes it a little farther:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 744a4ede9948 include/ignition/common/detail/RegisterPlugin.hh</span>\n<span class=\"gd\">--- a/include/ignition/common/detail/RegisterPlugin.hh  Mon Jun 11 14:15:41 2018 -0700</span>\n<span class=\"gi\">+++ b/include/ignition/common/detail/RegisterPlugin.hh  Tue Jun 19 00:45:22 2018 +0000</span>\n<span class=\"gu\">@@ -56,7 +56,7 @@</span>\n   ///\n   /// The symbol is explicitly exported (visibility is turned on) using\n   /// DETAIL_IGN_PLUGIN_VISIBLE to ensure that dlsym(~) is able to find it.\n<span class=\"gd\">-  DETAIL_IGN_PLUGIN_VISIBLE inline void IGNCOMMONInputOrOutputPluginInfo(</span>\n<span class=\"gi\">+  DETAIL_IGN_PLUGIN_VISIBLE void IGNCOMMONInputOrOutputPluginInfo(</span>\n       const void *_inputSingleInfo,\n       const void ** const _outputAllInfo,\n       int *_inputAndOutputAPIVersion,\n<span class=\"gh\">diff -r 744a4ede9948 test/plugins/CMakeLists.txt</span>\n<span class=\"gd\">--- a/test/plugins/CMakeLists.txt   Mon Jun 11 14:15:41 2018 -0700</span>\n<span class=\"gi\">+++ b/test/plugins/CMakeLists.txt   Tue Jun 19 00:45:22 2018 +0000</span>\n<span class=\"gu\">@@ -4,8 +4,7 @@</span>\n add_library(IGNBadPluginSize          SHARED BadPluginSize.cc)\n add_library(IGNTemplatedPlugins       SHARED TemplatedPlugins.cc)\n add_library(IGNDummyPlugins SHARED\n<span class=\"gd\">-  DummyPlugins.cc</span>\n<span class=\"gd\">-  DummyPluginsOtherTranslationUnit.cc)</span>\n<span class=\"gi\">+  DummyPlugins.cc)</span>\n\n foreach(plugin_target\n     IGNBadPluginAlign\n</pre></div>\n\n\n<p>console output on bionic:</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] PluginLoader.LoadExistingLibrary\nPluginLoader State\n    Known Interfaces: 2\n        test::util::DummyNameBase\n        test::util::DummyGetSomeObjectBase\n    Known Plugins: 2\n        [test::util::DummyMultiPlugin] which implements 2 interfaces:\n            test::util::DummyGetSomeObjectBase\n            test::util::DummyNameBase\n        [test::util::DummySinglePlugin] which implements 1 interface:\n            test::util::DummyNameBase\n\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:94: Failure\nValue of: pl.InterfacesImplemented().size()\n  Actual: 2\nExpected: 5u\nWhich is: 5\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:102: Failure\nValue of: pl.PluginsImplementing&lt;::test::util::DummyDoubleBase&gt;().size()\n  Actual: 0\nExpected: 1u\nWhich is: 1\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:103: Failure\nValue of: pl.PluginsImplementing(&quot;test::util::DummyDoubleBase&quot;).size()\n  Actual: 0\nExpected: 1u\nWhich is: 1\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:105: Failure\nValue of: pl.PluginsImplementing( typeid(test::util::DummyDoubleBase).name(), false).size()\n  Actual: 0\nExpected: 1u\nWhich is: 1\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:131: Failure\nValue of: secondPlugin-&gt;HasInterface&lt;test::util::DummyDoubleBase&gt;()\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:132: Failure\nValue of: secondPlugin-&gt;HasInterface(&quot;test::util::DummyDoubleBase&quot;)\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:134: Failure\nValue of: secondPlugin-&gt;HasInterface&lt;test::util::DummyIntBase&gt;()\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:135: Failure\nValue of: secondPlugin-&gt;HasInterface(&quot;test::util::DummyIntBase&quot;)\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:137: Failure\nValue of: secondPlugin-&gt;HasInterface&lt;test::util::DummySetterBase&gt;()\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:138: Failure\nValue of: secondPlugin-&gt;HasInterface(&quot;test::util::DummySetterBase&quot;)\n  Actual: false\nExpected: true\n/root/wsi/ignition/src/ign-common/test/integration/plugin.cc:155: Failure\nExpected: (nullptr) != (doubleBase), actual: 8-byte object &lt;00-00 00-00 00-00 00-00&gt; vs NULL\n[  FAILED  ] PluginLoader.LoadExistingLibrary (1 ms)\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "3e8f013f2129", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/3e8f013f2129.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/3e8f013f2129"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "BetterPluginRegistration_DllManagement_scpeters"}}, "comment_count": 4, "state": "DECLINED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-06-19T15:34:49.203547+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2018-06-19T04:25:07.295925+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-30T17:56:53.326515+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2018-06-19T01:37:28.766242+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2018-07-30T18:55:26.139936+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}