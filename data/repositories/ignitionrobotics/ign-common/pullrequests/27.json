{"rendered": {"description": {"raw": "This is the plugin loader from the ecs prototype. It can load any class as a plugin.\r\n\r\n\r\nHere's how to use it to load a plugin\r\n```\r\n#!c++\r\n\r\n// Include this header to manage plugin paths\r\n#include <ignition/common/SystemPaths.hh>\r\n// Include this header to load plugins\r\n#include <ignition/common/PluginLoader.hh>\r\n\r\n// ...\r\n\r\nignition::common::SystemPaths sp;\r\nignition::common::PluginLoader pm;\r\n\r\n// Set environment variable with paths. Default IGN_PLUGIN_PATH\r\nsp->SetPluginPathEnv(\"GAZEBO_PLUGIN_PATH\");\r\n// Get the path to the library\r\nstd::string pathToLib = sp->FindSharedLibrary(\"MySharedLibraryName\");\r\n\r\n// Loads library, returns name of plugin if library exists and has one\r\nstd::string pluginName = pm.LoadLibrary(pathToLib)\r\n\r\n// Want to show user a gui with available plugins? That info is available\r\nstd::cout << pm.PrettyStr();\r\n/* Example output:\r\nPluginLoader State\r\n        Known Interfaces: 1\r\n                ::test::util::DummyPluginBase\r\n        Known Plugins: 1\r\n                ::test::util::DummyPlugin (::test::util::DummyPluginBase)\r\n*/\r\n\r\n// Load a plugin, expecting it to inherit from a base class\r\n// there are no restrictions on what that base class is!\r\nstd::unique_ptr<any_namespace::AnyBaseClass> pluginInst;\r\npluginInst = pm.Instantiate<any_namespace::AnyBaseClass>(\"::my_namespace::MyPlugin\");\r\n```\r\n\r\nHere's how to create a plugin\r\n```\r\n#!c++\r\n\r\n// Need a base class, can be anything\r\nclass AnyBaseClass\r\n{\r\n   // ...\r\n};\r\n\r\n// ...\r\n// In a shared library\r\n// ...\r\n// MyPlugin.hh\r\n\r\n// MUST inherit from the base class\r\nclass MyPlugin : public ::any_namespace::AnyBaseClass\r\n{\r\n  // ...\r\n};\r\n\r\n// ...\r\n// MyPlugin.cpp\r\n// ...\r\n\r\n// Need this header for a macro\r\n#include <ignition/common/PluginMacros.hh>\r\n\r\nIGN_COMMON_REGISTER_SINGLE_PLUGIN(::my_namespace::MyPlugin, ::any_namespace::AnyBaseClass);\r\n\r\n```", "markup": "markdown", "html": "<p>This is the plugin loader from the ecs prototype. It can load any class as a plugin.</p>\n<p>Here's how to use it to load a plugin</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Include this header to manage plugin paths</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/common/SystemPaths.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"c1\">// Include this header to load plugins</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/common/PluginLoader.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">SystemPaths</span> <span class=\"n\">sp</span><span class=\"p\">;</span>\n<span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">PluginLoader</span> <span class=\"n\">pm</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set environment variable with paths. Default IGN_PLUGIN_PATH</span>\n<span class=\"n\">sp</span><span class=\"o\">-&gt;</span><span class=\"n\">SetPluginPathEnv</span><span class=\"p\">(</span><span class=\"s\">&quot;GAZEBO_PLUGIN_PATH&quot;</span><span class=\"p\">);</span>\n<span class=\"c1\">// Get the path to the library</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">pathToLib</span> <span class=\"o\">=</span> <span class=\"n\">sp</span><span class=\"o\">-&gt;</span><span class=\"n\">FindSharedLibrary</span><span class=\"p\">(</span><span class=\"s\">&quot;MySharedLibraryName&quot;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Loads library, returns name of plugin if library exists and has one</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">pluginName</span> <span class=\"o\">=</span> <span class=\"n\">pm</span><span class=\"p\">.</span><span class=\"n\">LoadLibrary</span><span class=\"p\">(</span><span class=\"n\">pathToLib</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Want to show user a gui with available plugins? That info is available</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">pm</span><span class=\"p\">.</span><span class=\"n\">PrettyStr</span><span class=\"p\">();</span>\n<span class=\"cm\">/* Example output:</span>\n<span class=\"cm\">PluginLoader State</span>\n<span class=\"cm\">        Known Interfaces: 1</span>\n<span class=\"cm\">                ::test::util::DummyPluginBase</span>\n<span class=\"cm\">        Known Plugins: 1</span>\n<span class=\"cm\">                ::test::util::DummyPlugin (::test::util::DummyPluginBase)</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"c1\">// Load a plugin, expecting it to inherit from a base class</span>\n<span class=\"c1\">// there are no restrictions on what that base class is!</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span><span class=\"o\">&gt;</span> <span class=\"n\">pluginInst</span><span class=\"p\">;</span>\n<span class=\"n\">pluginInst</span> <span class=\"o\">=</span> <span class=\"n\">pm</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"o\">&lt;</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;::my_namespace::MyPlugin&quot;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Here's how to create a plugin</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Need a base class, can be anything</span>\n<span class=\"k\">class</span> <span class=\"nc\">AnyBaseClass</span>\n<span class=\"p\">{</span>\n   <span class=\"c1\">// ...</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// ...</span>\n<span class=\"c1\">// In a shared library</span>\n<span class=\"c1\">// ...</span>\n<span class=\"c1\">// MyPlugin.hh</span>\n\n<span class=\"c1\">// MUST inherit from the base class</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyPlugin</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"o\">::</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// ...</span>\n<span class=\"c1\">// MyPlugin.cpp</span>\n<span class=\"c1\">// ...</span>\n\n<span class=\"c1\">// Need this header for a macro</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/common/PluginMacros.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">IGN_COMMON_REGISTER_SINGLE_PLUGIN</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">my_namespace</span><span class=\"o\">::</span><span class=\"n\">MyPlugin</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "title": {"raw": "Adds PluginLoader", "markup": "markdown", "html": "<p>Adds PluginLoader</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is the plugin loader from the ecs prototype. It can load any class as a plugin.\r\n\r\n\r\nHere's how to use it to load a plugin\r\n```\r\n#!c++\r\n\r\n// Include this header to manage plugin paths\r\n#include <ignition/common/SystemPaths.hh>\r\n// Include this header to load plugins\r\n#include <ignition/common/PluginLoader.hh>\r\n\r\n// ...\r\n\r\nignition::common::SystemPaths sp;\r\nignition::common::PluginLoader pm;\r\n\r\n// Set environment variable with paths. Default IGN_PLUGIN_PATH\r\nsp->SetPluginPathEnv(\"GAZEBO_PLUGIN_PATH\");\r\n// Get the path to the library\r\nstd::string pathToLib = sp->FindSharedLibrary(\"MySharedLibraryName\");\r\n\r\n// Loads library, returns name of plugin if library exists and has one\r\nstd::string pluginName = pm.LoadLibrary(pathToLib)\r\n\r\n// Want to show user a gui with available plugins? That info is available\r\nstd::cout << pm.PrettyStr();\r\n/* Example output:\r\nPluginLoader State\r\n        Known Interfaces: 1\r\n                ::test::util::DummyPluginBase\r\n        Known Plugins: 1\r\n                ::test::util::DummyPlugin (::test::util::DummyPluginBase)\r\n*/\r\n\r\n// Load a plugin, expecting it to inherit from a base class\r\n// there are no restrictions on what that base class is!\r\nstd::unique_ptr<any_namespace::AnyBaseClass> pluginInst;\r\npluginInst = pm.Instantiate<any_namespace::AnyBaseClass>(\"::my_namespace::MyPlugin\");\r\n```\r\n\r\nHere's how to create a plugin\r\n```\r\n#!c++\r\n\r\n// Need a base class, can be anything\r\nclass AnyBaseClass\r\n{\r\n   // ...\r\n};\r\n\r\n// ...\r\n// In a shared library\r\n// ...\r\n// MyPlugin.hh\r\n\r\n// MUST inherit from the base class\r\nclass MyPlugin : public ::any_namespace::AnyBaseClass\r\n{\r\n  // ...\r\n};\r\n\r\n// ...\r\n// MyPlugin.cpp\r\n// ...\r\n\r\n// Need this header for a macro\r\n#include <ignition/common/PluginMacros.hh>\r\n\r\nIGN_COMMON_REGISTER_SINGLE_PLUGIN(::my_namespace::MyPlugin, ::any_namespace::AnyBaseClass);\r\n\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/27/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diffstat/ignitionrobotics/ign-common:7cb2c8fc9a10%0Db3d0e504a4a7?from_pullrequest_id=27"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/27/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/27.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/27/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/27/merge"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/27"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/27/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:7cb2c8fc9a10%0Db3d0e504a4a7?from_pullrequest_id=27"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/27/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/27/statuses_page=1.json"}}, "title": "Adds PluginLoader", "close_source_branch": true, "reviewers": [], "id": 27, "destination": {"commit": {"hash": "b3d0e504a4a7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/b3d0e504a4a7.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/b3d0e504a4a7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "created_on": "2017-03-29T23:36:12.050074+00:00", "summary": {"raw": "This is the plugin loader from the ecs prototype. It can load any class as a plugin.\r\n\r\n\r\nHere's how to use it to load a plugin\r\n```\r\n#!c++\r\n\r\n// Include this header to manage plugin paths\r\n#include <ignition/common/SystemPaths.hh>\r\n// Include this header to load plugins\r\n#include <ignition/common/PluginLoader.hh>\r\n\r\n// ...\r\n\r\nignition::common::SystemPaths sp;\r\nignition::common::PluginLoader pm;\r\n\r\n// Set environment variable with paths. Default IGN_PLUGIN_PATH\r\nsp->SetPluginPathEnv(\"GAZEBO_PLUGIN_PATH\");\r\n// Get the path to the library\r\nstd::string pathToLib = sp->FindSharedLibrary(\"MySharedLibraryName\");\r\n\r\n// Loads library, returns name of plugin if library exists and has one\r\nstd::string pluginName = pm.LoadLibrary(pathToLib)\r\n\r\n// Want to show user a gui with available plugins? That info is available\r\nstd::cout << pm.PrettyStr();\r\n/* Example output:\r\nPluginLoader State\r\n        Known Interfaces: 1\r\n                ::test::util::DummyPluginBase\r\n        Known Plugins: 1\r\n                ::test::util::DummyPlugin (::test::util::DummyPluginBase)\r\n*/\r\n\r\n// Load a plugin, expecting it to inherit from a base class\r\n// there are no restrictions on what that base class is!\r\nstd::unique_ptr<any_namespace::AnyBaseClass> pluginInst;\r\npluginInst = pm.Instantiate<any_namespace::AnyBaseClass>(\"::my_namespace::MyPlugin\");\r\n```\r\n\r\nHere's how to create a plugin\r\n```\r\n#!c++\r\n\r\n// Need a base class, can be anything\r\nclass AnyBaseClass\r\n{\r\n   // ...\r\n};\r\n\r\n// ...\r\n// In a shared library\r\n// ...\r\n// MyPlugin.hh\r\n\r\n// MUST inherit from the base class\r\nclass MyPlugin : public ::any_namespace::AnyBaseClass\r\n{\r\n  // ...\r\n};\r\n\r\n// ...\r\n// MyPlugin.cpp\r\n// ...\r\n\r\n// Need this header for a macro\r\n#include <ignition/common/PluginMacros.hh>\r\n\r\nIGN_COMMON_REGISTER_SINGLE_PLUGIN(::my_namespace::MyPlugin, ::any_namespace::AnyBaseClass);\r\n\r\n```", "markup": "markdown", "html": "<p>This is the plugin loader from the ecs prototype. It can load any class as a plugin.</p>\n<p>Here's how to use it to load a plugin</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Include this header to manage plugin paths</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/common/SystemPaths.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"c1\">// Include this header to load plugins</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/common/PluginLoader.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">SystemPaths</span> <span class=\"n\">sp</span><span class=\"p\">;</span>\n<span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">PluginLoader</span> <span class=\"n\">pm</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set environment variable with paths. Default IGN_PLUGIN_PATH</span>\n<span class=\"n\">sp</span><span class=\"o\">-&gt;</span><span class=\"n\">SetPluginPathEnv</span><span class=\"p\">(</span><span class=\"s\">&quot;GAZEBO_PLUGIN_PATH&quot;</span><span class=\"p\">);</span>\n<span class=\"c1\">// Get the path to the library</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">pathToLib</span> <span class=\"o\">=</span> <span class=\"n\">sp</span><span class=\"o\">-&gt;</span><span class=\"n\">FindSharedLibrary</span><span class=\"p\">(</span><span class=\"s\">&quot;MySharedLibraryName&quot;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Loads library, returns name of plugin if library exists and has one</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">pluginName</span> <span class=\"o\">=</span> <span class=\"n\">pm</span><span class=\"p\">.</span><span class=\"n\">LoadLibrary</span><span class=\"p\">(</span><span class=\"n\">pathToLib</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Want to show user a gui with available plugins? That info is available</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">pm</span><span class=\"p\">.</span><span class=\"n\">PrettyStr</span><span class=\"p\">();</span>\n<span class=\"cm\">/* Example output:</span>\n<span class=\"cm\">PluginLoader State</span>\n<span class=\"cm\">        Known Interfaces: 1</span>\n<span class=\"cm\">                ::test::util::DummyPluginBase</span>\n<span class=\"cm\">        Known Plugins: 1</span>\n<span class=\"cm\">                ::test::util::DummyPlugin (::test::util::DummyPluginBase)</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"c1\">// Load a plugin, expecting it to inherit from a base class</span>\n<span class=\"c1\">// there are no restrictions on what that base class is!</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span><span class=\"o\">&gt;</span> <span class=\"n\">pluginInst</span><span class=\"p\">;</span>\n<span class=\"n\">pluginInst</span> <span class=\"o\">=</span> <span class=\"n\">pm</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"o\">&lt;</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;::my_namespace::MyPlugin&quot;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Here's how to create a plugin</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Need a base class, can be anything</span>\n<span class=\"k\">class</span> <span class=\"nc\">AnyBaseClass</span>\n<span class=\"p\">{</span>\n   <span class=\"c1\">// ...</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// ...</span>\n<span class=\"c1\">// In a shared library</span>\n<span class=\"c1\">// ...</span>\n<span class=\"c1\">// MyPlugin.hh</span>\n\n<span class=\"c1\">// MUST inherit from the base class</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyPlugin</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"o\">::</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// ...</span>\n<span class=\"c1\">// MyPlugin.cpp</span>\n<span class=\"c1\">// ...</span>\n\n<span class=\"c1\">// Need this header for a macro</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/common/PluginMacros.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">IGN_COMMON_REGISTER_SINGLE_PLUGIN</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">my_namespace</span><span class=\"o\">::</span><span class=\"n\">MyPlugin</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">any_namespace</span><span class=\"o\">::</span><span class=\"n\">AnyBaseClass</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "7d71e3df4bed", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/7d71e3df4bed.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/7d71e3df4bed"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "plugin_loader"}}, "comment_count": 74, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-04-05T17:35:46.494208+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-24T19:50:05.276438+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-19T00:12:59.622960+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-21T00:24:14.771099+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-04-09T16:40:19.295229+00:00", "type": "participant", "approved": false, "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}}], "reason": "", "updated_on": "2017-04-24T19:50:05.305525+00:00", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "merge_commit": {"hash": "7cb2c8fc9a10", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/7cb2c8fc9a10.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/7cb2c8fc9a10"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}