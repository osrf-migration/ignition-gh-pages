{"rendered": {"description": {"raw": "The `SystemPaths` class supports a few ways of specifying different paths, such as adding them through `SystemPaths::AddFilePaths` or by specifying an environment variable with `SetFilePathEnv`. Those paths are then considered when using `SystemPaths::FindFile` to locate a file. But they were not being used with the `SystemPaths::FindFileURI` call.\r\n\r\nThis PR uses the custom paths when finding a URI, by treating them as relative paths and ignoring the URI's scheme. For example, if the user sets `IGN_FILE_PATH=/tmp/files`, then tries to get a URI `custom://mesh.dae`, the user is able to load file `/tmp/files/mesh.dae`.\r\n\r\nI'm not entirely convinced yet that ignoring the scheme like that is a good idea, but I can't think of how it could cause an issue. The worst thing that can happen is that the user finds an existing file that they didn't mean to find?", "markup": "markdown", "html": "<p>The <code>SystemPaths</code> class supports a few ways of specifying different paths, such as adding them through <code>SystemPaths::AddFilePaths</code> or by specifying an environment variable with <code>SetFilePathEnv</code>. Those paths are then considered when using <code>SystemPaths::FindFile</code> to locate a file. But they were not being used with the <code>SystemPaths::FindFileURI</code> call.</p>\n<p>This PR uses the custom paths when finding a URI, by treating them as relative paths and ignoring the URI's scheme. For example, if the user sets <code>IGN_FILE_PATH=/tmp/files</code>, then tries to get a URI <code>custom://mesh.dae</code>, the user is able to load file <code>/tmp/files/mesh.dae</code>.</p>\n<p>I'm not entirely convinced yet that ignoring the scheme like that is a good idea, but I can't think of how it could cause an issue. The worst thing that can happen is that the user finds an existing file that they didn't mean to find?</p>", "type": "rendered"}, "title": {"raw": "[Proposal] Custom paths for file URIs", "markup": "markdown", "html": "<p>[Proposal] Custom paths for file URIs</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The `SystemPaths` class supports a few ways of specifying different paths, such as adding them through `SystemPaths::AddFilePaths` or by specifying an environment variable with `SetFilePathEnv`. Those paths are then considered when using `SystemPaths::FindFile` to locate a file. But they were not being used with the `SystemPaths::FindFileURI` call.\r\n\r\nThis PR uses the custom paths when finding a URI, by treating them as relative paths and ignoring the URI's scheme. For example, if the user sets `IGN_FILE_PATH=/tmp/files`, then tries to get a URI `custom://mesh.dae`, the user is able to load file `/tmp/files/mesh.dae`.\r\n\r\nI'm not entirely convinced yet that ignoring the scheme like that is a good idea, but I can't think of how it could cause an issue. The worst thing that can happen is that the user finds an existing file that they didn't mean to find?", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/210/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diffstat/ignitionrobotics/ign-common:801d00a647e9%0Dc46657e141ca?from_pullrequest_id=210"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/210/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/210.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/210/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/210/merge"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/210"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/210/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:801d00a647e9%0Dc46657e141ca?from_pullrequest_id=210"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/pullrequests/210/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/210/statuses_page=1.json"}}, "title": "[Proposal] Custom paths for file URIs", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}], "id": 210, "destination": {"commit": {"hash": "c46657e141ca", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/c46657e141ca.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/c46657e141ca"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "ign-common3"}}, "created_on": "2019-12-02T21:25:32.272033+00:00", "summary": {"raw": "The `SystemPaths` class supports a few ways of specifying different paths, such as adding them through `SystemPaths::AddFilePaths` or by specifying an environment variable with `SetFilePathEnv`. Those paths are then considered when using `SystemPaths::FindFile` to locate a file. But they were not being used with the `SystemPaths::FindFileURI` call.\r\n\r\nThis PR uses the custom paths when finding a URI, by treating them as relative paths and ignoring the URI's scheme. For example, if the user sets `IGN_FILE_PATH=/tmp/files`, then tries to get a URI `custom://mesh.dae`, the user is able to load file `/tmp/files/mesh.dae`.\r\n\r\nI'm not entirely convinced yet that ignoring the scheme like that is a good idea, but I can't think of how it could cause an issue. The worst thing that can happen is that the user finds an existing file that they didn't mean to find?", "markup": "markdown", "html": "<p>The <code>SystemPaths</code> class supports a few ways of specifying different paths, such as adding them through <code>SystemPaths::AddFilePaths</code> or by specifying an environment variable with <code>SetFilePathEnv</code>. Those paths are then considered when using <code>SystemPaths::FindFile</code> to locate a file. But they were not being used with the <code>SystemPaths::FindFileURI</code> call.</p>\n<p>This PR uses the custom paths when finding a URI, by treating them as relative paths and ignoring the URI's scheme. For example, if the user sets <code>IGN_FILE_PATH=/tmp/files</code>, then tries to get a URI <code>custom://mesh.dae</code>, the user is able to load file <code>/tmp/files/mesh.dae</code>.</p>\n<p>I'm not entirely convinced yet that ignoring the scheme like that is a good idea, but I can't think of how it could cause an issue. The worst thing that can happen is that the user finds an existing file that they didn't mean to find?</p>", "type": "rendered"}, "source": {"commit": {"hash": "7be0d20f6d69", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/7be0d20f6d69.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/7be0d20f6d69"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "custom_paths_uri"}}, "comment_count": 9, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2020-02-19T16:48:48.181849+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2020-02-20T01:39:57.402294+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2020-02-19T18:12:01.682075+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2020-02-20T02:14:35.371035+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "801d00a647e9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/801d00a647e9.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/801d00a647e9"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}