{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments/67475208.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142/_/diff#comment-67475208"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 142, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142"}}, "title": "WIP BetterPluginRegistration_DllManagement: add more error-checking"}, "content": {"raw": "Yeah, it's a known issue with GCC. One solution I've found is to use a compiler flag `-fkeep-inline-functions`.\n\nThe inline keyword is necessary to avoid an ODR violation if multiple translation units want to register a plugin. But GCC irritatingly \\(and inconsistently\\) chooses to not compile inline functions if they aren\u2019t used in the library that defines them, so their symbols can't be accessed by other libraries. `-fkeep-inline-functions` gives us the best of both worlds, except we depend on the user to provide it to their library.\n\nWe can make `-fkeep-inline-functions` an interface compile option, but with the current design of ign-common, that flag would get imposed on every library that wants to use a plugin, whether they're loading or registering plugins. With the `ign-plugin` project, I\u2019m refining this so that only libraries who want to register a plugin will get that flag.\n\nI\u2019m also experimenting with alternative approaches to allow plugin registration across multiple translation units. It\u2019s frustrating that we find ourselves needing to accommodate GCC-specific behavior, but oh well.\n\nIn short, I don't recommend that we actually merge the `BetterPluginRegistration_DllManagement` branch. I'll be trying to get `ign-plugin` operational as soon as I can, and I\u2019ll make sure to have a good clean solution in there.", "markup": "markdown", "html": "<p>Yeah, it's a known issue with GCC. One solution I've found is to use a compiler flag <code>-fkeep-inline-functions</code>.</p>\n<p>The inline keyword is necessary to avoid an ODR violation if multiple translation units want to register a plugin. But GCC irritatingly (and inconsistently) chooses to not compile inline functions if they aren\u2019t used in the library that defines them, so their symbols can't be accessed by other libraries. <code>-fkeep-inline-functions</code> gives us the best of both worlds, except we depend on the user to provide it to their library.</p>\n<p>We can make <code>-fkeep-inline-functions</code> an interface compile option, but with the current design of ign-common, that flag would get imposed on every library that wants to use a plugin, whether they're loading or registering plugins. With the <code>ign-plugin</code> project, I\u2019m refining this so that only libraries who want to register a plugin will get that flag.</p>\n<p>I\u2019m also experimenting with alternative approaches to allow plugin registration across multiple translation units. It\u2019s frustrating that we find ourselves needing to accommodate GCC-specific behavior, but oh well.</p>\n<p>In short, I don't recommend that we actually merge the <code>BetterPluginRegistration_DllManagement</code> branch. I'll be trying to get <code>ign-plugin</code> operational as soon as I can, and I\u2019ll make sure to have a good clean solution in there.</p>", "type": "rendered"}, "created_on": "2018-06-19T01:35:36.662526+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-06-19T01:37:28.766242+00:00", "type": "pullrequest_comment", "id": 67475208}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments/67481929.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142/_/diff#comment-67481929"}}, "parent": {"id": 67475208, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments/67475208.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142/_/diff#comment-67475208"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 142, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142"}}, "title": "WIP BetterPluginRegistration_DllManagement: add more error-checking"}, "content": {"raw": "in addition to gcc on bionic, I've also noticed as an issue with clang on macOS\n\na clean solution in `ign-plugin` sounds good", "markup": "markdown", "html": "<p>in addition to gcc on bionic, I've also noticed as an issue with clang on macOS</p>\n<p>a clean solution in <code>ign-plugin</code> sounds good</p>", "type": "rendered"}, "created_on": "2018-06-19T04:25:07.287754+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-06-19T04:25:07.295925+00:00", "type": "pullrequest_comment", "id": 67481929}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments/71440999.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142/_/diff#comment-71440999"}}, "parent": {"id": 67481929, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments/67481929.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142/_/diff#comment-67481929"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 142, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142"}}, "title": "WIP BetterPluginRegistration_DllManagement: add more error-checking"}, "content": {"raw": "Can this PR be declined now that we have ign-plugin?", "markup": "markdown", "html": "<p>Can this PR be declined now that we have ign-plugin?</p>", "type": "rendered"}, "created_on": "2018-07-30T17:56:53.316119+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-07-30T17:56:53.326515+00:00", "type": "pullrequest_comment", "id": 71440999}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments/67566322.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142/_/diff#comment-67566322"}}, "parent": {"id": 67475208, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142/comments/67475208.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142/_/diff#comment-67475208"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 142, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/142.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/142"}}, "title": "WIP BetterPluginRegistration_DllManagement: add more error-checking"}, "content": {"raw": "is `extern inline` legal c\\+\\+?\n\nSeems like a possible loophole [There can be more than one definition in a program, as long as each  definition appears in a different translation unit, of each of the  following: \u2026 inline function with external  linkage](https://en.cppreference.com/w/cpp/language/definition)", "markup": "markdown", "html": "<p>is <code>extern inline</code> legal c++?</p>\n<p>Seems like a possible loophole <a data-is-external-link=\"true\" href=\"https://en.cppreference.com/w/cpp/language/definition\" rel=\"nofollow\">There can be more than one definition in a program, as long as each  definition appears in a different translation unit, of each of the  following: \u2026 inline function with external  linkage</a></p>", "type": "rendered"}, "created_on": "2018-06-19T15:29:49.837998+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-06-19T15:34:49.203547+00:00", "type": "pullrequest_comment", "id": 67566322}], "page": 1, "size": 4}