{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996912.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:67dc7b12b50f..76d416addd2f?path=src%2FPlugin.cc"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996912"}}, "parent": {"id": 48996060, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996060.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996060"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "The best solution I can offer would be making your plugin a factory which produces the widget instead of making the widget itself a plugin. We used to allow plugins to be provided in a generic `std::unique_ptr` which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using `std::shared_ptr` ensures that the plugins always get deleted correctly. By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.\n\nThere is one catch with this factory approach, though: Pull Request #61 is designed to automatically unload plugin libraries which are no longer being referenced. The widget that gets produced by the factory will not be doing any reference-counting for the plugin library, so there's a risk of unloading the library (which those widgets depend on) while the widgets are still active. This can be avoided by keeping alive the `PluginLoader` that created the widget factory and by never calling `ForgetLibrary` on it. Hopefully that requirement is not too onerous.", "markup": "markdown", "html": "<p>The best solution I can offer would be making your plugin a factory which produces the widget instead of making the widget itself a plugin. We used to allow plugins to be provided in a generic <code>std::unique_ptr</code> which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using <code>std::shared_ptr</code> ensures that the plugins always get deleted correctly. By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.</p>\n<p>There is one catch with this factory approach, though: <a href=\"#!/ignitionrobotics/ign-common/pull-requests/61/automatically-unloading-libraries-when\" rel=\"nofollow\" class=\"ap-connect-link\">Pull Request #61</a> is designed to automatically unload plugin libraries which are no longer being referenced. The widget that gets produced by the factory will not be doing any reference-counting for the plugin library, so there's a risk of unloading the library (which those widgets depend on) while the widgets are still active. This can be avoided by keeping alive the <code>PluginLoader</code> that created the widget factory and by never calling <code>ForgetLibrary</code> on it. Hopefully that requirement is not too onerous.</p>", "type": "rendered"}, "created_on": "2017-11-07T20:09:56.573555+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "src/Plugin.cc"}, "updated_on": "2017-11-07T20:09:56.577399+00:00", "type": "pullrequest_comment", "id": 48996912}