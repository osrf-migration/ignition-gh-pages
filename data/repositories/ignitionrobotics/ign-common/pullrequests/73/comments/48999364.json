{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48999364.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:67dc7b12b50f..76d416addd2f?path=src%2FPlugin.cc"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48999364"}}, "parent": {"id": 48996912, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996912.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996912"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "> We used to allow plugins to be provided in a generic std::unique_ptr which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using std::shared_ptr ensures that the plugins always get deleted correctly.\n\nIs this a bug in `unique_ptr`s? If you give me a `unique_ptr`, the message I get is that you're not holding on to that anymore, and I am fully responsible for it now. Sure, I can delete it incorrectly, but I don't think that would be the plugin loader's fault.\n\n> By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.\n\nI think I was treating the `PluginLoader` as a factory and I didn't expect it to be responsible for the plugin's lifecycle. Can't it serve this purpose as well?", "markup": "markdown", "html": "<blockquote>\n<p>We used to allow plugins to be provided in a generic std::unique_ptr which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using std::shared_ptr ensures that the plugins always get deleted correctly.</p>\n</blockquote>\n<p>Is this a bug in <code>unique_ptr</code>s? If you give me a <code>unique_ptr</code>, the message I get is that you're not holding on to that anymore, and I am fully responsible for it now. Sure, I can delete it incorrectly, but I don't think that would be the plugin loader's fault.</p>\n<blockquote>\n<p>By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.</p>\n</blockquote>\n<p>I think I was treating the <code>PluginLoader</code> as a factory and I didn't expect it to be responsible for the plugin's lifecycle. Can't it serve this purpose as well?</p>", "type": "rendered"}, "created_on": "2017-11-07T20:41:23.759618+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": null, "outdated": true, "path": "src/Plugin.cc"}, "updated_on": "2017-11-07T20:41:23.762208+00:00", "type": "pullrequest_comment", "id": 48999364}