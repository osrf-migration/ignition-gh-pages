{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46736617.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:93e3ada17864..2f74d2f0ebe5?path=include%2Fignition%2Fcommon%2FPlugin.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46736617"}}, "parent": {"id": 46736041, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46736041.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46736041"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "In almost every example of a major library API having a getter without `Get` that I can think of, it's because the function is returning a mutable reference to a member variable (which deteriorates to a const-reference when the object is const-qualified). In such a case, it makes sense for the function to have a noun name because the function is effectively an alias for the member variable itself, and you can operate on the function as if it is an object (noun). An example of this would be a `Vector2d` class which provides `x()` and `y()` which are aliases for the x and y components of the `std::array<double, 2>` member variable.\n\nI think it is much much less common for a function to provide one-directional access to something (an immutable reference) without being qualified by the `Get` keyword. In this case, if a user calls `GetInterface<PhysicsEngine>()` they cannot use that function to change the underlying physics engine pointer that is being used by the plugin, which means the function is effectively providing an immutable reference to its physics engine interface pointer.", "markup": "markdown", "html": "<p>In almost every example of a major library API having a getter without <code>Get</code> that I can think of, it's because the function is returning a mutable reference to a member variable (which deteriorates to a const-reference when the object is const-qualified). In such a case, it makes sense for the function to have a noun name because the function is effectively an alias for the member variable itself, and you can operate on the function as if it is an object (noun). An example of this would be a <code>Vector2d</code> class which provides <code>x()</code> and <code>y()</code> which are aliases for the x and y components of the <code>std::array&lt;double, 2&gt;</code> member variable.</p>\n<p>I think it is much much less common for a function to provide one-directional access to something (an immutable reference) without being qualified by the <code>Get</code> keyword. In this case, if a user calls <code>GetInterface&lt;PhysicsEngine&gt;()</code> they cannot use that function to change the underlying physics engine pointer that is being used by the plugin, which means the function is effectively providing an immutable reference to its physics engine interface pointer.</p>", "type": "rendered"}, "created_on": "2017-10-09T17:41:52.619875+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/common/Plugin.hh"}, "updated_on": "2017-10-09T19:24:16.488979+00:00", "type": "pullrequest_comment", "id": 46736617}