{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48553078.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:67dc7b12b50f..76d416addd2f?path=include%2Fignition%2Fcommon%2FPlugin.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48553078"}}, "parent": {"id": 48530776, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48530776.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48530776"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "This compiles with GCC (which tends to be more flexible with the rules), but it does not compile with Clang (which tends to be much more strict about adherence to the standard).\n\nBut even beyond issues with compilation, I think it's dangerous to be shadowing type names with function names, even if we could find a way to compile it.\n\nFor example, in the `gazebo::Model` class we have a `GetLink` member function. If we were to continue our current trend and remove the `Get` keyword from that function, then its name would end up as `Link`. We could *technically* get the code to compile like that, because the compiler would usually have enough context to distinguish between the type name versus the member function name, but I still consider this problematic, for the following reasons:\n\n - I find that human developers and maintainers have difficulty recognizing the difference between the function names and type names when they are identical, even though the compiler can easily distinguish between them based on context.\n\n- The purpose behind giving expressive names to functions and types is to avoid this kind of ambiguity and make the code easier to read. If a function and a type are ending up with the same name, then I don't think that name is expressive enough. A type name should usually express an object and therefore be a noun, while a function name should usually express an action and therefore be a verb or a [predicate](https://en.wikipedia.org/wiki/Predicate_(grammar)). There will certainly be exceptions to that rule of thumb, but our code style is actively pushing functions to have noun-like names, which I think distorts the concept of a function.\n\n- On a more technical level, sharing a name makes it more difficult for most static analyzers or code model generators to quickly produce a correct model of the code. Anecdotally, Qt Creator (which is my IDE of choice) is mistaking the `Interface` template parameter as being the same symbol as the `Interface` function name. The Clang code model generator just outright rejects the code, which is unsurprising since Clang refuses to compile it. Other static analyzers (like what we use for code coverage) are likely to have similar issues with mistaking the symbols, since they often sacrifice accuracy for speed.\n\n- This also makes basic upkeep like refactoring much much more difficult (e.g. I bet you found it pretty easy to convert `GetInterface` into `Interface` without affecting anything else, but now you would not find it very easy to convert the function name `Interface` into another name without also changing the names of all the template parameters).\n\nOne possible solution in this specific case would be to change the name from `GetInterface` to `QueryInterface`. Admittedly, the name `QueryInterface` is probably a more expressive and more accurate name anyway, since the function does not make any guarantee that it will return the requested interface (if the requested interface is unavailable, it returns a `nullptr`). The word `Query` probably does a better job of expressing that behavior than `Get`. For illustrative purposes, I've made this change in a branch here 82ee8290591f.\n\nBut in a more broad sense, a code style rule which reduces the expressiveness of function names strikes me as harmful, so I would urge us to reconsider its enforcement. I wouldn't necessarily propose reverting any function names to bring back a `Get` which has been removed, but I would hope that we can avoid actively reducing the expressiveness of existing function names.", "markup": "markdown", "html": "<p>This compiles with GCC (which tends to be more flexible with the rules), but it does not compile with Clang (which tends to be much more strict about adherence to the standard).</p>\n<p>But even beyond issues with compilation, I think it's dangerous to be shadowing type names with function names, even if we could find a way to compile it.</p>\n<p>For example, in the <code>gazebo::Model</code> class we have a <code>GetLink</code> member function. If we were to continue our current trend and remove the <code>Get</code> keyword from that function, then its name would end up as <code>Link</code>. We could <em>technically</em> get the code to compile like that, because the compiler would usually have enough context to distinguish between the type name versus the member function name, but I still consider this problematic, for the following reasons:</p>\n<ul>\n<li>\n<p>I find that human developers and maintainers have difficulty recognizing the difference between the function names and type names when they are identical, even though the compiler can easily distinguish between them based on context.</p>\n</li>\n<li>\n<p>The purpose behind giving expressive names to functions and types is to avoid this kind of ambiguity and make the code easier to read. If a function and a type are ending up with the same name, then I don't think that name is expressive enough. A type name should usually express an object and therefore be a noun, while a function name should usually express an action and therefore be a verb or a <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Predicate_(grammar)\" rel=\"nofollow\">predicate</a>. There will certainly be exceptions to that rule of thumb, but our code style is actively pushing functions to have noun-like names, which I think distorts the concept of a function.</p>\n</li>\n<li>\n<p>On a more technical level, sharing a name makes it more difficult for most static analyzers or code model generators to quickly produce a correct model of the code. Anecdotally, Qt Creator (which is my IDE of choice) is mistaking the <code>Interface</code> template parameter as being the same symbol as the <code>Interface</code> function name. The Clang code model generator just outright rejects the code, which is unsurprising since Clang refuses to compile it. Other static analyzers (like what we use for code coverage) are likely to have similar issues with mistaking the symbols, since they often sacrifice accuracy for speed.</p>\n</li>\n<li>\n<p>This also makes basic upkeep like refactoring much much more difficult (e.g. I bet you found it pretty easy to convert <code>GetInterface</code> into <code>Interface</code> without affecting anything else, but now you would not find it very easy to convert the function name <code>Interface</code> into another name without also changing the names of all the template parameters).</p>\n</li>\n</ul>\n<p>One possible solution in this specific case would be to change the name from <code>GetInterface</code> to <code>QueryInterface</code>. Admittedly, the name <code>QueryInterface</code> is probably a more expressive and more accurate name anyway, since the function does not make any guarantee that it will return the requested interface (if the requested interface is unavailable, it returns a <code>nullptr</code>). The word <code>Query</code> probably does a better job of expressing that behavior than <code>Get</code>. For illustrative purposes, I've made this change in a branch here <a href=\"#!/ignitionrobotics/ign-common/commits/82ee8290591f\" rel=\"nofollow\" class=\"ap-connect-link\">82ee8290591f</a>.</p>\n<p>But in a more broad sense, a code style rule which reduces the expressiveness of function names strikes me as harmful, so I would urge us to reconsider its enforcement. I wouldn't necessarily propose reverting any function names to bring back a <code>Get</code> which has been removed, but I would hope that we can avoid actively reducing the expressiveness of existing function names.</p>", "type": "rendered"}, "created_on": "2017-11-01T18:01:38.173268+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/common/Plugin.hh"}, "updated_on": "2017-11-01T19:14:58.436205+00:00", "type": "pullrequest_comment", "id": 48553078}