{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48993538.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:67dc7b12b50f..76d416addd2f?path=src%2FPlugin.cc"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48993538"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I added an expectation which clears `PluginPtr` and tries to access the interface afterwards and that segfaults:\n\n~~~\ndiff -r 67dc7b12b50f test/integration/plugin.cc\n--- a/test/integration/plugin.cc\tMon Oct 30 12:12:02 2017 -0700\n+++ b/test/integration/plugin.cc\tTue Nov 07 11:25:02 2017 -0800\n@@ -121,6 +121,12 @@\n         \"test::util::DummyNameBase\");\n   ASSERT_NE(nullptr, nameBase);\n   EXPECT_EQ(std::string(\"DummyMultiPlugin\"), nameBase->MyNameIs());\n+\n+  // Clear PluginPtr and check that interfaces are still usable\n+  secondPlugin.reset();\n+  EXPECT_EQ(nullptr, secondPlugin);\n+  EXPECT_EQ(0u, secondPlugin.use_count());\n+  EXPECT_EQ(std::string(\"DummyMultiPlugin\"), nameBase->MyNameIs());\n }\n~~~\n\nMaybe this bit of code is messing up the interface pointer? Or am I trying to so something which is not supported?\n\nFor the use-case on ign-gui, we don't care about the `PluginPtr` and just want to keep pointers to the interfaces to use later (after `PluginPtr` goes out of scope), should I be keeping `PluginPtr` instead?", "markup": "markdown", "html": "<p>I added an expectation which clears <code>PluginPtr</code> and tries to access the interface afterwards and that segfaults:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 67dc7b12b50f test/integration/plugin.cc</span>\n<span class=\"gd\">--- a/test/integration/plugin.cc    Mon Oct 30 12:12:02 2017 -0700</span>\n<span class=\"gi\">+++ b/test/integration/plugin.cc    Tue Nov 07 11:25:02 2017 -0800</span>\n<span class=\"gu\">@@ -121,6 +121,12 @@</span>\n         &quot;test::util::DummyNameBase&quot;);\n   ASSERT_NE(nullptr, nameBase);\n   EXPECT_EQ(std::string(&quot;DummyMultiPlugin&quot;), nameBase-&gt;MyNameIs());\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  // Clear PluginPtr and check that interfaces are still usable</span>\n<span class=\"gi\">+  secondPlugin.reset();</span>\n<span class=\"gi\">+  EXPECT_EQ(nullptr, secondPlugin);</span>\n<span class=\"gi\">+  EXPECT_EQ(0u, secondPlugin.use_count());</span>\n<span class=\"gi\">+  EXPECT_EQ(std::string(&quot;DummyMultiPlugin&quot;), nameBase-&gt;MyNameIs());</span>\n }\n</pre></div>\n\n\n<p>Maybe this bit of code is messing up the interface pointer? Or am I trying to so something which is not supported?</p>\n<p>For the use-case on ign-gui, we don't care about the <code>PluginPtr</code> and just want to keep pointers to the interfaces to use later (after <code>PluginPtr</code> goes out of scope), should I be keeping <code>PluginPtr</code> instead?</p>", "type": "rendered"}, "created_on": "2017-11-07T19:27:41.770450+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 43, "from": null, "outdated": true, "path": "src/Plugin.cc"}, "updated_on": "2017-11-07T19:27:41.773324+00:00", "type": "pullrequest_comment", "id": 48993538}