{"pagelen": 50, "values": [{"update": {"description": "This is a reduced version of the Plugin Framework Pull Request #59.\r\n\r\nThis PR does not have the template specializations (which are needed for good performance) nor the `PluginPtr` class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.\r\n\r\nUltimately, I expect the template specializations and `PluginPtr` to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).\r\n\r\nNote that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.\r\n\r\nAs a quick overview of what this PR specifically offers:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.\r\n\r\n2. The `PluginLoader` class now returns a generic `PluginPtr` (in this PR the `PluginPtr` is a `std::shared_ptr<Plugin>`, but that will change in pull request #59). The generic `Plugin` object grants access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is one of the interfaces provided by the loaded plugin. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the generic `PluginPtr` that was originally returned by the `PluginLoader`.", "title": "Slimmed down the Plugin pull request (no more template specializations)", "destination": {"commit": {"hash": "76d416addd2f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/76d416addd2f.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/76d416addd2f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f1cd35a237ee", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/f1cd35a237ee.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/f1cd35a237ee"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginClassOnly"}}, "state": "MERGED", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-11-17T02:59:43.541780+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49796060.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49796060"}}, "parent": {"id": 49795746, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49795746.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49795746"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I approved the new commits", "markup": "markdown", "html": "<p>I approved the new commits</p>", "type": "rendered"}, "created_on": "2017-11-16T19:01:07.749356+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-11-16T19:01:07.752150+00:00", "type": "pullrequest_comment", "id": 49796060}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49795746.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49795746"}}, "parent": {"id": 49793168, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49793168.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49793168"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "the CI looks ok except for windows (which is expected to fail in this branch)", "markup": "markdown", "html": "<p>the CI looks ok except for windows (which is expected to fail in this branch)</p>", "type": "rendered"}, "created_on": "2017-11-16T18:57:29.157067+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-11-16T18:57:29.159248+00:00", "type": "pullrequest_comment", "id": 49795746}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49793401.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49793401"}}, "parent": {"id": 49793168, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49793168.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49793168"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Ship it!", "markup": "markdown", "html": "<p>Ship it!</p>", "type": "rendered"}, "created_on": "2017-11-16T18:27:03.786030+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-11-16T18:27:03.789964+00:00", "type": "pullrequest_comment", "id": 49793401}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49793168.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49793168"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I've added a few more commits to address reviewer feedback. The major changes are:\n\n- `GetInterface` is now named `QueryInterface`\n- `as_shared_ptr` is now named `QueryInterfaceSharedPtr`\n- `QueryInterface` and `QueryInterfaceSharedPtr` documentation now goes into detail about the ownership semantics of interface pointers.\n\nI'll merge this at the end of today unless anyone has an objection.", "markup": "markdown", "html": "<p>I've added a few more commits to address reviewer feedback. The major changes are:</p>\n<ul>\n<li><code>GetInterface</code> is now named <code>QueryInterface</code></li>\n<li><code>as_shared_ptr</code> is now named <code>QueryInterfaceSharedPtr</code></li>\n<li><code>QueryInterface</code> and <code>QueryInterfaceSharedPtr</code> documentation now goes into detail about the ownership semantics of interface pointers.</li>\n</ul>\n<p>I'll merge this at the end of today unless anyone has an objection.</p>", "type": "rendered"}, "created_on": "2017-11-16T18:23:56.253964+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-16T18:23:56.256597+00:00", "type": "pullrequest_comment", "id": 49793168}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"update": {"description": "This is a reduced version of the Plugin Framework Pull Request #59.\r\n\r\nThis PR does not have the template specializations (which are needed for good performance) nor the `PluginPtr` class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.\r\n\r\nUltimately, I expect the template specializations and `PluginPtr` to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).\r\n\r\nNote that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.\r\n\r\nAs a quick overview of what this PR specifically offers:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.\r\n\r\n2. The `PluginLoader` class now returns a generic `PluginPtr` (in this PR the `PluginPtr` is a `std::shared_ptr<Plugin>`, but that will change in pull request #59). The generic `Plugin` object grants access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is one of the interfaces provided by the loaded plugin. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the generic `PluginPtr` that was originally returned by the `PluginLoader`.", "title": "Slimmed down the Plugin pull request (no more template specializations)", "destination": {"commit": {"hash": "76d416addd2f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/76d416addd2f.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/76d416addd2f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f1cd35a237ee", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/f1cd35a237ee.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/f1cd35a237ee"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginClassOnly"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-11-16T02:50:13.782044+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49704861.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49704861"}}, "parent": {"id": 49704416, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49704416.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49704416"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Maybe `QueryInterfacePtr` is not specific enough? `QueryInterfaceSharedPtr` (dropping the `As`)? I'm ok with any name which can be easily identified as being part of the `QueryInterface` family. Thanks!!", "markup": "markdown", "html": "<p>Maybe <code>QueryInterfacePtr</code> is not specific enough? <code>QueryInterfaceSharedPtr</code> (dropping the <code>As</code>)? I'm ok with any name which can be easily identified as being part of the <code>QueryInterface</code> family. Thanks!!</p>", "type": "rendered"}, "created_on": "2017-11-16T00:51:04.987495+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-11-16T00:51:04.990216+00:00", "type": "pullrequest_comment", "id": 49704861}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49704416.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49704416"}}, "parent": {"id": 49704189, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49704189.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49704189"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I'm wrapping up my Windows work right now, so tonight I'll make some changes to this PR to satisfy the name change requests (i.e. `GetInterface` -> `QueryInterface`).\n\nDo you think the `as_shared_ptr` should be changed to `AsSharedPtr`, `QueryAsSharedPtr`, `InterfaceAsSharedPtr` or `QueryInterfaceAsSharedPtr`? Note that I'll be adding to the documentation of `QueryInterface` to explain the ownership semantics and to let users know that they should call `AsSharedPtr` (or some other name if you prefer) in order to get an ownable version of the interface.", "markup": "markdown", "html": "<p>I'm wrapping up my Windows work right now, so tonight I'll make some changes to this PR to satisfy the name change requests (i.e. <code>GetInterface</code> -&gt; <code>QueryInterface</code>).</p>\n<p>Do you think the <code>as_shared_ptr</code> should be changed to <code>AsSharedPtr</code>, <code>QueryAsSharedPtr</code>, <code>InterfaceAsSharedPtr</code> or <code>QueryInterfaceAsSharedPtr</code>? Note that I'll be adding to the documentation of <code>QueryInterface</code> to explain the ownership semantics and to let users know that they should call <code>AsSharedPtr</code> (or some other name if you prefer) in order to get an ownable version of the interface.</p>", "type": "rendered"}, "created_on": "2017-11-16T00:40:23.581521+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-16T00:48:41.146777+00:00", "type": "pullrequest_comment", "id": 49704416}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"approval": {"date": "2017-11-16T00:35:00.148280+00:00", "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49704189.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49704189"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I made a [pull request](#!/ignitionrobotics/ign-gui/pull-requests/65) on Ignition GUI which uses this branch.\n\nIgn-GUI's CI both on pipelines and Jenkins builds from common's default branch, so I'd propose these PRs are merged together in order to avoid broken builds.\n\nI'm approving this so it isn't blocked for too long, but I still think `as_shared_ptr` is a confusing function name because it doesn't follow the same pattern as the other `GetInterface` functions.", "markup": "markdown", "html": "<p>I made a <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gui/pull-requests/65\" rel=\"nofollow\">pull request</a> on Ignition GUI which uses this branch.</p>\n<p>Ign-GUI's CI both on pipelines and Jenkins builds from common's default branch, so I'd propose these PRs are merged together in order to avoid broken builds.</p>\n<p>I'm approving this so it isn't blocked for too long, but I still think <code>as_shared_ptr</code> is a confusing function name because it doesn't follow the same pattern as the other <code>GetInterface</code> functions.</p>", "type": "rendered"}, "created_on": "2017-11-16T00:34:54.973219+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-11-16T00:34:54.976608+00:00", "type": "pullrequest_comment", "id": 49704189}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"approval": {"date": "2017-11-14T23:42:17.825731+00:00", "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49587528.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49587528"}}, "parent": {"id": 48553078, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48553078.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48553078"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I'm approving this PR under the assumption that 82ee8290591f will be merged in.", "markup": "markdown", "html": "<p>I'm approving this PR under the assumption that <a href=\"#!/ignitionrobotics/ign-common/commits/82ee8290591f\" rel=\"nofollow\" class=\"ap-connect-link\">82ee8290591f</a> will be merged in.</p>", "type": "rendered"}, "created_on": "2017-11-14T23:42:15.052648+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-11-14T23:42:15.056181+00:00", "type": "pullrequest_comment", "id": 49587528}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49012543.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49012543"}}, "parent": {"id": 48553078, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48553078.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48553078"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Great, `QueryInterface` sounds reasonable.", "markup": "markdown", "html": "<p>Great, <code>QueryInterface</code> sounds reasonable.</p>", "type": "rendered"}, "created_on": "2017-11-07T23:59:53.950416+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-11-07T23:59:53.952635+00:00", "type": "pullrequest_comment", "id": 49012543}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49001320.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49001320"}}, "parent": {"id": 48999364, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48999364.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48999364"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I wouldn't call it a bug in `std::unique_ptr`; I'd say that the earlier implementation of `PluginLoader` was abusing `std::unique_ptr`. What it boils down to is: We have no way of ensuring or enforcing that the interface type which we give to the `std::unique_ptr` has a virtual destructor, which means that if `delete` is called on a pointer to the interface, then the object will not get deleted correctly, and this could result in memory leaks or exceptions.\n\n`std::shared_ptr` allows us to get around this concern using aliasing, which is something that `std::unique_ptr` cannot offer. The `std::shared_ptr` internally (opaquely) contains a pointer to the most-derived address of the object, and it will call `delete` on that most-derived pointer, so it won't matter whether any of its interfaces' destructors are virtual.\n\nWe could tweak the way we use `std::unique_ptr` to give it a stateful destructor, but this would not solve the problem you're running into, and it would also eliminate the benefit of using a generic smart pointer type, because the stateful destructor becomes a part of the `std::unique_ptr`'s type information, making it no longer generic.\n\n> I think I was treating the PluginLoader as a factory and I didn't expect it to be responsible for the plugin's lifecycle. Can't it serve this purpose as well?\n\nIt does serve this purpose. `PluginLoader` itself is not responsible for the plugin's lifecycle; the smart pointer that it returns is responsible (either the `PluginPtr` or the `std::shared_ptr`).\n\nAdmittedly, if you're using pull request #61, then things get hairy if you load a factory which spawns objects that depend on the dynamically loaded library. In this current pull request, plugin libraries never get unloaded, so this isn't a concern right now. However, I don't really think that's acceptable behavior. I would view it as a kind of memory leak where we will forever (until the program quits) occupy memory space, regardless of whether the contents of that memory space are still needed. I don't think it would be a good idea to abandon rigorous memory management for the sake of developer convenience, since I would view that as a form of technical debt.\n\nTo determine how badly this affects your setup, maybe we can have a discussion some time about how exactly you're using (or expect to use) the `PluginLoader`. If you keep one persistent `PluginLoader` instance alive throughout the duration of your program, then the library management concerns should be a non-issue.", "markup": "markdown", "html": "<p>I wouldn't call it a bug in <code>std::unique_ptr</code>; I'd say that the earlier implementation of <code>PluginLoader</code> was abusing <code>std::unique_ptr</code>. What it boils down to is: We have no way of ensuring or enforcing that the interface type which we give to the <code>std::unique_ptr</code> has a virtual destructor, which means that if <code>delete</code> is called on a pointer to the interface, then the object will not get deleted correctly, and this could result in memory leaks or exceptions.</p>\n<p><code>std::shared_ptr</code> allows us to get around this concern using aliasing, which is something that <code>std::unique_ptr</code> cannot offer. The <code>std::shared_ptr</code> internally (opaquely) contains a pointer to the most-derived address of the object, and it will call <code>delete</code> on that most-derived pointer, so it won't matter whether any of its interfaces' destructors are virtual.</p>\n<p>We could tweak the way we use <code>std::unique_ptr</code> to give it a stateful destructor, but this would not solve the problem you're running into, and it would also eliminate the benefit of using a generic smart pointer type, because the stateful destructor becomes a part of the <code>std::unique_ptr</code>'s type information, making it no longer generic.</p>\n<blockquote>\n<p>I think I was treating the PluginLoader as a factory and I didn't expect it to be responsible for the plugin's lifecycle. Can't it serve this purpose as well?</p>\n</blockquote>\n<p>It does serve this purpose. <code>PluginLoader</code> itself is not responsible for the plugin's lifecycle; the smart pointer that it returns is responsible (either the <code>PluginPtr</code> or the <code>std::shared_ptr</code>).</p>\n<p>Admittedly, if you're using <a href=\"#!/ignitionrobotics/ign-common/pull-requests/61/automatically-unloading-libraries-when\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #61</a>, then things get hairy if you load a factory which spawns objects that depend on the dynamically loaded library. In this current pull request, plugin libraries never get unloaded, so this isn't a concern right now. However, I don't really think that's acceptable behavior. I would view it as a kind of memory leak where we will forever (until the program quits) occupy memory space, regardless of whether the contents of that memory space are still needed. I don't think it would be a good idea to abandon rigorous memory management for the sake of developer convenience, since I would view that as a form of technical debt.</p>\n<p>To determine how badly this affects your setup, maybe we can have a discussion some time about how exactly you're using (or expect to use) the <code>PluginLoader</code>. If you keep one persistent <code>PluginLoader</code> instance alive throughout the duration of your program, then the library management concerns should be a non-issue.</p>", "type": "rendered"}, "created_on": "2017-11-07T21:07:40.257363+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-07T21:24:44.907179+00:00", "type": "pullrequest_comment", "id": 49001320}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/49001706.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-49001706"}}, "parent": {"id": 48999503, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48999503.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48999503"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "There were several subtle bugs/concerns which motivated some of these changes. Those bugs include, but are not limited to:\n\n- Plugin instances being incorrectly deleted\n- Interface pointers pointing to the wrong memory address within their plugin instance\n- Plugin libraries never getting unloaded, even if they are no longer being used\n\nThere may have been more, but those are the first things that come to mind. Some of the tests in `test/integration/plugin.cc` are testing these issues, and those tests would have failed in the older implementation of the plugin framework.", "markup": "markdown", "html": "<p>There were several subtle bugs/concerns which motivated some of these changes. Those bugs include, but are not limited to:</p>\n<ul>\n<li>Plugin instances being incorrectly deleted</li>\n<li>Interface pointers pointing to the wrong memory address within their plugin instance</li>\n<li>Plugin libraries never getting unloaded, even if they are no longer being used</li>\n</ul>\n<p>There may have been more, but those are the first things that come to mind. Some of the tests in <code>test/integration/plugin.cc</code> are testing these issues, and those tests would have failed in the older implementation of the plugin framework.</p>", "type": "rendered"}, "created_on": "2017-11-07T21:12:46.755479+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-07T21:12:46.759004+00:00", "type": "pullrequest_comment", "id": 49001706}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48999669.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48999669"}}, "parent": {"id": 48997080, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48997080.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48997080"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "+1 for documentation", "markup": "markdown", "html": "<p>+1 for documentation</p>", "type": "rendered"}, "created_on": "2017-11-07T20:45:43.401331+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-11-07T20:45:43.403552+00:00", "type": "pullrequest_comment", "id": 48999669}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48999503.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48999503"}}, "parent": {"id": 48999364, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48999364.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48999364"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Maybe I missed one of your points, is the main concern of the new framework to make sure shared libraries are properly unloaded when no longer used?", "markup": "markdown", "html": "<p>Maybe I missed one of your points, is the main concern of the new framework to make sure shared libraries are properly unloaded when no longer used?</p>", "type": "rendered"}, "created_on": "2017-11-07T20:43:34.287154+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-11-07T20:43:34.290860+00:00", "type": "pullrequest_comment", "id": 48999503}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48999364.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48999364"}}, "parent": {"id": 48996912, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996912.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996912"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "> We used to allow plugins to be provided in a generic std::unique_ptr which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using std::shared_ptr ensures that the plugins always get deleted correctly.\n\nIs this a bug in `unique_ptr`s? If you give me a `unique_ptr`, the message I get is that you're not holding on to that anymore, and I am fully responsible for it now. Sure, I can delete it incorrectly, but I don't think that would be the plugin loader's fault.\n\n> By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.\n\nI think I was treating the `PluginLoader` as a factory and I didn't expect it to be responsible for the plugin's lifecycle. Can't it serve this purpose as well?", "markup": "markdown", "html": "<blockquote>\n<p>We used to allow plugins to be provided in a generic std::unique_ptr which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using std::shared_ptr ensures that the plugins always get deleted correctly.</p>\n</blockquote>\n<p>Is this a bug in <code>unique_ptr</code>s? If you give me a <code>unique_ptr</code>, the message I get is that you're not holding on to that anymore, and I am fully responsible for it now. Sure, I can delete it incorrectly, but I don't think that would be the plugin loader's fault.</p>\n<blockquote>\n<p>By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.</p>\n</blockquote>\n<p>I think I was treating the <code>PluginLoader</code> as a factory and I didn't expect it to be responsible for the plugin's lifecycle. Can't it serve this purpose as well?</p>", "type": "rendered"}, "created_on": "2017-11-07T20:41:23.759618+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-11-07T20:41:23.762208+00:00", "type": "pullrequest_comment", "id": 48999364}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48997525.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48997525"}}, "parent": {"id": 48996912, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996912.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996912"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "An alternative way to deal with the \"one catch\" would be to permanently store the loaded factories somewhere.", "markup": "markdown", "html": "<p>An alternative way to deal with the \"one catch\" would be to permanently store the loaded factories somewhere.</p>", "type": "rendered"}, "created_on": "2017-11-07T20:17:10.636480+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-07T20:17:10.639747+00:00", "type": "pullrequest_comment", "id": 48997525}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48997080.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48997080"}}, "parent": {"id": 48996224, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996224.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996224"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "That's reasonable. At the very least, I should clarify in the function description of `GetInterface` that the pointer it returns will be invalidated when all references to the plugin instance are cleared, and that there is an alternative function for retrieving a reference-counting pointer to the interface.", "markup": "markdown", "html": "<p>That's reasonable. At the very least, I should clarify in the function description of <code>GetInterface</code> that the pointer it returns will be invalidated when all references to the plugin instance are cleared, and that there is an alternative function for retrieving a reference-counting pointer to the interface.</p>", "type": "rendered"}, "created_on": "2017-11-07T20:11:53.183586+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-07T20:11:53.187223+00:00", "type": "pullrequest_comment", "id": 48997080}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996912.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996912"}}, "parent": {"id": 48996060, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996060.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996060"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "The best solution I can offer would be making your plugin a factory which produces the widget instead of making the widget itself a plugin. We used to allow plugins to be provided in a generic `std::unique_ptr` which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using `std::shared_ptr` ensures that the plugins always get deleted correctly. By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.\n\nThere is one catch with this factory approach, though: Pull Request #61 is designed to automatically unload plugin libraries which are no longer being referenced. The widget that gets produced by the factory will not be doing any reference-counting for the plugin library, so there's a risk of unloading the library (which those widgets depend on) while the widgets are still active. This can be avoided by keeping alive the `PluginLoader` that created the widget factory and by never calling `ForgetLibrary` on it. Hopefully that requirement is not too onerous.", "markup": "markdown", "html": "<p>The best solution I can offer would be making your plugin a factory which produces the widget instead of making the widget itself a plugin. We used to allow plugins to be provided in a generic <code>std::unique_ptr</code> which would have allowed you to extract the raw plugin and pass it along, but this opened the possibility of subtle bugs where the plugin wouldn't get deleted correctly. Using <code>std::shared_ptr</code> ensures that the plugins always get deleted correctly. By making your plugin a factory which returns the widget instances, you're basically absolving the plugin framework of any responsibility for managing those resources.</p>\n<p>There is one catch with this factory approach, though: <a href=\"#!/ignitionrobotics/ign-common/pull-requests/61/automatically-unloading-libraries-when\" rel=\"nofollow\" class=\"ap-connect-link\">Pull Request #61</a> is designed to automatically unload plugin libraries which are no longer being referenced. The widget that gets produced by the factory will not be doing any reference-counting for the plugin library, so there's a risk of unloading the library (which those widgets depend on) while the widgets are still active. This can be avoided by keeping alive the <code>PluginLoader</code> that created the widget factory and by never calling <code>ForgetLibrary</code> on it. Hopefully that requirement is not too onerous.</p>", "type": "rendered"}, "created_on": "2017-11-07T20:09:56.573555+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-07T20:09:56.577399+00:00", "type": "pullrequest_comment", "id": 48996912}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996224.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996224"}}, "parent": {"id": 48994314, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48994314.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48994314"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "By the way, maybe it would be clearer if the function was called something like `GetInterfaceSharedPtr`, I totally missed this alternative way of \"getting the interface\".", "markup": "markdown", "html": "<p>By the way, maybe it would be clearer if the function was called something like <code>GetInterfaceSharedPtr</code>, I totally missed this alternative way of \"getting the interface\".</p>", "type": "rendered"}, "created_on": "2017-11-07T20:00:41.870174+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-11-07T20:03:02.175689+00:00", "type": "pullrequest_comment", "id": 48996224}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48996060.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48996060"}}, "parent": {"id": 48994314, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48994314.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48994314"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I see, so I'll have to keep that `shared_ptr` alive anyway, otherwise if I get rid of it I'll delete the underlying raw pointer. In either case, I'll have to keep hold of something. It is slightly inconvenient for GUI, because I'm giving ownership of the underlying pointer to Qt and it will take care of its lifecycle. If I keep a `shared_ptr`, I'll have to keep track of it as well.\n\nIs there a trick you can think of for this use case? I didn't find a way to release the shared_ptr without deleting its raw pointer. Is there a chance we can have a `as_unique_ptr` or receive a raw pointer which is not deleted?", "markup": "markdown", "html": "<p>I see, so I'll have to keep that <code>shared_ptr</code> alive anyway, otherwise if I get rid of it I'll delete the underlying raw pointer. In either case, I'll have to keep hold of something. It is slightly inconvenient for GUI, because I'm giving ownership of the underlying pointer to Qt and it will take care of its lifecycle. If I keep a <code>shared_ptr</code>, I'll have to keep track of it as well.</p>\n<p>Is there a trick you can think of for this use case? I didn't find a way to release the shared_ptr without deleting its raw pointer. Is there a chance we can have a <code>as_unique_ptr</code> or receive a raw pointer which is not deleted?</p>", "type": "rendered"}, "created_on": "2017-11-07T19:58:28.392720+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-11-07T19:58:28.396436+00:00", "type": "pullrequest_comment", "id": 48996060}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48994238.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48994238"}}, "parent": {"id": 48993538, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48993538.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48993538"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "The `PluginPtr` is reference-counting to make sure we don't experience memory leaks from plugins. Those raw interface pointers will be invalidated if all of the references to the plugin are cleared.\n\nInstead, you should use `std::shared_ptr<Interface> myInterface = secondPlugin->as_shared_ptr<Interface>(\"YourInterfaceName\")` to get a reference-counting pointer to your interface. This will keep the interface pointer valid even if you clear or throw away the `PluginPtr` instance.", "markup": "markdown", "html": "<p>The <code>PluginPtr</code> is reference-counting to make sure we don't experience memory leaks from plugins. Those raw interface pointers will be invalidated if all of the references to the plugin are cleared.</p>\n<p>Instead, you should use <code>std::shared_ptr&lt;Interface&gt; myInterface = secondPlugin-&gt;as_shared_ptr&lt;Interface&gt;(\"YourInterfaceName\")</code> to get a reference-counting pointer to your interface. This will keep the interface pointer valid even if you clear or throw away the <code>PluginPtr</code> instance.</p>", "type": "rendered"}, "created_on": "2017-11-07T19:36:05.987388+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-07T19:41:48.764992+00:00", "type": "pullrequest_comment", "id": 48994238}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48994314.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48994314"}}, "parent": {"id": 48994238, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48994238.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48994238"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Note that we might end up changing the name of the function `as_shared_ptr` since it violates our style guide.", "markup": "markdown", "html": "<p>Note that we might end up changing the name of the function <code>as_shared_ptr</code> since it violates our style guide.</p>", "type": "rendered"}, "created_on": "2017-11-07T19:36:57.999826+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-07T19:36:58.002708+00:00", "type": "pullrequest_comment", "id": 48994314}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48993538.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48993538"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I added an expectation which clears `PluginPtr` and tries to access the interface afterwards and that segfaults:\n\n~~~\ndiff -r 67dc7b12b50f test/integration/plugin.cc\n--- a/test/integration/plugin.cc\tMon Oct 30 12:12:02 2017 -0700\n+++ b/test/integration/plugin.cc\tTue Nov 07 11:25:02 2017 -0800\n@@ -121,6 +121,12 @@\n         \"test::util::DummyNameBase\");\n   ASSERT_NE(nullptr, nameBase);\n   EXPECT_EQ(std::string(\"DummyMultiPlugin\"), nameBase->MyNameIs());\n+\n+  // Clear PluginPtr and check that interfaces are still usable\n+  secondPlugin.reset();\n+  EXPECT_EQ(nullptr, secondPlugin);\n+  EXPECT_EQ(0u, secondPlugin.use_count());\n+  EXPECT_EQ(std::string(\"DummyMultiPlugin\"), nameBase->MyNameIs());\n }\n~~~\n\nMaybe this bit of code is messing up the interface pointer? Or am I trying to so something which is not supported?\n\nFor the use-case on ign-gui, we don't care about the `PluginPtr` and just want to keep pointers to the interfaces to use later (after `PluginPtr` goes out of scope), should I be keeping `PluginPtr` instead?", "markup": "markdown", "html": "<p>I added an expectation which clears <code>PluginPtr</code> and tries to access the interface afterwards and that segfaults:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 67dc7b12b50f test/integration/plugin.cc</span>\n<span class=\"gd\">--- a/test/integration/plugin.cc    Mon Oct 30 12:12:02 2017 -0700</span>\n<span class=\"gi\">+++ b/test/integration/plugin.cc    Tue Nov 07 11:25:02 2017 -0800</span>\n<span class=\"gu\">@@ -121,6 +121,12 @@</span>\n         &quot;test::util::DummyNameBase&quot;);\n   ASSERT_NE(nullptr, nameBase);\n   EXPECT_EQ(std::string(&quot;DummyMultiPlugin&quot;), nameBase-&gt;MyNameIs());\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  // Clear PluginPtr and check that interfaces are still usable</span>\n<span class=\"gi\">+  secondPlugin.reset();</span>\n<span class=\"gi\">+  EXPECT_EQ(nullptr, secondPlugin);</span>\n<span class=\"gi\">+  EXPECT_EQ(0u, secondPlugin.use_count());</span>\n<span class=\"gi\">+  EXPECT_EQ(std::string(&quot;DummyMultiPlugin&quot;), nameBase-&gt;MyNameIs());</span>\n }\n</pre></div>\n\n\n<p>Maybe this bit of code is messing up the interface pointer? Or am I trying to so something which is not supported?</p>\n<p>For the use-case on ign-gui, we don't care about the <code>PluginPtr</code> and just want to keep pointers to the interfaces to use later (after <code>PluginPtr</code> goes out of scope), should I be keeping <code>PluginPtr</code> instead?</p>", "type": "rendered"}, "created_on": "2017-11-07T19:27:41.770450+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-11-07T19:27:41.773324+00:00", "type": "pullrequest_comment", "id": 48993538}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48553078.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48553078"}}, "parent": {"id": 48530776, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48530776.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48530776"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "This compiles with GCC (which tends to be more flexible with the rules), but it does not compile with Clang (which tends to be much more strict about adherence to the standard).\n\nBut even beyond issues with compilation, I think it's dangerous to be shadowing type names with function names, even if we could find a way to compile it.\n\nFor example, in the `gazebo::Model` class we have a `GetLink` member function. If we were to continue our current trend and remove the `Get` keyword from that function, then its name would end up as `Link`. We could *technically* get the code to compile like that, because the compiler would usually have enough context to distinguish between the type name versus the member function name, but I still consider this problematic, for the following reasons:\n\n - I find that human developers and maintainers have difficulty recognizing the difference between the function names and type names when they are identical, even though the compiler can easily distinguish between them based on context.\n\n- The purpose behind giving expressive names to functions and types is to avoid this kind of ambiguity and make the code easier to read. If a function and a type are ending up with the same name, then I don't think that name is expressive enough. A type name should usually express an object and therefore be a noun, while a function name should usually express an action and therefore be a verb or a [predicate](https://en.wikipedia.org/wiki/Predicate_(grammar)). There will certainly be exceptions to that rule of thumb, but our code style is actively pushing functions to have noun-like names, which I think distorts the concept of a function.\n\n- On a more technical level, sharing a name makes it more difficult for most static analyzers or code model generators to quickly produce a correct model of the code. Anecdotally, Qt Creator (which is my IDE of choice) is mistaking the `Interface` template parameter as being the same symbol as the `Interface` function name. The Clang code model generator just outright rejects the code, which is unsurprising since Clang refuses to compile it. Other static analyzers (like what we use for code coverage) are likely to have similar issues with mistaking the symbols, since they often sacrifice accuracy for speed.\n\n- This also makes basic upkeep like refactoring much much more difficult (e.g. I bet you found it pretty easy to convert `GetInterface` into `Interface` without affecting anything else, but now you would not find it very easy to convert the function name `Interface` into another name without also changing the names of all the template parameters).\n\nOne possible solution in this specific case would be to change the name from `GetInterface` to `QueryInterface`. Admittedly, the name `QueryInterface` is probably a more expressive and more accurate name anyway, since the function does not make any guarantee that it will return the requested interface (if the requested interface is unavailable, it returns a `nullptr`). The word `Query` probably does a better job of expressing that behavior than `Get`. For illustrative purposes, I've made this change in a branch here 82ee8290591f.\n\nBut in a more broad sense, a code style rule which reduces the expressiveness of function names strikes me as harmful, so I would urge us to reconsider its enforcement. I wouldn't necessarily propose reverting any function names to bring back a `Get` which has been removed, but I would hope that we can avoid actively reducing the expressiveness of existing function names.", "markup": "markdown", "html": "<p>This compiles with GCC (which tends to be more flexible with the rules), but it does not compile with Clang (which tends to be much more strict about adherence to the standard).</p>\n<p>But even beyond issues with compilation, I think it's dangerous to be shadowing type names with function names, even if we could find a way to compile it.</p>\n<p>For example, in the <code>gazebo::Model</code> class we have a <code>GetLink</code> member function. If we were to continue our current trend and remove the <code>Get</code> keyword from that function, then its name would end up as <code>Link</code>. We could <em>technically</em> get the code to compile like that, because the compiler would usually have enough context to distinguish between the type name versus the member function name, but I still consider this problematic, for the following reasons:</p>\n<ul>\n<li>\n<p>I find that human developers and maintainers have difficulty recognizing the difference between the function names and type names when they are identical, even though the compiler can easily distinguish between them based on context.</p>\n</li>\n<li>\n<p>The purpose behind giving expressive names to functions and types is to avoid this kind of ambiguity and make the code easier to read. If a function and a type are ending up with the same name, then I don't think that name is expressive enough. A type name should usually express an object and therefore be a noun, while a function name should usually express an action and therefore be a verb or a <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Predicate_(grammar)\" rel=\"nofollow\">predicate</a>. There will certainly be exceptions to that rule of thumb, but our code style is actively pushing functions to have noun-like names, which I think distorts the concept of a function.</p>\n</li>\n<li>\n<p>On a more technical level, sharing a name makes it more difficult for most static analyzers or code model generators to quickly produce a correct model of the code. Anecdotally, Qt Creator (which is my IDE of choice) is mistaking the <code>Interface</code> template parameter as being the same symbol as the <code>Interface</code> function name. The Clang code model generator just outright rejects the code, which is unsurprising since Clang refuses to compile it. Other static analyzers (like what we use for code coverage) are likely to have similar issues with mistaking the symbols, since they often sacrifice accuracy for speed.</p>\n</li>\n<li>\n<p>This also makes basic upkeep like refactoring much much more difficult (e.g. I bet you found it pretty easy to convert <code>GetInterface</code> into <code>Interface</code> without affecting anything else, but now you would not find it very easy to convert the function name <code>Interface</code> into another name without also changing the names of all the template parameters).</p>\n</li>\n</ul>\n<p>One possible solution in this specific case would be to change the name from <code>GetInterface</code> to <code>QueryInterface</code>. Admittedly, the name <code>QueryInterface</code> is probably a more expressive and more accurate name anyway, since the function does not make any guarantee that it will return the requested interface (if the requested interface is unavailable, it returns a <code>nullptr</code>). The word <code>Query</code> probably does a better job of expressing that behavior than <code>Get</code>. For illustrative purposes, I've made this change in a branch here <a href=\"#!/ignitionrobotics/ign-common/commits/82ee8290591f\" rel=\"nofollow\" class=\"ap-connect-link\">82ee8290591f</a>.</p>\n<p>But in a more broad sense, a code style rule which reduces the expressiveness of function names strikes me as harmful, so I would urge us to reconsider its enforcement. I wouldn't necessarily propose reverting any function names to bring back a <code>Get</code> which has been removed, but I would hope that we can avoid actively reducing the expressiveness of existing function names.</p>", "type": "rendered"}, "created_on": "2017-11-01T18:01:38.173268+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-11-01T19:14:58.436205+00:00", "type": "pullrequest_comment", "id": 48553078}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48558284.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48558284"}}, "parent": {"id": 47788401, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47788401.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47788401"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Since there is disagreement, we could relax the style requirements on this particular case and allow accessors to use `Get` or not.", "markup": "markdown", "html": "<p>Since there is disagreement, we could relax the style requirements on this particular case and allow accessors to use <code>Get</code> or not.</p>", "type": "rendered"}, "created_on": "2017-11-01T19:11:26.685168+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-11-01T19:11:26.688207+00:00", "type": "pullrequest_comment", "id": 48558284}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48530776.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48530776"}}, "parent": {"id": 47793200, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47793200.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47793200"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "[Here](#!/ignitionrobotics/ign-common/branches/compare/PluginClassOnly_Interface%0DPluginClassOnly#diff) is my proposal.", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/branches/compare/PluginClassOnly_Interface%0DPluginClassOnly#diff\" rel=\"nofollow\">Here</a> is my proposal.</p>", "type": "rendered"}, "created_on": "2017-11-01T14:42:28.023750+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-11-01T14:42:28.026700+00:00", "type": "pullrequest_comment", "id": 48530776}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48360419.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48360419"}}, "parent": {"id": 48357182, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48357182.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48357182"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "thanks!", "markup": "markdown", "html": "<p>thanks!</p>", "type": "rendered"}, "created_on": "2017-10-30T19:58:34.124181+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-10-30T19:58:34.126462+00:00", "type": "pullrequest_comment", "id": 48360419}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48357182.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48357182"}}, "parent": {"id": 48349453, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48349453.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48349453"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Added 67dc7b1", "markup": "markdown", "html": "<p>Added <a href=\"#!/ignitionrobotics/ign-common/commits/67dc7b1\" rel=\"nofollow\" class=\"ap-connect-link\">67dc7b1</a></p>", "type": "rendered"}, "created_on": "2017-10-30T19:15:17.229646+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-10-30T19:15:17.233536+00:00", "type": "pullrequest_comment", "id": 48357182}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"update": {"description": "This is a reduced version of the Plugin Framework Pull Request #59.\r\n\r\nThis PR does not have the template specializations (which are needed for good performance) nor the `PluginPtr` class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.\r\n\r\nUltimately, I expect the template specializations and `PluginPtr` to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).\r\n\r\nNote that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.\r\n\r\nAs a quick overview of what this PR specifically offers:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.\r\n\r\n2. The `PluginLoader` class now returns a generic `PluginPtr` (in this PR the `PluginPtr` is a `std::shared_ptr<Plugin>`, but that will change in pull request #59). The generic `Plugin` object grants access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is one of the interfaces provided by the loaded plugin. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the generic `PluginPtr` that was originally returned by the `PluginLoader`.", "title": "Slimmed down the Plugin pull request (no more template specializations)", "destination": {"commit": {"hash": "76d416addd2f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/76d416addd2f.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/76d416addd2f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "67dc7b12b50f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/67dc7b12b50f.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/67dc7b12b50f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginClassOnly"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-10-30T19:12:28.957362+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48356784.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48356784"}}, "parent": {"id": 48349453, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48349453.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48349453"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Definitely still relevant, thanks for the additions!", "markup": "markdown", "html": "<p>Definitely still relevant, thanks for the additions!</p>", "type": "rendered"}, "created_on": "2017-10-30T19:10:43.352507+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-10-30T19:10:43.355026+00:00", "type": "pullrequest_comment", "id": 48356784}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48349453.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48349453"}}, "parent": {"id": 48258114, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48258114.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48258114"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "oh I just saw your [comment](#!/ignitionrobotics/ign-common/pull-requests/73/slimmed-down-the-plugin-pull-request-no/activity#comment-48157029) about the BetterPluginRegistration branch. This might be invalidated soon, but I think it's still worth it for the test coverage", "markup": "markdown", "html": "<p>oh I just saw your <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/73/slimmed-down-the-plugin-pull-request-no/activity#comment-48157029\" rel=\"nofollow\">comment</a> about the BetterPluginRegistration branch. This might be invalidated soon, but I think it's still worth it for the test coverage</p>", "type": "rendered"}, "created_on": "2017-10-30T17:43:34.985181+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-10-30T17:43:34.988266+00:00", "type": "pullrequest_comment", "id": 48349453}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"update": {"description": "This is a reduced version of the Plugin Framework Pull Request #59.\r\n\r\nThis PR does not have the template specializations (which are needed for good performance) nor the `PluginPtr` class (which is needed for the template specializations). Since those were perhaps the most complex parts of the implementation, their removal might help the review process a little bit since reviewers can now focus their attention somewhat.\r\n\r\nUltimately, I expect the template specializations and `PluginPtr` to be merged in as well (unless we can come up with a nicer implementation that provides the same performance, but I don't currently believe that's possible, not that I would discourage anyone from trying).\r\n\r\nNote that there are some vestigial functions in this pull request which aren't strictly needed in the absence of the template specialization, so that may cause some confusion during the review, but I'd prefer not to pollute the version history with too many redundant removals and insertions, so I'm going to leave them in unless reviewers would strongly prefer that they be taken out.\r\n\r\nAs a quick overview of what this PR specifically offers:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interface per plugin.\r\n\r\n2. The `PluginLoader` class now returns a generic `PluginPtr` (in this PR the `PluginPtr` is a `std::shared_ptr<Plugin>`, but that will change in pull request #59). The generic `Plugin` object grants access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is one of the interfaces provided by the loaded plugin. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the generic `PluginPtr` that was originally returned by the `PluginLoader`.", "title": "Slimmed down the Plugin pull request (no more template specializations)", "destination": {"commit": {"hash": "76d416addd2f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/76d416addd2f.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/76d416addd2f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "515f4cd45c19", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/515f4cd45c19.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/515f4cd45c19"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginClassOnly"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-10-29T09:09:32.168011+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48258114.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48258114"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I noticed some lines in PluginLoader.cc that aren't being tested, so I added some malformed plugins in d71c5f607ff0 (branch `PluginClassOnly_bad_plugins`) that exercise these edge cases. Please consider merging it into this pull request.", "markup": "markdown", "html": "<p>I noticed some lines in PluginLoader.cc that aren't being tested, so I added some malformed plugins in <a href=\"#!/ignitionrobotics/ign-common/commits/d71c5f607ff0\" rel=\"nofollow\" class=\"ap-connect-link\">d71c5f607ff0</a> (branch <code>PluginClassOnly_bad_plugins</code>) that exercise these edge cases. Please consider merging it into this pull request.</p>", "type": "rendered"}, "created_on": "2017-10-29T09:08:16.471338+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-10-29T09:08:16.474646+00:00", "type": "pullrequest_comment", "id": 48258114}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48254127.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48254127"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I'm confused about the message in this `static_assert` because the [DummyPlugin](#!/ignitionrobotics/ign-common/pull-requests/73/slimmed-down-the-plugin-pull-request-no/diff#Ltest/util/DummyPlugins.ccT74) isn't using fully qualified names:\n\n~~~\nIGN_COMMON_ADD_PLUGIN(test::util::DummySinglePlugin, test::util::DummyNameBase)\n~~~\n\nIf I try to give it a fully qualified name, it fails to compile:\n\n~~~\ndiff -r 6767db6c85ac test/util/DummyPlugins.cc\n--- a/test/util/DummyPlugins.cc Fri Oct 27 17:39:04 2017 -0700\n+++ b/test/util/DummyPlugins.cc Sat Oct 28 09:18:35 2017 -0700\n@@ -71,7 +71,7 @@\n }\n \n IGN_COMMON_BEGIN_ADDING_PLUGINS\n-  IGN_COMMON_ADD_PLUGIN(test::util::DummySinglePlugin, test::util::DummyNameBase)\n+  IGN_COMMON_ADD_PLUGIN(::test::util::DummySinglePlugin, test::util::DummyNameBase)\n   IGN_COMMON_ADD_PLUGIN(test::util::DummyMultiPlugin, test::util::DummyNameBase)\n   IGN_COMMON_ADD_PLUGIN(test::util::DummyMultiPlugin, test::util::DummyDoubleBase)\n   IGN_COMMON_ADD_PLUGIN(test::util::DummyMultiPlugin, test::util::DummyIntBase)\n~~~\n\n~~~\n[ 98%] Building CXX object test/util/CMakeFiles/IGNDummyPlugins.dir/DummyPlugins.cc.o\n/Users/scpeters/ws/ignition/src/ign-common/test/util/DummyPlugins.cc:74:25: error: expected unqualified-id\n  IGN_COMMON_ADD_PLUGIN(::test::util::DummySinglePlugin, test::util::DummyNameBase)\n                        ^\n/Users/scpeters/ws/ignition/src/ign-common/include/ignition/common/PluginMacros.hh:119:32: note: expanded from macro 'IGN_COMMON_ADD_PLUGIN'\n  DETAIL_IGN_COMMON_ADD_PLUGIN(plugin, interface)\n                               ^\n/Users/scpeters/ws/ignition/src/ign-common/include/ignition/common/detail/PluginMacros.hh:104:44: note: expanded from macro 'DETAIL_IGN_COMMON_ADD_PLUGIN'\n  static_assert(std::is_same<pluginName, ::pluginName>::value, \\\n                                           ^\n1 error generated.\n~~~", "markup": "markdown", "html": "<p>I'm confused about the message in this <code>static_assert</code> because the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/73/slimmed-down-the-plugin-pull-request-no/diff#Ltest/util/DummyPlugins.ccT74\" rel=\"nofollow\">DummyPlugin</a> isn't using fully qualified names:</p>\n<div class=\"codehilite\"><pre><span></span>IGN_COMMON_ADD_PLUGIN(test::util::DummySinglePlugin, test::util::DummyNameBase)\n</pre></div>\n\n\n<p>If I try to give it a fully qualified name, it fails to compile:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 6767db6c85ac test/util/DummyPlugins.cc</span>\n<span class=\"gd\">--- a/test/util/DummyPlugins.cc Fri Oct 27 17:39:04 2017 -0700</span>\n<span class=\"gi\">+++ b/test/util/DummyPlugins.cc Sat Oct 28 09:18:35 2017 -0700</span>\n<span class=\"gu\">@@ -71,7 +71,7 @@</span>\n }\n\n IGN_COMMON_BEGIN_ADDING_PLUGINS\n<span class=\"gd\">-  IGN_COMMON_ADD_PLUGIN(test::util::DummySinglePlugin, test::util::DummyNameBase)</span>\n<span class=\"gi\">+  IGN_COMMON_ADD_PLUGIN(::test::util::DummySinglePlugin, test::util::DummyNameBase)</span>\n   IGN_COMMON_ADD_PLUGIN(test::util::DummyMultiPlugin, test::util::DummyNameBase)\n   IGN_COMMON_ADD_PLUGIN(test::util::DummyMultiPlugin, test::util::DummyDoubleBase)\n   IGN_COMMON_ADD_PLUGIN(test::util::DummyMultiPlugin, test::util::DummyIntBase)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>[ 98%] Building CXX object test/util/CMakeFiles/IGNDummyPlugins.dir/DummyPlugins.cc.o\n/Users/scpeters/ws/ignition/src/ign-common/test/util/DummyPlugins.cc:74:25: error: expected unqualified-id\n  IGN_COMMON_ADD_PLUGIN(::test::util::DummySinglePlugin, test::util::DummyNameBase)\n                        ^\n/Users/scpeters/ws/ignition/src/ign-common/include/ignition/common/PluginMacros.hh:119:32: note: expanded from macro &#39;IGN_COMMON_ADD_PLUGIN&#39;\n  DETAIL_IGN_COMMON_ADD_PLUGIN(plugin, interface)\n                               ^\n/Users/scpeters/ws/ignition/src/ign-common/include/ignition/common/detail/PluginMacros.hh:104:44: note: expanded from macro &#39;DETAIL_IGN_COMMON_ADD_PLUGIN&#39;\n  static_assert(std::is_same&lt;pluginName, ::pluginName&gt;::value, \\\n                                           ^\n1 error generated.\n</pre></div>", "type": "rendered"}, "created_on": "2017-10-28T16:21:31.516530+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-10-28T16:21:31.520242+00:00", "type": "pullrequest_comment", "id": 48254127}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48157029.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48157029"}}, "parent": {"id": 48156908, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48156908.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48156908"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "For what it's worth, this whole macro is being thrown out once I wrap up my [other branch that improves the plugin registration procedure](#!/ignitionrobotics/ign-common/src/996885a09e93833b2cdd1f55e39553dcbc9d8ed1/include/ignition/common/detail/RegisterPlugin.hh?at=BetterPluginRegistration&fileviewer=file-view-default).", "markup": "markdown", "html": "<p>For what it's worth, this whole macro is being thrown out once I wrap up my <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/src/996885a09e93833b2cdd1f55e39553dcbc9d8ed1/include/ignition/common/detail/RegisterPlugin.hh?at=BetterPluginRegistration&amp;fileviewer=file-view-default\" rel=\"nofollow\">other branch that improves the plugin registration procedure</a>.</p>", "type": "rendered"}, "created_on": "2017-10-27T00:34:17.225275+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-27T00:34:17.227778+00:00", "type": "pullrequest_comment", "id": 48157029}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48156908.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48156908"}}, "parent": {"id": 48156813, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48156813.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48156813"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Ah, sneaky. Looks fine as is to me.", "markup": "markdown", "html": "<p>Ah, sneaky. Looks fine as is to me.</p>", "type": "rendered"}, "created_on": "2017-10-27T00:30:07.759409+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-10-27T00:30:07.762006+00:00", "type": "pullrequest_comment", "id": 48156908}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48156813.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48156813"}}, "parent": {"id": 48156398, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48156398.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48156398"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "If `_pluginId == visitedPlugins.size()`, then the return value will be `0` because on the next line we return `visitedPlugins.size() - _pluginId`. It wouldn't hurt to change to `>=`, but it also wouldn't affect anything.", "markup": "markdown", "html": "<p>If <code>_pluginId == visitedPlugins.size()</code>, then the return value will be <code>0</code> because on the next line we return <code>visitedPlugins.size() - _pluginId</code>. It wouldn't hurt to change to <code>&gt;=</code>, but it also wouldn't affect anything.</p>", "type": "rendered"}, "created_on": "2017-10-27T00:27:09.676917+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-27T00:27:09.679755+00:00", "type": "pullrequest_comment", "id": 48156813}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48156398.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48156398"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Should this be `>=`? The `ADD_PLUGIN` macro checks `_pluginId == visitedPlugins.size() - 1`, so it seems like there's no case checking `_pluginId == visitiedPlugins.size()`", "markup": "markdown", "html": "<p>Should this be <code>&gt;=</code>? The <code>ADD_PLUGIN</code> macro checks <code>_pluginId == visitedPlugins.size() - 1</code>, so it seems like there's no case checking <code>_pluginId == visitiedPlugins.size()</code></p>", "type": "rendered"}, "created_on": "2017-10-27T00:13:45.374085+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-10-27T00:13:45.376418+00:00", "type": "pullrequest_comment", "id": 48156398}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/48156227.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-48156227"}}, "parent": {"id": 46722394, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46722394.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46722394"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Well, this turned into a long thread. I'm not sure what the resolution is. Is `Get` being kept or removed? Otherwise ready to approve either way.", "markup": "markdown", "html": "<p>Well, this turned into a long thread. I'm not sure what the resolution is. Is <code>Get</code> being kept or removed? Otherwise ready to approve either way.</p>", "type": "rendered"}, "created_on": "2017-10-27T00:09:58.595685+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-10-27T00:09:58.598678+00:00", "type": "pullrequest_comment", "id": 48156227}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47793200.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47793200"}}, "parent": {"id": 47788401, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47788401.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47788401"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Another thing to consider in this specific case is conflict between the template parameter and function name. We can't use `Interface` as the name of the template parameter if it is also the function name. So we'd end up with an API that looks like\n\n    public: template <typename T>\n    T* Interface();\n\nwhich I think is much less clear and expressive than the current proposal\n\n    public: template <typename Interface>\n    Interface* GetInterface();\n\nWhen the name of the template parameter is something unexpressive like `T`, I think it becomes much less clear what kinds of types the function is intended to be used for. We could mangle the template parameter name into something like `IFace`, but in some ways I think that might be even worse than `T`.\n\nIf we're not willing to make an exception to the style for this function, then I'll remove the `Get`, but I believe it will be more harmful than beneficial in the long run.", "markup": "markdown", "html": "<p>Another thing to consider in this specific case is conflict between the template parameter and function name. We can't use <code>Interface</code> as the name of the template parameter if it is also the function name. So we'd end up with an API that looks like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span><span class=\"o\">:</span> <span class=\"n\">template</span> <span class=\"o\">&lt;</span><span class=\"n\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">Interface</span><span class=\"o\">();</span>\n</pre></div>\n\n\n<p>which I think is much less clear and expressive than the current proposal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span><span class=\"o\">:</span> <span class=\"n\">template</span> <span class=\"o\">&lt;</span><span class=\"n\">typename</span> <span class=\"n\">Interface</span><span class=\"o\">&gt;</span>\n<span class=\"n\">Interface</span><span class=\"o\">*</span> <span class=\"n\">GetInterface</span><span class=\"o\">();</span>\n</pre></div>\n\n\n<p>When the name of the template parameter is something unexpressive like <code>T</code>, I think it becomes much less clear what kinds of types the function is intended to be used for. We could mangle the template parameter name into something like <code>IFace</code>, but in some ways I think that might be even worse than <code>T</code>.</p>\n<p>If we're not willing to make an exception to the style for this function, then I'll remove the <code>Get</code>, but I believe it will be more harmful than beneficial in the long run.</p>", "type": "rendered"}, "created_on": "2017-10-23T17:17:33.073239+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-23T17:24:19.028305+00:00", "type": "pullrequest_comment", "id": 47793200}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47789403.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47789403"}}, "parent": {"id": 47786960, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47786960.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47786960"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I forgot this variable was in function scope, which changes [the meaning of `static`](https://stackoverflow.com/a/178259). But yeah, as long as there aren't important side effects caused by construction and destruction, `const` should be preferred over `static`, and I believe the compiler can optimize away the cost of repeated construction (as long as it can detect that there are no side effects, which should be the case for `std::string`).", "markup": "markdown", "html": "<p>I forgot this variable was in function scope, which changes <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/a/178259\" rel=\"nofollow\">the meaning of <code>static</code></a>. But yeah, as long as there aren't important side effects caused by construction and destruction, <code>const</code> should be preferred over <code>static</code>, and I believe the compiler can optimize away the cost of repeated construction (as long as it can detect that there are no side effects, which should be the case for <code>std::string</code>).</p>", "type": "rendered"}, "created_on": "2017-10-23T16:38:08.882909+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-23T16:38:08.885666+00:00", "type": "pullrequest_comment", "id": 47789403}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47788401.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47788401"}}, "parent": {"id": 46734903, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46734903.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46734903"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I'd prefer no significant changes our style. The amount of work to convert our existing code would be tremendous with little benefit. No style is perfect.", "markup": "markdown", "html": "<p>I'd prefer no significant changes our style. The amount of work to convert our existing code would be tremendous with little benefit. No style is perfect.</p>", "type": "rendered"}, "created_on": "2017-10-23T16:26:46.567794+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-23T16:26:46.570584+00:00", "type": "pullrequest_comment", "id": 47788401}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47787717.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47787717"}}, "parent": {"id": 46946810, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46946810.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46946810"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "There is significant momentum behind the lack of `Get`. For example, ign-math, ign-transport, ign-rendering, ign-sensors, ign-msgs, ign-gui, and gazebo would all have to be changed. That is not something we should undertake. Consistency across libraries is something we should maintain.", "markup": "markdown", "html": "<p>There is significant momentum behind the lack of <code>Get</code>. For example, ign-math, ign-transport, ign-rendering, ign-sensors, ign-msgs, ign-gui, and gazebo would all have to be changed. That is not something we should undertake. Consistency across libraries is something we should maintain.</p>", "type": "rendered"}, "created_on": "2017-10-23T16:21:47.345024+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-23T16:21:47.347676+00:00", "type": "pullrequest_comment", "id": 47787717}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47787072.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47787072"}}, "parent": {"id": 46950022, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46950022.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46950022"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Sounds good. Just wanted to make sure we are aware of it.", "markup": "markdown", "html": "<p>Sounds good. Just wanted to make sure we are aware of it.</p>", "type": "rendered"}, "created_on": "2017-10-23T16:17:36.792307+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-23T16:17:36.796117+00:00", "type": "pullrequest_comment", "id": 47787072}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47786960.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47786960"}}, "parent": {"id": 46952154, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46952154.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46952154"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "Thanks. I believe it's not quite redundant since `const` controls access and `static` also controls storage. However, I have learned that `const` should be preferred over `static` in cases like this: \n\nhttps://stackoverflow.com/questions/1315292/static-constant-versus-constant-in-a-function-that-is-called-repeatedly\n\nhttps://stackoverflow.com/questions/3730000/can-static-local-variables-cut-down-on-memory-allocation-time\n", "markup": "markdown", "html": "<p>Thanks. I believe it's not quite redundant since <code>const</code> controls access and <code>static</code> also controls storage. However, I have learned that <code>const</code> should be preferred over <code>static</code> in cases like this: </p>\n<p><a href=\"https://stackoverflow.com/questions/1315292/static-constant-versus-constant-in-a-function-that-is-called-repeatedly\" rel=\"nofollow\" class=\"ap-connect-link\">https://stackoverflow.com/questions/1315292/static-constant-versus-constant-in-a-function-that-is-called-repeatedly</a></p>\n<p><a href=\"https://stackoverflow.com/questions/3730000/can-static-local-variables-cut-down-on-memory-allocation-time\" rel=\"nofollow\" class=\"ap-connect-link\">https://stackoverflow.com/questions/3730000/can-static-local-variables-cut-down-on-memory-allocation-time</a></p>", "type": "rendered"}, "created_on": "2017-10-23T16:16:24.317302+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-23T16:16:24.319914+00:00", "type": "pullrequest_comment", "id": 47786960}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47786637.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47786637"}}, "parent": {"id": 47781918, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47781918.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47781918"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "I added tests for this function, but I think I didn't include `-1`. Whichever definition we choose, let's add a test expectation for it.", "markup": "markdown", "html": "<p>I added tests for this function, but I think I didn't include <code>-1</code>. Whichever definition we choose, let's add a test expectation for it.</p>", "type": "rendered"}, "created_on": "2017-10-23T16:13:18.917150+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-10-23T16:13:18.920700+00:00", "type": "pullrequest_comment", "id": 47786637}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/47786206.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-47786206"}}, "parent": {"id": 46953582, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/comments/46953582.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73/_/diff#comment-46953582"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}, "content": {"raw": "If we don't report a problem, will the user still be able to recover without a segfault/crash? ", "markup": "markdown", "html": "<p>If we don't report a problem, will the user still be able to recover without a segfault/crash? </p>", "type": "rendered"}, "created_on": "2017-10-23T16:08:55.785859+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2017-10-23T16:08:55.788492+00:00", "type": "pullrequest_comment", "id": 47786206}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/73.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/73"}}, "title": "Slimmed down the Plugin pull request (no more template specializations)"}}], "next": "data/repositories/ignitionrobotics/ign-common/pullrequests/73/activity_ctx=ooFXphnFz.json"}