{"pagelen": 50, "values": [{"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4b2c97556561", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/4b2c97556561.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/4b2c97556561"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T23:19:10.007406+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619753.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619753"}}, "parent": {"id": 42619679, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619679.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619679"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "If it doesn't have all four interfaces, then the remaining tests are more or less bound to fail because they depend on (most of) those four interfaces being available. That being said, we do assert the existence of each of those interfaces later before using them, so the assert isn't really necessary here.", "markup": "markdown", "html": "<p>If it doesn't have all four interfaces, then the remaining tests are more or less bound to fail because they depend on (most of) those four interfaces being available. That being said, we do assert the existence of each of those interfaces later before using them, so the assert isn't really necessary here.</p>", "type": "rendered"}, "created_on": "2017-08-10T23:17:50.481501+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-10T23:17:50.483757+00:00", "type": "pullrequest_comment", "id": 42619753}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619740.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619740"}}, "parent": {"id": 42619636, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619636.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619636"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Ooops. Thanks for the explanation", "markup": "markdown", "html": "<p>Ooops. Thanks for the explanation</p>", "type": "rendered"}, "created_on": "2017-08-10T23:17:32.654000+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-10T23:17:32.656431+00:00", "type": "pullrequest_comment", "id": 42619740}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619679.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619679"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Can this be `EXPECT_EQ` instead? I don't see where the test would crash if the size was not equal to 4.", "markup": "markdown", "html": "<p>Can this be <code>EXPECT_EQ</code> instead? I don't see where the test would crash if the size was not equal to 4.</p>", "type": "rendered"}, "created_on": "2017-08-10T23:15:41.421380+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-10T23:15:41.423638+00:00", "type": "pullrequest_comment", "id": 42619679}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619636.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619636"}}, "parent": {"id": 42619109, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619109.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619109"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I think that's a really great point, but it no longer applies here because now libraries are able to pass back multiple plugins. Comparing the result of `LoadLibrary` to an empty string assumed that the function would either return the name of the plugin that was loaded or it would return an empty string if no plugin was loaded. Since we now can load multiple plugins, the function returns a `std::unordered_set<std::string>` of plugin names, which will be empty if no plugins were loaded.", "markup": "markdown", "html": "<p>I think that's a really great point, but it no longer applies here because now libraries are able to pass back multiple plugins. Comparing the result of <code>LoadLibrary</code> to an empty string assumed that the function would either return the name of the plugin that was loaded or it would return an empty string if no plugin was loaded. Since we now can load multiple plugins, the function returns a <code>std::unordered_set&lt;std::string&gt;</code> of plugin names, which will be empty if no plugins were loaded.</p>", "type": "rendered"}, "created_on": "2017-08-10T23:14:33.718156+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-10T23:14:33.720642+00:00", "type": "pullrequest_comment", "id": 42619636}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "40158dcf81da", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/40158dcf81da.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/40158dcf81da"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T23:12:42.529208+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "13cc7bcdd0a7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/13cc7bcdd0a7.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/13cc7bcdd0a7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T23:11:15.223028+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619419.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619419"}}, "parent": {"id": 42618958, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618958.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618958"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Whoops, thanks; I looked right past those somehow. (Although some of them are new thanks to my last commit and my propensity for non-compliance with cpp-check)\n\nThe third complaint is really cramping my artistic spirit, but I'll make the change anyhow.\n\nFixed by 56a7e5f (hopefully)", "markup": "markdown", "html": "<p>Whoops, thanks; I looked right past those somehow. (Although some of them are new thanks to my last commit and my propensity for non-compliance with cpp-check)</p>\n<p>The third complaint is really cramping my artistic spirit, but I'll make the change anyhow.</p>\n<p>Fixed by <a href=\"#!/ignitionrobotics/ign-common/commits/56a7e5f\" rel=\"nofollow\" class=\"ap-connect-link\">56a7e5f</a> (hopefully)</p>", "type": "rendered"}, "created_on": "2017-08-10T23:07:48.516716+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-08-10T23:07:48.519006+00:00", "type": "pullrequest_comment", "id": 42619419}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "56a7e5fc92c6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/56a7e5fc92c6.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/56a7e5fc92c6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T23:07:00.535989+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619387.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619387"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "nitpick: `are being used` appears to be repeated.", "markup": "markdown", "html": "<p>nitpick: <code>are being used</code> appears to be repeated.</p>", "type": "rendered"}, "created_on": "2017-08-10T23:06:49.214493+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-10T23:06:49.217282+00:00", "type": "pullrequest_comment", "id": 42619387}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42619109.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42619109"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "While `empty()` is much faster than constructing an empty string object, the `EXPECT_EQ` variant will print the output of `pm.LoadLibrary([...])` on failure which may be helpful when debugging.", "markup": "markdown", "html": "<p>While <code>empty()</code> is much faster than constructing an empty string object, the <code>EXPECT_EQ</code> variant will print the output of <code>pm.LoadLibrary([...])</code> on failure which may be helpful when debugging.</p>", "type": "rendered"}, "created_on": "2017-08-10T22:59:52.768980+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-10T22:59:52.772053+00:00", "type": "pullrequest_comment", "id": 42619109}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618977.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618977"}}, "parent": {"id": 42618174, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618174.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618174"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Fixed in 7019b91", "markup": "markdown", "html": "<p>Fixed in <a href=\"#!/ignitionrobotics/ign-common/commits/7019b91\" rel=\"nofollow\" class=\"ap-connect-link\">7019b91</a></p>", "type": "rendered"}, "created_on": "2017-08-10T22:56:38.103964+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-10T22:56:38.106358+00:00", "type": "pullrequest_comment", "id": 42618977}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7019b917bddc", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/7019b917bddc.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/7019b917bddc"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T22:56:15.891792+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618958.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618958"}}, "parent": {"id": 42618435, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618435.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618435"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Can these ones be fixed?\n\n```\n/src/StringUtils.cc:19:  Found C++ system header after a header this file implements. Should be: c system, c++ system, other, StringUtils.h .  [build/include_order] [4]\n./src/PluginLoader.cc:74:  More than one command on the same line  [whitespace/newline] [4]\n./src/PluginLoader.cc:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/detail/SuppressWarning.hh:97:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n[...]\n./include/ignition/common/detail/SpecializedPlugin.hh:279:  Missing spaces around >>  [whitespace/operators] [3]\n./include/ignition/common/detail/PluginLoader.hh:23:  Found C++ system header after a header this file implements. Should be: c system, c++ system, other, PluginLoader.h .  [build/include_order] [4]\n[...]\n./include/ignition/common/detail/Plugin.hh:23:  Found C++ system header after a header this file implements. Should be: c system, c++ system, other, Plugin.h .  [build/include_order] [4]\n```", "markup": "markdown", "html": "<p>Can these ones be fixed?</p>\n<div class=\"codehilite\"><pre><span></span>/src/StringUtils.cc:19:  Found C++ system header after a header this file implements. Should be: c system, c++ system, other, StringUtils.h .  [build/include_order] [4]\n./src/PluginLoader.cc:74:  More than one command on the same line  [whitespace/newline] [4]\n./src/PluginLoader.cc:250:  Lines should be &lt;= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/detail/SuppressWarning.hh:97:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n[...]\n./include/ignition/common/detail/SpecializedPlugin.hh:279:  Missing spaces around &gt;&gt;  [whitespace/operators] [3]\n./include/ignition/common/detail/PluginLoader.hh:23:  Found C++ system header after a header this file implements. Should be: c system, c++ system, other, PluginLoader.h .  [build/include_order] [4]\n[...]\n./include/ignition/common/detail/Plugin.hh:23:  Found C++ system header after a header this file implements. Should be: c system, c++ system, other, Plugin.h .  [build/include_order] [4]\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-10T22:56:02.470702+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-08-10T22:56:02.472803+00:00", "type": "pullrequest_comment", "id": 42618958}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618880.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618880"}}, "parent": {"id": 42618613, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618613.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618613"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Anything to reduce the PR size ;-)", "markup": "markdown", "html": "<p>Anything to reduce the PR size ;-)</p>", "type": "rendered"}, "created_on": "2017-08-10T22:53:32.335798+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-10T22:53:32.338071+00:00", "type": "pullrequest_comment", "id": 42618880}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618867.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618867"}}, "parent": {"id": 42617983, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42617983.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42617983"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Fixed in 0b720af", "markup": "markdown", "html": "<p>Fixed in <a href=\"#!/ignitionrobotics/ign-common/commits/0b720af\" rel=\"nofollow\" class=\"ap-connect-link\">0b720af</a></p>", "type": "rendered"}, "created_on": "2017-08-10T22:53:14.644441+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-10T22:53:14.647437+00:00", "type": "pullrequest_comment", "id": 42618867}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0b720aff9ff6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/0b720aff9ff6.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/0b720aff9ff6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T22:52:12.465060+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618613.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618613"}}, "parent": {"id": 42618174, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618174.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618174"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I can fix them in this one to save you a PR. But if you consider that bad practice, I'll restrain myself.", "markup": "markdown", "html": "<p>I can fix them in this one to save you a PR. But if you consider that bad practice, I'll restrain myself.</p>", "type": "rendered"}, "created_on": "2017-08-10T22:47:07.759093+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-10T22:47:07.762183+00:00", "type": "pullrequest_comment", "id": 42618613}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618435.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618435"}}, "parent": {"id": 42617628, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42617628.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42617628"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "A \"few\" complaints...\n\nAs of e09ce45 I've fixed all the ones that are fixable. Some of the complaints are factually incorrect or a no-win scenario:\n\n    ./include/ignition/common/detail/TemplateHelpers.hh:38:  You don't need a ; after a }  [readability/braces] [4]\n\nThis is incorrect because that line is defining a struct which requires an ending semicolon (although I've never really understood why this is the case, except for it being an arbitrary requirement made decades ago).\n\n```\n./include/ignition/common/detail/PluginPtr.hh:130:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:131:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:132:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:133:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:134:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:135:  Extra space after ( in function call  [whitespace/parens] [4]\n```\n\nIf I remove those spaces, then it complains about not having any space before and after the operators. There is no way for cpp-check to not complain about those lines of code, except maybe to do something like\n\n```\nDETAIL_IGN_COMMON_PLUGINPTR_IMPLEMENT_OPERATOR(\n  ==\n)\n```\n\nwhich I think would be beyond hideous.\n", "markup": "markdown", "html": "<p>A \"few\" complaints...</p>\n<p>As of <a href=\"#!/ignitionrobotics/ign-common/commits/e09ce45\" rel=\"nofollow\" class=\"ap-connect-link\">e09ce45</a> I've fixed all the ones that are fixable. Some of the complaints are factually incorrect or a no-win scenario:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">./</span><span class=\"nt\">include</span><span class=\"o\">/</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">common</span><span class=\"o\">/</span><span class=\"nt\">detail</span><span class=\"o\">/</span><span class=\"nt\">TemplateHelpers</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"p\">:</span><span class=\"nd\">38</span><span class=\"o\">:</span>  <span class=\"nt\">You</span> <span class=\"nt\">don</span><span class=\"err\">&#39;</span><span class=\"nt\">t</span> <span class=\"nt\">need</span> <span class=\"nt\">a</span> <span class=\"o\">;</span> <span class=\"nt\">after</span> <span class=\"nt\">a</span> <span class=\"err\">}</span>  <span class=\"cp\">[</span><span class=\"nx\">readability</span><span class=\"p\">/</span><span class=\"nx\">braces</span><span class=\"cp\">]</span> <span class=\"cp\">[</span><span class=\"mi\">4</span><span class=\"cp\">]</span>\n</pre></div>\n\n\n<p>This is incorrect because that line is defining a struct which requires an ending semicolon (although I've never really understood why this is the case, except for it being an arbitrary requirement made decades ago).</p>\n<div class=\"codehilite\"><pre><span></span>./include/ignition/common/detail/PluginPtr.hh:130:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:131:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:132:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:133:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:134:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:135:  Extra space after ( in function call  [whitespace/parens] [4]\n</pre></div>\n\n\n<p>If I remove those spaces, then it complains about not having any space before and after the operators. There is no way for cpp-check to not complain about those lines of code, except maybe to do something like</p>\n<div class=\"codehilite\"><pre><span></span>DETAIL_IGN_COMMON_PLUGINPTR_IMPLEMENT_OPERATOR(\n  ==\n)\n</pre></div>\n\n\n<p>which I think would be beyond hideous.</p>", "type": "rendered"}, "created_on": "2017-08-10T22:42:44.417574+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-08-10T22:42:44.419915+00:00", "type": "pullrequest_comment", "id": 42618435}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e09ce45a7cc1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/e09ce45a7cc1.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/e09ce45a7cc1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T22:37:13.624927+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42618174.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42618174"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "See [this comment](#!/ignitionrobotics/ign-common/pull-requests/45/port-sdf-filesystem-to-ignition-common/activity#comment-42150239) from @chapulina about putting the macro between the return type and the function name to avoid a cppcheck warning. Other functions in this file have the same issue, but I'll fix them in a different pull request.", "markup": "markdown", "html": "<p>See <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/45/port-sdf-filesystem-to-ignition-common/activity#comment-42150239\" rel=\"nofollow\">this comment</a> from @chapulina about putting the macro between the return type and the function name to avoid a cppcheck warning. Other functions in this file have the same issue, but I'll fix them in a different pull request.</p>", "type": "rendered"}, "created_on": "2017-08-10T22:35:26.457326+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-10T22:35:26.466039+00:00", "type": "pullrequest_comment", "id": 42618174}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42617983.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42617983"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Is this supposed to be DETAIL_IGN_COMMON_WARN_SUP_HELPER**_2**?", "markup": "markdown", "html": "<p>Is this supposed to be DETAIL_IGN_COMMON_WARN_SUP_HELPER<strong>_2</strong>?</p>", "type": "rendered"}, "created_on": "2017-08-10T22:30:14.824534+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-10T22:30:14.834046+00:00", "type": "pullrequest_comment", "id": 42617983}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42617628.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42617628"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "There are a few cppcheck complaints\n\n```\n./src/StringUtils.cc:19:  Found C++ system header after a header this file implements. Should be: c system, c++ system, other, StringUtils.h .  [build/include_order] [4]\n./src/PluginLoader.cc:74:  More than one command on the same line  [whitespace/newline] [4]\n./src/PluginLoader.cc:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/SuppressWarning.hh:48:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/SuppressWarning.hh:48:  Extra space before )  [whitespace/parens] [2]\n./include/ignition/common/SuppressWarning.hh:49:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/SuppressWarning.hh:55:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/SuppressWarning.hh:55:  Extra space before )  [whitespace/parens] [2]\n./include/ignition/common/SuppressWarning.hh:56:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/SuppressWarning.hh:73:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n./include/ignition/common/detail/SuppressWarning.hh:42:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/SuppressWarning.hh:42:  Extra space before )  [whitespace/parens] [2]\n./include/ignition/common/detail/SuppressWarning.hh:61:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/SuppressWarning.hh:61:  Extra space before )  [whitespace/parens] [2]\n./include/ignition/common/detail/SuppressWarning.hh:80:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/SuppressWarning.hh:80:  Extra space before )  [whitespace/parens] [2]\n./include/ignition/common/detail/SuppressWarning.hh:94:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/SuppressWarning.hh:97:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n./include/ignition/common/detail/SuppressWarning.hh:100:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/SuppressWarning.hh:100:  Extra space before )  [whitespace/parens] [2]\n./include/ignition/common/detail/SuppressWarning.hh:126:  At least two spaces is best between code and comments  [whitespace/comments] [2]\n./include/ignition/common/detail/TemplateHelpers.hh:38:  You don't need a ; after a }  [readability/braces] [4]\n./include/ignition/common/detail/SpecializedPlugin.hh:58:  Missing space before ( in if(  [whitespace/parens] [5]\n./include/ignition/common/detail/SpecializedPlugin.hh:71:  Missing space before ( in if(  [whitespace/parens] [5]\n./include/ignition/common/detail/SpecializedPlugin.hh:220:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/detail/SpecializedPlugin.hh:221:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/detail/SpecializedPlugin.hh:222:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/detail/SpecializedPlugin.hh:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/detail/SpecializedPlugin.hh:238:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n./include/ignition/common/detail/SpecializedPlugin.hh:267:  Missing spaces around >>  [whitespace/operators] [3]\n./include/ignition/common/detail/PluginLoader.hh:30:  Add #include <string> for string  [build/include_what_you_use] [4]\n./include/ignition/common/detail/PluginPtr.hh:130:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:131:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:132:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:133:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:134:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/PluginPtr.hh:135:  Extra space after ( in function call  [whitespace/parens] [4]\n./include/ignition/common/detail/Plugin.hh:81:  Missing space before ( in if(  [whitespace/parens] [5]\n./include/ignition/common/detail/Plugin.hh:93:  Missing space before ( in if(  [whitespace/parens] [5]\n./include/ignition/common/detail/Plugin.hh:90:  Add #include <string> for string  [build/include_what_you_use] [4]\n./include/ignition/common/Plugin.hh:135:  Add #include <string> for string  [build/include_what_you_use] [4]\n./test/integration/plugin.cc:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]\n```", "markup": "markdown", "html": "<p>There are a few cppcheck complaints</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">StringUtils</span><span class=\"p\">.</span><span class=\"nl\">cc</span><span class=\"p\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span>  <span class=\"n\">Found</span> <span class=\"n\">C</span><span class=\"o\">++</span> <span class=\"n\">system</span> <span class=\"n\">header</span> <span class=\"n\">after</span> <span class=\"n\">a</span> <span class=\"n\">header</span> <span class=\"n\">this</span> <span class=\"n\">file</span> <span class=\"n\">implements</span><span class=\"p\">.</span> <span class=\"n\">Should</span> <span class=\"nl\">be</span><span class=\"p\">:</span> <span class=\"n\">c</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">++</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">StringUtils</span><span class=\"p\">.</span><span class=\"n\">h</span> <span class=\"p\">.</span>  <span class=\"p\">[</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">include_order</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">PluginLoader</span><span class=\"p\">.</span><span class=\"nl\">cc</span><span class=\"p\">:</span><span class=\"mi\">74</span><span class=\"o\">:</span>  <span class=\"n\">More</span> <span class=\"n\">than</span> <span class=\"n\">one</span> <span class=\"n\">command</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"nf\">line</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">newline</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">PluginLoader</span><span class=\"p\">.</span><span class=\"nl\">cc</span><span class=\"p\">:</span><span class=\"mi\">250</span><span class=\"o\">:</span>  <span class=\"n\">Lines</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"n\">characters</span> <span class=\"kr\">long</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">line_length</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">)</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">49</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">)</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">73</span><span class=\"o\">:</span>  <span class=\"n\">At</span> <span class=\"n\">least</span> <span class=\"n\">two</span> <span class=\"n\">spaces</span> <span class=\"n\">is</span> <span class=\"n\">best</span> <span class=\"n\">between</span> <span class=\"n\">code</span> <span class=\"o\">and</span> <span class=\"n\">comments</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">comments</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">)</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">61</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">61</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">)</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">)</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">94</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">97</span><span class=\"o\">:</span>  <span class=\"n\">At</span> <span class=\"n\">least</span> <span class=\"n\">two</span> <span class=\"n\">spaces</span> <span class=\"n\">is</span> <span class=\"n\">best</span> <span class=\"n\">between</span> <span class=\"n\">code</span> <span class=\"o\">and</span> <span class=\"n\">comments</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">comments</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">)</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SuppressWarning</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">126</span><span class=\"o\">:</span>  <span class=\"n\">At</span> <span class=\"n\">least</span> <span class=\"n\">two</span> <span class=\"n\">spaces</span> <span class=\"n\">is</span> <span class=\"n\">best</span> <span class=\"n\">between</span> <span class=\"n\">code</span> <span class=\"o\">and</span> <span class=\"n\">comments</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">comments</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">TemplateHelpers</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span>  <span class=\"n\">You</span> <span class=\"n\">don</span><span class=\"err\">&#39;</span><span class=\"n\">t</span> <span class=\"n\">need</span> <span class=\"n\">a</span> <span class=\"p\">;</span> <span class=\"n\">after</span> <span class=\"n\">a</span> <span class=\"p\">}</span>  <span class=\"p\">[</span><span class=\"n\">readability</span><span class=\"o\">/</span><span class=\"n\">braces</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span>  <span class=\"n\">Missing</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"k\">if</span><span class=\"p\">(</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">71</span><span class=\"o\">:</span>  <span class=\"n\">Missing</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"k\">if</span><span class=\"p\">(</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">220</span><span class=\"o\">:</span>  <span class=\"n\">Lines</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"n\">characters</span> <span class=\"kr\">long</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">line_length</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">221</span><span class=\"o\">:</span>  <span class=\"n\">Lines</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"n\">characters</span> <span class=\"kr\">long</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">line_length</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">222</span><span class=\"o\">:</span>  <span class=\"n\">Lines</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"n\">characters</span> <span class=\"kr\">long</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">line_length</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">237</span><span class=\"o\">:</span>  <span class=\"n\">Lines</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"n\">characters</span> <span class=\"kr\">long</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">line_length</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">238</span><span class=\"o\">:</span>  <span class=\"n\">Lines</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"n\">characters</span> <span class=\"kr\">long</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">line_length</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">SpecializedPlugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">267</span><span class=\"o\">:</span>  <span class=\"n\">Missing</span> <span class=\"n\">spaces</span> <span class=\"n\">around</span> <span class=\"o\">&gt;&gt;</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">operators</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">PluginLoader</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span>  <span class=\"n\">Add</span> <span class=\"err\">#</span><span class=\"n\">include</span> <span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"kr\">string</span>  <span class=\"p\">[</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">include_what_you_use</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">PluginPtr</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">130</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">PluginPtr</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">131</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">PluginPtr</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">132</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">PluginPtr</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">133</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">PluginPtr</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">134</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">PluginPtr</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">135</span><span class=\"o\">:</span>  <span class=\"n\">Extra</span> <span class=\"n\">space</span> <span class=\"n\">after</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"n\">function</span> <span class=\"n\">call</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">Plugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">81</span><span class=\"o\">:</span>  <span class=\"n\">Missing</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"k\">if</span><span class=\"p\">(</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">Plugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">93</span><span class=\"o\">:</span>  <span class=\"n\">Missing</span> <span class=\"n\">space</span> <span class=\"n\">before</span> <span class=\"p\">(</span> <span class=\"n\">in</span> <span class=\"k\">if</span><span class=\"p\">(</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">parens</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">detail</span><span class=\"o\">/</span><span class=\"n\">Plugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">90</span><span class=\"o\">:</span>  <span class=\"n\">Add</span> <span class=\"err\">#</span><span class=\"n\">include</span> <span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"kr\">string</span>  <span class=\"p\">[</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">include_what_you_use</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">Plugin</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">135</span><span class=\"o\">:</span>  <span class=\"n\">Add</span> <span class=\"err\">#</span><span class=\"n\">include</span> <span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span> <span class=\"k\">for</span> <span class=\"kr\">string</span>  <span class=\"p\">[</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">include_what_you_use</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">integration</span><span class=\"o\">/</span><span class=\"n\">plugin</span><span class=\"p\">.</span><span class=\"nl\">cc</span><span class=\"p\">:</span><span class=\"mi\">123</span><span class=\"o\">:</span>  <span class=\"n\">Lines</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">80</span> <span class=\"n\">characters</span> <span class=\"kr\">long</span>  <span class=\"p\">[</span><span class=\"n\">whitespace</span><span class=\"o\">/</span><span class=\"n\">line_length</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-10T22:20:27.391252+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-08-10T22:20:27.393712+00:00", "type": "pullrequest_comment", "id": 42617628}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1f4abf0bb0bf", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/1f4abf0bb0bf.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/1f4abf0bb0bf"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T17:40:20.383924+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~\r\n\r\n* This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1f4abf0bb0bf", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/1f4abf0bb0bf.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/1f4abf0bb0bf"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-10T17:39:56.720355+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "619d95a26559", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/619d95a26559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/619d95a26559"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1f4abf0bb0bf", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/1f4abf0bb0bf.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/1f4abf0bb0bf"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-08T18:53:53.672897+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "727286640fa2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/727286640fa2.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/727286640fa2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2a4088d20da", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/c2a4088d20da.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/c2a4088d20da"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-07T17:33:49.969555+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<Interface>` objects, allowing a user to simply query the `Plugin` for the specific interfaces that they want, and then discarding the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "727286640fa2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/727286640fa2.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/727286640fa2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2a4088d20da", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/c2a4088d20da.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/c2a4088d20da"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-07T17:32:42.779380+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. `PluginPtr` behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<Interface>` objects, allowing a user to simply query the `Plugin` for the specific interfaces that they want, and then discarding the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "727286640fa2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/727286640fa2.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/727286640fa2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2a4088d20da", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/c2a4088d20da.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/c2a4088d20da"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-07T17:31:23.159291+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. `PluginPtr` behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<Interface>` objects, allowing a user to simply query the `Plugin` for the specific interfaces that they want, and then discarding the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "727286640fa2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/727286640fa2.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/727286640fa2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2a4088d20da", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/c2a4088d20da.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/c2a4088d20da"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-07T17:31:23.110386+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}]}