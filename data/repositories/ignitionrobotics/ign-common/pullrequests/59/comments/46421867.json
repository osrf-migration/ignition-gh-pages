{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46421867.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46421867"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I really like the improvements to the plugin system. There's a lot of great stuff, C++ warning suppression cross platform, supporting multiple plugins per library, supporting multiple interfaces per plugin, fixing bugs related to plugin interface casting when using multiple inheritance, etc.\n\nI'm having a lot of trouble understanding it all when combined with the addition of `PluginPtr` and `SpecializedPluginPtr`. After a few days  worth of reviewing this PR I'm still not confident I understand everything.  Of course you don't have to, but would you be willing to make the `PluginPtr` and `SpecializedPluginPtr` a separate PR?If that sounds OK I removed them in the branch `PluginPtrSemantics_minus_ctrp`. It removes a net of 1700 lines of code.\n\nIt seems like `SpecializedPluginPtr` has a very specific task: fast access to interfaces (after a one-time construction cost) using templates without using RTTI. However the code changes it needs seem to go very deep. Is is it possible to implement `SpecializedPluginPtr` in a way that it is more self contained?\n\nFor example, `SpecializedPlutinPtr` uses the map inside the `Plugin` class implementation, which means `Plugin` implementation is aware of it in that it has code to avoid invalidating map keys. How about `SpecializedPluginPtr` using iterators to a map that it owns instead?\n\nAnother example is`SpecializedPluginPtr` inherits from `Plugin`, but it really shadows those methods and uses some template magic to switch between `SpecializedPlugin<I>` and `Plugin` and . How about switch between `std::shared_ptr<Plugin>` and `SpecializedPluginPtr *`? If this is possible it means a `SpecializedPluginPtr`could be created from just a shared pointer.", "markup": "markdown", "html": "<p>I really like the improvements to the plugin system. There's a lot of great stuff, C++ warning suppression cross platform, supporting multiple plugins per library, supporting multiple interfaces per plugin, fixing bugs related to plugin interface casting when using multiple inheritance, etc.</p>\n<p>I'm having a lot of trouble understanding it all when combined with the addition of <code>PluginPtr</code> and <code>SpecializedPluginPtr</code>. After a few days  worth of reviewing this PR I'm still not confident I understand everything.  Of course you don't have to, but would you be willing to make the <code>PluginPtr</code> and <code>SpecializedPluginPtr</code> a separate PR?If that sounds OK I removed them in the branch <code>PluginPtrSemantics_minus_ctrp</code>. It removes a net of 1700 lines of code.</p>\n<p>It seems like <code>SpecializedPluginPtr</code> has a very specific task: fast access to interfaces (after a one-time construction cost) using templates without using RTTI. However the code changes it needs seem to go very deep. Is is it possible to implement <code>SpecializedPluginPtr</code> in a way that it is more self contained?</p>\n<p>For example, <code>SpecializedPlutinPtr</code> uses the map inside the <code>Plugin</code> class implementation, which means <code>Plugin</code> implementation is aware of it in that it has code to avoid invalidating map keys. How about <code>SpecializedPluginPtr</code> using iterators to a map that it owns instead?</p>\n<p>Another example is<code>SpecializedPluginPtr</code> inherits from <code>Plugin</code>, but it really shadows those methods and uses some template magic to switch between <code>SpecializedPlugin&lt;I&gt;</code> and <code>Plugin</code> and . How about switch between <code>std::shared_ptr&lt;Plugin&gt;</code> and <code>SpecializedPluginPtr *</code>? If this is possible it means a <code>SpecializedPluginPtr</code>could be created from just a shared pointer.</p>", "type": "rendered"}, "created_on": "2017-10-04T16:20:26.197219+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-10-04T16:20:26.200295+00:00", "type": "pullrequest_comment", "id": 46421867}