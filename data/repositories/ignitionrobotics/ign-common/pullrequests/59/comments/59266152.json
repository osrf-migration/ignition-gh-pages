{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/59266152.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-common/diff/ignitionrobotics/ign-common:606f9e667b3e..5361c388fb66?path=include%2Fignition%2Fcommon%2FPluginPtr.hh"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-59266152"}}, "parent": {"id": 59264425, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/59264425.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-59264425"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "C++ has an idiosyncrasy where it refuses to consider a templated constructor to be a \"copy constructor\" and will create a default copy constructor (or implicitly delete the copy constructor), even if a templated constructor would make a perfectly suitable copy constructor.\n\nAs a consequence, if `OtherPluginType` is equivalent to `PluginType`, then this templated constructor will not be considered at all during overload resolution, because the compiler will only be willing to use the copy constructor in that scenario. Therefore, if we throw away our custom definition of the copy constructor, then it would use the default copy constructor in that scenario, which would result in incorrect behavior.", "markup": "markdown", "html": "<p>C++ has an idiosyncrasy where it refuses to consider a templated constructor to be a \"copy constructor\" and will create a default copy constructor (or implicitly delete the copy constructor), even if a templated constructor would make a perfectly suitable copy constructor.</p>\n<p>As a consequence, if <code>OtherPluginType</code> is equivalent to <code>PluginType</code>, then this templated constructor will not be considered at all during overload resolution, because the compiler will only be willing to use the copy constructor in that scenario. Therefore, if we throw away our custom definition of the copy constructor, then it would use the default copy constructor in that scenario, which would result in incorrect behavior.</p>", "type": "rendered"}, "created_on": "2018-03-20T00:14:48.774480+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/common/PluginPtr.hh"}, "updated_on": "2018-03-20T00:14:48.777971+00:00", "type": "pullrequest_comment", "id": 59266152}