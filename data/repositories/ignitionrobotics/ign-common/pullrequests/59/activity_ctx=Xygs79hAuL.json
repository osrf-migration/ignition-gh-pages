{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46546499.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46546499"}}, "parent": {"id": 46540950, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46540950.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46540950"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I find it useful when an output parameter that is passed by reference to a function has a `param[out]`\n\nI would be fine with skipping `return` and `param[in]` if we still had `param[out]`", "markup": "markdown", "html": "<p>I find it useful when an output parameter that is passed by reference to a function has a <code>param[out]</code></p>\n<p>I would be fine with skipping <code>return</code> and <code>param[in]</code> if we still had <code>param[out]</code></p>", "type": "rendered"}, "created_on": "2017-10-05T21:45:59.278037+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-10-05T21:45:59.283053+00:00", "type": "pullrequest_comment", "id": 46546499}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46541282.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46541282"}}, "parent": {"id": 46254021, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46254021.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46254021"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Sorry for missing these comments. I feel like the function might be useful at some point, but I'm struggling to come up with a concrete example off the top of my head, so I guess I can't make a strong case against removing it.", "markup": "markdown", "html": "<p>Sorry for missing these comments. I feel like the function might be useful at some point, but I'm struggling to come up with a concrete example off the top of my head, so I guess I can't make a strong case against removing it.</p>", "type": "rendered"}, "created_on": "2017-10-05T20:28:46.092799+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-05T20:28:46.096155+00:00", "type": "pullrequest_comment", "id": 46541282}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46540950.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46540950"}}, "parent": {"id": 46262760, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46262760.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46262760"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I wanted to try migrating away from using the `param` and `return` fields, because (to be perfectly frank) I often find them to be useless clutter. Usually they just say the name of the argument with a few extra words. I personally prefer the documentation to be a fully fleshed description of the function or class.\n\nI can add `param` and `return` fields if people feel strongly about having them, but I personally don't believe it would add any value, and it would just add more clutter to the header.", "markup": "markdown", "html": "<p>I wanted to try migrating away from using the <code>param</code> and <code>return</code> fields, because (to be perfectly frank) I often find them to be useless clutter. Usually they just say the name of the argument with a few extra words. I personally prefer the documentation to be a fully fleshed description of the function or class.</p>\n<p>I can add <code>param</code> and <code>return</code> fields if people feel strongly about having them, but I personally don't believe it would add any value, and it would just add more clutter to the header.</p>", "type": "rendered"}, "created_on": "2017-10-05T20:24:26.043603+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-05T20:24:26.046739+00:00", "type": "pullrequest_comment", "id": 46540950}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46540778.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46540778"}}, "parent": {"id": 46540746, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46540746.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46540746"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Also, implementations of macros are being put into the `detail` subdirectory, for similar reasons.", "markup": "markdown", "html": "<p>Also, implementations of macros are being put into the <code>detail</code> subdirectory, for similar reasons.</p>", "type": "rendered"}, "created_on": "2017-10-05T20:21:44.059489+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-05T20:21:44.062112+00:00", "type": "pullrequest_comment", "id": 46540778}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46540746.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46540746"}}, "parent": {"id": 46263110, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46263110.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46263110"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "(Sorry for missing this comment, I never got a notification on it)\n\nThe headers in the `detail` subdirectory contain implementations of the templates. The sizes of the template implementations are pretty substantial, and a user who goes to the header in order to look over the API would likely be overwhelmed by the implementations and have a hard time finding the API information that they actually care about. Tucking away the implementations in `detail/` allows us to provide a clean and concise user-facing API header which isn't bogged down by the implementation details.", "markup": "markdown", "html": "<p>(Sorry for missing this comment, I never got a notification on it)</p>\n<p>The headers in the <code>detail</code> subdirectory contain implementations of the templates. The sizes of the template implementations are pretty substantial, and a user who goes to the header in order to look over the API would likely be overwhelmed by the implementations and have a hard time finding the API information that they actually care about. Tucking away the implementations in <code>detail/</code> allows us to provide a clean and concise user-facing API header which isn't bogged down by the implementation details.</p>", "type": "rendered"}, "created_on": "2017-10-05T20:21:12.130528+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-05T20:21:12.132871+00:00", "type": "pullrequest_comment", "id": 46540746}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46422243.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46422243"}}, "parent": {"id": 46421867, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46421867.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46421867"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "@mxgrey I made pull request #71 from that branch to this one. If you're willing to split this PR, would you mind reviewing the changes?", "markup": "markdown", "html": "<p>@mxgrey I made <a href=\"#!/ignitionrobotics/ign-common/pull-requests/71/pluginptrsemantics-minus-crtp-and-sfinae\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #71</a> from that branch to this one. If you're willing to split this PR, would you mind reviewing the changes?</p>", "type": "rendered"}, "created_on": "2017-10-04T16:25:09.966657+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-10-04T16:25:32.998108+00:00", "type": "pullrequest_comment", "id": 46422243}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46421867.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46421867"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I really like the improvements to the plugin system. There's a lot of great stuff, C++ warning suppression cross platform, supporting multiple plugins per library, supporting multiple interfaces per plugin, fixing bugs related to plugin interface casting when using multiple inheritance, etc.\n\nI'm having a lot of trouble understanding it all when combined with the addition of `PluginPtr` and `SpecializedPluginPtr`. After a few days  worth of reviewing this PR I'm still not confident I understand everything.  Of course you don't have to, but would you be willing to make the `PluginPtr` and `SpecializedPluginPtr` a separate PR?If that sounds OK I removed them in the branch `PluginPtrSemantics_minus_ctrp`. It removes a net of 1700 lines of code.\n\nIt seems like `SpecializedPluginPtr` has a very specific task: fast access to interfaces (after a one-time construction cost) using templates without using RTTI. However the code changes it needs seem to go very deep. Is is it possible to implement `SpecializedPluginPtr` in a way that it is more self contained?\n\nFor example, `SpecializedPlutinPtr` uses the map inside the `Plugin` class implementation, which means `Plugin` implementation is aware of it in that it has code to avoid invalidating map keys. How about `SpecializedPluginPtr` using iterators to a map that it owns instead?\n\nAnother example is`SpecializedPluginPtr` inherits from `Plugin`, but it really shadows those methods and uses some template magic to switch between `SpecializedPlugin<I>` and `Plugin` and . How about switch between `std::shared_ptr<Plugin>` and `SpecializedPluginPtr *`? If this is possible it means a `SpecializedPluginPtr`could be created from just a shared pointer.", "markup": "markdown", "html": "<p>I really like the improvements to the plugin system. There's a lot of great stuff, C++ warning suppression cross platform, supporting multiple plugins per library, supporting multiple interfaces per plugin, fixing bugs related to plugin interface casting when using multiple inheritance, etc.</p>\n<p>I'm having a lot of trouble understanding it all when combined with the addition of <code>PluginPtr</code> and <code>SpecializedPluginPtr</code>. After a few days  worth of reviewing this PR I'm still not confident I understand everything.  Of course you don't have to, but would you be willing to make the <code>PluginPtr</code> and <code>SpecializedPluginPtr</code> a separate PR?If that sounds OK I removed them in the branch <code>PluginPtrSemantics_minus_ctrp</code>. It removes a net of 1700 lines of code.</p>\n<p>It seems like <code>SpecializedPluginPtr</code> has a very specific task: fast access to interfaces (after a one-time construction cost) using templates without using RTTI. However the code changes it needs seem to go very deep. Is is it possible to implement <code>SpecializedPluginPtr</code> in a way that it is more self contained?</p>\n<p>For example, <code>SpecializedPlutinPtr</code> uses the map inside the <code>Plugin</code> class implementation, which means <code>Plugin</code> implementation is aware of it in that it has code to avoid invalidating map keys. How about <code>SpecializedPluginPtr</code> using iterators to a map that it owns instead?</p>\n<p>Another example is<code>SpecializedPluginPtr</code> inherits from <code>Plugin</code>, but it really shadows those methods and uses some template magic to switch between <code>SpecializedPlugin&lt;I&gt;</code> and <code>Plugin</code> and . How about switch between <code>std::shared_ptr&lt;Plugin&gt;</code> and <code>SpecializedPluginPtr *</code>? If this is possible it means a <code>SpecializedPluginPtr</code>could be created from just a shared pointer.</p>", "type": "rendered"}, "created_on": "2017-10-04T16:20:26.197219+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-10-04T16:20:26.200295+00:00", "type": "pullrequest_comment", "id": 46421867}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46263454.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46263454"}}, "parent": {"id": 45762267, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/45762267.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-45762267"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "And this branch is 91 commits behind default, I can try this with Ignition-GUI once `Filesystem` is in this branch.", "markup": "markdown", "html": "<p>And this branch is 91 commits behind default, I can try this with Ignition-GUI once <code>Filesystem</code> is in this branch.</p>", "type": "rendered"}, "created_on": "2017-10-03T00:13:02.832171+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-10-03T00:13:02.834952+00:00", "type": "pullrequest_comment", "id": 46263454}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46263110.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46263110"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Sorry if this has been explained already, but looking around the PR I couldn't find it. Why are some headers under `/detail`?", "markup": "markdown", "html": "<p>Sorry if this has been explained already, but looking around the PR I couldn't find it. Why are some headers under <code>/detail</code>?</p>", "type": "rendered"}, "created_on": "2017-10-03T00:02:48.365033+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-10-03T00:02:48.368821+00:00", "type": "pullrequest_comment", "id": 46263110}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46262874.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46262874"}}, "parent": {"id": 46262798, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46262798.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46262798"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Ha, it's explained in the description :sweat_smile: sorry for the noise", "markup": "markdown", "html": "<p>Ha, it's explained in the description <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f605.png\" alt=\"\ud83d\ude05\" title=\":sweat_smile:\" data-emoji-short-name=\":sweat_smile:\" /> sorry for the noise</p>", "type": "rendered"}, "created_on": "2017-10-02T23:56:02.039001+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-10-02T23:56:02.041538+00:00", "type": "pullrequest_comment", "id": 46262874}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46262798.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46262798"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Is there a reason why these function names are styled differently?", "markup": "markdown", "html": "<p>Is there a reason why these function names are styled differently?</p>", "type": "rendered"}, "created_on": "2017-10-02T23:53:19.338503+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-10-02T23:53:19.341204+00:00", "type": "pullrequest_comment", "id": 46262798}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46262760.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46262760"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Missing `\\param[in]` and `\\return` on the doxygen", "markup": "markdown", "html": "<p>Missing <code>\\param[in]</code> and <code>\\return</code> on the doxygen</p>", "type": "rendered"}, "created_on": "2017-10-02T23:52:24.948074+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2017-10-02T23:52:24.950536+00:00", "type": "pullrequest_comment", "id": 46262760}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/46254021.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-46254021"}}, "parent": {"id": 44021265, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/44021265.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-44021265"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "@mxgrey friendly ping", "markup": "markdown", "html": "<p>@mxgrey friendly ping</p>", "type": "rendered"}, "created_on": "2017-10-02T20:36:01.446783+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-10-02T20:36:01.711003+00:00", "type": "pullrequest_comment", "id": 46254021}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/45762267.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-45762267"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "looks like there are some conflicts", "markup": "markdown", "html": "<p>looks like there are some conflicts</p>", "type": "rendered"}, "created_on": "2017-09-25T22:22:31.478241+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-09-25T22:22:31.480796+00:00", "type": "pullrequest_comment", "id": 45762267}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/44280106.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-44280106"}}, "parent": {"id": 44022585, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/44022585.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-44022585"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "The reason is admittedly kind of unintuitive, but it relates to \"casting\" between Plugin specializations.\n\nWe use the `Plugin` class as a completely generic object that provides access to the interfaces of a plugin instance that has been loaded by the `PluginLoader`. The generic `Plugin` class also serves as a base class for the many various `SpecializedPlugin<...>` classes that might get instantiated. We want to be able to \"cast\" a plugin from the generic `Plugin` type to the specialized (more-derived) `SpecializedPlugin<...>` types. `std::shared_ptr` offers the usual `static_cast` and `dynamic_cast`, but neither of those will work for us, because generally an instance of a `Plugin` is not secretly an instance of a `SpecializedPlugin<...>`. Moreover, an instance of a `SpecializedPlugin<A, B, C>` will not secretly be an instance of a `SpecializedPlugin<X, Y, Z>`, so we cannot use `static_cast` or `dynamic_cast` to \"cast\" between them (at this point, it should be clear why I've been putting quotes around my use of the word \"cast\").\n\nWhen we \"cast\" between different specializations of a plugin, we're really passing around the underlying plugin instance (which comes in the form of a `std::shared_ptr<void>` and is a member variable of `Plugin`)  between different `SpecializedPlugin<...>` instances, which may be of completely different types. The `PluginPtr` class facilitates this by redirecting its copy constructor and assignment operator to call `Plugin::PrivateCopyPluginInstance(~)` on the instance that the `PluginPtr` is holding. In other words, `PluginPtr` is just a little wrapper around the `Plugin` instances, and the actual `Plugin` instances never get moved between `PluginPtr`s, only the underlying `std::shared_ptr<void>` member variable that represents the *actual* plugin instance will ever get moved around (it should be carefully noted that \"`Plugin`\" refers to the class `ignition::common::Plugin` while \"plugin\" refers to a `std::shared_ptr<void>` which gets dynamically loaded from some other library).\n\nThis should raise the question of why we even have a `PluginPtr` object if the `Plugin` class is essentially acting as a smart pointer already. The answer to that boils down to semantics. I wanted to be able to make a distinction between a `const PluginPtr` and a `ConstPluginPtr`:\n\n * `const PluginPtr ptr` should imply that the plugin instance held by `ptr` cannot be swapped with another (or removed) after initialization.\n * `ConstPluginPtr ptr` should imply that `ptr` is referring to a const-qualified plugin instance, and you therefore can only request const-qualified interfaces from it, but you may swap (or remove) the plugin instance that is being held.\n\nThese two concepts are completely orthogonal to each other, so we need a way to express the external `const` and the internal `const` independently of each other. Therefore, we have an internal `Plugin` class which is wrapped by an external `PluginPtr` class, so we can apply `const` to each of them independently.\n\nThis also gives us dereference semantics, so you can call `ptr->GetInterface<SomeInterface>()` instead of `ptr.GetInterface<SomeInterface>()`. The latter would imply that the function is operating exclusively on this instance of the `PluginPtr`, but in reality it affects the underlying plugin instance, which may be shared by many `PluginPtr` instances. That kind of behavior is better to express with the dereference operators (`*` and `->`).", "markup": "markdown", "html": "<p>The reason is admittedly kind of unintuitive, but it relates to \"casting\" between Plugin specializations.</p>\n<p>We use the <code>Plugin</code> class as a completely generic object that provides access to the interfaces of a plugin instance that has been loaded by the <code>PluginLoader</code>. The generic <code>Plugin</code> class also serves as a base class for the many various <code>SpecializedPlugin&lt;...&gt;</code> classes that might get instantiated. We want to be able to \"cast\" a plugin from the generic <code>Plugin</code> type to the specialized (more-derived) <code>SpecializedPlugin&lt;...&gt;</code> types. <code>std::shared_ptr</code> offers the usual <code>static_cast</code> and <code>dynamic_cast</code>, but neither of those will work for us, because generally an instance of a <code>Plugin</code> is not secretly an instance of a <code>SpecializedPlugin&lt;...&gt;</code>. Moreover, an instance of a <code>SpecializedPlugin&lt;A, B, C&gt;</code> will not secretly be an instance of a <code>SpecializedPlugin&lt;X, Y, Z&gt;</code>, so we cannot use <code>static_cast</code> or <code>dynamic_cast</code> to \"cast\" between them (at this point, it should be clear why I've been putting quotes around my use of the word \"cast\").</p>\n<p>When we \"cast\" between different specializations of a plugin, we're really passing around the underlying plugin instance (which comes in the form of a <code>std::shared_ptr&lt;void&gt;</code> and is a member variable of <code>Plugin</code>)  between different <code>SpecializedPlugin&lt;...&gt;</code> instances, which may be of completely different types. The <code>PluginPtr</code> class facilitates this by redirecting its copy constructor and assignment operator to call <code>Plugin::PrivateCopyPluginInstance(~)</code> on the instance that the <code>PluginPtr</code> is holding. In other words, <code>PluginPtr</code> is just a little wrapper around the <code>Plugin</code> instances, and the actual <code>Plugin</code> instances never get moved between <code>PluginPtr</code>s, only the underlying <code>std::shared_ptr&lt;void&gt;</code> member variable that represents the <em>actual</em> plugin instance will ever get moved around (it should be carefully noted that \"<code>Plugin</code>\" refers to the class <code>ignition::common::Plugin</code> while \"plugin\" refers to a <code>std::shared_ptr&lt;void&gt;</code> which gets dynamically loaded from some other library).</p>\n<p>This should raise the question of why we even have a <code>PluginPtr</code> object if the <code>Plugin</code> class is essentially acting as a smart pointer already. The answer to that boils down to semantics. I wanted to be able to make a distinction between a <code>const PluginPtr</code> and a <code>ConstPluginPtr</code>:</p>\n<ul>\n<li><code>const PluginPtr ptr</code> should imply that the plugin instance held by <code>ptr</code> cannot be swapped with another (or removed) after initialization.</li>\n<li><code>ConstPluginPtr ptr</code> should imply that <code>ptr</code> is referring to a const-qualified plugin instance, and you therefore can only request const-qualified interfaces from it, but you may swap (or remove) the plugin instance that is being held.</li>\n</ul>\n<p>These two concepts are completely orthogonal to each other, so we need a way to express the external <code>const</code> and the internal <code>const</code> independently of each other. Therefore, we have an internal <code>Plugin</code> class which is wrapped by an external <code>PluginPtr</code> class, so we can apply <code>const</code> to each of them independently.</p>\n<p>This also gives us dereference semantics, so you can call <code>ptr-&gt;GetInterface&lt;SomeInterface&gt;()</code> instead of <code>ptr.GetInterface&lt;SomeInterface&gt;()</code>. The latter would imply that the function is operating exclusively on this instance of the <code>PluginPtr</code>, but in reality it affects the underlying plugin instance, which may be shared by many <code>PluginPtr</code> instances. That kind of behavior is better to express with the dereference operators (<code>*</code> and <code>-&gt;</code>).</p>", "type": "rendered"}, "created_on": "2017-09-05T17:48:16.840960+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-05T19:50:21.627866+00:00", "type": "pullrequest_comment", "id": 44280106}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/44022585.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-44022585"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I'm sure you've explained this to be already, but I'm still confused. Why can't `PluginPtr` just be a `std::shared_ptr<Plugin>`?", "markup": "markdown", "html": "<p>I'm sure you've explained this to be already, but I'm still confused. Why can't <code>PluginPtr</code> just be a <code>std::shared_ptr&lt;Plugin&gt;</code>?</p>", "type": "rendered"}, "created_on": "2017-08-31T18:11:49.309843+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-31T18:11:49.312172+00:00", "type": "pullrequest_comment", "id": 44022585}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/44021265.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-44021265"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Looks like this method is no longer used after the changes in  86dd7aa. I removed it in  38996b1 and the tests still pass. If it looks ok, mind merging the branch `PluginPtrSemantics_RemoveIsSpecializedFor` into this one?", "markup": "markdown", "html": "<p>Looks like this method is no longer used after the changes in  <a href=\"#!/ignitionrobotics/ign-common/commits/86dd7aa\" rel=\"nofollow\" class=\"ap-connect-link\">86dd7aa</a>. I removed it in  <a href=\"#!/ignitionrobotics/ign-common/commits/38996b1\" rel=\"nofollow\" class=\"ap-connect-link\">38996b1</a> and the tests still pass. If it looks ok, mind merging the branch <code>PluginPtrSemantics_RemoveIsSpecializedFor</code> into this one?</p>", "type": "rendered"}, "created_on": "2017-08-31T17:50:50.732767+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-31T17:50:50.735138+00:00", "type": "pullrequest_comment", "id": 44021265}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "ebf4b53ee763", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/ebf4b53ee763.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/ebf4b53ee763"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "065d8e626b60", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/065d8e626b60.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/065d8e626b60"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-08-31T16:18:58.035962+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "ebf4b53ee763", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/ebf4b53ee763.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/ebf4b53ee763"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "301d10c7d2b1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/301d10c7d2b1.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/301d10c7d2b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-08-31T16:17:48.295389+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "ebf4b53ee763", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/ebf4b53ee763.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/ebf4b53ee763"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9e9682814886", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/9e9682814886.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/9e9682814886"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2017-08-31T16:14:36.470264+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/43825508.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-43825508"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "After creating a more rigorous performance test, I discovered that the compiler was not inlining some of the implementation as aggressively as I thought it was. The behavior was not noticeable for relatively simple specializations when compiled in release mode, but it became very noticeable for relatively large specializations (where 10-20 interfaces are specialized for) in debug mode. The implementation was scaling so badly that a plugin with 20 specializations could potentially perform worse than a generic plugin, depending on where in the list of specializations the interface is located (... the fact that performance would even depend on the interface's location in the specialization list is very bad and indicates that the compiler was not being as smart as I hoped it would be).\n\nI created a fix for this in 86dd7aa which **guarantees** that the appropriate specialized function call is identified at compile-time, and so performance for a specialized plugin will be the same *no matter* how many interfaces are specialized for or where those interfaces are located in the list of specializations. The exhaustive performance test introduced in 86dd7aa corroborates this.", "markup": "markdown", "html": "<p>After creating a more rigorous performance test, I discovered that the compiler was not inlining some of the implementation as aggressively as I thought it was. The behavior was not noticeable for relatively simple specializations when compiled in release mode, but it became very noticeable for relatively large specializations (where 10-20 interfaces are specialized for) in debug mode. The implementation was scaling so badly that a plugin with 20 specializations could potentially perform worse than a generic plugin, depending on where in the list of specializations the interface is located (... the fact that performance would even depend on the interface's location in the specialization list is very bad and indicates that the compiler was not being as smart as I hoped it would be).</p>\n<p>I created a fix for this in <a href=\"#!/ignitionrobotics/ign-common/commits/86dd7aa\" rel=\"nofollow\" class=\"ap-connect-link\">86dd7aa</a> which <strong>guarantees</strong> that the appropriate specialized function call is identified at compile-time, and so performance for a specialized plugin will be the same <em>no matter</em> how many interfaces are specialized for or where those interfaces are located in the list of specializations. The exhaustive performance test introduced in <a href=\"#!/ignitionrobotics/ign-common/commits/86dd7aa\" rel=\"nofollow\" class=\"ap-connect-link\">86dd7aa</a> corroborates this.</p>", "type": "rendered"}, "created_on": "2017-08-29T18:54:17.419571+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-08-29T18:56:16.831815+00:00", "type": "pullrequest_comment", "id": 43825508}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "ebf4b53ee763", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/ebf4b53ee763.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/ebf4b53ee763"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5ce82654b5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/5ce82654b5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/5ce82654b5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-29T18:53:26.482144+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "ebf4b53ee763", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/ebf4b53ee763.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/ebf4b53ee763"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "86dd7aa2912d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/86dd7aa2912d.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/86dd7aa2912d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-29T18:44:26.063554+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "f5c3b3b32f58", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/f5c3b3b32f58.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/f5c3b3b32f58"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ff33cd3f66ea", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/ff33cd3f66ea.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/ff33cd3f66ea"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-17T17:46:32.300391+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42700656.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42700656"}}, "parent": {"id": 42680585, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42680585.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42680585"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Fixed in 2ebe49c", "markup": "markdown", "html": "<p>Fixed in <a href=\"#!/ignitionrobotics/ign-common/commits/2ebe49c\" rel=\"nofollow\" class=\"ap-connect-link\">2ebe49c</a></p>", "type": "rendered"}, "created_on": "2017-08-12T01:31:19.259287+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:31:19.261542+00:00", "type": "pullrequest_comment", "id": 42700656}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42688085.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42688085"}}, "parent": {"id": 42686454, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42686454.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42686454"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Although if you're asking for why it's useful, it allows `PluginPtr` objects to be stored in `std::unordered_set` and `std::unordered_map`.\n\nEdit: Note that we're testing unordered maps and unordered sets of various `PluginPtr` types in the `INTEGRATION_plugin` test.", "markup": "markdown", "html": "<p>Although if you're asking for why it's useful, it allows <code>PluginPtr</code> objects to be stored in <code>std::unordered_set</code> and <code>std::unordered_map</code>.</p>\n<p>Edit: Note that we're testing unordered maps and unordered sets of various <code>PluginPtr</code> types in the <code>INTEGRATION_plugin</code> test.</p>", "type": "rendered"}, "created_on": "2017-08-11T18:55:18.819855+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:30:35.356678+00:00", "type": "pullrequest_comment", "id": 42688085}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42700632.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42700632"}}, "parent": {"id": 42697568, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42697568.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42697568"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Confirmed. `ComposePlugin` is now merely a two-argument template class as of caa7f30.", "markup": "markdown", "html": "<p>Confirmed. <code>ComposePlugin</code> is now merely a two-argument template class as of <a href=\"#!/ignitionrobotics/ign-common/commits/caa7f30\" rel=\"nofollow\" class=\"ap-connect-link\">caa7f30</a>.</p>", "type": "rendered"}, "created_on": "2017-08-12T01:26:07.804060+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:26:07.806534+00:00", "type": "pullrequest_comment", "id": 42700632}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42700582.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42700582"}}, "parent": {"id": 42623404, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42623404.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42623404"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "In general I'm somewhat reluctant about hiding types with `auto`, because I very much like being able to see a variable's type clearly on the left side of its declaration (plus I'll confess... it helps my IDE's autocomplete to recognize the variable type, which makes my life a lot better), but this is a case where the benefit of using `auto` far outweighs any hypothetical benefits of spelling out that hideous type.\n\nChanged in 9fb0ae9", "markup": "markdown", "html": "<p>In general I'm somewhat reluctant about hiding types with <code>auto</code>, because I very much like being able to see a variable's type clearly on the left side of its declaration (plus I'll confess... it helps my IDE's autocomplete to recognize the variable type, which makes my life a lot better), but this is a case where the benefit of using <code>auto</code> far outweighs any hypothetical benefits of spelling out that hideous type.</p>\n<p>Changed in <a href=\"#!/ignitionrobotics/ign-common/commits/9fb0ae9\" rel=\"nofollow\" class=\"ap-connect-link\">9fb0ae9</a></p>", "type": "rendered"}, "created_on": "2017-08-12T01:18:44.519128+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:18:44.525818+00:00", "type": "pullrequest_comment", "id": 42700582}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "276d8d9eff47", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/276d8d9eff47.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/276d8d9eff47"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9fb0ae9b1e64", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/9fb0ae9b1e64.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/9fb0ae9b1e64"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-12T01:18:27.232471+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42700559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42700559"}}, "parent": {"id": 42673036, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42673036.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42673036"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Changed in 47ccb0e", "markup": "markdown", "html": "<p>Changed in <a href=\"#!/ignitionrobotics/ign-common/commits/47ccb0e\" rel=\"nofollow\" class=\"ap-connect-link\">47ccb0e</a></p>", "type": "rendered"}, "created_on": "2017-08-12T01:14:49.378471+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:14:49.381951+00:00", "type": "pullrequest_comment", "id": 42700559}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42688559.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42688559"}}, "parent": {"id": 42678198, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42678198.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42678198"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "~~I split it out into its own file in case we want to reuse it. I tend to make one file dedicated to useful template structures that aren't offered directly by STL. I anticipate adding more little template tools into this header over time as they become necessary. I have some ideas for other things we could add here, but we're not using them yet, so I've left them out.~~\n\n~~If you think it would be better to wait on making this header until it becomes clearly useful, I'd be fine with that.~~ Never mind, you were talking about the split between `TemplateHelpers.hh` and `detail/TemplateHelper.hh`, so my view on this is the same as for `detail/PluginLoader.hh`.", "markup": "markdown", "html": "<p><del>I split it out into its own file in case we want to reuse it. I tend to make one file dedicated to useful template structures that aren't offered directly by STL. I anticipate adding more little template tools into this header over time as they become necessary. I have some ideas for other things we could add here, but we're not using them yet, so I've left them out.</del></p>\n<p><del>If you think it would be better to wait on making this header until it becomes clearly useful, I'd be fine with that.</del> Never mind, you were talking about the split between <code>TemplateHelpers.hh</code> and <code>detail/TemplateHelper.hh</code>, so my view on this is the same as for <code>detail/PluginLoader.hh</code>.</p>", "type": "rendered"}, "created_on": "2017-08-11T19:03:19.603176+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:11:31.023727+00:00", "type": "pullrequest_comment", "id": 42688559}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42700532.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42700532"}}, "parent": {"id": 42688498, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42688498.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42688498"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "This is deleted in caa7f30 by virtue of the entire class definition no longer existing.", "markup": "markdown", "html": "<p>This is deleted in <a href=\"#!/ignitionrobotics/ign-common/commits/caa7f30\" rel=\"nofollow\" class=\"ap-connect-link\">caa7f30</a> by virtue of the entire class definition no longer existing.</p>", "type": "rendered"}, "created_on": "2017-08-12T01:09:44.167456+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:09:44.170193+00:00", "type": "pullrequest_comment", "id": 42700532}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42700522.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42700522"}}, "parent": {"id": 42696860, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42696860.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42696860"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Fixed by the combo of 3f05d23 and 60b770d", "markup": "markdown", "html": "<p>Fixed by the combo of <a href=\"#!/ignitionrobotics/ign-common/commits/3f05d23\" rel=\"nofollow\" class=\"ap-connect-link\">3f05d23</a> and <a href=\"#!/ignitionrobotics/ign-common/commits/60b770d\" rel=\"nofollow\" class=\"ap-connect-link\">60b770d</a></p>", "type": "rendered"}, "created_on": "2017-08-12T01:08:11.781290+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T01:08:11.783756+00:00", "type": "pullrequest_comment", "id": 42700522}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "276d8d9eff47", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/276d8d9eff47.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/276d8d9eff47"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "60b770d656ff", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/60b770d656ff.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/60b770d656ff"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-12T00:59:57.473915+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42700327.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42700327"}}, "parent": {"id": 42678501, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42678501.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42678501"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Added tests in 010b98e\n\nNote that the template works on objects that are of different types from each other; it only cares about their respective const-qualities.", "markup": "markdown", "html": "<p>Added tests in <a href=\"#!/ignitionrobotics/ign-common/commits/010b98e\" rel=\"nofollow\" class=\"ap-connect-link\">010b98e</a></p>\n<p>Note that the template works on objects that are of different types from each other; it only cares about their respective const-qualities.</p>", "type": "rendered"}, "created_on": "2017-08-12T00:40:20.960426+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T00:40:35.871315+00:00", "type": "pullrequest_comment", "id": 42700327}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "276d8d9eff47", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/276d8d9eff47.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/276d8d9eff47"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "caa7f3093b47", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/caa7f3093b47.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/caa7f3093b47"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-12T00:38:58.696164+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699960.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699960"}}, "parent": {"id": 42699819, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699819.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699819"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "~~Correct, as long as `p2` provides an interface of the same type. If it does not, then `i1` will refer to a `nullptr`.~~\n\nI need to revise my statement a bit, I didn't read through your example carefully enough. `i1` is not an interface, it's a `PluginPtr` which provides extremely low cost access to `Iface1` when you use a function that queries for it. Changing `p1` will have no effect on `i1` because they are independent smart pointer objects.", "markup": "markdown", "html": "<p><del>Correct, as long as <code>p2</code> provides an interface of the same type. If it does not, then <code>i1</code> will refer to a <code>nullptr</code>.</del></p>\n<p>I need to revise my statement a bit, I didn't read through your example carefully enough. <code>i1</code> is not an interface, it's a <code>PluginPtr</code> which provides extremely low cost access to <code>Iface1</code> when you use a function that queries for it. Changing <code>p1</code> will have no effect on <code>i1</code> because they are independent smart pointer objects.</p>", "type": "rendered"}, "created_on": "2017-08-12T00:09:19.474809+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T00:13:11.057059+00:00", "type": "pullrequest_comment", "id": 42699960}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699952.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699952"}}, "parent": {"id": 42683872, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42683872.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42683872"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Fixed in c4c1d01", "markup": "markdown", "html": "<p>Fixed in <a href=\"#!/ignitionrobotics/ign-common/commits/c4c1d01\" rel=\"nofollow\" class=\"ap-connect-link\">c4c1d01</a></p>", "type": "rendered"}, "created_on": "2017-08-12T00:08:52.525032+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T00:08:52.527307+00:00", "type": "pullrequest_comment", "id": 42699952}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699947.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699947"}}, "parent": {"id": 42684251, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42684251.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42684251"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Fixed in c4c1d01", "markup": "markdown", "html": "<p>Fixed in <a href=\"#!/ignitionrobotics/ign-common/commits/c4c1d01\" rel=\"nofollow\" class=\"ap-connect-link\">c4c1d01</a></p>", "type": "rendered"}, "created_on": "2017-08-12T00:08:36.145265+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-12T00:08:36.147944+00:00", "type": "pullrequest_comment", "id": 42699947}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"update": {"description": "I promise this is the last version of this PR that I'm going to open. This plugin framework implementation is finally something that I'm satisfied with. It's a huge PR (and I am really truly sorry for that, but the breadth of the implementation details would make it even worse to break into parts IMO), so I'll try to summarize the key features concisely:\r\n\r\n1. The plugin framework can now support arbitrarily many plugins per library, and arbitrarily many interfaces per plugin\r\n\r\n2. The `PluginLoader` now returns a generic `PluginPtr` object which contains a generic `Plugin` object that provides access to the interfaces provided by the plugin that was loaded.\r\n\r\n3. The `Plugin` object can be specialized at compile time to give direct access to any interfaces that can be anticipated ahead of time.\r\n\r\n4. You can cast between different `Plugin` specializations at a one-time map construction cost.\r\n\r\n5. The `PluginPtr` class behaves like a `std::shared_ptr` where the plugin instance is shared between them.\r\n\r\n6. Interfaces can be retrieved as `std::shared_ptr<T>` objects where `T` is whatever the interface class is. This allows a user to simply query the `Plugin` for the specific interfaces that they want, and then discard the `PluginPtr` that was originally returned by the `PluginLoader`.\r\n\r\nOne thing that may be controversial in this PR:\r\n\r\n* The function that returns interfaces as `std::shared_ptr` objects is called `Plugin::as_shared_ptr`, which violates our style convention. This was an intentional design choice to use the STL style so that it's explicit to the user that the function is converting from an `ignition` data structure to a `std` data structure. If anyone objects to this design choice, we can certainly rename the function to `Plugin::AsSharedPtr`. However, this intentional change in code style is a common pattern that I've seen in other libraries when converting from a custom object type to an STL (or other library) object type.\r\n\r\nOne problem that this PR does not solve:\r\n\r\n* ~~There is potential for abuse in the plugin framework if the user decides to cycle between loading from many different shared libraries. Currently, we have no way of closing shared libraries after the user has loaded them. Whether the library actually gets used after being loaded, or whether anything from the library is still in use, the shared library will remain loaded and active in memory. I have some solid ideas for fixing this, but it can wait for a later PR.~~  This is now addressed in pull request #61\r\n\r\nPlease don't hesitate to ask me questions about the implementation details in this PR. The use of  templates is likely to be very confusing, even for people who are familiar with templates.", "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations", "destination": {"commit": {"hash": "276d8d9eff47", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/276d8d9eff47.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/276d8d9eff47"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "010b98ec9465", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/commit/010b98ec9465.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/commits/010b98ec9465"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common.json"}, "html": {"href": "#!/ignitionrobotics/ign-common"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}ts=1533303"}}, "type": "repository", "name": "ign-common", "full_name": "ignitionrobotics/ign-common", "uuid": "{1dfbdd30-34c5-4b09-82ef-9bfe2917877b}"}, "branch": {"name": "PluginPtrSemantics"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-08-12T00:07:21.870190+00:00"}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699819.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699819"}}, "parent": {"id": 42699518, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699518.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699518"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Does that mean with the iterator `i1` becomes an interface to `p2` after `p1 = p2`?", "markup": "markdown", "html": "<p>Does that mean with the iterator <code>i1</code> becomes an interface to <code>p2</code> after <code>p1 = p2</code>?</p>", "type": "rendered"}, "created_on": "2017-08-11T23:58:03.200655+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-11T23:58:03.203353+00:00", "type": "pullrequest_comment", "id": 42699819}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699762.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699762"}}, "parent": {"id": 42696860, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42696860.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42696860"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "You can never be too enthusiastic about your friends, right??", "markup": "markdown", "html": "<p>You can never be too enthusiastic about your friends, right??</p>", "type": "rendered"}, "created_on": "2017-08-11T23:54:30.875505+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-11T23:54:30.877821+00:00", "type": "pullrequest_comment", "id": 42699762}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699518.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699518"}}, "parent": {"id": 42699429, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699429.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699429"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Correct.\n\nAlso, if we tried to use raw pointers, we'd need some way to inform the specializations whenever the underlying plugin is changed. This would likely involve either some virtual functions or some subscription model, both of which would take up memory and cost us extra operations. Storing an iterator costs roughly the same as storing a pointer, and we don't require any extra operations when swapping between plugins.", "markup": "markdown", "html": "<p>Correct.</p>\n<p>Also, if we tried to use raw pointers, we'd need some way to inform the specializations whenever the underlying plugin is changed. This would likely involve either some virtual functions or some subscription model, both of which would take up memory and cost us extra operations. Storing an iterator costs roughly the same as storing a pointer, and we don't require any extra operations when swapping between plugins.</p>", "type": "rendered"}, "created_on": "2017-08-11T23:39:12.204169+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-11T23:39:12.207524+00:00", "type": "pullrequest_comment", "id": 42699518}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42699429.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42699429"}}, "parent": {"id": 42698644, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42698644.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42698644"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "I don't understand yet. Would you mind giving me a short code example?\n\n```\n// PluginPtr p1\n// PluginPtr p2\n\nSpecializedPluginPtr<Iface1> i1 = p1;\np1 = p2; // Is this where a raw pointer in i1 would break?\n```", "markup": "markdown", "html": "<p>I don't understand yet. Would you mind giving me a short code example?</p>\n<div class=\"codehilite\"><pre><span></span>// PluginPtr p1\n// PluginPtr p2\n\nSpecializedPluginPtr&lt;Iface1&gt; i1 = p1;\np1 = p2; // Is this where a raw pointer in i1 would break?\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-11T23:34:36.943945+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-11T23:34:36.946158+00:00", "type": "pullrequest_comment", "id": 42699429}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42698644.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42698644"}}, "parent": {"id": 42698330, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42698330.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42698330"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "If the underlying plugin changes at any time, a pointer would no longer be valid, but the iterator will remain the same. By holding onto the iterator, we can hot swap plugins without needing to update the specializations.", "markup": "markdown", "html": "<p>If the underlying plugin changes at any time, a pointer would no longer be valid, but the iterator will remain the same. By holding onto the iterator, we can hot swap plugins without needing to update the specializations.</p>", "type": "rendered"}, "created_on": "2017-08-11T22:57:36.562517+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-11T22:57:36.565175+00:00", "type": "pullrequest_comment", "id": 42698644}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42698330.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42698330"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Why is this member an iterator? Could it be a raw pointer to the interface instead?", "markup": "markdown", "html": "<p>Why is this member an iterator? Could it be a raw pointer to the interface instead?</p>", "type": "rendered"}, "created_on": "2017-08-11T22:43:42.898484+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-11T22:43:42.901202+00:00", "type": "pullrequest_comment", "id": 42698330}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42697914.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42697914"}}, "parent": {"id": 42697568, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42697568.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42697568"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Mmmm you may be right. The variadic ComposePlugin was a carry over from my implementation of Aspects which had broader use cases for composing things. The variadic SpecializedPlugin (which only uses the two-argument version of ComposePlugin) might be sufficient for variadic specialization of Plugins.", "markup": "markdown", "html": "<p>Mmmm you may be right. The variadic ComposePlugin was a carry over from my implementation of Aspects which had broader use cases for composing things. The variadic SpecializedPlugin (which only uses the two-argument version of ComposePlugin) might be sufficient for variadic specialization of Plugins.</p>", "type": "rendered"}, "created_on": "2017-08-11T22:24:19.733808+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-08-11T22:25:41.968735+00:00", "type": "pullrequest_comment", "id": 42697914}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42697568.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42697568"}}, "parent": {"id": 42697342, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42697342.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42697342"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "@mxgrey Would you mind having a look at 15f98c3? The tests still pass after removing all `ComposePlugin` classes besides `ComposePlugin<B1, B2>`. Is it functionally the same as what's here? Is something broken by that change that's not in a unit test?", "markup": "markdown", "html": "<p>@mxgrey Would you mind having a look at <a href=\"#!/ignitionrobotics/ign-common/commits/15f98c3\" rel=\"nofollow\" class=\"ap-connect-link\">15f98c3</a>? The tests still pass after removing all <code>ComposePlugin</code> classes besides <code>ComposePlugin&lt;B1, B2&gt;</code>. Is it functionally the same as what's here? Is something broken by that change that's not in a unit test?</p>", "type": "rendered"}, "created_on": "2017-08-11T22:11:02.610998+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-11T22:11:02.704258+00:00", "type": "pullrequest_comment", "id": 42697568}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42697342.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42697342"}}, "parent": {"id": 42695867, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42695867.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42695867"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Wait, something is strange here. Looking at `SpecializedPlugin<SpecInterface1, OtherSpecInterfaces ...>`, I don't see how any class besides `ComposePlugin<B1, B2>` would be used.", "markup": "markdown", "html": "<p>Wait, something is strange here. Looking at <code>SpecializedPlugin&lt;SpecInterface1, OtherSpecInterfaces ...&gt;</code>, I don't see how any class besides <code>ComposePlugin&lt;B1, B2&gt;</code> would be used.</p>", "type": "rendered"}, "created_on": "2017-08-11T22:01:45.498978+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-11T22:01:45.501229+00:00", "type": "pullrequest_comment", "id": 42697342}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/comments/42696860.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59/_/diff#comment-42696860"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}, "content": {"raw": "Looks like friendship was already declared on line 209 and 210", "markup": "markdown", "html": "<p>Looks like friendship was already declared on line 209 and 210</p>", "type": "rendered"}, "created_on": "2017-08-11T21:48:09.642336+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-08-11T21:48:09.645703+00:00", "type": "pullrequest_comment", "id": 42696860}, "pull_request": {"type": "pullrequest", "id": 59, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-common/pullrequests/59.json"}, "html": {"href": "#!/ignitionrobotics/ign-common/pull-requests/59"}}, "title": "Expanding the functionality of the plugin framework, and introducing PluginPtr and specializations"}}], "next": "data/repositories/ignitionrobotics/ign-common/pullrequests/59/activity_ctx=oq5SMKfnfz.json"}