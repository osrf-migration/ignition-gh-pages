{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/20/comments/52026207.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/issues/20#comment-52026207"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/20.json"}}, "type": "issue", "id": 20, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "title": "Speed up compilation"}, "content": {"raw": "The basic problem is that as we add more features, the lengths of the symbol names grow longer because each new feature adds a new template argument, and the name of every template argument gets mangled into the overall symbol name of the class that gets instantiated by the template. It turns out that compilers struggle a bit to deal with very long symbol names. In particular when I try to combine all the currently existing features at once, GCC chokes and seems to hang indefinitely \\(clang is still working fine, though\\).\n\nI\u2019ve been experimenting with ways to reduce the compile times, and I\u2019ve had some success \\(I\u2019ve seen some translation units' compile times cut by 1/2 or as much as 3/4\\). However the things I\u2019ve tried so far don\u2019t deal with the long-term scalability issue. I have some ideas lined up that I\u2019ll be trying out now. I can think of one approach in particular that should solve this trivially, but I\u2019d rather avoid it because it involves some extra manual labor per feature instead of being automatic.", "markup": "markdown", "html": "<p>The basic problem is that as we add more features, the lengths of the symbol names grow longer because each new feature adds a new template argument, and the name of every template argument gets mangled into the overall symbol name of the class that gets instantiated by the template. It turns out that compilers struggle a bit to deal with very long symbol names. In particular when I try to combine all the currently existing features at once, GCC chokes and seems to hang indefinitely (clang is still working fine, though).</p>\n<p>I\u2019ve been experimenting with ways to reduce the compile times, and I\u2019ve had some success (I\u2019ve seen some translation units' compile times cut by 1/2 or as much as 3/4). However the things I\u2019ve tried so far don\u2019t deal with the long-term scalability issue. I have some ideas lined up that I\u2019ll be trying out now. I can think of one approach in particular that should solve this trivially, but I\u2019d rather avoid it because it involves some extra manual labor per feature instead of being automatic.</p>", "type": "rendered"}, "created_on": "2019-05-08T03:21:59.632989+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 52026207}