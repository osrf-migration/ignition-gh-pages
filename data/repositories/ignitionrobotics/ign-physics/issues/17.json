{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/17/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/17.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/issues/17/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/17/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/issues/17/feature-request-getfreegroupentities"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/issues/17/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Feature request: GetFreeGroupEntities", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nThe concept of a `FreeGroup` was added in pull request #85 with API's for getting a FreeGroup from a Model or a Link. I would propose some additional API's for `FreeGroup`s similar to the `GetEntities` feature:\r\n\r\n~~~\r\nstd::size_t GetFreeGroupCount() const // get number of links with FreeJoints in this FreeGroup\r\nFreeGroupPtrType GetFreeGroup(std::size_t) // get one of the embedded singular FreeGroups\r\n// likewise with ConstFreeGroupPtrType\r\nstd::size_t GetLinkCount() const // get number of links in this FreeGroup\r\nLinkPtrType GetLink(std::size_t) // get link by index\r\n// likewise with ConstLinkPtrType\r\n~~~\r\n\r\n# Motivation\r\n\r\nIf you want to introspect an existing FreeGroup, all you can do is get the `CanonicalLink`, but it won't tell you how many other `FreeGroup`s or links are contained within. This would provide that functionality.\r\n\r\n# Describe alternatives you've considered\r\n\r\nNone\r\n\r\n# Additional context", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>The concept of a <code>FreeGroup</code> was added in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/85/add-prototype-of-freegroup-features\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #85</a> with API's for getting a FreeGroup from a Model or a Link. I would propose some additional API's for <code>FreeGroup</code>s similar to the <code>GetEntities</code> feature:</p>\n<div class=\"codehilite\"><pre><span></span>std::size_t GetFreeGroupCount() const // get number of links with FreeJoints in this FreeGroup\nFreeGroupPtrType GetFreeGroup(std::size_t) // get one of the embedded singular FreeGroups\n// likewise with ConstFreeGroupPtrType\nstd::size_t GetLinkCount() const // get number of links in this FreeGroup\nLinkPtrType GetLink(std::size_t) // get link by index\n// likewise with ConstLinkPtrType\n</pre></div>\n\n\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>If you want to introspect an existing FreeGroup, all you can do is get the <code>CanonicalLink</code>, but it won't tell you how many other <code>FreeGroup</code>s or links are contained within. This would provide that functionality.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>None</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-05-04T01:40:44.736547+00:00", "milestone": null, "updated_on": "2019-05-04T01:40:44.736547+00:00", "type": "issue", "id": 17}