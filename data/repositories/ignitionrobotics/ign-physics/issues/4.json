{"priority": "minor", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/issues/4/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/4/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/issues/4/compare-performance-between-cloneable"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/issues/4/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Compare performance between Cloneable+MakeCloneable and the upcoming std::any", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The C++17 class `std::any` is able to perform the same role as the `Cloneable` + `MakeCloneable` classes in `ign-physics`. However, `std::any` has some type safety overhead which is not needed in `ign-physics` because type safety is already ensured by our implementation design.\n\nWhen `std::any` is widely available, we should profile the performance difference between `std::any` and our own `Cloneable` + `MakeCloneable` to decide whether we should switch to `std::any` or stick to our own solution.", "markup": "markdown", "html": "<p>The C++17 class <code>std::any</code> is able to perform the same role as the <code>Cloneable</code> + <code>MakeCloneable</code> classes in <code>ign-physics</code>. However, <code>std::any</code> has some type safety overhead which is not needed in <code>ign-physics</code> because type safety is already ensured by our implementation design.</p>\n<p>When <code>std::any</code> is widely available, we should profile the performance difference between <code>std::any</code> and our own <code>Cloneable</code> + <code>MakeCloneable</code> to decide whether we should switch to <code>std::any</code> or stick to our own solution.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "on hold", "version": null, "edited_on": null, "created_on": "2018-03-20T18:21:31.515983+00:00", "milestone": null, "updated_on": "2018-12-04T18:53:12.147089+00:00", "type": "issue", "id": 4}