{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/issues/5/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/issues/5/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/issues/5/support-primitive-datatypes-in"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/issues/5/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Support primitive datatypes in CompositeData", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Supporting primitive datatypes in CompositeData (ie. `data.Get<double>()`) was discussed in the following comment thread of pull request #5 but is somewhat controversial:\n\n* #!/ignitionrobotics/ign-physics/pull-requests/5/part-2-compositedata-specifydata/activity#comment-62868652\n\nThe controversial part is that it's not a recommended practice to use primitive datatypes in that way. You get more semantic information by wrapping primitive datatypes in named classes.\n\nStill, people may want to be able to do it. If there is enough demand for this feature, we will consider implementing it.", "markup": "markdown", "html": "<p>Supporting primitive datatypes in CompositeData (ie. <code>data.Get&lt;double&gt;()</code>) was discussed in the following comment thread of <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/5/part-2-compositedata-specifydata\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #5</a> but is somewhat controversial:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-physics/pull-requests/5/part-2-compositedata-specifydata/activity#comment-62868652\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-physics/pull-requests/5/part-2-compositedata-specifydata/activity#comment-62868652</a></li>\n</ul>\n<p>The controversial part is that it's not a recommended practice to use primitive datatypes in that way. You get more semantic information by wrapping primitive datatypes in named classes.</p>\n<p>Still, people may want to be able to do it. If there is enough demand for this feature, we will consider implementing it.</p>", "type": "rendered"}, "assignee": null, "state": "on hold", "version": null, "edited_on": null, "created_on": "2018-04-27T21:37:24.593673+00:00", "milestone": null, "updated_on": "2018-12-04T18:52:59.951091+00:00", "type": "issue", "id": 5}