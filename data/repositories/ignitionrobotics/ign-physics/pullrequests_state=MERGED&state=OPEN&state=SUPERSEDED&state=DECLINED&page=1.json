{"pagelen": 50, "size": 137, "values": [{"description": "### Edit: This has been broken down into pull request #3 (CMake), pull request #4 (CompositeData), pull request #5 (SpecifyData), and this one (template metaprogramming). The other PRs should be reviewed, in order, before this one, but the overview given in the description below might still be a useful primer.\r\n\r\nThis pull request presents the CompositeData prototype which I described during our Tuesday (8/22) meeting. I'm creating this PR to present the class and concept for review. I don't expect the code itself to be merged. I actually think the work I've done on this so far might really belong in `ignition-common`, because it's not really specific to physics.\r\n\r\n## CompositeData\r\n* CompositeData is an object type that can compose other arbitrary data types, as long as they meet two requirements:\r\n    1. It follows the [Rule of Zero, Rule of Three, or Rule of Five](http://en.cppreference.com/w/cpp/language/rule_of_three) (preferably zero or five)\r\n    2. It contains the macro `IGN_PHYSICS_DATA_LABEL(some::unique::name)`\r\n* Requirement (2) is unfortunate, but it seems necessary in order to guarantee compatibility across shared library boundaries. If a user wants to add data that matches requirement (1) but not (2), they can always define a dummy struct to contain their data, and put the macro into the dummy struct. They could even create a \"labeled\" version of their data which simply inherits the data they want and adds the macro to its class definition.\r\n* CompositeData has a pretty [thorough API](#!/ignitionrobotics/ign-physics/src/ab61cc8e5f59daaca382d908da422d154f07f6ca/include/ignition/physics/CompositeData.hh?at=experimental%2Finput&fileviewer=file-view-default#CompositeData.hh-56)\r\n    * `Get<T>()` returns a reference to `T`, which means if the data type did not exist in the `CompositeData`, it will be created using the default constructor. If a default constructor is not available, then the object must be retrieved using `Query<T>()` (described below). The basic `CompositeData` class does not have a const-qualified version of `Get<T>()`, but the `RequireData<T>` extension (described below) does provide const-qualified `Get<T>()` using a bunch of template metaprogramming wizardry.\r\n    * `Create<T>(args)` will create a `T` using `args`. If a `T` already existed, it will be overwritten.\r\n    * `GetOrCreate<T>(args)` will do the same as `Get<T>()` unless the object didn't exist, in which case it will do the same as `Create<T>(args)`. **We can absolutely get rid of this and change `Get<T>()` to accept `args` and exhibit this exact same behavior**. The reason I chose to write a `GetOrCreate<T>()` separate from `Get<T>()` is because:\r\n        * I suspect `Get<T>()`, in the way I designed it, is going to be the most desired use case of handling data within the `CompositeData` object.\r\n        * I'm worried that `Get<T>(args)` will make people think that they're looking up a `T` that matches `args` (rather than creating a `T` using `args` if the `T` was unavailable). For example, I don't want people to think `data.Get<JointProperty>(2)` is going to get the `JointProperty` of joint index `2` when really it would be constructing a `JointProperty` with the argument of `2`.\r\n    * `Remove<T>()` will remove the `T` object if it exists and it is not marked as required (explained below).\r\n    * `Query<T>()` will return a pointer to `T` which will be `nullptr` if `T` is not available. Note that you can choose to perform a \"silent\" query (query tracking will be explained later). A const-qualified version `Query<T>() const` is always available, regardless of requirements.\r\n    * `Has<T>()` tests for existence. This can also be called silently.\r\n    * `StatusOf<T>()` provides a struct that describes the metadata of `T`. This also has a silent mode.\r\n    * `Unquery<T>()` only affects some metadata and has no impact on the actual data.\r\n    * `MakeRequired<T>()` will mark `T` as required so that it can not be deleted until the end of the `CompositeData` object's lifespan. Explained more later.\r\n    * `Copy(~)` can copy data between `CompositeData` objects, and there are some options to change the behavior of `Copy(~)` based on metadata. Note that `Copy(~)` is not allowed to delete data that is marked as required.\r\n* Certain metadata is tracked by the CompositeData object, such as query flags. The query flags will keep track of which data you have explicitly handled by its type (as opposed to implicitly handled through a `Copy` operation). If you have done all the work you intend to do on a `CompositeData` object but some data fields remain unqueried, it may be an indication that there are data types you are not handling, either on purpose or by accident. This query tracking can be used for debugging purposes, or to warn users about potential incompatibilities.\r\n* Requirements are also tracked by the `CompositeData`. Data types can be marked as required by `MakeRequired<T>()`. After being marked as required, the data cannot be deleted until the end of the object's lifecycle. This allows users and developers to enforce that their data dependencies are met. Requirements can be added at run time, but they cannot be removed during run time. The class `RequireData` (described below) can statically express and enforce requirements.\r\n\r\n## ExpectData<Data1, ... , DataN>\r\n* `ExpectData` is an extension of `CompositeData` which has all the same functionality, but it provides extremely low-cost versions of the `CompositeData` API for any Data types that are passed to it as template arguments at compile time. Other than that, it's identical.\r\n* I created a [performance test](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/test/performance/ExpectData.cc?at=experimental%2Finput&fileviewer=file-view-default) which demonstrates that the `ExpectData` class improves access speed by roughly 2 **orders of magnitude** over the map lookup (~1ns per access rather than ~100ns per access).\r\n* Types that get listed by `ExpectData` are still optional; this class has no impact on requirements.\r\n* It's a variadic template, so any number of Data types can be given to it.\r\n\r\n## RequireData<Data1, ..., DataN>\r\n* `RequireData` is an extension of `ExpectData` which additionally marks its Data types as required, both at compile time and at run time.\r\n* As mentioned earlier, data types marked as required must exist and cannot be deleted until the `CompositeData` leaves scope.\r\n* Because `RequireData<T>` enforces the existence of a `T` type at compile time, it also provides a const-qualified `Get<T>() const`.\r\n\r\n## SpecifyData<Spec1, ... , SpecN>\r\n* `SpecifyData` is an extension of `CompositeData` which allows data specifications (e.g. `ExpectData` and `RequireData` or other `SpecifyData` mixtures) to be mixed and merged at compile time. Note that `RequireData` always takes precedence over `ExpectData`, so any `Data` that is listed as both `Expected` and `Required` will ultimately be `Required`.\r\n* This allows us to build up complex, comprehensive data specifications out of smaller, simpler data specifications. For example, we can decompose the data types that are required/expected for a physics engine into the data required/expected for (1) forward kinematics, (2) forward dynamics, (3) inverse kinematics, (4) inverse dynamics, (5) collision detection, (6) collision handling, (7) feedforward control, and (8) feedback control. Then, we can allow users to specify which among those data types they want their plugin to provide, and then we can use those specifications to determine which roles within the physics engine their plugin is capable of performing.\r\n\r\n## Template metaprogramming and static analysis\r\n* Because Data expectations and requirements can be encoded at compile time, we can use the data specifications to perform template metaprogramming and static analysis.\r\n* Examples of this can be found in [CanReadData](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/CanReadData.hh?at=experimental%2Finput&fileviewer=file-view-default) and [CanWriteData](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/CanWriteData.hh?at=experimental%2Finput&fileviewer=file-view-default). These classes use CRTP to guarantee that the class which inherits them provides a `Read(T)` or `Write(T)` function for each of the expected or required (depending on which you select) data types in the specification that they are given.\r\n* These classes are powered by [OperateOnSpecifiedData](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/OperateOnSpecifiedData.hh?at=experimental%2Finput&fileviewer=file-view-default) which is a very generalized interface for traversing the specification tree and applying an operation on each instance of the types in the specification that match some condition (currently, we provide the conditions for Expected and Required).\r\n* If a class does not provide a function which can perform the requested operation for each of the specified data types, then the compiler will throw an error and indicate which function is missing for which data types, giving us some nice compile time guarantees about the class's capabilities.\r\n\r\nAltogether, what we achieve here is an ideal balance of (1) complete generality which allows the framework to be highly adaptable and modular, and (2) the ability to strictly enforce conditions and requirements using the native C++ type system.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/1/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:3bf87fe246a9%0Db2c4fb7e7730?from_pullrequest_id=1"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/1/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/1.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/1/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/1/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/1"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/1/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:3bf87fe246a9%0Db2c4fb7e7730?from_pullrequest_id=1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/1/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/1/statuses_page=1.json"}}, "title": "Part 3: CompositeData prototype summary", "close_source_branch": true, "type": "pullrequest", "id": 1, "destination": {"commit": {"hash": "b2c4fb7e7730", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b2c4fb7e7730.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b2c4fb7e7730"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2017-08-24T23:23:08.427976+00:00", "summary": {"raw": "### Edit: This has been broken down into pull request #3 (CMake), pull request #4 (CompositeData), pull request #5 (SpecifyData), and this one (template metaprogramming). The other PRs should be reviewed, in order, before this one, but the overview given in the description below might still be a useful primer.\r\n\r\nThis pull request presents the CompositeData prototype which I described during our Tuesday (8/22) meeting. I'm creating this PR to present the class and concept for review. I don't expect the code itself to be merged. I actually think the work I've done on this so far might really belong in `ignition-common`, because it's not really specific to physics.\r\n\r\n## CompositeData\r\n* CompositeData is an object type that can compose other arbitrary data types, as long as they meet two requirements:\r\n    1. It follows the [Rule of Zero, Rule of Three, or Rule of Five](http://en.cppreference.com/w/cpp/language/rule_of_three) (preferably zero or five)\r\n    2. It contains the macro `IGN_PHYSICS_DATA_LABEL(some::unique::name)`\r\n* Requirement (2) is unfortunate, but it seems necessary in order to guarantee compatibility across shared library boundaries. If a user wants to add data that matches requirement (1) but not (2), they can always define a dummy struct to contain their data, and put the macro into the dummy struct. They could even create a \"labeled\" version of their data which simply inherits the data they want and adds the macro to its class definition.\r\n* CompositeData has a pretty [thorough API](#!/ignitionrobotics/ign-physics/src/ab61cc8e5f59daaca382d908da422d154f07f6ca/include/ignition/physics/CompositeData.hh?at=experimental%2Finput&fileviewer=file-view-default#CompositeData.hh-56)\r\n    * `Get<T>()` returns a reference to `T`, which means if the data type did not exist in the `CompositeData`, it will be created using the default constructor. If a default constructor is not available, then the object must be retrieved using `Query<T>()` (described below). The basic `CompositeData` class does not have a const-qualified version of `Get<T>()`, but the `RequireData<T>` extension (described below) does provide const-qualified `Get<T>()` using a bunch of template metaprogramming wizardry.\r\n    * `Create<T>(args)` will create a `T` using `args`. If a `T` already existed, it will be overwritten.\r\n    * `GetOrCreate<T>(args)` will do the same as `Get<T>()` unless the object didn't exist, in which case it will do the same as `Create<T>(args)`. **We can absolutely get rid of this and change `Get<T>()` to accept `args` and exhibit this exact same behavior**. The reason I chose to write a `GetOrCreate<T>()` separate from `Get<T>()` is because:\r\n        * I suspect `Get<T>()`, in the way I designed it, is going to be the most desired use case of handling data within the `CompositeData` object.\r\n        * I'm worried that `Get<T>(args)` will make people think that they're looking up a `T` that matches `args` (rather than creating a `T` using `args` if the `T` was unavailable). For example, I don't want people to think `data.Get<JointProperty>(2)` is going to get the `JointProperty` of joint index `2` when really it would be constructing a `JointProperty` with the argument of `2`.\r\n    * `Remove<T>()` will remove the `T` object if it exists and it is not marked as required (explained below).\r\n    * `Query<T>()` will return a pointer to `T` which will be `nullptr` if `T` is not available. Note that you can choose to perform a \"silent\" query (query tracking will be explained later). A const-qualified version `Query<T>() const` is always available, regardless of requirements.\r\n    * `Has<T>()` tests for existence. This can also be called silently.\r\n    * `StatusOf<T>()` provides a struct that describes the metadata of `T`. This also has a silent mode.\r\n    * `Unquery<T>()` only affects some metadata and has no impact on the actual data.\r\n    * `MakeRequired<T>()` will mark `T` as required so that it can not be deleted until the end of the `CompositeData` object's lifespan. Explained more later.\r\n    * `Copy(~)` can copy data between `CompositeData` objects, and there are some options to change the behavior of `Copy(~)` based on metadata. Note that `Copy(~)` is not allowed to delete data that is marked as required.\r\n* Certain metadata is tracked by the CompositeData object, such as query flags. The query flags will keep track of which data you have explicitly handled by its type (as opposed to implicitly handled through a `Copy` operation). If you have done all the work you intend to do on a `CompositeData` object but some data fields remain unqueried, it may be an indication that there are data types you are not handling, either on purpose or by accident. This query tracking can be used for debugging purposes, or to warn users about potential incompatibilities.\r\n* Requirements are also tracked by the `CompositeData`. Data types can be marked as required by `MakeRequired<T>()`. After being marked as required, the data cannot be deleted until the end of the object's lifecycle. This allows users and developers to enforce that their data dependencies are met. Requirements can be added at run time, but they cannot be removed during run time. The class `RequireData` (described below) can statically express and enforce requirements.\r\n\r\n## ExpectData<Data1, ... , DataN>\r\n* `ExpectData` is an extension of `CompositeData` which has all the same functionality, but it provides extremely low-cost versions of the `CompositeData` API for any Data types that are passed to it as template arguments at compile time. Other than that, it's identical.\r\n* I created a [performance test](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/test/performance/ExpectData.cc?at=experimental%2Finput&fileviewer=file-view-default) which demonstrates that the `ExpectData` class improves access speed by roughly 2 **orders of magnitude** over the map lookup (~1ns per access rather than ~100ns per access).\r\n* Types that get listed by `ExpectData` are still optional; this class has no impact on requirements.\r\n* It's a variadic template, so any number of Data types can be given to it.\r\n\r\n## RequireData<Data1, ..., DataN>\r\n* `RequireData` is an extension of `ExpectData` which additionally marks its Data types as required, both at compile time and at run time.\r\n* As mentioned earlier, data types marked as required must exist and cannot be deleted until the `CompositeData` leaves scope.\r\n* Because `RequireData<T>` enforces the existence of a `T` type at compile time, it also provides a const-qualified `Get<T>() const`.\r\n\r\n## SpecifyData<Spec1, ... , SpecN>\r\n* `SpecifyData` is an extension of `CompositeData` which allows data specifications (e.g. `ExpectData` and `RequireData` or other `SpecifyData` mixtures) to be mixed and merged at compile time. Note that `RequireData` always takes precedence over `ExpectData`, so any `Data` that is listed as both `Expected` and `Required` will ultimately be `Required`.\r\n* This allows us to build up complex, comprehensive data specifications out of smaller, simpler data specifications. For example, we can decompose the data types that are required/expected for a physics engine into the data required/expected for (1) forward kinematics, (2) forward dynamics, (3) inverse kinematics, (4) inverse dynamics, (5) collision detection, (6) collision handling, (7) feedforward control, and (8) feedback control. Then, we can allow users to specify which among those data types they want their plugin to provide, and then we can use those specifications to determine which roles within the physics engine their plugin is capable of performing.\r\n\r\n## Template metaprogramming and static analysis\r\n* Because Data expectations and requirements can be encoded at compile time, we can use the data specifications to perform template metaprogramming and static analysis.\r\n* Examples of this can be found in [CanReadData](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/CanReadData.hh?at=experimental%2Finput&fileviewer=file-view-default) and [CanWriteData](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/CanWriteData.hh?at=experimental%2Finput&fileviewer=file-view-default). These classes use CRTP to guarantee that the class which inherits them provides a `Read(T)` or `Write(T)` function for each of the expected or required (depending on which you select) data types in the specification that they are given.\r\n* These classes are powered by [OperateOnSpecifiedData](#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/OperateOnSpecifiedData.hh?at=experimental%2Finput&fileviewer=file-view-default) which is a very generalized interface for traversing the specification tree and applying an operation on each instance of the types in the specification that match some condition (currently, we provide the conditions for Expected and Required).\r\n* If a class does not provide a function which can perform the requested operation for each of the specified data types, then the compiler will throw an error and indicate which function is missing for which data types, giving us some nice compile time guarantees about the class's capabilities.\r\n\r\nAltogether, what we achieve here is an ideal balance of (1) complete generality which allows the framework to be highly adaptable and modular, and (2) the ability to strictly enforce conditions and requirements using the native C++ type system.", "markup": "markdown", "html": "<h3 id=\"markdown-header-edit-this-has-been-broken-down-into-pull-request-3-cmake-pull-request-4-compositedata-pull-request-5-specifydata-and-this-one-template-metaprogramming-the-other-prs-should-be-reviewed-in-order-before-this-one-but-the-overview-given-in-the-description-below-might-still-be-a-useful-primer\">Edit: This has been broken down into <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/3/changes-to-the-cmake-setup\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #3</a> (CMake), <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/4/part-1-compositedata-implementation-and\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #4</a> (CompositeData), <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/5/part-2-compositedata-specifydata\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #5</a> (SpecifyData), and this one (template metaprogramming). The other PRs should be reviewed, in order, before this one, but the overview given in the description below might still be a useful primer.</h3>\n<p>This pull request presents the CompositeData prototype which I described during our Tuesday (8/22) meeting. I'm creating this PR to present the class and concept for review. I don't expect the code itself to be merged. I actually think the work I've done on this so far might really belong in <code>ignition-common</code>, because it's not really specific to physics.</p>\n<h2 id=\"markdown-header-compositedata\">CompositeData</h2>\n<ul>\n<li>CompositeData is an object type that can compose other arbitrary data types, as long as they meet two requirements:<ol>\n<li>It follows the <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/language/rule_of_three\" rel=\"nofollow\">Rule of Zero, Rule of Three, or Rule of Five</a> (preferably zero or five)</li>\n<li>It contains the macro <code>IGN_PHYSICS_DATA_LABEL(some::unique::name)</code></li>\n</ol>\n</li>\n<li>Requirement (2) is unfortunate, but it seems necessary in order to guarantee compatibility across shared library boundaries. If a user wants to add data that matches requirement (1) but not (2), they can always define a dummy struct to contain their data, and put the macro into the dummy struct. They could even create a \"labeled\" version of their data which simply inherits the data they want and adds the macro to its class definition.</li>\n<li>CompositeData has a pretty <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/ab61cc8e5f59daaca382d908da422d154f07f6ca/include/ignition/physics/CompositeData.hh?at=experimental%2Finput&amp;fileviewer=file-view-default#CompositeData.hh-56\" rel=\"nofollow\">thorough API</a><ul>\n<li><code>Get&lt;T&gt;()</code> returns a reference to <code>T</code>, which means if the data type did not exist in the <code>CompositeData</code>, it will be created using the default constructor. If a default constructor is not available, then the object must be retrieved using <code>Query&lt;T&gt;()</code> (described below). The basic <code>CompositeData</code> class does not have a const-qualified version of <code>Get&lt;T&gt;()</code>, but the <code>RequireData&lt;T&gt;</code> extension (described below) does provide const-qualified <code>Get&lt;T&gt;()</code> using a bunch of template metaprogramming wizardry.</li>\n<li><code>Create&lt;T&gt;(args)</code> will create a <code>T</code> using <code>args</code>. If a <code>T</code> already existed, it will be overwritten.</li>\n<li><code>GetOrCreate&lt;T&gt;(args)</code> will do the same as <code>Get&lt;T&gt;()</code> unless the object didn't exist, in which case it will do the same as <code>Create&lt;T&gt;(args)</code>. <strong>We can absolutely get rid of this and change <code>Get&lt;T&gt;()</code> to accept <code>args</code> and exhibit this exact same behavior</strong>. The reason I chose to write a <code>GetOrCreate&lt;T&gt;()</code> separate from <code>Get&lt;T&gt;()</code> is because:<ul>\n<li>I suspect <code>Get&lt;T&gt;()</code>, in the way I designed it, is going to be the most desired use case of handling data within the <code>CompositeData</code> object.</li>\n<li>I'm worried that <code>Get&lt;T&gt;(args)</code> will make people think that they're looking up a <code>T</code> that matches <code>args</code> (rather than creating a <code>T</code> using <code>args</code> if the <code>T</code> was unavailable). For example, I don't want people to think <code>data.Get&lt;JointProperty&gt;(2)</code> is going to get the <code>JointProperty</code> of joint index <code>2</code> when really it would be constructing a <code>JointProperty</code> with the argument of <code>2</code>.</li>\n</ul>\n</li>\n<li><code>Remove&lt;T&gt;()</code> will remove the <code>T</code> object if it exists and it is not marked as required (explained below).</li>\n<li><code>Query&lt;T&gt;()</code> will return a pointer to <code>T</code> which will be <code>nullptr</code> if <code>T</code> is not available. Note that you can choose to perform a \"silent\" query (query tracking will be explained later). A const-qualified version <code>Query&lt;T&gt;() const</code> is always available, regardless of requirements.</li>\n<li><code>Has&lt;T&gt;()</code> tests for existence. This can also be called silently.</li>\n<li><code>StatusOf&lt;T&gt;()</code> provides a struct that describes the metadata of <code>T</code>. This also has a silent mode.</li>\n<li><code>Unquery&lt;T&gt;()</code> only affects some metadata and has no impact on the actual data.</li>\n<li><code>MakeRequired&lt;T&gt;()</code> will mark <code>T</code> as required so that it can not be deleted until the end of the <code>CompositeData</code> object's lifespan. Explained more later.</li>\n<li><code>Copy(~)</code> can copy data between <code>CompositeData</code> objects, and there are some options to change the behavior of <code>Copy(~)</code> based on metadata. Note that <code>Copy(~)</code> is not allowed to delete data that is marked as required.</li>\n</ul>\n</li>\n<li>Certain metadata is tracked by the CompositeData object, such as query flags. The query flags will keep track of which data you have explicitly handled by its type (as opposed to implicitly handled through a <code>Copy</code> operation). If you have done all the work you intend to do on a <code>CompositeData</code> object but some data fields remain unqueried, it may be an indication that there are data types you are not handling, either on purpose or by accident. This query tracking can be used for debugging purposes, or to warn users about potential incompatibilities.</li>\n<li>Requirements are also tracked by the <code>CompositeData</code>. Data types can be marked as required by <code>MakeRequired&lt;T&gt;()</code>. After being marked as required, the data cannot be deleted until the end of the object's lifecycle. This allows users and developers to enforce that their data dependencies are met. Requirements can be added at run time, but they cannot be removed during run time. The class <code>RequireData</code> (described below) can statically express and enforce requirements.</li>\n</ul>\n<h2 id=\"markdown-header-expectdatadata1-datan\">ExpectData&lt;Data1, ... , DataN&gt;</h2>\n<ul>\n<li><code>ExpectData</code> is an extension of <code>CompositeData</code> which has all the same functionality, but it provides extremely low-cost versions of the <code>CompositeData</code> API for any Data types that are passed to it as template arguments at compile time. Other than that, it's identical.</li>\n<li>I created a <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/test/performance/ExpectData.cc?at=experimental%2Finput&amp;fileviewer=file-view-default\" rel=\"nofollow\">performance test</a> which demonstrates that the <code>ExpectData</code> class improves access speed by roughly 2 <strong>orders of magnitude</strong> over the map lookup (~1ns per access rather than ~100ns per access).</li>\n<li>Types that get listed by <code>ExpectData</code> are still optional; this class has no impact on requirements.</li>\n<li>It's a variadic template, so any number of Data types can be given to it.</li>\n</ul>\n<h2 id=\"markdown-header-requiredatadata1-datan\">RequireData&lt;Data1, ..., DataN&gt;</h2>\n<ul>\n<li><code>RequireData</code> is an extension of <code>ExpectData</code> which additionally marks its Data types as required, both at compile time and at run time.</li>\n<li>As mentioned earlier, data types marked as required must exist and cannot be deleted until the <code>CompositeData</code> leaves scope.</li>\n<li>Because <code>RequireData&lt;T&gt;</code> enforces the existence of a <code>T</code> type at compile time, it also provides a const-qualified <code>Get&lt;T&gt;() const</code>.</li>\n</ul>\n<h2 id=\"markdown-header-specifydataspec1-specn\">SpecifyData&lt;Spec1, ... , SpecN&gt;</h2>\n<ul>\n<li><code>SpecifyData</code> is an extension of <code>CompositeData</code> which allows data specifications (e.g. <code>ExpectData</code> and <code>RequireData</code> or other <code>SpecifyData</code> mixtures) to be mixed and merged at compile time. Note that <code>RequireData</code> always takes precedence over <code>ExpectData</code>, so any <code>Data</code> that is listed as both <code>Expected</code> and <code>Required</code> will ultimately be <code>Required</code>.</li>\n<li>This allows us to build up complex, comprehensive data specifications out of smaller, simpler data specifications. For example, we can decompose the data types that are required/expected for a physics engine into the data required/expected for (1) forward kinematics, (2) forward dynamics, (3) inverse kinematics, (4) inverse dynamics, (5) collision detection, (6) collision handling, (7) feedforward control, and (8) feedback control. Then, we can allow users to specify which among those data types they want their plugin to provide, and then we can use those specifications to determine which roles within the physics engine their plugin is capable of performing.</li>\n</ul>\n<h2 id=\"markdown-header-template-metaprogramming-and-static-analysis\">Template metaprogramming and static analysis</h2>\n<ul>\n<li>Because Data expectations and requirements can be encoded at compile time, we can use the data specifications to perform template metaprogramming and static analysis.</li>\n<li>Examples of this can be found in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/CanReadData.hh?at=experimental%2Finput&amp;fileviewer=file-view-default\" rel=\"nofollow\">CanReadData</a> and <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/CanWriteData.hh?at=experimental%2Finput&amp;fileviewer=file-view-default\" rel=\"nofollow\">CanWriteData</a>. These classes use CRTP to guarantee that the class which inherits them provides a <code>Read(T)</code> or <code>Write(T)</code> function for each of the expected or required (depending on which you select) data types in the specification that they are given.</li>\n<li>These classes are powered by <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/5ab9af8902ef3b04b8ac28f777a43b3809b9b1f3/include/ignition/physics/OperateOnSpecifiedData.hh?at=experimental%2Finput&amp;fileviewer=file-view-default\" rel=\"nofollow\">OperateOnSpecifiedData</a> which is a very generalized interface for traversing the specification tree and applying an operation on each instance of the types in the specification that match some condition (currently, we provide the conditions for Expected and Required).</li>\n<li>If a class does not provide a function which can perform the requested operation for each of the specified data types, then the compiler will throw an error and indicate which function is missing for which data types, giving us some nice compile time guarantees about the class's capabilities.</li>\n</ul>\n<p>Altogether, what we achieve here is an ideal balance of (1) complete generality which allows the framework to be highly adaptable and modular, and (2) the ability to strictly enforce conditions and requirements using the native C++ type system.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4297959e0921", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4297959e0921.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4297959e0921"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/input"}}, "comment_count": 78, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-06-06T09:34:36.996739+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "3bf87fe246a9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3bf87fe246a9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3bf87fe246a9"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/2/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:3f8e51d6e016%0D79076e02b39e?from_pullrequest_id=2"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/2/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:3f8e51d6e016%0D79076e02b39e?from_pullrequest_id=2"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/2/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/statuses_page=1.json"}}, "title": "Created OperationalSpaceController plugin example that uses DART", "close_source_branch": false, "type": "pullrequest", "id": 2, "destination": {"commit": {"hash": "79076e02b39e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/79076e02b39e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/79076e02b39e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2017-08-26T00:28:02.378460+00:00", "summary": {"raw": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "markup": "markdown", "html": "<p>This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the <code>CompositeData</code> prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.</p>\n<p>This demo utilizes the Plugin framework from <code>ignition::common</code>, specialized plugins, <code>CompositeData</code>, <code>SpecifyData</code>, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.</p>\n<p>The purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&amp;fileviewer=file-view-default\" rel=\"nofollow\">test here</a> you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.</p>\n<p>Prior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the <code>ignition::physics::SetState</code> interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).</p>\n<p>You can see the implementation of the dart plugin <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&amp;fileviewer=file-view-default\" rel=\"nofollow\">here</a>. Most of it is copy-pasted from a <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp\" rel=\"nofollow\">dart example program</a>. Note that this plugin is compiled to its own library, separate from <code>ignition-physics</code>, and the test program does <strong>not</strong> link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using <code>ignition-physics</code> and <code>ignition-common</code> headers).</p>", "type": "rendered"}, "source": {"commit": {"hash": "3f8e51d6e016", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f8e51d6e016.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f8e51d6e016"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "comment_count": 68, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2019-01-28T19:18:56.303422+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR separates the CMake changes from pull request #1 to hopefully make reviewing less painful.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/3/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:4ac9620f89b3%0D1ff1098d60e1?from_pullrequest_id=3"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/3/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/3.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/3/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/3/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/3"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/3/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:4ac9620f89b3%0D1ff1098d60e1?from_pullrequest_id=3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/3/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/3/statuses_page=1.json"}}, "title": "Changes to the CMake Setup", "close_source_branch": true, "type": "pullrequest", "id": 3, "destination": {"commit": {"hash": "1ff1098d60e1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/1ff1098d60e1.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/1ff1098d60e1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2017-08-29T19:13:09.538040+00:00", "summary": {"raw": "This PR separates the CMake changes from pull request #1 to hopefully make reviewing less painful.", "markup": "markdown", "html": "<p>This PR separates the CMake changes from <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/1/part-3-compositedata-prototype-summary\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1</a> to hopefully make reviewing less painful.</p>", "type": "rendered"}, "source": {"commit": {"hash": "d36e98afdcc5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/d36e98afdcc5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/d36e98afdcc5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "CMakeSetup"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2017-11-08T05:52:44.324590+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "4ac9620f89b3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ac9620f89b3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ac9620f89b3"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/4/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:c9ee40f3b831%0D27507b93b292?from_pullrequest_id=4"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/4/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:c9ee40f3b831%0D27507b93b292?from_pullrequest_id=4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/4/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/statuses_page=1.json"}}, "title": "Part 1: CompositeData implementation and tests", "close_source_branch": true, "type": "pullrequest", "id": 4, "destination": {"commit": {"hash": "27507b93b292", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/27507b93b292.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/27507b93b292"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2017-08-29T20:20:10.843994+00:00", "summary": {"raw": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "markup": "markdown", "html": "<p>This pull request is a spin-off of <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/1/part-3-compositedata-prototype-summary\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1</a>. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fab914be2048", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fab914be2048.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fab914be2048"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "comment_count": 114, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-04-19T05:39:57.283609+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "c9ee40f3b831", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c9ee40f3b831.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c9ee40f3b831"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "This PR is a spin-off of pull request #1 and builds on pull request #4. This only introduces the SpecifyData, ExpectData, and RequireData implementations, plus their tests.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/5/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:b2c4fb7e7730%0D8eb69edea97d?from_pullrequest_id=5"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/5/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:b2c4fb7e7730%0D8eb69edea97d?from_pullrequest_id=5"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/5/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/statuses_page=1.json"}}, "title": "Part 2: CompositeData, SpecifyData implementation and tests", "close_source_branch": true, "type": "pullrequest", "id": 5, "destination": {"commit": {"hash": "8eb69edea97d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8eb69edea97d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8eb69edea97d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2017-08-29T20:28:22.117557+00:00", "summary": {"raw": "This PR is a spin-off of pull request #1 and builds on pull request #4. This only introduces the SpecifyData, ExpectData, and RequireData implementations, plus their tests.", "markup": "markdown", "html": "<p>This PR is a spin-off of <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/1/part-3-compositedata-prototype-summary\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1</a> and builds on <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/4/part-1-compositedata-implementation-and\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #4</a>. This only introduces the SpecifyData, ExpectData, and RequireData implementations, plus their tests.</p>", "type": "rendered"}, "source": {"commit": {"hash": "bc902981b001", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/bc902981b001.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/bc902981b001"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustSpecifyData"}}, "comment_count": 99, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-04-30T21:05:36.350604+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "b2c4fb7e7730", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b2c4fb7e7730.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b2c4fb7e7730"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "* Revert style fixes for example program to make it easier to see what has changed\r\n\r\n* move Simulate function closer to Constructor to make diff easier to read\r\n\r\nThis doesn't have to be merged, but I think it's valuable to be able to see what changes are needed when adapting an example to use ignition-physics. Compare to the source:\r\n\r\n* https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp#L45-L107", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/6/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:0adb74e0d141%0Dfce615712b6c?from_pullrequest_id=6"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/6/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/6.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/6/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/6/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/6"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/6/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:0adb74e0d141%0Dfce615712b6c?from_pullrequest_id=6"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/6/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/6/statuses_page=1.json"}}, "title": "exp/dart: reduce differences from original example", "close_source_branch": true, "type": "pullrequest", "id": 6, "destination": {"commit": {"hash": "fce615712b6c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fce615712b6c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fce615712b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "created_on": "2017-09-01T21:26:54.731204+00:00", "summary": {"raw": "* Revert style fixes for example program to make it easier to see what has changed\r\n\r\n* move Simulate function closer to Constructor to make diff easier to read\r\n\r\nThis doesn't have to be merged, but I think it's valuable to be able to see what changes are needed when adapting an example to use ignition-physics. Compare to the source:\r\n\r\n* https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp#L45-L107", "markup": "markdown", "html": "<ul>\n<li>\n<p>Revert style fixes for example program to make it easier to see what has changed</p>\n</li>\n<li>\n<p>move Simulate function closer to Constructor to make diff easier to read</p>\n</li>\n</ul>\n<p>This doesn't have to be merged, but I think it's valuable to be able to see what changes are needed when adapting an example to use ignition-physics. Compare to the source:</p>\n<ul>\n<li><a href=\"https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp#L45-L107\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp#L45-L107</a></li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "7608405c3c8b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/7608405c3c8b.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/7608405c3c8b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart/scpeters"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-03-13T21:34:02.157393+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "0adb74e0d141", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0adb74e0d141.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0adb74e0d141"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "Fixed some comment typos", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/7/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:8ef5346ffdda%0Da08de1880060?from_pullrequest_id=7"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/7/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/7.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/7/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/7/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/7"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/7/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:8ef5346ffdda%0Da08de1880060?from_pullrequest_id=7"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/7/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/7/statuses_page=1.json"}}, "title": "Some typo fix during review", "close_source_branch": true, "type": "pullrequest", "id": 7, "destination": {"commit": {"hash": "a08de1880060", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/a08de1880060.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/a08de1880060"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "created_on": "2017-10-10T02:31:42.386282+00:00", "summary": {"raw": "Fixed some comment typos", "markup": "markdown", "html": "<p>Fixed some comment typos</p>", "type": "rendered"}, "source": {"commit": {"hash": "aa5b2687b0f9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/aa5b2687b0f9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/aa5b2687b0f9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "typo_fix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2017-11-09T01:14:06.414594+00:00", "author": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "merge_commit": {"hash": "8ef5346ffdda", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8ef5346ffdda.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8ef5346ffdda"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "1. This requires ODE install locally, I used ODE 0.15.1 tarball installation\r\n2. The buggyDemo is from ODE [here](https://bitbucket.org/odedevs/ode/src/d0ec00dc230099e9a3fe3bb0f42cc09320b9e1b4/ode/demo/demo_buggy.cpp?at=default&fileviewer=file-view-default).  \r\n3. All the `drawstuff` related features are removed from the demo in this PR    \r\n4. More test on orientation of the buggy will be added   \r\n5. This is test against the 2 branches`DllManagement` and `PluginPtrSemantics` of `ign-common` and both passed.   \r\n6. `MathConversions.hh` is more like a naive hard-code tool to make the test run.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/8/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:881314cb0289%0D3f8e51d6e016?from_pullrequest_id=8"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/8/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/8.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/8/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/8/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/8"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/8/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:881314cb0289%0D3f8e51d6e016?from_pullrequest_id=8"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/8/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/8/statuses_page=1.json"}}, "title": "Create a Buggy plugin using ODE to demonstrate the buggyDemo", "close_source_branch": false, "type": "pullrequest", "id": 8, "destination": {"commit": {"hash": "3f8e51d6e016", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f8e51d6e016.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f8e51d6e016"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "created_on": "2017-10-13T21:27:38.292532+00:00", "summary": {"raw": "1. This requires ODE install locally, I used ODE 0.15.1 tarball installation\r\n2. The buggyDemo is from ODE [here](https://bitbucket.org/odedevs/ode/src/d0ec00dc230099e9a3fe3bb0f42cc09320b9e1b4/ode/demo/demo_buggy.cpp?at=default&fileviewer=file-view-default).  \r\n3. All the `drawstuff` related features are removed from the demo in this PR    \r\n4. More test on orientation of the buggy will be added   \r\n5. This is test against the 2 branches`DllManagement` and `PluginPtrSemantics` of `ign-common` and both passed.   \r\n6. `MathConversions.hh` is more like a naive hard-code tool to make the test run.", "markup": "markdown", "html": "<ol>\n<li>This requires ODE install locally, I used ODE 0.15.1 tarball installation</li>\n<li>The buggyDemo is from ODE <a data-is-external-link=\"true\" href=\"https://bitbucket.org/odedevs/ode/src/d0ec00dc230099e9a3fe3bb0f42cc09320b9e1b4/ode/demo/demo_buggy.cpp?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">here</a>.  </li>\n<li>All the <code>drawstuff</code> related features are removed from the demo in this PR    </li>\n<li>More test on orientation of the buggy will be added   </li>\n<li>This is test against the 2 branches<code>DllManagement</code> and <code>PluginPtrSemantics</code> of <code>ign-common</code> and both passed.   </li>\n<li><code>MathConversions.hh</code> is more like a naive hard-code tool to make the test run.</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "881314cb0289", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/881314cb0289.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/881314cb0289"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/ode"}}, "comment_count": 12, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2019-01-28T19:27:09.951874+00:00", "author": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR introduces a prototype implementation of FrameSemantics into `ign-physics`.\r\n\r\nThe goal of the Frame Semantics feature is to provide a way for users to seamlessly express kinematic and dynamic quantities (e.g. positions, forces, torques, wrenches, transforms, velocities, accelerations) in terms of arbitrary reference frames.\r\n\r\nIn this prototype, we use Eigen to make a templated API + implementation which works for 2 or 3 dimensional simulations with float or double precision. This is not currently possible using `ign-math`, because the dimensionalities of its types are fixed.\r\n\r\nI still intend to do some iterating on the implementation details. For one thing, I want to create a generalized \"Feature System\", and make `FrameSemantics` one of those features. In the meantime, the Frame Semantics implementation is working without that broader Feature System, and I anticipate that the API will remain approximately the same, so it would probably be valuable to review the usage of Frame Semantics. In particular, I recommend looking at how the Frame Semantics get used in the test functions:\r\n\r\n- [TestRelativeFrames](#!/ignitionrobotics/ign-physics/src/9c3fa4dfd70859895ca3ba542e677f10fa161931/src/FrameSemantics_TEST.cc?at=FrameSemantics&fileviewer=file-view-default#FrameSemantics_TEST.cc-466)\r\n- [TestFramedQuantities](#!/ignitionrobotics/ign-physics/src/9c3fa4dfd70859895ca3ba542e677f10fa161931/src/FrameSemantics_TEST.cc?at=FrameSemantics&fileviewer=file-view-default#FrameSemantics_TEST.cc-635)\r\n\r\nA high-level explanation of the design concept can be found in the `ignition-physics` design document on Jira.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/9/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:3238ced267ad%0D3f8e51d6e016?from_pullrequest_id=9"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/9/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/9.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/9/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/9/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/9"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/9/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:3238ced267ad%0D3f8e51d6e016?from_pullrequest_id=9"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/9/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/9/statuses_page=1.json"}}, "title": "[WIP] FrameSemantics prototype", "close_source_branch": false, "type": "pullrequest", "id": 9, "destination": {"commit": {"hash": "3f8e51d6e016", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f8e51d6e016.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f8e51d6e016"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "created_on": "2017-11-07T02:30:13.296203+00:00", "summary": {"raw": "This PR introduces a prototype implementation of FrameSemantics into `ign-physics`.\r\n\r\nThe goal of the Frame Semantics feature is to provide a way for users to seamlessly express kinematic and dynamic quantities (e.g. positions, forces, torques, wrenches, transforms, velocities, accelerations) in terms of arbitrary reference frames.\r\n\r\nIn this prototype, we use Eigen to make a templated API + implementation which works for 2 or 3 dimensional simulations with float or double precision. This is not currently possible using `ign-math`, because the dimensionalities of its types are fixed.\r\n\r\nI still intend to do some iterating on the implementation details. For one thing, I want to create a generalized \"Feature System\", and make `FrameSemantics` one of those features. In the meantime, the Frame Semantics implementation is working without that broader Feature System, and I anticipate that the API will remain approximately the same, so it would probably be valuable to review the usage of Frame Semantics. In particular, I recommend looking at how the Frame Semantics get used in the test functions:\r\n\r\n- [TestRelativeFrames](#!/ignitionrobotics/ign-physics/src/9c3fa4dfd70859895ca3ba542e677f10fa161931/src/FrameSemantics_TEST.cc?at=FrameSemantics&fileviewer=file-view-default#FrameSemantics_TEST.cc-466)\r\n- [TestFramedQuantities](#!/ignitionrobotics/ign-physics/src/9c3fa4dfd70859895ca3ba542e677f10fa161931/src/FrameSemantics_TEST.cc?at=FrameSemantics&fileviewer=file-view-default#FrameSemantics_TEST.cc-635)\r\n\r\nA high-level explanation of the design concept can be found in the `ignition-physics` design document on Jira.", "markup": "markdown", "html": "<p>This PR introduces a prototype implementation of FrameSemantics into <code>ign-physics</code>.</p>\n<p>The goal of the Frame Semantics feature is to provide a way for users to seamlessly express kinematic and dynamic quantities (e.g. positions, forces, torques, wrenches, transforms, velocities, accelerations) in terms of arbitrary reference frames.</p>\n<p>In this prototype, we use Eigen to make a templated API + implementation which works for 2 or 3 dimensional simulations with float or double precision. This is not currently possible using <code>ign-math</code>, because the dimensionalities of its types are fixed.</p>\n<p>I still intend to do some iterating on the implementation details. For one thing, I want to create a generalized \"Feature System\", and make <code>FrameSemantics</code> one of those features. In the meantime, the Frame Semantics implementation is working without that broader Feature System, and I anticipate that the API will remain approximately the same, so it would probably be valuable to review the usage of Frame Semantics. In particular, I recommend looking at how the Frame Semantics get used in the test functions:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/9c3fa4dfd70859895ca3ba542e677f10fa161931/src/FrameSemantics_TEST.cc?at=FrameSemantics&amp;fileviewer=file-view-default#FrameSemantics_TEST.cc-466\" rel=\"nofollow\">TestRelativeFrames</a></li>\n<li><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/9c3fa4dfd70859895ca3ba542e677f10fa161931/src/FrameSemantics_TEST.cc?at=FrameSemantics&amp;fileviewer=file-view-default#FrameSemantics_TEST.cc-635\" rel=\"nofollow\">TestFramedQuantities</a></li>\n</ul>\n<p>A high-level explanation of the design concept can be found in the <code>ignition-physics</code> design document on Jira.</p>", "type": "rendered"}, "source": {"commit": {"hash": "3238ced267ad", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3238ced267ad.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3238ced267ad"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "FrameSemantics"}}, "comment_count": 0, "state": "DECLINED", "task_count": 0, "reason": "This is being declined in favor of Pull Request #26.", "updated_on": "2018-08-23T06:21:02.034616+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": null, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "First pass at documentation generation and upload.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/10/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:efbccce50bc9%0D4ac9620f89b3?from_pullrequest_id=10"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/10/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/10.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/10/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/10/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/10"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/10/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:efbccce50bc9%0D4ac9620f89b3?from_pullrequest_id=10"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/10/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/10/statuses_page=1.json"}}, "title": "Doc", "close_source_branch": true, "type": "pullrequest", "id": 10, "destination": {"commit": {"hash": "4ac9620f89b3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ac9620f89b3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ac9620f89b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2017-11-09T18:40:21.280930+00:00", "summary": {"raw": "First pass at documentation generation and upload.", "markup": "markdown", "html": "<p>First pass at documentation generation and upload.</p>", "type": "rendered"}, "source": {"commit": {"hash": "7e9bec5619cc", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/7e9bec5619cc.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/7e9bec5619cc"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "doc"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-02-27T00:11:14.515729+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This is an example of a physics plugin with two minimal types of a ForwardStep implementation. In both cases, the State consists of just a set of WorldPoses, which is copied to the output.\r\n\r\nIn the static scene, the Step function doesn't mutate the state; though the state can be updated by the SetStateTo function.\r\n\r\nIn the falling scene, the Z position of each world pose is decremented with each Step.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/11/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:fd13dff65079%0D3f8e51d6e016?from_pullrequest_id=11"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/11/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/11.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/11/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/11/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/11"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/11/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:fd13dff65079%0D3f8e51d6e016?from_pullrequest_id=11"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/11/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/11/statuses_page=1.json"}}, "title": "Minimal examples: static scene and falling scene", "close_source_branch": false, "type": "pullrequest", "id": 11, "destination": {"commit": {"hash": "3f8e51d6e016", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f8e51d6e016.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f8e51d6e016"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "created_on": "2017-12-14T01:40:52.744528+00:00", "summary": {"raw": "This is an example of a physics plugin with two minimal types of a ForwardStep implementation. In both cases, the State consists of just a set of WorldPoses, which is copied to the output.\r\n\r\nIn the static scene, the Step function doesn't mutate the state; though the state can be updated by the SetStateTo function.\r\n\r\nIn the falling scene, the Z position of each world pose is decremented with each Step.", "markup": "markdown", "html": "<p>This is an example of a physics plugin with two minimal types of a ForwardStep implementation. In both cases, the State consists of just a set of WorldPoses, which is copied to the output.</p>\n<p>In the static scene, the Step function doesn't mutate the state; though the state can be updated by the SetStateTo function.</p>\n<p>In the falling scene, the Z position of each world pose is decremented with each Step.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fd13dff65079", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fd13dff65079.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fd13dff65079"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/minimal_example"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2019-01-28T19:25:25.908934+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This is a simplified version of the Operational Space controller in pull request #2 that uses DART to simulate a double pendulum (borrowed from [gazebo_ros_demos/rrbot_description](https://github.com/ros-simulation/gazebo_ros_demos/blob/kinetic-devel/rrbot_description/urdf/rrbot.xml), thanks @davetcoleman), but a PID controller is implemented outside the plugin in `DoublePendulum_TEST.cc`, with the plugin interface providing effort inputs and joint position outputs. A follow-up pull request will re-implement the physics backend with another physics engine and use the same PID controller in the test. This goal is to demonstrate an abstract interface in which multiple physics engines can be plugged in and out.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/12/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:b0e23692cca3%0Dfd13dff65079?from_pullrequest_id=12"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/12/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/12.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/12/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/12/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/12"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/12/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:b0e23692cca3%0Dfd13dff65079?from_pullrequest_id=12"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/12/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/12/statuses_page=1.json"}}, "title": "Example: double pendulum with PID control using dart", "close_source_branch": false, "type": "pullrequest", "id": 12, "destination": {"commit": {"hash": "fd13dff65079", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fd13dff65079.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fd13dff65079"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/minimal_example"}}, "created_on": "2018-02-01T00:59:59.548925+00:00", "summary": {"raw": "This is a simplified version of the Operational Space controller in pull request #2 that uses DART to simulate a double pendulum (borrowed from [gazebo_ros_demos/rrbot_description](https://github.com/ros-simulation/gazebo_ros_demos/blob/kinetic-devel/rrbot_description/urdf/rrbot.xml), thanks @davetcoleman), but a PID controller is implemented outside the plugin in `DoublePendulum_TEST.cc`, with the plugin interface providing effort inputs and joint position outputs. A follow-up pull request will re-implement the physics backend with another physics engine and use the same PID controller in the test. This goal is to demonstrate an abstract interface in which multiple physics engines can be plugged in and out.", "markup": "markdown", "html": "<p>This is a simplified version of the Operational Space controller in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/2/created-operationalspacecontroller-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2</a> that uses DART to simulate a double pendulum (borrowed from <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_demos/blob/kinetic-devel/rrbot_description/urdf/rrbot.xml\" rel=\"nofollow\">gazebo_ros_demos/rrbot_description</a>, thanks @davetcoleman), but a PID controller is implemented outside the plugin in <code>DoublePendulum_TEST.cc</code>, with the plugin interface providing effort inputs and joint position outputs. A follow-up pull request will re-implement the physics backend with another physics engine and use the same PID controller in the test. This goal is to demonstrate an abstract interface in which multiple physics engines can be plugged in and out.</p>", "type": "rendered"}, "source": {"commit": {"hash": "b0e23692cca3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b0e23692cca3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b0e23692cca3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/double_pendulum"}}, "comment_count": 6, "state": "DECLINED", "task_count": 0, "reason": "see pull request #15", "updated_on": "2018-03-23T20:07:15.538679+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This builds on the double pendulum example using dart in pull request #12. With both physics engines installed, this branch provides a prototype of the physics abstraction layer. To simplify the build process and loading and finding plugin libraries, the `BulletDoublePendulum` plugin is added to the `ignition-physics-dart` library by using the same folder and adding symbols to the plugins.cc. It could alternatively be located in its own library file, or it could be called `ignition::physics::bullet::DoublePendulum` if we rearranged the code in subfolders, but this was expedient for this prototype.\r\n\r\nI did have to relax some expectations in the test, possibly because `libbullet-dev` is compiled with single precision, while dart is using double precision. I also had to relax the expectations on repeatability after resetting the state; I'm not sure why. It could be that some state variables are missing or the solver should be reset in some way. At this point, I think that's ok; there will be different levels of accuracy for different physics engines, so we can think about how we want to encode different expectations.\r\n\r\nNote that I initially made an ODE example in the [experimental/double_pendulum/ode branch](#!/ignitionrobotics/ign-physics/branch/experimental/double_pendulum/ode), but I switched to bullet after I noticed that in upstream ODE, the hinge joint always reports angles between [-PI, PI], while this controller expects unwrapped angles. We have this feature in our fork of ODE, and this feature was added to bullet ([see upstream feature request](https://github.com/bulletphysics/bullet3/issues/42)). I will work on upstreaming some of the changes in our fork of ODE, but for now it was easier to make the example with bullet.\r\n\r\nThere are a couple non-urgent TODO items that I noted:\r\n\r\n* I don't clean up any of the memory that I allocate with `new`\r\n* bullet has some support for serialization, which might be useful for saving state\r\n* it would be interesting to implement this example with btMultibody to try the new Featherstone API", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/13/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:12f775197182%0Db0e23692cca3?from_pullrequest_id=13"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/13/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/13.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/13/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/13/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/13"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/13/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:12f775197182%0Db0e23692cca3?from_pullrequest_id=13"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/13/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/13/statuses_page=1.json"}}, "title": "Example: double pendulum with PID control using bullet", "close_source_branch": false, "type": "pullrequest", "id": 13, "destination": {"commit": {"hash": "b0e23692cca3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b0e23692cca3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b0e23692cca3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/double_pendulum"}}, "created_on": "2018-02-08T20:48:38.026540+00:00", "summary": {"raw": "This builds on the double pendulum example using dart in pull request #12. With both physics engines installed, this branch provides a prototype of the physics abstraction layer. To simplify the build process and loading and finding plugin libraries, the `BulletDoublePendulum` plugin is added to the `ignition-physics-dart` library by using the same folder and adding symbols to the plugins.cc. It could alternatively be located in its own library file, or it could be called `ignition::physics::bullet::DoublePendulum` if we rearranged the code in subfolders, but this was expedient for this prototype.\r\n\r\nI did have to relax some expectations in the test, possibly because `libbullet-dev` is compiled with single precision, while dart is using double precision. I also had to relax the expectations on repeatability after resetting the state; I'm not sure why. It could be that some state variables are missing or the solver should be reset in some way. At this point, I think that's ok; there will be different levels of accuracy for different physics engines, so we can think about how we want to encode different expectations.\r\n\r\nNote that I initially made an ODE example in the [experimental/double_pendulum/ode branch](#!/ignitionrobotics/ign-physics/branch/experimental/double_pendulum/ode), but I switched to bullet after I noticed that in upstream ODE, the hinge joint always reports angles between [-PI, PI], while this controller expects unwrapped angles. We have this feature in our fork of ODE, and this feature was added to bullet ([see upstream feature request](https://github.com/bulletphysics/bullet3/issues/42)). I will work on upstreaming some of the changes in our fork of ODE, but for now it was easier to make the example with bullet.\r\n\r\nThere are a couple non-urgent TODO items that I noted:\r\n\r\n* I don't clean up any of the memory that I allocate with `new`\r\n* bullet has some support for serialization, which might be useful for saving state\r\n* it would be interesting to implement this example with btMultibody to try the new Featherstone API", "markup": "markdown", "html": "<p>This builds on the double pendulum example using dart in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/12/example-double-pendulum-with-pid-control\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #12</a>. With both physics engines installed, this branch provides a prototype of the physics abstraction layer. To simplify the build process and loading and finding plugin libraries, the <code>BulletDoublePendulum</code> plugin is added to the <code>ignition-physics-dart</code> library by using the same folder and adding symbols to the plugins.cc. It could alternatively be located in its own library file, or it could be called <code>ignition::physics::bullet::DoublePendulum</code> if we rearranged the code in subfolders, but this was expedient for this prototype.</p>\n<p>I did have to relax some expectations in the test, possibly because <code>libbullet-dev</code> is compiled with single precision, while dart is using double precision. I also had to relax the expectations on repeatability after resetting the state; I'm not sure why. It could be that some state variables are missing or the solver should be reset in some way. At this point, I think that's ok; there will be different levels of accuracy for different physics engines, so we can think about how we want to encode different expectations.</p>\n<p>Note that I initially made an ODE example in the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/branch/experimental/double_pendulum/ode\" rel=\"nofollow\">experimental/double_pendulum/ode branch</a>, but I switched to bullet after I noticed that in upstream ODE, the hinge joint always reports angles between [-PI, PI], while this controller expects unwrapped angles. We have this feature in our fork of ODE, and this feature was added to bullet (<a data-is-external-link=\"true\" href=\"https://github.com/bulletphysics/bullet3/issues/42\" rel=\"nofollow\">see upstream feature request</a>). I will work on upstreaming some of the changes in our fork of ODE, but for now it was easier to make the example with bullet.</p>\n<p>There are a couple non-urgent TODO items that I noted:</p>\n<ul>\n<li>I don't clean up any of the memory that I allocate with <code>new</code></li>\n<li>bullet has some support for serialization, which might be useful for saving state</li>\n<li>it would be interesting to implement this example with btMultibody to try the new Featherstone API</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "12f775197182", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/12f775197182.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/12f775197182"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/double_pendulum/bullet"}}, "comment_count": 4, "state": "DECLINED", "task_count": 0, "reason": "see pull request #16", "updated_on": "2018-03-23T20:52:03.075253+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This is mostly a proposal, and I'm also looking for an approach that is easier to scale (e.g. easy add more tests).\r\n\r\nThe proposal is to add `valgrind --tool=memcheck` to our tests. A memory leak will cause pipelines to fail. \r\n\r\nOpen questions:\r\n\r\n1. Is this a good practice?\r\n2. How should valgrind be used?\r\n\r\n    a.  We could run valgrind against all the tests. That seems overkill, and gtest and other testing tools/frameworks/mocks might get in the way.\r\n\r\n    b. Another option would be to run valgrind again integration tests only. Same problem as Option A\r\n\r\n    c.  This PR takes a third approach, which is to create a `gtest` free executable that is run against valgrind. This approach requires more work, but it mimics how the physics library will be used by downstream users.\r\n\r\n3. Can `ign-cmake` be extended to make valgrind tests easier to add and run?", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/14/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:3f3c978af37a%0D0da5d346b047?from_pullrequest_id=14"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/14/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:3f3c978af37a%0D0da5d346b047?from_pullrequest_id=14"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/14/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/statuses_page=1.json"}}, "title": "[proposal] valgrind", "close_source_branch": false, "type": "pullrequest", "id": 14, "destination": {"commit": {"hash": "0da5d346b047", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0da5d346b047.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0da5d346b047"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "created_on": "2018-03-20T21:17:25.219833+00:00", "summary": {"raw": "This is mostly a proposal, and I'm also looking for an approach that is easier to scale (e.g. easy add more tests).\r\n\r\nThe proposal is to add `valgrind --tool=memcheck` to our tests. A memory leak will cause pipelines to fail. \r\n\r\nOpen questions:\r\n\r\n1. Is this a good practice?\r\n2. How should valgrind be used?\r\n\r\n    a.  We could run valgrind against all the tests. That seems overkill, and gtest and other testing tools/frameworks/mocks might get in the way.\r\n\r\n    b. Another option would be to run valgrind again integration tests only. Same problem as Option A\r\n\r\n    c.  This PR takes a third approach, which is to create a `gtest` free executable that is run against valgrind. This approach requires more work, but it mimics how the physics library will be used by downstream users.\r\n\r\n3. Can `ign-cmake` be extended to make valgrind tests easier to add and run?", "markup": "markdown", "html": "<p>This is mostly a proposal, and I'm also looking for an approach that is easier to scale (e.g. easy add more tests).</p>\n<p>The proposal is to add <code>valgrind --tool=memcheck</code> to our tests. A memory leak will cause pipelines to fail. </p>\n<p>Open questions:</p>\n<ol>\n<li>Is this a good practice?</li>\n<li>\n<p>How should valgrind be used?</p>\n<p>a.  We could run valgrind against all the tests. That seems overkill, and gtest and other testing tools/frameworks/mocks might get in the way.</p>\n<p>b. Another option would be to run valgrind again integration tests only. Same problem as Option A</p>\n<p>c.  This PR takes a third approach, which is to create a <code>gtest</code> free executable that is run against valgrind. This approach requires more work, but it mimics how the physics library will be used by downstream users.</p>\n</li>\n<li>\n<p>Can <code>ign-cmake</code> be extended to make valgrind tests easier to add and run?</p>\n</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "3f3c978af37a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f3c978af37a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f3c978af37a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData_valgriind"}}, "comment_count": 14, "state": "DECLINED", "task_count": 0, "reason": "Moving this to an issue.", "updated_on": "2018-03-26T15:39:04.488400+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": null, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"description": "This is a rebranched version of pull request #12. Original description:\r\n\r\nThis is a simplified version of the Operational Space controller in pull request #2 that uses DART to simulate a double pendulum (borrowed from [gazebo_ros_demos/rrbot_description](https://github.com/ros-simulation/gazebo_ros_demos/blob/kinetic-devel/rrbot_description/urdf/rrbot.xml)), but a PID controller is implemented outside the plugin in `DoublePendulum_TEST.cc`, with the plugin interface providing effort inputs and joint position outputs. A follow-up pull request will re-implement the physics backend with another physics engine and use the same PID controller in the test. This goal is to demonstrate an abstract interface in which multiple physics engines can be plugged in and out.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/15/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:aaaa8959e45b%0Dc89a2392e735?from_pullrequest_id=15"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/15/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/15.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/15/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/15/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/15"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/15/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:aaaa8959e45b%0Dc89a2392e735?from_pullrequest_id=15"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/15/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/15/statuses_page=1.json"}}, "title": "Part 4: DARTDoublePendulum, PID control using dart (rebranched)", "close_source_branch": true, "type": "pullrequest", "id": 15, "destination": {"commit": {"hash": "c89a2392e735", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c89a2392e735.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c89a2392e735"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-03-23T18:00:10.549691+00:00", "summary": {"raw": "This is a rebranched version of pull request #12. Original description:\r\n\r\nThis is a simplified version of the Operational Space controller in pull request #2 that uses DART to simulate a double pendulum (borrowed from [gazebo_ros_demos/rrbot_description](https://github.com/ros-simulation/gazebo_ros_demos/blob/kinetic-devel/rrbot_description/urdf/rrbot.xml)), but a PID controller is implemented outside the plugin in `DoublePendulum_TEST.cc`, with the plugin interface providing effort inputs and joint position outputs. A follow-up pull request will re-implement the physics backend with another physics engine and use the same PID controller in the test. This goal is to demonstrate an abstract interface in which multiple physics engines can be plugged in and out.", "markup": "markdown", "html": "<p>This is a rebranched version of <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/12/example-double-pendulum-with-pid-control\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #12</a>. Original description:</p>\n<p>This is a simplified version of the Operational Space controller in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/2/created-operationalspacecontroller-plugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2</a> that uses DART to simulate a double pendulum (borrowed from <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_demos/blob/kinetic-devel/rrbot_description/urdf/rrbot.xml\" rel=\"nofollow\">gazebo_ros_demos/rrbot_description</a>), but a PID controller is implemented outside the plugin in <code>DoublePendulum_TEST.cc</code>, with the plugin interface providing effort inputs and joint position outputs. A follow-up pull request will re-implement the physics backend with another physics engine and use the same PID controller in the test. This goal is to demonstrate an abstract interface in which multiple physics engines can be plugged in and out.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ce01be1f8111", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/ce01be1f8111.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/ce01be1f8111"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/double_pendulum/dart"}}, "comment_count": 12, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-01-08T22:11:35.934622+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "aaaa8959e45b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/aaaa8959e45b.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/aaaa8959e45b"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This is a rebranched version of pull request #13. Original description:\r\n\r\nThis builds on the double pendulum example using dart in pull request #12. With both physics engines installed, this branch provides a prototype of the physics abstraction layer. To simplify the build process and loading and finding plugin libraries, the `BulletDoublePendulum` plugin is added to the `ignition-physics-dart` library by using the same folder and adding symbols to the plugins.cc. It could alternatively be located in its own library file, or it could be called `ignition::physics::bullet::DoublePendulum` if we rearranged the code in subfolders, but this was expedient for this prototype.\r\n\r\nI did have to relax some expectations in the test, possibly because `libbullet-dev` is compiled with single precision, while dart is using double precision. I also had to relax the expectations on repeatability after resetting the state; I'm not sure why. It could be that some state variables are missing or the solver should be reset in some way. At this point, I think that's ok; there will be different levels of accuracy for different physics engines, so we can think about how we want to encode different expectations.\r\n\r\nNote that I initially made an ODE example in the [experimental/double_pendulum/ode branch](#!/ignitionrobotics/ign-physics/branch/experimental/double_pendulum/ode), but I switched to bullet after I noticed that in upstream ODE, the hinge joint always reports angles between [-PI, PI], while this controller expects unwrapped angles. We have this feature in our fork of ODE, and this feature was added to bullet ([see upstream feature request](https://github.com/bulletphysics/bullet3/issues/42)). I will work on upstreaming some of the changes in our fork of ODE, but for now it was easier to make the example with bullet.\r\n\r\nThere are a couple non-urgent TODO items that I noted:\r\n\r\n* I don't clean up any of the memory that I allocate with `new`\r\n* bullet has some support for serialization, which might be useful for saving state\r\n* it would be interesting to implement this example with btMultibody to try the new Featherstone API", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/16/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:8e5586c0cf93%0D4b4831e05a1a?from_pullrequest_id=16"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/16/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/16.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/16/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/16/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/16"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/16/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:8e5586c0cf93%0D4b4831e05a1a?from_pullrequest_id=16"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/16/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/16/statuses_page=1.json"}}, "title": "Part 5: BulletDoublePendulum, PID control using bullet (rebranched)", "close_source_branch": false, "type": "pullrequest", "id": 16, "destination": {"commit": {"hash": "4b4831e05a1a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4b4831e05a1a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4b4831e05a1a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "ign-physics1"}}, "created_on": "2018-03-23T20:48:53.069861+00:00", "summary": {"raw": "This is a rebranched version of pull request #13. Original description:\r\n\r\nThis builds on the double pendulum example using dart in pull request #12. With both physics engines installed, this branch provides a prototype of the physics abstraction layer. To simplify the build process and loading and finding plugin libraries, the `BulletDoublePendulum` plugin is added to the `ignition-physics-dart` library by using the same folder and adding symbols to the plugins.cc. It could alternatively be located in its own library file, or it could be called `ignition::physics::bullet::DoublePendulum` if we rearranged the code in subfolders, but this was expedient for this prototype.\r\n\r\nI did have to relax some expectations in the test, possibly because `libbullet-dev` is compiled with single precision, while dart is using double precision. I also had to relax the expectations on repeatability after resetting the state; I'm not sure why. It could be that some state variables are missing or the solver should be reset in some way. At this point, I think that's ok; there will be different levels of accuracy for different physics engines, so we can think about how we want to encode different expectations.\r\n\r\nNote that I initially made an ODE example in the [experimental/double_pendulum/ode branch](#!/ignitionrobotics/ign-physics/branch/experimental/double_pendulum/ode), but I switched to bullet after I noticed that in upstream ODE, the hinge joint always reports angles between [-PI, PI], while this controller expects unwrapped angles. We have this feature in our fork of ODE, and this feature was added to bullet ([see upstream feature request](https://github.com/bulletphysics/bullet3/issues/42)). I will work on upstreaming some of the changes in our fork of ODE, but for now it was easier to make the example with bullet.\r\n\r\nThere are a couple non-urgent TODO items that I noted:\r\n\r\n* I don't clean up any of the memory that I allocate with `new`\r\n* bullet has some support for serialization, which might be useful for saving state\r\n* it would be interesting to implement this example with btMultibody to try the new Featherstone API", "markup": "markdown", "html": "<p>This is a rebranched version of <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/13/example-double-pendulum-with-pid-control\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #13</a>. Original description:</p>\n<p>This builds on the double pendulum example using dart in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/12/example-double-pendulum-with-pid-control\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #12</a>. With both physics engines installed, this branch provides a prototype of the physics abstraction layer. To simplify the build process and loading and finding plugin libraries, the <code>BulletDoublePendulum</code> plugin is added to the <code>ignition-physics-dart</code> library by using the same folder and adding symbols to the plugins.cc. It could alternatively be located in its own library file, or it could be called <code>ignition::physics::bullet::DoublePendulum</code> if we rearranged the code in subfolders, but this was expedient for this prototype.</p>\n<p>I did have to relax some expectations in the test, possibly because <code>libbullet-dev</code> is compiled with single precision, while dart is using double precision. I also had to relax the expectations on repeatability after resetting the state; I'm not sure why. It could be that some state variables are missing or the solver should be reset in some way. At this point, I think that's ok; there will be different levels of accuracy for different physics engines, so we can think about how we want to encode different expectations.</p>\n<p>Note that I initially made an ODE example in the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/branch/experimental/double_pendulum/ode\" rel=\"nofollow\">experimental/double_pendulum/ode branch</a>, but I switched to bullet after I noticed that in upstream ODE, the hinge joint always reports angles between [-PI, PI], while this controller expects unwrapped angles. We have this feature in our fork of ODE, and this feature was added to bullet (<a data-is-external-link=\"true\" href=\"https://github.com/bulletphysics/bullet3/issues/42\" rel=\"nofollow\">see upstream feature request</a>). I will work on upstreaming some of the changes in our fork of ODE, but for now it was easier to make the example with bullet.</p>\n<p>There are a couple non-urgent TODO items that I noted:</p>\n<ul>\n<li>I don't clean up any of the memory that I allocate with <code>new</code></li>\n<li>bullet has some support for serialization, which might be useful for saving state</li>\n<li>it would be interesting to implement this example with btMultibody to try the new Featherstone API</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "8e5586c0cf93", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8e5586c0cf93.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8e5586c0cf93"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/double_pendulum/dart-bullet"}}, "comment_count": 12, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2020-04-06T19:10:39.321866+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This just updates cpplint to use the latest. This cpplint is also used [here](#!/ignitionrobotics/ign-gazebo/src/example/tools/). \r\n\r\nThis could be a nice thing to add to `ign-cmake` ...", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/17/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:b3f6885e3f5f%0Dd0dba45525e5?from_pullrequest_id=17"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/17/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/17.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/17/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/17/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/17"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/17/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:b3f6885e3f5f%0Dd0dba45525e5?from_pullrequest_id=17"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/17/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/17/statuses_page=1.json"}}, "title": "Update cpplint to latest", "close_source_branch": false, "type": "pullrequest", "id": 17, "destination": {"commit": {"hash": "d0dba45525e5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/d0dba45525e5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/d0dba45525e5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "created_on": "2018-03-27T15:56:48.644584+00:00", "summary": {"raw": "This just updates cpplint to use the latest. This cpplint is also used [here](#!/ignitionrobotics/ign-gazebo/src/example/tools/). \r\n\r\nThis could be a nice thing to add to `ign-cmake` ...", "markup": "markdown", "html": "<p>This just updates cpplint to use the latest. This cpplint is also used <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/example/tools/\" rel=\"nofollow\">here</a>. </p>\n<p>This could be a nice thing to add to <code>ign-cmake</code> ...</p>", "type": "rendered"}, "source": {"commit": {"hash": "b3f6885e3f5f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b3f6885e3f5f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b3f6885e3f5f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "update_cpplint"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2018-03-27T16:41:49.711068+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": null, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"description": "", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/18/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:27507b93b292%0Defbccce50bc9?from_pullrequest_id=18"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/18/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/18.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/18/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/18/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/18"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/18/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:27507b93b292%0Defbccce50bc9?from_pullrequest_id=18"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/18/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/18/statuses_page=1.json"}}, "title": "Updated cpplint", "close_source_branch": true, "type": "pullrequest", "id": 18, "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-03-27T16:42:22.927676+00:00", "summary": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "source": {"commit": {"hash": "c0b50bc54856", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c0b50bc54856.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c0b50bc54856"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "updated_cpplint"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-03-27T17:15:12.148707+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": {"hash": "27507b93b292", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/27507b93b292.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/27507b93b292"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This won't work on the pipeline until we have an ignition-common2 prerelease.\r\n\r\nCI builds require the following:\r\n\r\n* https://bitbucket.org/osrf/release-tools/pull-requests/563/set-up-linux-ci-for-ign-physics/diff", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/19/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:8eb69edea97d%0Dc9ee40f3b831?from_pullrequest_id=19"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/19/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/19.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/19/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/19/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/19"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/19/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:8eb69edea97d%0Dc9ee40f3b831?from_pullrequest_id=19"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/19/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/19/statuses_page=1.json"}}, "title": "switch to ignition-cmake1", "close_source_branch": true, "type": "pullrequest", "id": 19, "destination": {"commit": {"hash": "c9ee40f3b831", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c9ee40f3b831.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c9ee40f3b831"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-04-10T04:25:22.718576+00:00", "summary": {"raw": "This won't work on the pipeline until we have an ignition-common2 prerelease.\r\n\r\nCI builds require the following:\r\n\r\n* https://bitbucket.org/osrf/release-tools/pull-requests/563/set-up-linux-ci-for-ign-physics/diff", "markup": "markdown", "html": "<p>This won't work on the pipeline until we have an ignition-common2 prerelease.</p>\n<p>CI builds require the following:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/osrf/release-tools/pull-requests/563/set-up-linux-ci-for-ign-physics/diff\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/release-tools/pull-requests/563/set-up-linux-ci-for-ign-physics/diff</a></li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "68af4344c3c5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/68af4344c3c5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/68af4344c3c5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "cmake1"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-04-19T23:48:23.818179+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "8eb69edea97d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8eb69edea97d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8eb69edea97d"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "I'm trying to see if this will correctly start jenkins CI jobs", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/20/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:6428c0023a04%0D3d0328754e6d?from_pullrequest_id=20"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/20/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/20.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/20/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/20/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/20"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/20/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6428c0023a04%0D3d0328754e6d?from_pullrequest_id=20"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/20/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/20/statuses_page=1.json"}}, "title": "testing jenkins CI", "close_source_branch": false, "type": "pullrequest", "id": 20, "destination": {"commit": {"hash": "3d0328754e6d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3d0328754e6d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3d0328754e6d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "cmake1"}}, "created_on": "2018-04-16T21:42:28.586373+00:00", "summary": {"raw": "I'm trying to see if this will correctly start jenkins CI jobs", "markup": "markdown", "html": "<p>I'm trying to see if this will correctly start jenkins CI jobs</p>", "type": "rendered"}, "source": {"commit": {"hash": "6428c0023a04", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6428c0023a04.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6428c0023a04"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "scpeters/readmemd-edited-online-with-bitbucket-1523914896284"}}, "comment_count": 0, "state": "DECLINED", "task_count": 0, "reason": "didn't work", "updated_on": "2018-04-16T21:58:15.187933+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "I'm trying to see if this will correctly start jenkins CI jobs", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/21/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:6428c0023a04%0D3d0328754e6d?from_pullrequest_id=21"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/21/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/21.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/21/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/21/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/21"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/21/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6428c0023a04%0D3d0328754e6d?from_pullrequest_id=21"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/21/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/21/statuses_page=1.json"}}, "title": "testing jenkins CI", "close_source_branch": false, "type": "pullrequest", "id": 21, "destination": {"commit": {"hash": "3d0328754e6d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3d0328754e6d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3d0328754e6d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "cmake1"}}, "created_on": "2018-04-16T21:45:08.861805+00:00", "summary": {"raw": "I'm trying to see if this will correctly start jenkins CI jobs", "markup": "markdown", "html": "<p>I'm trying to see if this will correctly start jenkins CI jobs</p>", "type": "rendered"}, "source": {"commit": {"hash": "6428c0023a04", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6428c0023a04.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6428c0023a04"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "scpeters/readmemd-edited-online-with-bitbucket-1523914896284"}}, "comment_count": 0, "state": "DECLINED", "task_count": 0, "reason": "forgot to approve in-process scripts", "updated_on": "2018-04-16T21:58:15.187933+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "I'm trying to see if this will correctly start jenkins CI jobs", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/22/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:6428c0023a04%0D3d0328754e6d?from_pullrequest_id=22"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/22/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/22.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/22/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/22/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/22"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/22/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6428c0023a04%0D3d0328754e6d?from_pullrequest_id=22"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/22/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/22/statuses_page=1.json"}}, "title": "testing jenkins CI", "close_source_branch": false, "type": "pullrequest", "id": 22, "destination": {"commit": {"hash": "3d0328754e6d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3d0328754e6d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3d0328754e6d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "cmake1"}}, "created_on": "2018-04-16T21:50:47.979656+00:00", "summary": {"raw": "I'm trying to see if this will correctly start jenkins CI jobs", "markup": "markdown", "html": "<p>I'm trying to see if this will correctly start jenkins CI jobs</p>", "type": "rendered"}, "source": {"commit": {"hash": "6428c0023a04", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6428c0023a04.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6428c0023a04"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "scpeters/readmemd-edited-online-with-bitbucket-1523914896284"}}, "comment_count": 0, "state": "DECLINED", "task_count": 0, "reason": "it worked", "updated_on": "2018-04-16T22:06:24.997249+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR adds a simple example in Bullet where two boxes fall on top of a ground plane, showing how we can implement a plugin using collisions in Bullet for ign-physics.\r\n\r\nYou can run the test calling from the build folder to \\`./ignition-physics-dart-bullet/BoxCollisions/PLUGIN\\_BoxCollisions\\_TEST\\`\r\n\r\nThese changes were done on top of experimental/double\\_pendulum/bullet-dart branch.\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/23/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/JChoclin/ign-physics:a3ad17b04323%0D4297959e0921?from_pullrequest_id=23"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/23/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/23.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/23/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/23/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/23"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/23/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/JChoclin/ign-physics:a3ad17b04323%0D4297959e0921?from_pullrequest_id=23"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/23/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/23/statuses_page=1.json"}}, "title": "Add Bullet box collisions example.", "close_source_branch": false, "type": "pullrequest", "id": 23, "destination": {"commit": {"hash": "4297959e0921", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4297959e0921.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4297959e0921"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/input"}}, "created_on": "2018-05-22T20:34:39.287521+00:00", "summary": {"raw": "This PR adds a simple example in Bullet where two boxes fall on top of a ground plane, showing how we can implement a plugin using collisions in Bullet for ign-physics.\r\n\r\nYou can run the test calling from the build folder to \\`./ignition-physics-dart-bullet/BoxCollisions/PLUGIN\\_BoxCollisions\\_TEST\\`\r\n\r\nThese changes were done on top of experimental/double\\_pendulum/bullet-dart branch.\r\n\r\n\u200c", "markup": "markdown", "html": "<p>This PR adds a simple example in Bullet where two boxes fall on top of a ground plane, showing how we can implement a plugin using collisions in Bullet for ign-physics.</p>\n<p>You can run the test calling from the build folder to `./ignition-physics-dart-bullet/BoxCollisions/PLUGIN_BoxCollisions_TEST`</p>\n<p>These changes were done on top of experimental/double_pendulum/bullet-dart branch.</p>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "a3ad17b04323", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/JChoclin/ign-physics/commit/a3ad17b04323"}, "html": {"href": "https://bitbucket.org/JChoclin/ign-physics/commits/a3ad17b04323"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/JChoclin/ign-physics"}, "html": {"href": "https://bitbucket.org/JChoclin/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{6ffec1ff-9fd6-4bb9-b6ee-eb2a76429076}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "JChoclin/ign-physics", "uuid": "{6ffec1ff-9fd6-4bb9-b6ee-eb2a76429076}"}, "branch": {"name": "experimental/box_collisions"}}, "comment_count": 2, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2020-04-06T18:22:11.545390+00:00", "author": {"display_name": "Javier Iv\u00e1n Choclin", "uuid": "{745acb37-6a3b-4169-8ba9-2c142a7408fb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D"}, "html": {"href": "https://bitbucket.org/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2279399d-3c75-4e1e-b818-4fb8339b2939/26f5815d-5477-4106-ba9b-ac56ee23e175/128"}}, "nickname": "Javier Choclin", "type": "user", "account_id": "557058:2279399d-3c75-4e1e-b818-4fb8339b2939"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR presents the initial implementation of the Feature System. ~~I'm labeling it a WIP because I still want to add some more concrete tests and examples for how features work, but the implementation is finished, and I think it's safe to begin reviewing.~~\r\n\r\nNote that this is the **FeatureSystem\\_raw** branch. The old `FeatureSystem` branch was a prototype which is being discarded \\(although it played a big role in getting this branch to where it is\\).\r\n\r\nI recommend looking at `Feature_TEST.cc` to get a quick high-level glimpse of what the Feature System is trying to achieve. There are three mock \"features\": `EngineMockFeature`, `LinkMockFeature`, and `SecondLinkMockFeature`. Each of these defines a function within a nested class \\(`Engine` or `Link`\\). We create a `FeatureList` which combines all these features, and then use `Engine3d` and `Link3d` to extract and combine their APIs. As a result, `Link3d<MockList>` contains both of the functions defined in `LinkMockFeature` and `SecondLinkMockFeature`.\r\n\r\n~~My next step will be to add more concrete and illustrative tests to~~ `Feature_TEST.cc`.\r\n\r\nTo see a full-fledged test use of the Feature System, see `test/integration/FeatureSystem.cc`.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/24/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:fbc7c458ca2a%0D6b39321566ed?from_pullrequest_id=24"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/24/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/24"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:fbc7c458ca2a%0D6b39321566ed?from_pullrequest_id=24"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/24/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24/statuses_page=1.json"}}, "title": "Feature System Part 1", "close_source_branch": true, "type": "pullrequest", "id": 24, "destination": {"commit": {"hash": "6b39321566ed", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6b39321566ed.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6b39321566ed"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-06-06T10:10:11.712766+00:00", "summary": {"raw": "This PR presents the initial implementation of the Feature System. ~~I'm labeling it a WIP because I still want to add some more concrete tests and examples for how features work, but the implementation is finished, and I think it's safe to begin reviewing.~~\r\n\r\nNote that this is the **FeatureSystem\\_raw** branch. The old `FeatureSystem` branch was a prototype which is being discarded \\(although it played a big role in getting this branch to where it is\\).\r\n\r\nI recommend looking at `Feature_TEST.cc` to get a quick high-level glimpse of what the Feature System is trying to achieve. There are three mock \"features\": `EngineMockFeature`, `LinkMockFeature`, and `SecondLinkMockFeature`. Each of these defines a function within a nested class \\(`Engine` or `Link`\\). We create a `FeatureList` which combines all these features, and then use `Engine3d` and `Link3d` to extract and combine their APIs. As a result, `Link3d<MockList>` contains both of the functions defined in `LinkMockFeature` and `SecondLinkMockFeature`.\r\n\r\n~~My next step will be to add more concrete and illustrative tests to~~ `Feature_TEST.cc`.\r\n\r\nTo see a full-fledged test use of the Feature System, see `test/integration/FeatureSystem.cc`.", "markup": "markdown", "html": "<p>This PR presents the initial implementation of the Feature System. <del>I'm labeling it a WIP because I still want to add some more concrete tests and examples for how features work, but the implementation is finished, and I think it's safe to begin reviewing.</del></p>\n<p>Note that this is the <strong>FeatureSystem_raw</strong> branch. The old <code>FeatureSystem</code> branch was a prototype which is being discarded (although it played a big role in getting this branch to where it is).</p>\n<p>I recommend looking at <code>Feature_TEST.cc</code> to get a quick high-level glimpse of what the Feature System is trying to achieve. There are three mock \"features\": <code>EngineMockFeature</code>, <code>LinkMockFeature</code>, and <code>SecondLinkMockFeature</code>. Each of these defines a function within a nested class (<code>Engine</code> or <code>Link</code>). We create a <code>FeatureList</code> which combines all these features, and then use <code>Engine3d</code> and <code>Link3d</code> to extract and combine their APIs. As a result, <code>Link3d&lt;MockList&gt;</code> contains both of the functions defined in <code>LinkMockFeature</code> and <code>SecondLinkMockFeature</code>.</p>\n<p><del>My next step will be to add more concrete and illustrative tests to</del> <code>Feature_TEST.cc</code>.</p>\n<p>To see a full-fledged test use of the Feature System, see <code>test/integration/FeatureSystem.cc</code>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "794049b91e6e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/794049b91e6e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/794049b91e6e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "FeatureSystem_raw"}}, "comment_count": 88, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-23T10:02:46.878350+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "fbc7c458ca2a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fbc7c458ca2a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fbc7c458ca2a"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "codecov is close to 100% line coverage: [![codecov](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/default/graph/badge.svg)](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/default) \r\n\r\nThere are just 2 lines in [CompositeData::Unquery](https://codecov.io/bb/ignitionrobotics/ign-physics/src/default/include/ignition/physics/detail/CompositeData.hh#L249...269) that lack coverage. This PR should cover those two lines:\r\n\r\n* call `Unquery` on a field that doesn't exist\r\n* call `Unquery` on a field that was `Remove`d\r\n\r\nthis branch: [![codecov](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/coverage_unquery/graph/badge.svg)](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/coverage_unquery)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/25/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:6b39321566ed%0D3bf87fe246a9?from_pullrequest_id=25"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/25/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/25.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/25/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/25/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/25"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/25/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6b39321566ed%0D3bf87fe246a9?from_pullrequest_id=25"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/25/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/25/statuses_page=1.json"}}, "title": "improve line coverage for CompositeData::Unquery", "close_source_branch": true, "type": "pullrequest", "id": 25, "destination": {"commit": {"hash": "3bf87fe246a9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3bf87fe246a9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3bf87fe246a9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-06-07T00:18:35.387552+00:00", "summary": {"raw": "codecov is close to 100% line coverage: [![codecov](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/default/graph/badge.svg)](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/default) \r\n\r\nThere are just 2 lines in [CompositeData::Unquery](https://codecov.io/bb/ignitionrobotics/ign-physics/src/default/include/ignition/physics/detail/CompositeData.hh#L249...269) that lack coverage. This PR should cover those two lines:\r\n\r\n* call `Unquery` on a field that doesn't exist\r\n* call `Unquery` on a field that was `Remove`d\r\n\r\nthis branch: [![codecov](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/coverage_unquery/graph/badge.svg)](https://codecov.io/bb/ignitionrobotics/ign-physics/branch/coverage_unquery)", "markup": "markdown", "html": "<p>codecov is close to 100% line coverage: <a data-is-external-link=\"true\" href=\"https://codecov.io/bb/ignitionrobotics/ign-physics/branch/default\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://codecov.io/bb/ignitionrobotics/ign-physics/branch/default/graph/badge.svg\" /></a> </p>\n<p>There are just 2 lines in <a data-is-external-link=\"true\" href=\"https://codecov.io/bb/ignitionrobotics/ign-physics/src/default/include/ignition/physics/detail/CompositeData.hh#L249...269\" rel=\"nofollow\">CompositeData::Unquery</a> that lack coverage. This PR should cover those two lines:</p>\n<ul>\n<li>call <code>Unquery</code> on a field that doesn't exist</li>\n<li>call <code>Unquery</code> on a field that was <code>Remove</code>d</li>\n</ul>\n<p>this branch: <a data-is-external-link=\"true\" href=\"https://codecov.io/bb/ignitionrobotics/ign-physics/branch/coverage_unquery\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://codecov.io/bb/ignitionrobotics/ign-physics/branch/coverage_unquery/graph/badge.svg\" /></a></p>", "type": "rendered"}, "source": {"commit": {"hash": "f5ccd4821a3c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f5ccd4821a3c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f5ccd4821a3c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "coverage_unquery"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-23T09:42:43.655431+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "6b39321566ed", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6b39321566ed.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6b39321566ed"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the [Feature System PR](#!/ignitionrobotics/ign-physics/pull-requests/24).\r\n\r\nThe concept and implementation follows the [design doc](https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics) pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:\r\n\r\n* Quantities \\(e.g. vectors, points, poses\\) that have a frame of reference are given by a `FramedQuantity<>`. `FramedQuantity<>` is a class template that allows any kind of mathematical quantity to be framed \\(assuming it makes mathematical sense for the quantity to be framed\\). It uses the [policy-based design](https://en.wikipedia.org/wiki/Policy-based_design) pattern to determine how to transform various quantities between reference frames.\r\n* Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.\r\n* FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation \\(note: fixed precision has not been tested yet, but should be possible in theory\\). However, to make this possible, the implementation is using the Eigen C\\+\\+ library instead of ignition-math for its underlying data types.\r\n* Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames \\(e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints\\). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.\r\n* FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/26/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:6cb137ea8718%0Dfbc7c458ca2a?from_pullrequest_id=26"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/26/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6cb137ea8718%0Dfbc7c458ca2a?from_pullrequest_id=26"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/26/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/statuses_page=1.json"}}, "title": "Feature System Part 2: Frame Semantics", "close_source_branch": true, "type": "pullrequest", "id": 26, "destination": {"commit": {"hash": "fbc7c458ca2a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fbc7c458ca2a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fbc7c458ca2a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-06-24T17:54:40.574727+00:00", "summary": {"raw": "This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the [Feature System PR](#!/ignitionrobotics/ign-physics/pull-requests/24).\r\n\r\nThe concept and implementation follows the [design doc](https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics) pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:\r\n\r\n* Quantities \\(e.g. vectors, points, poses\\) that have a frame of reference are given by a `FramedQuantity<>`. `FramedQuantity<>` is a class template that allows any kind of mathematical quantity to be framed \\(assuming it makes mathematical sense for the quantity to be framed\\). It uses the [policy-based design](https://en.wikipedia.org/wiki/Policy-based_design) pattern to determine how to transform various quantities between reference frames.\r\n* Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.\r\n* FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation \\(note: fixed precision has not been tested yet, but should be possible in theory\\). However, to make this possible, the implementation is using the Eigen C\\+\\+ library instead of ignition-math for its underlying data types.\r\n* Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames \\(e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints\\). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.\r\n* FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.", "markup": "markdown", "html": "<p>This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/pull-requests/24\" rel=\"nofollow\">Feature System PR</a>.</p>\n<p>The concept and implementation follows the <a data-is-external-link=\"true\" href=\"https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics\" rel=\"nofollow\">design doc</a> pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:</p>\n<ul>\n<li>Quantities (e.g. vectors, points, poses) that have a frame of reference are given by a <code>FramedQuantity&lt;&gt;</code>. <code>FramedQuantity&lt;&gt;</code> is a class template that allows any kind of mathematical quantity to be framed (assuming it makes mathematical sense for the quantity to be framed). It uses the <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Policy-based_design\" rel=\"nofollow\">policy-based design</a> pattern to determine how to transform various quantities between reference frames.</li>\n<li>Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.</li>\n<li>FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation (note: fixed precision has not been tested yet, but should be possible in theory). However, to make this possible, the implementation is using the Eigen C++ library instead of ignition-math for its underlying data types.</li>\n<li>Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames (e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.</li>\n<li>FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "0d401b8f0573", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0d401b8f0573.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0d401b8f0573"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "FrameSemantics_raw"}}, "comment_count": 87, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-27T17:58:30.142001+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "6cb137ea8718", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6cb137ea8718.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6cb137ea8718"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR enables the Feature System to account for arbitrary joint types. This means it will also be able to support custom joint types that `ign-physics` does not natively know about. Physics engines can also add custom features to existing joint types.\r\n\r\nThis same methodology can be used later on for various Shape types \\(including any custom Shape types that a physics engine might have\\).\r\n\r\nThere is still some cleanup to do for this PR, mostly documenting classes and functions, but the implementation and tests are finished for RevoluteJoint.\r\n\r\nIf anyone feels like trying to implement another joint type, you can use the `ignition/physics/RevoluteJoint.hh` file for reference.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/27/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:45a2edea3e22%0D6cb137ea8718?from_pullrequest_id=27"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/27/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/27.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/27/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/27/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/27"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/27/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:45a2edea3e22%0D6cb137ea8718?from_pullrequest_id=27"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/27/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/27/statuses_page=1.json"}}, "title": "Feature System Part 3: Revolute Joint (plus framework for other joint types)", "close_source_branch": true, "type": "pullrequest", "id": 27, "destination": {"commit": {"hash": "6cb137ea8718", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6cb137ea8718.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6cb137ea8718"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-07-24T09:28:03.898359+00:00", "summary": {"raw": "This PR enables the Feature System to account for arbitrary joint types. This means it will also be able to support custom joint types that `ign-physics` does not natively know about. Physics engines can also add custom features to existing joint types.\r\n\r\nThis same methodology can be used later on for various Shape types \\(including any custom Shape types that a physics engine might have\\).\r\n\r\nThere is still some cleanup to do for this PR, mostly documenting classes and functions, but the implementation and tests are finished for RevoluteJoint.\r\n\r\nIf anyone feels like trying to implement another joint type, you can use the `ignition/physics/RevoluteJoint.hh` file for reference.", "markup": "markdown", "html": "<p>This PR enables the Feature System to account for arbitrary joint types. This means it will also be able to support custom joint types that <code>ign-physics</code> does not natively know about. Physics engines can also add custom features to existing joint types.</p>\n<p>This same methodology can be used later on for various Shape types (including any custom Shape types that a physics engine might have).</p>\n<p>There is still some cleanup to do for this PR, mostly documenting classes and functions, but the implementation and tests are finished for RevoluteJoint.</p>\n<p>If anyone feels like trying to implement another joint type, you can use the <code>ignition/physics/RevoluteJoint.hh</code> file for reference.</p>", "type": "rendered"}, "source": {"commit": {"hash": "c23eeab32b3c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c23eeab32b3c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c23eeab32b3c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "RevoluteJoint"}}, "comment_count": 20, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-31T14:50:09.856690+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "45a2edea3e22", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/45a2edea3e22.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/45a2edea3e22"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "This PR builds off of the groundwork done in pull request #27 by introducing more joint types.\r\n\r\nRight now I've added `FreeJoint` and `PrismaticJoint` APIs. More can be added over time \\(or added through another PR\\).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/28/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:078d40922b8f%0D45a2edea3e22?from_pullrequest_id=28"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/28/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/28.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/28/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/28/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/28"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/28/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:078d40922b8f%0D45a2edea3e22?from_pullrequest_id=28"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/28/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/28/statuses_page=1.json"}}, "title": "Feature System Part 4: More joint types", "close_source_branch": true, "type": "pullrequest", "id": 28, "destination": {"commit": {"hash": "45a2edea3e22", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/45a2edea3e22.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/45a2edea3e22"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-07-31T05:10:32.505658+00:00", "summary": {"raw": "This PR builds off of the groundwork done in pull request #27 by introducing more joint types.\r\n\r\nRight now I've added `FreeJoint` and `PrismaticJoint` APIs. More can be added over time \\(or added through another PR\\).", "markup": "markdown", "html": "<p>This PR builds off of the groundwork done in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/27/feature-system-part-3-revolute-joint-plus\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #27</a> by introducing more joint types.</p>\n<p>Right now I've added <code>FreeJoint</code> and <code>PrismaticJoint</code> APIs. More can be added over time (or added through another PR).</p>", "type": "rendered"}, "source": {"commit": {"hash": "c9cc6f40645c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c9cc6f40645c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c9cc6f40645c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "MoreJointTypes"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-31T16:24:43.460670+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "078d40922b8f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/078d40922b8f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/078d40922b8f"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR introduces an `ign-physics-sdf` component which provides features for having a physics plugin construct simulation objects from an SDF data representation.\r\n\r\nThis also begins the development of an official `ign-physics-dartsim` plugin \\(the other PRs that use dartsim were just meant for proofs-of-concept\\).\r\n\r\nNote that the new features require dartsim version 6 \\(I\u2019m specifically testing on 6.7\\) and [this branch of ign-math](#!/ignitionrobotics/ign-math/pull-requests/256).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/29/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:692cb69975f7%0D56e5d19776ab?from_pullrequest_id=29"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/29/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:692cb69975f7%0D56e5d19776ab?from_pullrequest_id=29"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/29/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/statuses_page=1.json"}}, "title": "Feature System Part 6: Features for constructing objects from SDF data", "close_source_branch": true, "type": "pullrequest", "id": 29, "destination": {"commit": {"hash": "56e5d19776ab", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/56e5d19776ab.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/56e5d19776ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-07-31T10:11:44.239635+00:00", "summary": {"raw": "This PR introduces an `ign-physics-sdf` component which provides features for having a physics plugin construct simulation objects from an SDF data representation.\r\n\r\nThis also begins the development of an official `ign-physics-dartsim` plugin \\(the other PRs that use dartsim were just meant for proofs-of-concept\\).\r\n\r\nNote that the new features require dartsim version 6 \\(I\u2019m specifically testing on 6.7\\) and [this branch of ign-math](#!/ignitionrobotics/ign-math/pull-requests/256).", "markup": "markdown", "html": "<p>This PR introduces an <code>ign-physics-sdf</code> component which provides features for having a physics plugin construct simulation objects from an SDF data representation.</p>\n<p>This also begins the development of an official <code>ign-physics-dartsim</code> plugin (the other PRs that use dartsim were just meant for proofs-of-concept).</p>\n<p>Note that the new features require dartsim version 6 (I\u2019m specifically testing on 6.7) and <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/pull-requests/256\" rel=\"nofollow\">this branch of ign-math</a>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "98f0ec312e49", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/98f0ec312e49.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/98f0ec312e49"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "sdf_component"}}, "comment_count": 33, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-09-16T08:07:04.257444+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "692cb69975f7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/692cb69975f7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/692cb69975f7"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This builds on the double pendulum example using bullet in pull request #13. This example uses `btMultiBody`, which uses generalized coordinates for representing rigid bodies and Featherstone\u2019s algorithm for simulation. \r\n\r\nNote that I changed the test for quaternion equality to check if the dot product of the quaternions is \u00b11. Otherwise, this implementation matches the error tolerances of the DART example, which leads me to believe that the errors in the bullet implementation in #13 may not be due to floating point precision.\r\n\r\nAlso note that I did not create collision shapes. They didn\u2019t seem necessary for the simple demonstration we\u2019re aiming for and Bullet seems to work fine without them.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/30/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/azeey/ign-physics:06500de7e1d5%0Dfdb41e8f3b37?from_pullrequest_id=30"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/30/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/30.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/30/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/30/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/30"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/30/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/azeey/ign-physics:06500de7e1d5%0Dfdb41e8f3b37?from_pullrequest_id=30"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/30/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/30/statuses_page=1.json"}}, "title": "Part 5b: BulletDoublePendulum, PID control using bullet btMultiBody (Featherstone implementation)", "close_source_branch": false, "type": "pullrequest", "id": 30, "destination": {"commit": {"hash": "fdb41e8f3b37", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fdb41e8f3b37.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fdb41e8f3b37"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/double_pendulum/dart-bullet"}}, "created_on": "2018-07-31T17:29:39.724107+00:00", "summary": {"raw": "This builds on the double pendulum example using bullet in pull request #13. This example uses `btMultiBody`, which uses generalized coordinates for representing rigid bodies and Featherstone\u2019s algorithm for simulation. \r\n\r\nNote that I changed the test for quaternion equality to check if the dot product of the quaternions is \u00b11. Otherwise, this implementation matches the error tolerances of the DART example, which leads me to believe that the errors in the bullet implementation in #13 may not be due to floating point precision.\r\n\r\nAlso note that I did not create collision shapes. They didn\u2019t seem necessary for the simple demonstration we\u2019re aiming for and Bullet seems to work fine without them.", "markup": "markdown", "html": "<p>This builds on the double pendulum example using bullet in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/13/example-double-pendulum-with-pid-control\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #13</a>. This example uses <code>btMultiBody</code>, which uses generalized coordinates for representing rigid bodies and Featherstone\u2019s algorithm for simulation. </p>\n<p>Note that I changed the test for quaternion equality to check if the dot product of the quaternions is \u00b11. Otherwise, this implementation matches the error tolerances of the DART example, which leads me to believe that the errors in the bullet implementation in <a href=\"#!/ignitionrobotics/ign-physics/issues/13/clarify-relationship-between\" rel=\"nofollow\" title=\"Clarify relationship between RemoveModelFromWorld and GetEntities features\" class=\"ap-connect-link\">#13</a> may not be due to floating point precision.</p>\n<p>Also note that I did not create collision shapes. They didn\u2019t seem necessary for the simple demonstration we\u2019re aiming for and Bullet seems to work fine without them.</p>", "type": "rendered"}, "source": {"commit": {"hash": "06500de7e1d5", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/azeey/ign-physics/commit/06500de7e1d5"}, "html": {"href": "https://bitbucket.org/azeey/ign-physics/commits/06500de7e1d5"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/azeey/ign-physics"}, "html": {"href": "https://bitbucket.org/azeey/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{8a49a816-0f8c-4997-8509-b64d47329a05}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "azeey/ign-physics", "uuid": "{8a49a816-0f8c-4997-8509-b64d47329a05}"}, "branch": {"name": "experimental/double_pendulum/dart-bullet"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2020-04-06T19:11:15.913805+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR continues builds on the Feature System by introducing the `EntityPtr`. I found that we have a tricky situation when it comes to handling entities. I considered both `std::unique_ptr` and `std::optional` as potential containers for our Entity objects, but I found the following issues:\r\n\r\n* `std::unique_ptr` requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an `ign-physics` object, even if no object or information is really being created or destroyed.\r\n* `std::optional` would violate logical const-correctness in our case. To illustrate this, we want a `ConstModelPtr` to only be able to access the const-qualified functions of the `Model` API. However, if we have `std::optional<const Model> constModel = /* get const model */`, then a user can simply do `std::optional<Model> nonConstModel = constModel`, and then suddenly the user has full access to the const-unqualified API of the object `constModel`. Note that `Model` is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.\r\n\r\nTherefore, we need a container class that gives us the const semantics of `std::unique_ptr` with the performance of `std::optional`. That's exactly what `EntityPtr` does.\r\n\r\nNote that there are few pointer semantics functions that haven't been implemented yet for `EntityPtr` because they\u2019re low priority, but I left a TODO for myself in the code.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/31/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:56e5d19776ab%0D03f057d3ba9e?from_pullrequest_id=31"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/31/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/31"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:56e5d19776ab%0D03f057d3ba9e?from_pullrequest_id=31"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/31/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/statuses_page=1.json"}}, "title": "Feature System Part 5: EntityPtr", "close_source_branch": true, "type": "pullrequest", "id": 31, "destination": {"commit": {"hash": "03f057d3ba9e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/03f057d3ba9e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/03f057d3ba9e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-08-20T10:11:10.308190+00:00", "summary": {"raw": "This PR continues builds on the Feature System by introducing the `EntityPtr`. I found that we have a tricky situation when it comes to handling entities. I considered both `std::unique_ptr` and `std::optional` as potential containers for our Entity objects, but I found the following issues:\r\n\r\n* `std::unique_ptr` requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an `ign-physics` object, even if no object or information is really being created or destroyed.\r\n* `std::optional` would violate logical const-correctness in our case. To illustrate this, we want a `ConstModelPtr` to only be able to access the const-qualified functions of the `Model` API. However, if we have `std::optional<const Model> constModel = /* get const model */`, then a user can simply do `std::optional<Model> nonConstModel = constModel`, and then suddenly the user has full access to the const-unqualified API of the object `constModel`. Note that `Model` is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.\r\n\r\nTherefore, we need a container class that gives us the const semantics of `std::unique_ptr` with the performance of `std::optional`. That's exactly what `EntityPtr` does.\r\n\r\nNote that there are few pointer semantics functions that haven't been implemented yet for `EntityPtr` because they\u2019re low priority, but I left a TODO for myself in the code.", "markup": "markdown", "html": "<p>This PR continues builds on the Feature System by introducing the <code>EntityPtr</code>. I found that we have a tricky situation when it comes to handling entities. I considered both <code>std::unique_ptr</code> and <code>std::optional</code> as potential containers for our Entity objects, but I found the following issues:</p>\n<ul>\n<li><code>std::unique_ptr</code> requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an <code>ign-physics</code> object, even if no object or information is really being created or destroyed.</li>\n<li><code>std::optional</code> would violate logical const-correctness in our case. To illustrate this, we want a <code>ConstModelPtr</code> to only be able to access the const-qualified functions of the <code>Model</code> API. However, if we have <code>std::optional&lt;const Model&gt; constModel = /* get const model */</code>, then a user can simply do <code>std::optional&lt;Model&gt; nonConstModel = constModel</code>, and then suddenly the user has full access to the const-unqualified API of the object <code>constModel</code>. Note that <code>Model</code> is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.</li>\n</ul>\n<p>Therefore, we need a container class that gives us the const semantics of <code>std::unique_ptr</code> with the performance of <code>std::optional</code>. That's exactly what <code>EntityPtr</code> does.</p>\n<p>Note that there are few pointer semantics functions that haven't been implemented yet for <code>EntityPtr</code> because they\u2019re low priority, but I left a TODO for myself in the code.</p>", "type": "rendered"}, "source": {"commit": {"hash": "967ab1414368", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/967ab1414368.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/967ab1414368"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "EntityHandling"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-09-07T23:49:38.366233+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "56e5d19776ab", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/56e5d19776ab.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/56e5d19776ab"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR will introduce features for programmatically constructing physics objects.\r\n\r\nI'm building off of the `sdf_component` branch so that I can leverage the groundwork that was already done for the dartsim plugin.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/32/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:6b60fa00c9f9%0D692cb69975f7?from_pullrequest_id=32"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/32/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/32"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6b60fa00c9f9%0D692cb69975f7?from_pullrequest_id=32"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/32/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32/statuses_page=1.json"}}, "title": "Feature System Part 7: Features for programmatic construction of objects", "close_source_branch": true, "type": "pullrequest", "id": 32, "destination": {"commit": {"hash": "692cb69975f7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/692cb69975f7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/692cb69975f7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-08-24T08:57:17.177451+00:00", "summary": {"raw": "This PR will introduce features for programmatically constructing physics objects.\r\n\r\nI'm building off of the `sdf_component` branch so that I can leverage the groundwork that was already done for the dartsim plugin.", "markup": "markdown", "html": "<p>This PR will introduce features for programmatically constructing physics objects.</p>\n<p>I'm building off of the <code>sdf_component</code> branch so that I can leverage the groundwork that was already done for the dartsim plugin.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fdd0ba023aa9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fdd0ba023aa9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fdd0ba023aa9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "PhysicsConstruction"}}, "comment_count": 28, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-09T21:27:13.529345+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "6b60fa00c9f9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6b60fa00c9f9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6b60fa00c9f9"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This is a renaming of some data structures as discussed in #!/ignitionrobotics/ign-physics/pull-requests/26/feature-system-part-2-frame-semantics/diff#comment-73922006\r\n\r\nSome header files had to be renamed, so it's probably easier to review this by commit\r\n\r\n* replace s@FramedQuantity@RelativeQuantity@g\r\n\r\n* fix line lengths\r\n\r\n* replace FQ,fq with RQ,rq: 's@fq@rq@g', 's@FQ@RQ@g'\r\n\r\n* mv FramedQuantity.hh RelativeQuantity.hh\r\n\r\n* fix RelativeQuantity.hh header guards\r\n\r\n* replace Framed with Relative s@Framed@Relative@g\r\n\r\n* fix comment", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/33/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:0d401b8f0573%0Dccaa7c302b6d?from_pullrequest_id=33"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/33/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/33.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/33/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/33/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/33"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/33/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:0d401b8f0573%0Dccaa7c302b6d?from_pullrequest_id=33"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/33/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/33/statuses_page=1.json"}}, "title": "FrameSemantics: rename Framed* to Relative*", "close_source_branch": true, "type": "pullrequest", "id": 33, "destination": {"commit": {"hash": "ccaa7c302b6d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/ccaa7c302b6d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/ccaa7c302b6d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "FrameSemantics_raw"}}, "created_on": "2018-08-24T17:25:26.658122+00:00", "summary": {"raw": "This is a renaming of some data structures as discussed in #!/ignitionrobotics/ign-physics/pull-requests/26/feature-system-part-2-frame-semantics/diff#comment-73922006\r\n\r\nSome header files had to be renamed, so it's probably easier to review this by commit\r\n\r\n* replace s@FramedQuantity@RelativeQuantity@g\r\n\r\n* fix line lengths\r\n\r\n* replace FQ,fq with RQ,rq: 's@fq@rq@g', 's@FQ@RQ@g'\r\n\r\n* mv FramedQuantity.hh RelativeQuantity.hh\r\n\r\n* fix RelativeQuantity.hh header guards\r\n\r\n* replace Framed with Relative s@Framed@Relative@g\r\n\r\n* fix comment", "markup": "markdown", "html": "<p>This is a renaming of some data structures as discussed in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/26/feature-system-part-2-frame-semantics/diff#comment-73922006\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-physics/pull-requests/26/feature-system-part-2-frame-semantics/diff#comment-73922006</a></p>\n<p>Some header files had to be renamed, so it's probably easier to review this by commit</p>\n<ul>\n<li>\n<p>replace s@FramedQuantity@RelativeQuantity@g</p>\n</li>\n<li>\n<p>fix line lengths</p>\n</li>\n<li>\n<p>replace FQ,fq with RQ,rq: 's@fq@rq@g', 's@FQ@RQ@g'</p>\n</li>\n<li>\n<p>mv FramedQuantity.hh RelativeQuantity.hh</p>\n</li>\n<li>\n<p>fix RelativeQuantity.hh header guards</p>\n</li>\n<li>\n<p>replace Framed with Relative s@Framed@Relative@g</p>\n</li>\n<li>\n<p>fix comment</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "9c2f0d525b4b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/9c2f0d525b4b.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/9c2f0d525b4b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "FrameSemantics_raw_relative_framed"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-27T01:14:03.714614+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "0d401b8f0573", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0d401b8f0573.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0d401b8f0573"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "* Use gz11 deps \\(cmake2, math6\\) and update pipeline\r\n* Update gtest to support c\\+\\+17\r\n\r\nThis was split from pull request #28, which will be retargeted at this branch", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/34/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:03f057d3ba9e%0D078d40922b8f?from_pullrequest_id=34"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/34/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/34.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/34/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/34/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/34"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/34/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:03f057d3ba9e%0D078d40922b8f?from_pullrequest_id=34"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/34/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/34/statuses_page=1.json"}}, "title": "Feature system part 4.5: use gz11 deps and update gtest", "close_source_branch": true, "type": "pullrequest", "id": 34, "destination": {"commit": {"hash": "078d40922b8f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/078d40922b8f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/078d40922b8f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-08-30T23:10:52.139816+00:00", "summary": {"raw": "* Use gz11 deps \\(cmake2, math6\\) and update pipeline\r\n* Update gtest to support c\\+\\+17\r\n\r\nThis was split from pull request #28, which will be retargeted at this branch", "markup": "markdown", "html": "<ul>\n<li>Use gz11 deps (cmake2, math6) and update pipeline</li>\n<li>Update gtest to support c++17</li>\n</ul>\n<p>This was split from <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/28/feature-system-part-4-more-joint-types\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #28</a>, which will be retargeted at this branch</p>", "type": "rendered"}, "source": {"commit": {"hash": "490b2eff37c3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/490b2eff37c3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/490b2eff37c3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "gz11"}}, "comment_count": 18, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-09-06T20:01:28.094830+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "03f057d3ba9e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/03f057d3ba9e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/03f057d3ba9e"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This is a proposed fix for adding nodes to a skeleton once the skeleton is added to the world. This is done by first removing the skeleton if it has already been added to the world and then adding it back. It\u2019s not the most efficient thing to do, but this handles both construction methods: \\(1\\) A fully populated world/model, \\(2\\) Incremental addition of links and collisions to existing models and links respectively. Should hopefully handle incremental addition of joints, but I haven\u2019t tested that.\r\n\r\n\u200c\r\n\r\n![](https://build.osrfoundation.org/buildStatus/icon?job=ignition_physics-ci-pr_any-ubuntu_auto-amd64&build=49)\r\n[https://build.osrfoundation.org/job/ignition\\_physics-ci-pr\\_any-ubuntu\\_auto-amd64/49/](https://build.osrfoundation.org/job/ignition_physics-ci-pr_any-ubuntu_auto-amd64/49/))", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/35/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:4c14b90f6bbb%0D4007b64050dc?from_pullrequest_id=35"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/35/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/35.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/35/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/35/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/35"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/35/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:4c14b90f6bbb%0D4007b64050dc?from_pullrequest_id=35"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/35/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/35/statuses_page=1.json"}}, "title": "Fix for adding links after a model has been constructed", "close_source_branch": true, "type": "pullrequest", "id": 35, "destination": {"commit": {"hash": "4007b64050dc", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4007b64050dc.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4007b64050dc"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "PhysicsConstruction"}}, "created_on": "2018-09-13T16:16:18.699509+00:00", "summary": {"raw": "This is a proposed fix for adding nodes to a skeleton once the skeleton is added to the world. This is done by first removing the skeleton if it has already been added to the world and then adding it back. It\u2019s not the most efficient thing to do, but this handles both construction methods: \\(1\\) A fully populated world/model, \\(2\\) Incremental addition of links and collisions to existing models and links respectively. Should hopefully handle incremental addition of joints, but I haven\u2019t tested that.\r\n\r\n\u200c\r\n\r\n![](https://build.osrfoundation.org/buildStatus/icon?job=ignition_physics-ci-pr_any-ubuntu_auto-amd64&build=49)\r\n[https://build.osrfoundation.org/job/ignition\\_physics-ci-pr\\_any-ubuntu\\_auto-amd64/49/](https://build.osrfoundation.org/job/ignition_physics-ci-pr_any-ubuntu_auto-amd64/49/))", "markup": "markdown", "html": "<p>This is a proposed fix for adding nodes to a skeleton once the skeleton is added to the world. This is done by first removing the skeleton if it has already been added to the world and then adding it back. It\u2019s not the most efficient thing to do, but this handles both construction methods: (1) A fully populated world/model, (2) Incremental addition of links and collisions to existing models and links respectively. Should hopefully handle incremental addition of joints, but I haven\u2019t tested that.</p>\n<p>\u200c</p>\n<p><img alt=\"\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=ignition_physics-ci-pr_any-ubuntu_auto-amd64&amp;build=49\" />\n<a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/ignition_physics-ci-pr_any-ubuntu_auto-amd64/49/\" rel=\"nofollow\">https://build.osrfoundation.org/job/ignition_physics-ci-pr_any-ubuntu_auto-amd64/49/</a>)</p>", "type": "rendered"}, "source": {"commit": {"hash": "d8e1611115b1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/d8e1611115b1.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/d8e1611115b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "addSkeleton_fix"}}, "comment_count": 6, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-09-20T23:02:39.466267+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "4c14b90f6bbb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4c14b90f6bbb.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4c14b90f6bbb"}}}, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"description": "This PR addresses the [wobbling sphere issue](#!/ignitionrobotics/ign-gazebo/issues/1/), which is happening due to the sphere primitive geometry being represented as a mesh.\r\n\r\nBy default, dartsim will convert primitive geometries into meshes when using the FCL collision detector because of known ongoing issues with FCL\u2019s ability to give good contact points for primitive-primitive collisions. To see this effect in action, you can use the [fcl\\_bad\\_cylinder\\_primitive](#!/ignitionrobotics/ign-physics/branch/fcl_bad_cylinder_primitive) branch of `ign-physics` along with the [gui\\_plugins\\_rolling](#!/ignitionrobotics/ign-gazebo/branch/gui_plugins_rolling) branch of `ign-gazebo`. If you run the `shapes.sdf` world you will see that the sphere no longer wobbles, but if you run `rolling_shapes.sdf`, then you may find that the cylinder gets stuck on the ramp, even though it should be rolling down.\r\n\r\nIn this PR, we change the default of the FCL collision detector to the Bullet collision detector which has better support for primitive shapes. One small disadvantage is that this adds a dependency on `dart-collision-bullet` which is an optional component of dartsim, and transitively adds a dependency on Bullet. However, an advantage \\(besides better primitive collision support\\) is that `dart-collision-bullet` has support for [heightmaps](https://github.com/dartsim/dart/pull/1069).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/36/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:53f63d167464%0D4e6b0de2ba7d?from_pullrequest_id=36"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/36/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/36.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/36/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/36/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/36"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/36/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:53f63d167464%0D4e6b0de2ba7d?from_pullrequest_id=36"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/36/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/36/statuses_page=1.json"}}, "title": "Replace FCL collision detector with Bullet collision detector", "close_source_branch": true, "type": "pullrequest", "id": 36, "destination": {"commit": {"hash": "4e6b0de2ba7d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4e6b0de2ba7d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4e6b0de2ba7d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "PhysicsConstruction"}}, "created_on": "2018-10-08T06:00:11.870330+00:00", "summary": {"raw": "This PR addresses the [wobbling sphere issue](#!/ignitionrobotics/ign-gazebo/issues/1/), which is happening due to the sphere primitive geometry being represented as a mesh.\r\n\r\nBy default, dartsim will convert primitive geometries into meshes when using the FCL collision detector because of known ongoing issues with FCL\u2019s ability to give good contact points for primitive-primitive collisions. To see this effect in action, you can use the [fcl\\_bad\\_cylinder\\_primitive](#!/ignitionrobotics/ign-physics/branch/fcl_bad_cylinder_primitive) branch of `ign-physics` along with the [gui\\_plugins\\_rolling](#!/ignitionrobotics/ign-gazebo/branch/gui_plugins_rolling) branch of `ign-gazebo`. If you run the `shapes.sdf` world you will see that the sphere no longer wobbles, but if you run `rolling_shapes.sdf`, then you may find that the cylinder gets stuck on the ramp, even though it should be rolling down.\r\n\r\nIn this PR, we change the default of the FCL collision detector to the Bullet collision detector which has better support for primitive shapes. One small disadvantage is that this adds a dependency on `dart-collision-bullet` which is an optional component of dartsim, and transitively adds a dependency on Bullet. However, an advantage \\(besides better primitive collision support\\) is that `dart-collision-bullet` has support for [heightmaps](https://github.com/dartsim/dart/pull/1069).", "markup": "markdown", "html": "<p>This PR addresses the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/issues/1/\" rel=\"nofollow\">wobbling sphere issue</a>, which is happening due to the sphere primitive geometry being represented as a mesh.</p>\n<p>By default, dartsim will convert primitive geometries into meshes when using the FCL collision detector because of known ongoing issues with FCL\u2019s ability to give good contact points for primitive-primitive collisions. To see this effect in action, you can use the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/branch/fcl_bad_cylinder_primitive\" rel=\"nofollow\">fcl_bad_cylinder_primitive</a> branch of <code>ign-physics</code> along with the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/branch/gui_plugins_rolling\" rel=\"nofollow\">gui_plugins_rolling</a> branch of <code>ign-gazebo</code>. If you run the <code>shapes.sdf</code> world you will see that the sphere no longer wobbles, but if you run <code>rolling_shapes.sdf</code>, then you may find that the cylinder gets stuck on the ramp, even though it should be rolling down.</p>\n<p>In this PR, we change the default of the FCL collision detector to the Bullet collision detector which has better support for primitive shapes. One small disadvantage is that this adds a dependency on <code>dart-collision-bullet</code> which is an optional component of dartsim, and transitively adds a dependency on Bullet. However, an advantage (besides better primitive collision support) is that <code>dart-collision-bullet</code> has support for <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/pull/1069\" rel=\"nofollow\">heightmaps</a>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "6aed1c90a428", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6aed1c90a428.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6aed1c90a428"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "PhysicsConstruction_BulletCollisions"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-09T03:02:07.182172+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "53f63d167464", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/53f63d167464.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/53f63d167464"}}}, "closed_by": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"description": "This is a proof-of-concept for how to run a test against different plugins that implement the required features. I chose `SimulationFeatures_TEST.cc` as an example since it doesn't require any dart-specific features. We can consider moving this test to `test/integration` or something, but I refrained from doing that here so the diff is viewable.\r\n\r\n* 5b08799: start by parameterizing the physics plugin library location in `SimulationFeatures_TEST.cc` to prepare for repeating the test over different plugins\r\n\r\n* 8b0e909: create a global vector of plugin locations in a header file and run physics test for each physics plugin. This depends on the `dartsim_plugin_LIB` macro being defined in a cmake `add_definitions` call. I added a placeholder for `bullet_plugin_LIB` that results in a blank line in the header file for now.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/37/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:c946fe731616%0D6b60fa00c9f9?from_pullrequest_id=37"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/37/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/37.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/37/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/37/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/37"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/37/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:c946fe731616%0D6b60fa00c9f9?from_pullrequest_id=37"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/37/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/37/statuses_page=1.json"}}, "title": "[WIP] Run test against multiple physics plugins", "close_source_branch": true, "type": "pullrequest", "id": 37, "destination": {"commit": {"hash": "6b60fa00c9f9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6b60fa00c9f9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6b60fa00c9f9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-10-12T01:24:23.545653+00:00", "summary": {"raw": "This is a proof-of-concept for how to run a test against different plugins that implement the required features. I chose `SimulationFeatures_TEST.cc` as an example since it doesn't require any dart-specific features. We can consider moving this test to `test/integration` or something, but I refrained from doing that here so the diff is viewable.\r\n\r\n* 5b08799: start by parameterizing the physics plugin library location in `SimulationFeatures_TEST.cc` to prepare for repeating the test over different plugins\r\n\r\n* 8b0e909: create a global vector of plugin locations in a header file and run physics test for each physics plugin. This depends on the `dartsim_plugin_LIB` macro being defined in a cmake `add_definitions` call. I added a placeholder for `bullet_plugin_LIB` that results in a blank line in the header file for now.", "markup": "markdown", "html": "<p>This is a proof-of-concept for how to run a test against different plugins that implement the required features. I chose <code>SimulationFeatures_TEST.cc</code> as an example since it doesn't require any dart-specific features. We can consider moving this test to <code>test/integration</code> or something, but I refrained from doing that here so the diff is viewable.</p>\n<ul>\n<li>\n<p><a href=\"#!/ignitionrobotics/ign-physics/commits/5b08799\" rel=\"nofollow\" class=\"ap-connect-link\">5b08799</a>: start by parameterizing the physics plugin library location in <code>SimulationFeatures_TEST.cc</code> to prepare for repeating the test over different plugins</p>\n</li>\n<li>\n<p><a href=\"#!/ignitionrobotics/ign-physics/commits/8b0e909\" rel=\"nofollow\" class=\"ap-connect-link\">8b0e909</a>: create a global vector of plugin locations in a header file and run physics test for each physics plugin. This depends on the <code>dartsim_plugin_LIB</code> macro being defined in a cmake <code>add_definitions</code> call. I added a placeholder for <code>bullet_plugin_LIB</code> that results in a blank line in the header file for now.</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "386be4e48131", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/386be4e48131.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/386be4e48131"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "multi_plugin_tests"}}, "comment_count": 16, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-19T18:36:46.439759+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "c946fe731616", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c946fe731616.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c946fe731616"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This changes the implementation of planes to use DART's native plane instead of a large box. Gazebo's planes are apparently infinite planes as well.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/38/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:cc83552dab2a%0Dc946fe731616?from_pullrequest_id=38"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/38/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/38.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/38/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/38/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/38"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/38/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:cc83552dab2a%0Dc946fe731616?from_pullrequest_id=38"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/38/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/38/statuses_page=1.json"}}, "title": "Use infinite plane", "close_source_branch": true, "type": "pullrequest", "id": 38, "destination": {"commit": {"hash": "c946fe731616", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c946fe731616.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c946fe731616"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-10-19T23:55:03.410776+00:00", "summary": {"raw": "This changes the implementation of planes to use DART's native plane instead of a large box. Gazebo's planes are apparently infinite planes as well.", "markup": "markdown", "html": "<p>This changes the implementation of planes to use DART's native plane instead of a large box. Gazebo's planes are apparently infinite planes as well.</p>", "type": "rendered"}, "source": {"commit": {"hash": "559e6623adde", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/559e6623adde.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/559e6623adde"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "infinite_planes"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-24T22:01:27.121755+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "cc83552dab2a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/cc83552dab2a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/cc83552dab2a"}}}, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"description": "", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/39/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:8af751d6bb3f%0Dcc83552dab2a?from_pullrequest_id=39"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/39/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/39.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/39/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/39/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/39"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/39/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:8af751d6bb3f%0Dcc83552dab2a?from_pullrequest_id=39"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/39/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/39/statuses_page=1.json"}}, "title": "Link to main contributing guide", "close_source_branch": true, "type": "pullrequest", "id": 39, "destination": {"commit": {"hash": "cc83552dab2a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/cc83552dab2a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/cc83552dab2a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-11-02T17:04:56.937040+00:00", "summary": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "source": {"commit": {"hash": "2e6835350531", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/2e6835350531.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/2e6835350531"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "contributing"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-02T17:59:38.129015+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": {"hash": "8af751d6bb3f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8af751d6bb3f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8af751d6bb3f"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"description": "This pull request makes a few changes to `SDFFeatures` related to joint creation needed for integration with ign-gazebo:\r\n\r\n* Use Joint::ThreadPitch (SDF DOM interface) instead of accessing it through `sdf::Element`.\r\n    This requires sdformat [pull request #471](https://bitbucket.org/osrf/sdformat/pull-requests/471)\r\n* Adds support for joints with a \"world\" parent. Joints with a \"world\" child are not currently supported.\r\n* Use default property values for a joint axis if it's not specified in SDF. This is to replicate the behavior of Gazebo.\r\n* Enforce joint limits.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/40/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:0466590b344c%0D8af751d6bb3f?from_pullrequest_id=40"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/40/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/40.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/40/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/40/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/40"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/40/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:0466590b344c%0D8af751d6bb3f?from_pullrequest_id=40"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/40/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/40/statuses_page=1.json"}}, "title": "Changes to SDF based joint creation for use with ign-gazebo.", "close_source_branch": true, "type": "pullrequest", "id": 40, "destination": {"commit": {"hash": "8af751d6bb3f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8af751d6bb3f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8af751d6bb3f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-11-05T16:06:27.006923+00:00", "summary": {"raw": "This pull request makes a few changes to `SDFFeatures` related to joint creation needed for integration with ign-gazebo:\r\n\r\n* Use Joint::ThreadPitch (SDF DOM interface) instead of accessing it through `sdf::Element`.\r\n    This requires sdformat [pull request #471](https://bitbucket.org/osrf/sdformat/pull-requests/471)\r\n* Adds support for joints with a \"world\" parent. Joints with a \"world\" child are not currently supported.\r\n* Use default property values for a joint axis if it's not specified in SDF. This is to replicate the behavior of Gazebo.\r\n* Enforce joint limits.", "markup": "markdown", "html": "<p>This pull request makes a few changes to <code>SDFFeatures</code> related to joint creation needed for integration with ign-gazebo:</p>\n<ul>\n<li>Use Joint::ThreadPitch (SDF DOM interface) instead of accessing it through <code>sdf::Element</code>.\n    This requires sdformat <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/471\" rel=\"nofollow\">pull request #471</a></li>\n<li>Adds support for joints with a \"world\" parent. Joints with a \"world\" child are not currently supported.</li>\n<li>Use default property values for a joint axis if it's not specified in SDF. This is to replicate the behavior of Gazebo.</li>\n<li>Enforce joint limits.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "913b5726dd7b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/913b5726dd7b.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/913b5726dd7b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "gazebo_joint"}}, "comment_count": 9, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-07T21:29:31.632979+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "0466590b344c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0466590b344c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0466590b344c"}}}, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"description": "This is so that `ign-gazebo` users can specify verbosity with the `-v` command line option.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/41/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:cbc97a4a885d%0D0466590b344c?from_pullrequest_id=41"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/41/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/41.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/41/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/41/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/41"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/41/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:cbc97a4a885d%0D0466590b344c?from_pullrequest_id=41"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/41/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/41/statuses_page=1.json"}}, "title": "Use ignerr instead of std::cerr", "close_source_branch": true, "type": "pullrequest", "id": 41, "destination": {"commit": {"hash": "0466590b344c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0466590b344c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0466590b344c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-11-07T17:19:07.632562+00:00", "summary": {"raw": "This is so that `ign-gazebo` users can specify verbosity with the `-v` command line option.", "markup": "markdown", "html": "<p>This is so that <code>ign-gazebo</code> users can specify verbosity with the <code>-v</code> command line option.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fd89c9d8185b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fd89c9d8185b.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fd89c9d8185b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "ignwarn_ignerr"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-08T19:44:49.515274+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "cbc97a4a885d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/cbc97a4a885d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/cbc97a4a885d"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"description": "See [DARTScrewJoint.cc](https://bitbucket.org/osrf/gazebo/src/f4e51e8f64001beda70615ab8982a7d5a4e65b18/gazebo/physics/dart/DARTScrewJoint.cc?at=default&fileviewer=file-view-default#DARTScrewJoint.cc-178) and [DARTTypes.hh](https://bitbucket.org/osrf/gazebo/src/f4e51e8f64001beda70615ab8982a7d5a4e65b18/gazebo/physics/dart/DARTTypes.hh?at=default&fileviewer=file-view-default#DARTTypes.hh-137) in Gazebo", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/42/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:282786970a3a%0Dcbc97a4a885d?from_pullrequest_id=42"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/42/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/42.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/42/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/42/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/42"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/42/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:282786970a3a%0Dcbc97a4a885d?from_pullrequest_id=42"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/42/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/42/statuses_page=1.json"}}, "title": "Invert thread pitch value for Dart", "close_source_branch": true, "type": "pullrequest", "id": 42, "destination": {"commit": {"hash": "cbc97a4a885d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/cbc97a4a885d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/cbc97a4a885d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-11-12T21:44:46.253599+00:00", "summary": {"raw": "See [DARTScrewJoint.cc](https://bitbucket.org/osrf/gazebo/src/f4e51e8f64001beda70615ab8982a7d5a4e65b18/gazebo/physics/dart/DARTScrewJoint.cc?at=default&fileviewer=file-view-default#DARTScrewJoint.cc-178) and [DARTTypes.hh](https://bitbucket.org/osrf/gazebo/src/f4e51e8f64001beda70615ab8982a7d5a4e65b18/gazebo/physics/dart/DARTTypes.hh?at=default&fileviewer=file-view-default#DARTTypes.hh-137) in Gazebo", "markup": "markdown", "html": "<p>See <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/f4e51e8f64001beda70615ab8982a7d5a4e65b18/gazebo/physics/dart/DARTScrewJoint.cc?at=default&amp;fileviewer=file-view-default#DARTScrewJoint.cc-178\" rel=\"nofollow\">DARTScrewJoint.cc</a> and <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/f4e51e8f64001beda70615ab8982a7d5a4e65b18/gazebo/physics/dart/DARTTypes.hh?at=default&amp;fileviewer=file-view-default#DARTTypes.hh-137\" rel=\"nofollow\">DARTTypes.hh</a> in Gazebo</p>", "type": "rendered"}, "source": {"commit": {"hash": "0671deca2136", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0671deca2136.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0671deca2136"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "invert_thread_pitch"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-15T17:53:37.372963+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "282786970a3a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/282786970a3a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/282786970a3a"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"description": "", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/43/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:dae6bdd2fb6a%0D282786970a3a?from_pullrequest_id=43"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/43/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/43.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/43/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/43/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/43"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/43/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:dae6bdd2fb6a%0D282786970a3a?from_pullrequest_id=43"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/43/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/43/statuses_page=1.json"}}, "title": "Create a fixed joint if the specified joint type is not supported", "close_source_branch": true, "type": "pullrequest", "id": 43, "destination": {"commit": {"hash": "282786970a3a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/282786970a3a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/282786970a3a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-11-13T00:43:07.781415+00:00", "summary": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "source": {"commit": {"hash": "1aeef5da1726", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/1aeef5da1726.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/1aeef5da1726"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "fixed_joint_fall_back"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-15T18:35:36.541780+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "dae6bdd2fb6a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/dae6bdd2fb6a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/dae6bdd2fb6a"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"description": "", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/44/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:c877cc37e23c%0D8712de24cc55?from_pullrequest_id=44"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/44/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/44.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/44/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/44/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/44"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/44/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:c877cc37e23c%0D8712de24cc55?from_pullrequest_id=44"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/44/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/44/statuses_page=1.json"}}, "title": "default->ign-physics1 and bump version to pre2", "close_source_branch": true, "type": "pullrequest", "id": 44, "destination": {"commit": {"hash": "8712de24cc55", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8712de24cc55.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8712de24cc55"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "ign-physics1"}}, "created_on": "2018-11-20T17:24:01.837067+00:00", "summary": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "source": {"commit": {"hash": "e436bcb4bd04", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/e436bcb4bd04.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/e436bcb4bd04"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "release_1.0.0_pre2"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-20T19:48:52.498728+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "c877cc37e23c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c877cc37e23c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c877cc37e23c"}}}, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"description": "While refactoring the `DoublePendulum` example from pull request #15 to use the new API, I realized that a `WorldPtr` is needed to call the `ForwardStep` API. The `GetEntities` feature has a way to call `GetEngine()->GetWorld()`, but it has lots of other required API's related to Models, Links, Joints, and Shapes.\r\n\r\nIn order to simplify the implementation task, I've split the `GetEntities` feature into subfeatures, so that only a subset of the API needs to be implemented for the `DoublePendulum` example. For this pull request, the diff is much easier to see when looking directly at the commits:\r\n\r\n* 60d36d9: create a feature list called `GetEntitiesList` and change downstream code to reference this instead of `GetEntities`\r\n* f55f2f6: move some functions to a `GetEntine` feature and add it to `GetEntitiesList`\r\n* fcc7340: move more functions to a `EngineGetWorld` feature and add to `GetEntitiesList`. \r\n\r\nI believe these two additional features are enough for the `DoublePendulum` example, but since I had started the process, I went ahead and added `ModelGetLink`, `ModelGetJoint`, and `LinkGetShape` as well in subsequent commits.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/45/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:4732aad04aa5%0Ddae6bdd2fb6a?from_pullrequest_id=45"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/45/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/45.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/45/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/45/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/45"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/45/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:4732aad04aa5%0Ddae6bdd2fb6a?from_pullrequest_id=45"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/45/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/45/statuses_page=1.json"}}, "title": "Split GetEntities feature into multiple subfeatures", "close_source_branch": true, "type": "pullrequest", "id": 45, "destination": {"commit": {"hash": "dae6bdd2fb6a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/dae6bdd2fb6a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/dae6bdd2fb6a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-12-04T07:00:08.770525+00:00", "summary": {"raw": "While refactoring the `DoublePendulum` example from pull request #15 to use the new API, I realized that a `WorldPtr` is needed to call the `ForwardStep` API. The `GetEntities` feature has a way to call `GetEngine()->GetWorld()`, but it has lots of other required API's related to Models, Links, Joints, and Shapes.\r\n\r\nIn order to simplify the implementation task, I've split the `GetEntities` feature into subfeatures, so that only a subset of the API needs to be implemented for the `DoublePendulum` example. For this pull request, the diff is much easier to see when looking directly at the commits:\r\n\r\n* 60d36d9: create a feature list called `GetEntitiesList` and change downstream code to reference this instead of `GetEntities`\r\n* f55f2f6: move some functions to a `GetEntine` feature and add it to `GetEntitiesList`\r\n* fcc7340: move more functions to a `EngineGetWorld` feature and add to `GetEntitiesList`. \r\n\r\nI believe these two additional features are enough for the `DoublePendulum` example, but since I had started the process, I went ahead and added `ModelGetLink`, `ModelGetJoint`, and `LinkGetShape` as well in subsequent commits.", "markup": "markdown", "html": "<p>While refactoring the <code>DoublePendulum</code> example from <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/15/part-4-dartdoublependulum-pid-control\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #15</a> to use the new API, I realized that a <code>WorldPtr</code> is needed to call the <code>ForwardStep</code> API. The <code>GetEntities</code> feature has a way to call <code>GetEngine()-&gt;GetWorld()</code>, but it has lots of other required API's related to Models, Links, Joints, and Shapes.</p>\n<p>In order to simplify the implementation task, I've split the <code>GetEntities</code> feature into subfeatures, so that only a subset of the API needs to be implemented for the <code>DoublePendulum</code> example. For this pull request, the diff is much easier to see when looking directly at the commits:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-physics/commits/60d36d9\" rel=\"nofollow\" class=\"ap-connect-link\">60d36d9</a>: create a feature list called <code>GetEntitiesList</code> and change downstream code to reference this instead of <code>GetEntities</code></li>\n<li><a href=\"#!/ignitionrobotics/ign-physics/commits/f55f2f6\" rel=\"nofollow\" class=\"ap-connect-link\">f55f2f6</a>: move some functions to a <code>GetEntine</code> feature and add it to <code>GetEntitiesList</code></li>\n<li><a href=\"#!/ignitionrobotics/ign-physics/commits/fcc7340\" rel=\"nofollow\" class=\"ap-connect-link\">fcc7340</a>: move more functions to a <code>EngineGetWorld</code> feature and add to <code>GetEntitiesList</code>. </li>\n</ul>\n<p>I believe these two additional features are enough for the <code>DoublePendulum</code> example, but since I had started the process, I went ahead and added <code>ModelGetLink</code>, <code>ModelGetJoint</code>, and <code>LinkGetShape</code> as well in subsequent commits.</p>", "type": "rendered"}, "source": {"commit": {"hash": "b7b3ee1c0516", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b7b3ee1c0516.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b7b3ee1c0516"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "split_GetEntities"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-12-05T05:09:45.485817+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "4732aad04aa5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4732aad04aa5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4732aad04aa5"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "In particular, this pull request adds the `GetLinkForceTorque` and `SetLinkState` features. The `SetLinkState` feature can be used to set a link's linear/angular velocity as well as the applied force/torque on the link. I opted for not creating a `GetLinkState` feature that has velocity getters because that link velocities can be obtained through the FrameSemantics feature.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/46/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:69e3dde74222%0Db5540de53faf?from_pullrequest_id=46"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/46/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:69e3dde74222%0Db5540de53faf?from_pullrequest_id=46"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/46/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/statuses_page=1.json"}}, "title": "[WIP] Add Link features", "close_source_branch": false, "type": "pullrequest", "id": 46, "destination": {"commit": {"hash": "b5540de53faf", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b5540de53faf.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b5540de53faf"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-12-10T23:03:50.766789+00:00", "summary": {"raw": "In particular, this pull request adds the `GetLinkForceTorque` and `SetLinkState` features. The `SetLinkState` feature can be used to set a link's linear/angular velocity as well as the applied force/torque on the link. I opted for not creating a `GetLinkState` feature that has velocity getters because that link velocities can be obtained through the FrameSemantics feature.", "markup": "markdown", "html": "<p>In particular, this pull request adds the <code>GetLinkForceTorque</code> and <code>SetLinkState</code> features. The <code>SetLinkState</code> feature can be used to set a link's linear/angular velocity as well as the applied force/torque on the link. I opted for not creating a <code>GetLinkState</code> feature that has velocity getters because that link velocities can be obtained through the FrameSemantics feature.</p>", "type": "rendered"}, "source": {"commit": {"hash": "69e3dde74222", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/69e3dde74222.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/69e3dde74222"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "link_features"}}, "comment_count": 37, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2020-04-06T19:04:52.120702+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "This PR introduces some very basic features for adding mesh shapes to a simulation. It also implements the features in the dartsim plugin. The new feature depends on `ignition-common-graphics` \\(specifically `ignition::common::Mesh`\\), so it's been put into its own optional component: `ignition-physics-mesh`, similar to how the `ignition-physics-sdf` features are in an optional component that depends on `sdformat`.\r\n\r\nI\u2019ve added a _very_ rudimentary test for the dartsim implementation of this feature. If there\u2019s an imminent need for more comprehensive tests for mesh shapes, let me know and I can put more time towards that.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/47/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:bda2b38e41a3%0D4732aad04aa5?from_pullrequest_id=47"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/47/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/47.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/47/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/47/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/47"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/47/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:bda2b38e41a3%0D4732aad04aa5?from_pullrequest_id=47"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/47/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/47/statuses_page=1.json"}}, "title": "Adding support for MeshShape", "close_source_branch": true, "type": "pullrequest", "id": 47, "destination": {"commit": {"hash": "4732aad04aa5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4732aad04aa5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4732aad04aa5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-12-11T04:15:50.390817+00:00", "summary": {"raw": "This PR introduces some very basic features for adding mesh shapes to a simulation. It also implements the features in the dartsim plugin. The new feature depends on `ignition-common-graphics` \\(specifically `ignition::common::Mesh`\\), so it's been put into its own optional component: `ignition-physics-mesh`, similar to how the `ignition-physics-sdf` features are in an optional component that depends on `sdformat`.\r\n\r\nI\u2019ve added a _very_ rudimentary test for the dartsim implementation of this feature. If there\u2019s an imminent need for more comprehensive tests for mesh shapes, let me know and I can put more time towards that.", "markup": "markdown", "html": "<p>This PR introduces some very basic features for adding mesh shapes to a simulation. It also implements the features in the dartsim plugin. The new feature depends on <code>ignition-common-graphics</code> (specifically <code>ignition::common::Mesh</code>), so it's been put into its own optional component: <code>ignition-physics-mesh</code>, similar to how the <code>ignition-physics-sdf</code> features are in an optional component that depends on <code>sdformat</code>.</p>\n<p>I\u2019ve added a <em>very</em> rudimentary test for the dartsim implementation of this feature. If there\u2019s an imminent need for more comprehensive tests for mesh shapes, let me know and I can put more time towards that.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ec95bc141cb0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/ec95bc141cb0.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/ec95bc141cb0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "common_mesh_feature"}}, "comment_count": 20, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-12-19T10:47:17.858592+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "bda2b38e41a3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/bda2b38e41a3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/bda2b38e41a3"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/48/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:00ecf0fa94f1%0Dbda2b38e41a3?from_pullrequest_id=48"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/48/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/48.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/48/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/48/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/48"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/48/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:00ecf0fa94f1%0Dbda2b38e41a3?from_pullrequest_id=48"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/48/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/48/statuses_page=1.json"}}, "title": "bump to 1.0.0~pre2", "close_source_branch": true, "type": "pullrequest", "id": 48, "destination": {"commit": {"hash": "bda2b38e41a3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/bda2b38e41a3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/bda2b38e41a3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-12-18T21:58:06.676057+00:00", "summary": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "source": {"commit": {"hash": "c4bb635bea7e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c4bb635bea7e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c4bb635bea7e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "bump_pre2"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-12-19T03:12:02.613661+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "00ecf0fa94f1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/00ecf0fa94f1.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/00ecf0fa94f1"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"description": "Requires:\r\n\r\n#!/ignitionrobotics/ign-plugin/pull-requests/21/deprecate-loadlibrary-change-it-by-loadlib/diff", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/49/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:77f9c258e46f%0D7bcbbb0a5a54?from_pullrequest_id=49"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/49/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/49.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/49/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/49/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/49"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/49/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:77f9c258e46f%0D7bcbbb0a5a54?from_pullrequest_id=49"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/49/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/49/statuses_page=1.json"}}, "title": "Use Plugin LoadLib", "close_source_branch": true, "type": "pullrequest", "id": 49, "destination": {"commit": {"hash": "7bcbbb0a5a54", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/7bcbbb0a5a54.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/7bcbbb0a5a54"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-12-21T16:51:08.653286+00:00", "summary": {"raw": "Requires:\r\n\r\n#!/ignitionrobotics/ign-plugin/pull-requests/21/deprecate-loadlibrary-change-it-by-loadlib/diff", "markup": "markdown", "html": "<p>Requires:</p>\n<p><a href=\"#!/ignitionrobotics/ign-plugin/pull-requests/21/deprecate-loadlibrary-change-it-by-loadlib/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-plugin/pull-requests/21/deprecate-loadlibrary-change-it-by-loadlib/diff</a></p>", "type": "rendered"}, "source": {"commit": {"hash": "18b334158368", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/18b334158368.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/18b334158368"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "plugin_loadlib"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-12-26T19:11:44.679523+00:00", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "merge_commit": {"hash": "77f9c258e46f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/77f9c258e46f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/77f9c258e46f"}}}, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"description": "Collisions work for simple shapes, but we recently discovered (issue #8) that plane-mesh collisions don't work as expected. It turns out that\r\nthe PlaneShape type is not completely supported in DART yet (see  https://github.com/dartsim/dart/issues/114).\r\nThis pull request reverts pull request #38 and uses BoxShape for planes.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/50/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:aad0195ff1ed%0D79bf3aa1b63b?from_pullrequest_id=50"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/50/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/50.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/50/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/50/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/50"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/50/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:aad0195ff1ed%0D79bf3aa1b63b?from_pullrequest_id=50"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/50/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/50/statuses_page=1.json"}}, "title": "Use BoxShape for planes", "close_source_branch": true, "type": "pullrequest", "id": 50, "destination": {"commit": {"hash": "79bf3aa1b63b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/79bf3aa1b63b.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/79bf3aa1b63b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-12-27T00:20:34.057161+00:00", "summary": {"raw": "Collisions work for simple shapes, but we recently discovered (issue #8) that plane-mesh collisions don't work as expected. It turns out that\r\nthe PlaneShape type is not completely supported in DART yet (see  https://github.com/dartsim/dart/issues/114).\r\nThis pull request reverts pull request #38 and uses BoxShape for planes.", "markup": "markdown", "html": "<p>Collisions work for simple shapes, but we recently discovered (issue <a href=\"#!/ignitionrobotics/ign-physics/issues/8/collision-between-mesh-and-plane\" rel=\"nofollow\" title=\"Collision between mesh and plane\" class=\"ap-connect-link\"><s>#8</s></a>) that plane-mesh collisions don't work as expected. It turns out that\nthe PlaneShape type is not completely supported in DART yet (see  <a href=\"https://github.com/dartsim/dart/issues/114\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/dartsim/dart/issues/114</a>).\nThis pull request reverts <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/38/use-infinite-plane\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #38</a> and uses BoxShape for planes.</p>", "type": "rendered"}, "source": {"commit": {"hash": "5b2ca975e8de", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/5b2ca975e8de.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/5b2ca975e8de"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "box_plane_shape"}}, "comment_count": 6, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-01-23T19:49:37.579162+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "aad0195ff1ed", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/aad0195ff1ed.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/aad0195ff1ed"}}}, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}], "page": 1, "next": "data/repositories/ignitionrobotics/ign-physics/pullrequests_state=MERGED&state=OPEN&state=SUPERSEDED&state=DECLINED&page=2.json"}