{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116/comments/135072161.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6f689e2dbb59..e6065f91a166?path=dartsim%2Fsrc%2FEntityManagementFeatures.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116/_/diff#comment-135072161"}}, "parent": {"id": 134906375, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116/comments/134906375.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116/_/diff#comment-134906375"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 116, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116"}}, "title": "Implement collision filtering based on collide_bitmask property"}, "content": {"raw": "> In theory it shouldn\u2019t be possible for this function to be called with an invalid _modelID value unless the user is doing some really gnarly stuff by calling this function directly on the plugin instance instead of using the intended public ignition-physics API.\n\nIf you call `Model::Remove` twice, the second time, `_modelID` will be invalid in the sense that it's not in `Base::models` anymore. Of course, you wouldn't do that on purpose, but I can see how someone could have multiple `ModelPtr` to the same model and call `Remove` on them from different locations in their code. The question is, do we throw an exception when that happens or just noop?\n", "markup": "markdown", "html": "<blockquote>\n<p>In theory it shouldn\u2019t be possible for this function to be called with an invalid _modelID value unless the user is doing some really gnarly stuff by calling this function directly on the plugin instance instead of using the intended public ignition-physics API.</p>\n</blockquote>\n<p>If you call <code>Model::Remove</code> twice, the second time, <code>_modelID</code> will be invalid in the sense that it's not in <code>Base::models</code> anymore. Of course, you wouldn't do that on purpose, but I can see how someone could have multiple <code>ModelPtr</code> to the same model and call <code>Remove</code> on them from different locations in their code. The question is, do we throw an exception when that happens or just noop?</p>", "type": "rendered"}, "created_on": "2020-02-09T00:13:26.551097+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 594, "from": null, "outdated": true, "path": "dartsim/src/EntityManagementFeatures.cc"}, "updated_on": "2020-02-09T00:13:26.561060+00:00", "type": "pullrequest_comment", "id": 135072161}