{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116/comments/134127783.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:dc3dc5b18404..daa84ad7aa1b?path=dartsim%2Fsrc%2FEntityManagementFeatures.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116/_/diff#comment-134127783"}}, "parent": {"id": 134125487, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116/comments/134125487.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116/_/diff#comment-134125487"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 116, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116"}}, "title": "Implement collision filtering based on collide_bitmask property"}, "content": {"raw": "For both this and the comments about removing a bitmask I\u2019m open to adding more features. I didn\u2019t do it in my first iteration because I couldn\u2019t come up with a use case.\n\nIt seems the most common way to use bitmasks is to add them to the sdf file and set them when it is parsed. But still I think it makes sense to make the code more robust to future additions, for example if we add a GUI feature to dynamically change the bitmask. A delete function is also useful if an object is removed, so we can avoid memory leaks in the hash maps \\(and possible catastrophic behavior if a new object is created later and it has the same address of a previously deleted one!\\)\n\nI can see two ways to update the bitmask if a previous one was set already:\n\n* Edit the current function by adding another check in the loop versus the previously set bitmask \\(if existing\\), delete the entry if the previous bitmask was ANDing to 0 but the new one isn\u2019t. Has the benefit of only one iteration over the whole map but if we want to add a function to remove a bitmask \\(as you mentioned in the comments under the new feature header\\) we would need to duplicate the deleting code.\n* Just add a new function to delete all the collisions for an object that iterates over the whole map and deletes all the previously created pairs. Call the function both when we want to remove a bitmask or when we want to update a preexisting one. It is possibly slightly less efficient since we need to iterate twice over the whole map in case of update but since it is an operation that \\_should\\_ happen seldomly it is probably better for cleaner code?\n\nAs you can guess I\u2019m oriented towards the second option but what do you think?", "markup": "markdown", "html": "<p>For both this and the comments about removing a bitmask I\u2019m open to adding more features. I didn\u2019t do it in my first iteration because I couldn\u2019t come up with a use case.</p>\n<p>It seems the most common way to use bitmasks is to add them to the sdf file and set them when it is parsed. But still I think it makes sense to make the code more robust to future additions, for example if we add a GUI feature to dynamically change the bitmask. A delete function is also useful if an object is removed, so we can avoid memory leaks in the hash maps (and possible catastrophic behavior if a new object is created later and it has the same address of a previously deleted one!)</p>\n<p>I can see two ways to update the bitmask if a previous one was set already:</p>\n<ul>\n<li>Edit the current function by adding another check in the loop versus the previously set bitmask (if existing), delete the entry if the previous bitmask was ANDing to 0 but the new one isn\u2019t. Has the benefit of only one iteration over the whole map but if we want to add a function to remove a bitmask (as you mentioned in the comments under the new feature header) we would need to duplicate the deleting code.</li>\n<li>Just add a new function to delete all the collisions for an object that iterates over the whole map and deletes all the previously created pairs. Call the function both when we want to remove a bitmask or when we want to update a preexisting one. It is possibly slightly less efficient since we need to iterate twice over the whole map in case of update but since it is an operation that _should_ happen seldomly it is probably better for cleaner code?</li>\n</ul>\n<p>As you can guess I\u2019m oriented towards the second option but what do you think?</p>", "type": "rendered"}, "created_on": "2020-02-03T05:39:04.033115+00:00", "user": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}, "inline": {"to": 37, "from": null, "outdated": true, "path": "dartsim/src/EntityManagementFeatures.cc"}, "updated_on": "2020-02-03T05:39:04.042493+00:00", "type": "pullrequest_comment", "id": 134127783}