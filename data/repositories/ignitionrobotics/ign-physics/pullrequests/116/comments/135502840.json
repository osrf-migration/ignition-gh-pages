{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116/comments/135502840.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6f689e2dbb59..e6065f91a166?path=dartsim%2Fsrc%2FEntityManagementFeatures.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116/_/diff#comment-135502840"}}, "parent": {"id": 135095980, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116/comments/135095980.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116/_/diff#comment-135095980"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 116, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/116.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/116"}}, "title": "Implement collision filtering based on collide_bitmask property"}, "content": {"raw": "> I think my recommendation (perhaps as a future feature since it\u2019s not really critical) is to take advantage of the reference counting for EntityPtrs so that calling RemoveModel(~) will only remove a model from its world and stage the model object for deletion, but will not actually delete it until all references to the model have vanished.\n\nYeah, I think that partly works. For example, `GetModelName` would still work on a removed model because it still has a valid pointer to the underlying DART skeleton. The problem is when the function tries to access `this->models` or any of the `EntityStorage` objects in `Base.hh` because those get pruned when a model is removed.\n\n> That being said, it looks like we could probably just move these lines into the if (this->models.HasEntity(_modelID)) statement. As long as that returns true, I believe we can be certain that the model exists.\n\nYup, that's what I suggest as well.", "markup": "markdown", "html": "<blockquote>\n<p>I think my recommendation (perhaps as a future feature since it\u2019s not really critical) is to take advantage of the reference counting for EntityPtrs so that calling RemoveModel(~) will only remove a model from its world and stage the model object for deletion, but will not actually delete it until all references to the model have vanished.</p>\n</blockquote>\n<p>Yeah, I think that partly works. For example, <code>GetModelName</code> would still work on a removed model because it still has a valid pointer to the underlying DART skeleton. The problem is when the function tries to access <code>this-&gt;models</code> or any of the <code>EntityStorage</code> objects in <code>Base.hh</code> because those get pruned when a model is removed.</p>\n<blockquote>\n<p>That being said, it looks like we could probably just move these lines into the if (this-&gt;models.HasEntity(_modelID)) statement. As long as that returns true, I believe we can be certain that the model exists.</p>\n</blockquote>\n<p>Yup, that's what I suggest as well.</p>", "type": "rendered"}, "created_on": "2020-02-12T03:00:21.949151+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 594, "from": null, "outdated": true, "path": "dartsim/src/EntityManagementFeatures.cc"}, "updated_on": "2020-02-12T03:00:21.959512+00:00", "type": "pullrequest_comment", "id": 135502840}