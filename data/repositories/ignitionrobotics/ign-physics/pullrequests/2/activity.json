{"pagelen": 50, "values": [{"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "79076e02b39e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/79076e02b39e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/79076e02b39e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3f8e51d6e016", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f8e51d6e016.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f8e51d6e016"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "DECLINED", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-01-28T19:18:56.316718+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/89552506.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-89552506"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I think this demo served its purpose, but we don't need it at the moment. We can resurrect it in the future with a new pull request if desired.", "markup": "markdown", "html": "<p>I think this demo served its purpose, but we don't need it at the moment. We can resurrect it in the future with a new pull request if desired.</p>", "type": "rendered"}, "created_on": "2019-01-28T19:18:49.756310+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2019-01-28T19:18:49.764039+00:00", "type": "pullrequest_comment", "id": 89552506}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "3bf87fe246a9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3bf87fe246a9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3bf87fe246a9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3f8e51d6e016", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f8e51d6e016.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f8e51d6e016"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-06T21:27:26.431962+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "3bf87fe246a9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3bf87fe246a9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3bf87fe246a9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "836107d6d070", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/836107d6d070.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/836107d6d070"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-06T21:27:09.130483+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "3bf87fe246a9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3bf87fe246a9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3bf87fe246a9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "836107d6d070", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/836107d6d070.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/836107d6d070"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-06T21:27:09.070916+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "9fae6eb9b56a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/9fae6eb9b56a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/9fae6eb9b56a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "836107d6d070", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/836107d6d070.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/836107d6d070"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-06T21:26:47.143438+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "83fad99b2909", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/83fad99b2909.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/83fad99b2909"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "521c0df864f3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/521c0df864f3.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/521c0df864f3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-16T23:29:03.124460+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/63160416.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-63160416"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Ditto about documentation.", "markup": "markdown", "html": "<p>Ditto about documentation.</p>", "type": "rendered"}, "created_on": "2018-05-02T14:27:40.315826+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-05-02T14:27:40.328633+00:00", "type": "pullrequest_comment", "id": 63160416}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/63160373.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-63160373"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "This file could use documentation.", "markup": "markdown", "html": "<p>This file could use documentation.</p>", "type": "rendered"}, "created_on": "2018-05-02T14:27:19.427950+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-05-02T14:27:19.440275+00:00", "type": "pullrequest_comment", "id": 63160373}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "1a114cb7c50d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/1a114cb7c50d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/1a114cb7c50d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "96e788917f65", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/96e788917f65.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/96e788917f65"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-04-27T21:15:04.515555+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "13ad5b5e76e7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/13ad5b5e76e7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/13ad5b5e76e7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7940640ea0c4", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/7940640ea0c4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/7940640ea0c4"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-26T19:42:05.852459+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "13ad5b5e76e7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/13ad5b5e76e7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/13ad5b5e76e7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7940640ea0c4", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/7940640ea0c4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/7940640ea0c4"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-26T19:42:01.287808+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "13ad5b5e76e7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/13ad5b5e76e7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/13ad5b5e76e7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "589f750f7cf6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/589f750f7cf6.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/589f750f7cf6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-26T16:37:19.038612+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "13ad5b5e76e7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/13ad5b5e76e7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/13ad5b5e76e7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "589f750f7cf6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/589f750f7cf6.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/589f750f7cf6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-26T16:37:18.945372+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "b24fa6211099", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b24fa6211099.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b24fa6211099"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a256c7473c0e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/a256c7473c0e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/a256c7473c0e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-14T23:10:01.192988+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "b24fa6211099", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b24fa6211099.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b24fa6211099"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6e464bee83d5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6e464bee83d5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6e464bee83d5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-14T23:09:37.328183+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "a4cc7f1d91ab", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/a4cc7f1d91ab.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/a4cc7f1d91ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0adb74e0d141", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0adb74e0d141.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0adb74e0d141"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-13T21:27:47.083998+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "a4cc7f1d91ab", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/a4cc7f1d91ab.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/a4cc7f1d91ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "fce615712b6c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fce615712b6c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fce615712b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-13T20:56:16.134823+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/54913556.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-54913556"}}, "parent": {"id": 54913256, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/54913256.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-54913256"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "That makes sense.\n\nI might have intended the data structures to be cleared outside of this loop, perhaps to allow the physics plugins to assume that they're behind handed a blank structure. However, that somewhat conflicts with the goal of recycling these data structures to avoid unnecessary allocations and deallocations. That's something that may be worth thinking about further once we're past the proof-of-concept phase.", "markup": "markdown", "html": "<p>That makes sense.</p>\n<p>I might have intended the data structures to be cleared outside of this loop, perhaps to allow the physics plugins to assume that they're behind handed a blank structure. However, that somewhat conflicts with the goal of recycling these data structures to avoid unnecessary allocations and deallocations. That's something that may be worth thinking about further once we're past the proof-of-concept phase.</p>", "type": "rendered"}, "created_on": "2018-01-30T02:13:36.638827+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-01-30T02:13:36.641347+00:00", "type": "pullrequest_comment", "id": 54913556}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/54913256.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-54913256"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I've been working on another plugin copied from this, and I've noticed that the `Write` function appends poses rather than overwrites them, so the data structure grows without bound. Should we clear the `poses.entries` vector at the beginning of this function?", "markup": "markdown", "html": "<p>I've been working on another plugin copied from this, and I've noticed that the <code>Write</code> function appends poses rather than overwrites them, so the data structure grows without bound. Should we clear the <code>poses.entries</code> vector at the beginning of this function?</p>", "type": "rendered"}, "created_on": "2018-01-30T02:04:37.613891+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-01-30T02:04:37.617247+00:00", "type": "pullrequest_comment", "id": 54913256}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "f6def03f216f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f6def03f216f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f6def03f216f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3cdd081672b6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3cdd081672b6.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3cdd081672b6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-01-24T00:25:14.754479+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "f6def03f216f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f6def03f216f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f6def03f216f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4d5755de6995", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4d5755de6995.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4d5755de6995"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-01-24T00:16:18.139133+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "f6def03f216f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f6def03f216f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f6def03f216f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9138922d795c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/9138922d795c.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/9138922d795c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-01-24T00:04:07.631732+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "f6def03f216f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f6def03f216f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f6def03f216f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "009fc964d9b7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/009fc964d9b7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/009fc964d9b7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-01-18T20:03:26.037800+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "f6def03f216f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f6def03f216f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f6def03f216f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "009fc964d9b7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/009fc964d9b7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/009fc964d9b7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-01-18T20:03:25.940030+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "f6def03f216f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f6def03f216f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f6def03f216f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c19f33ee71bc", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c19f33ee71bc.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c19f33ee71bc"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-01-18T20:02:36.007350+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51904895.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51904895"}}, "parent": {"id": 51891641, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51891641.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51891641"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "removed in 2c00655 ", "markup": "markdown", "html": "<p>removed in <a href=\"#!/ignitionrobotics/ign-physics/commits/2c00655\" rel=\"nofollow\" class=\"ap-connect-link\">2c00655</a> </p>", "type": "rendered"}, "created_on": "2017-12-14T07:22:07.827288+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-14T07:22:07.829584+00:00", "type": "pullrequest_comment", "id": 51904895}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "4ab7c70e2920", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ab7c70e2920.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ab7c70e2920"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2c00655e721f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/2c00655e721f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/2c00655e721f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-12-14T07:21:40.098551+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "4ab7c70e2920", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ab7c70e2920.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ab7c70e2920"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2c00655e721f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/2c00655e721f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/2c00655e721f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-12-14T07:21:40.042966+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51891641.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51891641"}}, "parent": {"id": 51891584, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51891584.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51891584"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "That should not be in there at all.", "markup": "markdown", "html": "<p>That should not be in there at all.</p>", "type": "rendered"}, "created_on": "2017-12-14T00:58:40.358832+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-12-14T00:58:40.361421+00:00", "type": "pullrequest_comment", "id": 51891641}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51891584.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51891584"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "this is causing a compiler warning. should we be using the ignition physics target for this?", "markup": "markdown", "html": "<p>this is causing a compiler warning. should we be using the ignition physics target for this?</p>", "type": "rendered"}, "created_on": "2017-12-14T00:57:22.413004+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-14T00:57:22.415538+00:00", "type": "pullrequest_comment", "id": 51891584}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51890760.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51890760"}}, "parent": {"id": 51887506, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51887506.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51887506"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I've removed this code block in f6e9636; we can put it back in if it proves to be important", "markup": "markdown", "html": "<p>I've removed this code block in <a href=\"#!/ignitionrobotics/ign-physics/commits/f6e9636\" rel=\"nofollow\" class=\"ap-connect-link\">f6e9636</a>; we can put it back in if it proves to be important</p>", "type": "rendered"}, "created_on": "2017-12-14T00:36:22.663806+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-14T00:36:22.665832+00:00", "type": "pullrequest_comment", "id": 51890760}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51890741.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51890741"}}, "parent": {"id": 51887639, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51887639.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51887639"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I removed the include for now in 8b1fe12", "markup": "markdown", "html": "<p>I removed the include for now in <a href=\"#!/ignitionrobotics/ign-physics/commits/8b1fe12\" rel=\"nofollow\" class=\"ap-connect-link\">8b1fe12</a></p>", "type": "rendered"}, "created_on": "2017-12-14T00:35:41.832649+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-14T00:35:41.835308+00:00", "type": "pullrequest_comment", "id": 51890741}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "4ab7c70e2920", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ab7c70e2920.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ab7c70e2920"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8b1fe12b728f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8b1fe12b728f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8b1fe12b728f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-12-14T00:34:56.391655+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51890351.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51890351"}}, "parent": {"id": 51890021, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51890021.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51890021"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "In general with PIMPL it's best for the user-facing classes to be nothing but light wrappers for the underlying implementation class. I feel like I should have done that with the other `OperationalSpaceController` functions as well, but I was kind of rushing through this example.\n\nThen again, we probably don't need to use PIMPL here at all since it's a plugin class, but that's a whole other can of worms.", "markup": "markdown", "html": "<p>In general with PIMPL it's best for the user-facing classes to be nothing but light wrappers for the underlying implementation class. I feel like I should have done that with the other <code>OperationalSpaceController</code> functions as well, but I was kind of rushing through this example.</p>\n<p>Then again, we probably don't need to use PIMPL here at all since it's a plugin class, but that's a whole other can of worms.</p>", "type": "rendered"}, "created_on": "2017-12-14T00:26:15.935061+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-12-14T00:26:15.937714+00:00", "type": "pullrequest_comment", "id": 51890351}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51890021.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51890021"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I assume you made the private `SetState` function so you could reduce the amount of `dataPtr->` in the code? Otherwise it would be more direct to just have the code here in `SetStateTo`", "markup": "markdown", "html": "<p>I assume you made the private <code>SetState</code> function so you could reduce the amount of <code>dataPtr-&gt;</code> in the code? Otherwise it would be more direct to just have the code here in <code>SetStateTo</code></p>", "type": "rendered"}, "created_on": "2017-12-14T00:19:02.062780+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-14T00:19:02.065325+00:00", "type": "pullrequest_comment", "id": 51890021}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51889838.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51889838"}}, "parent": {"id": 46849579, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849579.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849579"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I switched to `EXPECT_DOUBLE_EQ` in 107a8139cd83 and that fixed the warnings", "markup": "markdown", "html": "<p>I switched to <code>EXPECT_DOUBLE_EQ</code> in <a href=\"#!/ignitionrobotics/ign-physics/commits/107a8139cd83\" rel=\"nofollow\" class=\"ap-connect-link\">107a8139cd83</a> and that fixed the warnings</p>", "type": "rendered"}, "created_on": "2017-12-14T00:14:27.224563+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-14T00:14:27.227078+00:00", "type": "pullrequest_comment", "id": 51889838}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51887639.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51887639"}}, "parent": {"id": 51886837, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51886837.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51886837"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I meant to use it, but we don't have any required input data to read yet.", "markup": "markdown", "html": "<p>I meant to use it, but we don't have any required input data to read yet.</p>", "type": "rendered"}, "created_on": "2017-12-13T23:26:16.652683+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-12-13T23:26:16.655035+00:00", "type": "pullrequest_comment", "id": 51887639}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51887582.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51887582"}}, "parent": {"id": 51884515, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51884515.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51884515"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Ultimately, they should be installed as component libraries, which will be much easier once `ign-cmake` has the `Components` branch merged. If we want to install these plugins right now, we'll have to do it manually using `install(~)`.", "markup": "markdown", "html": "<p>Ultimately, they should be installed as component libraries, which will be much easier once <code>ign-cmake</code> has the <code>Components</code> branch merged. If we want to install these plugins right now, we'll have to do it manually using <code>install(~)</code>.</p>", "type": "rendered"}, "created_on": "2017-12-13T23:25:14.619401+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-12-13T23:25:25.513812+00:00", "type": "pullrequest_comment", "id": 51887582}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51887506.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51887506"}}, "parent": {"id": 51884260, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51884260.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51884260"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Yes, this is definitely related to that. I suspect I won't have this build problem any more even if I remove this line.", "markup": "markdown", "html": "<p>Yes, this is definitely related to that. I suspect I won't have this build problem any more even if I remove this line.</p>", "type": "rendered"}, "created_on": "2017-12-13T23:23:43.830588+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-12-13T23:23:43.833207+00:00", "type": "pullrequest_comment", "id": 51887506}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51886837.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51886837"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Is this `CanReadData.hh` header used here?", "markup": "markdown", "html": "<p>Is this <code>CanReadData.hh</code> header used here?</p>", "type": "rendered"}, "created_on": "2017-12-13T23:10:31.438379+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-13T23:10:31.440596+00:00", "type": "pullrequest_comment", "id": 51886837}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51884515.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51884515"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "how should we install the plugins that we compile? I don't see any installation commands in this file", "markup": "markdown", "html": "<p>how should we install the plugins that we compile? I don't see any installation commands in this file</p>", "type": "rendered"}, "created_on": "2017-12-13T22:30:42.642560+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-13T22:30:42.645246+00:00", "type": "pullrequest_comment", "id": 51884515}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/51884260.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-51884260"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "@mxgrey I can't reproduce this failure on my machine; I can remove this block and it still builds fine on my machine. Do you think this is related to that other issue you fixed recently on your desktop?", "markup": "markdown", "html": "<p>@mxgrey I can't reproduce this failure on my machine; I can remove this block and it still builds fine on my machine. Do you think this is related to that other issue you fixed recently on your desktop?</p>", "type": "rendered"}, "created_on": "2017-12-13T22:27:06.548580+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-12-13T22:27:06.558477+00:00", "type": "pullrequest_comment", "id": 51884260}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "4ab7c70e2920", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ab7c70e2920.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ab7c70e2920"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "249bf7ea1043", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/249bf7ea1043.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/249bf7ea1043"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-12-13T03:54:16.077010+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "4ab7c70e2920", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ab7c70e2920.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ab7c70e2920"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "69527c858c31", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/69527c858c31.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/69527c858c31"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-12-13T03:34:05.582025+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "4ab7c70e2920", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/4ab7c70e2920.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/4ab7c70e2920"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "db2b191d6457", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/db2b191d6457.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/db2b191d6457"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-12-13T03:16:07.116619+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "38640e55e502", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/38640e55e502.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/38640e55e502"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "64e1972d3a3b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/64e1972d3a3b.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/64e1972d3a3b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-12-13T01:50:04.525742+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49572819.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49572819"}}, "parent": {"id": 49497119, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49497119.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49497119"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Hah, I thought so! I just couldn't find it because I was searching for `libdart6-data`. It makes sense to not have the `lib`, though, since it's not a library.", "markup": "markdown", "html": "<p>Hah, I thought so! I just couldn't find it because I was searching for <code>libdart6-data</code>. It makes sense to not have the <code>lib</code>, though, since it's not a library.</p>", "type": "rendered"}, "created_on": "2017-11-14T19:58:44.924441+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-14T19:58:44.927812+00:00", "type": "pullrequest_comment", "id": 49572819}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49497119.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49497119"}}, "parent": {"id": 49475262, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475262.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475262"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "We already have [`dart6-data`](https://github.com/dartsim/dart-debian/blob/release-6.3/trusty/debian/dart6-data.install)!", "markup": "markdown", "html": "<p>We already have <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart-debian/blob/release-6.3/trusty/debian/dart6-data.install\" rel=\"nofollow\"><code>dart6-data</code></a>!</p>", "type": "rendered"}, "created_on": "2017-11-14T09:12:24.247679+00:00", "user": {"display_name": "Jeongseok Lee", "uuid": "{3907b560-aed7-43bd-bfa9-fd9873322291}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D"}, "html": {"href": "https://bitbucket.org/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/242819b368397b2b4cddf273b2ba9bf8d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJL-0.png"}}, "nickname": "jlee02", "type": "user", "account_id": "557058:e3fbdece-a1d8-4fb6-a9f1-236ecb09bd9d"}, "updated_on": "2017-11-14T09:12:24.298774+00:00", "type": "pullrequest_comment", "id": 49497119}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475973.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475973"}}, "parent": {"id": 49475937, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475937.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475937"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Please ignore this comment, I added it without refreshing the page and missed the conversation above. ", "markup": "markdown", "html": "<p>Please ignore this comment, I added it without refreshing the page and missed the conversation above. </p>", "type": "rendered"}, "created_on": "2017-11-14T02:23:39.478649+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-11-14T02:23:39.481586+00:00", "type": "pullrequest_comment", "id": 49475973}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}], "next": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/activity_ctx=6EUjF4Sb.json"}