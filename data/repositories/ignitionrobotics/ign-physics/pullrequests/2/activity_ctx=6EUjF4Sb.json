{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475937.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475937"}}, "parent": {"id": 49475083, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475083.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475083"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I am interested in how to get the `urdf` definition for `KR5` as well. I guess this test requires these models in the `GAZEBO_MODEL_PATH`?   \nWe might add a copy of these definitions to the default model path? ", "markup": "markdown", "html": "<p>I am interested in how to get the <code>urdf</code> definition for <code>KR5</code> as well. I guess this test requires these models in the <code>GAZEBO_MODEL_PATH</code>? <br />\nWe might add a copy of these definitions to the default model path? </p>", "type": "rendered"}, "created_on": "2017-11-14T02:22:29.873114+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-11-14T02:22:29.877057+00:00", "type": "pullrequest_comment", "id": 49475937}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475885.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475885"}}, "parent": {"id": 49475216, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475216.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475216"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I can reproduce this on my local machine, which has the `-all-dev` package installed. I think those files aren't in any of the debian packages. I filed https://github.com/dartsim/dart-debian/issues/3", "markup": "markdown", "html": "<p>I can reproduce this on my local machine, which has the <code>-all-dev</code> package installed. I think those files aren't in any of the debian packages. I filed <a href=\"https://github.com/dartsim/dart-debian/issues/3\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/dartsim/dart-debian/issues/3</a></p>", "type": "rendered"}, "created_on": "2017-11-14T02:20:55.130050+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-11-14T02:20:55.133493+00:00", "type": "pullrequest_comment", "id": 49475885}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475262.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475262"}}, "parent": {"id": 49475216, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475216.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475216"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "That said, it might be good for DART to package the models in something like `libdart-models` or `libdart-data`. I can open an issue for that on DART.", "markup": "markdown", "html": "<p>That said, it might be good for DART to package the models in something like <code>libdart-models</code> or <code>libdart-data</code>. I can open an issue for that on DART.</p>", "type": "rendered"}, "created_on": "2017-11-14T01:59:50.031228+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-14T02:00:51.599634+00:00", "type": "pullrequest_comment", "id": 49475262}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475216.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475216"}}, "parent": {"id": 49475083, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475083.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475083"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I suspect we need to install `libdart6-all-dev` instead of `libdart6-dev` in order to retrieve the DART models.\n\nEdit: corrected package names", "markup": "markdown", "html": "<p>I suspect we need to install <code>libdart6-all-dev</code> instead of <code>libdart6-dev</code> in order to retrieve the DART models.</p>\n<p>Edit: corrected package names</p>", "type": "rendered"}, "created_on": "2017-11-14T01:58:27.921863+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-14T02:00:42.110891+00:00", "type": "pullrequest_comment", "id": 49475216}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49475083.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49475083"}}, "parent": {"id": 49466131, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49466131.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49466131"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "the test is failing in the pipelines:\n\n~~~\n[ RUN      ] OperationalSpaceController.Step\nWarning [LocalResource.cpp:47] [LocalResource::constructor] Failed opening file '/build/dart6-6ShFjJ/dart6-6.3.0.ppa2~xenial/data/urdf/KR5/KR5 sixx R650.urdf' for reading: No such file or directory\nWarning [LocalResource.cpp:47] [LocalResource::constructor] Failed opening file '/usr/share/doc/dart/data/urdf/KR5/KR5 sixx R650.urdf' for reading: No such file or directory\nWarning [CompositeResourceRetriever.cpp:95] [CompositeResourceRetriever::retrieve] All ResourceRetrievers registered for this schema failed to retrieve the URI 'dart://sample/urdf/KR5/KR5 sixx R650.urdf' (tried 1).\nWarning [World.cpp:282] [World::addSkeleton] Attempting to add a nullptr Skeleton to the world!\n      Start 10: check_PLUGIN_OperationalSpaceController_TEST\n10/10 Test #10: check_PLUGIN_OperationalSpaceController_TEST ...***Failed    0.01 sec\n~~~", "markup": "markdown", "html": "<p>the test is failing in the pipelines:</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] OperationalSpaceController.Step\nWarning [LocalResource.cpp:47] [LocalResource::constructor] Failed opening file &#39;/build/dart6-6ShFjJ/dart6-6.3.0.ppa2~xenial/data/urdf/KR5/KR5 sixx R650.urdf&#39; for reading: No such file or directory\nWarning [LocalResource.cpp:47] [LocalResource::constructor] Failed opening file &#39;/usr/share/doc/dart/data/urdf/KR5/KR5 sixx R650.urdf&#39; for reading: No such file or directory\nWarning [CompositeResourceRetriever.cpp:95] [CompositeResourceRetriever::retrieve] All ResourceRetrievers registered for this schema failed to retrieve the URI &#39;dart://sample/urdf/KR5/KR5 sixx R650.urdf&#39; (tried 1).\nWarning [World.cpp:282] [World::addSkeleton] Attempting to add a nullptr Skeleton to the world!\n      Start 10: check_PLUGIN_OperationalSpaceController_TEST\n10/10 Test #10: check_PLUGIN_OperationalSpaceController_TEST ...***Failed    0.01 sec\n</pre></div>", "type": "rendered"}, "created_on": "2017-11-14T01:54:14.536983+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-11-14T01:54:14.539408+00:00", "type": "pullrequest_comment", "id": 49475083}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "50a7948e00f2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/50a7948e00f2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/50a7948e00f2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d5fb862fe079", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/d5fb862fe079.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/d5fb862fe079"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-11-13T23:25:52.471119+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "50a7948e00f2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/50a7948e00f2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/50a7948e00f2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3df41c3ddea7", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3df41c3ddea7.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3df41c3ddea7"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-11-13T23:16:33.308674+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "50a7948e00f2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/50a7948e00f2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/50a7948e00f2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "87f77cf6864d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/87f77cf6864d.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/87f77cf6864d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-11-13T23:05:31.325556+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/49466131.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-49466131"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I'll try to add the dart ppa to the pipelines file and see if we can install the dart packages for CI", "markup": "markdown", "html": "<p>I'll try to add the dart ppa to the pipelines file and see if we can install the dart packages for CI</p>", "type": "rendered"}, "created_on": "2017-11-13T22:27:30.604550+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-11-13T22:27:30.607263+00:00", "type": "pullrequest_comment", "id": 49466131}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "50a7948e00f2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/50a7948e00f2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/50a7948e00f2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c6304d97e308", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c6304d97e308.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c6304d97e308"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-11-13T22:10:26.897703+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "24db48b6cbee", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/24db48b6cbee.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/24db48b6cbee"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8ef5346ffdda", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/8ef5346ffdda.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/8ef5346ffdda"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-11-08T18:52:04.798933+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "24db48b6cbee", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/24db48b6cbee.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/24db48b6cbee"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a08de1880060", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/a08de1880060.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/a08de1880060"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-11-08T18:48:56.044755+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "62017df4431e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/62017df4431e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/62017df4431e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "35ee38e5aecb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/35ee38e5aecb.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/35ee38e5aecb"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2017-11-08T00:11:28.779756+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "2efe360d390e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/2efe360d390e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/2efe360d390e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3d8e002e1c03", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3d8e002e1c03.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3d8e002e1c03"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-11-07T23:52:26.148315+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "2efe360d390e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/2efe360d390e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/2efe360d390e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e95ce8514c46", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/e95ce8514c46.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/e95ce8514c46"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-11-02T01:02:09.069391+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"update": {"description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "title": "Created OperationalSpaceController plugin example that uses DART", "destination": {"commit": {"hash": "f4a850262d87", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f4a850262d87.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f4a850262d87"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ac69da1d511f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/ac69da1d511f.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/ac69da1d511f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2017-10-24T01:22:51.911897+00:00"}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46850787.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46850787"}}, "parent": {"id": 46849580, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849580.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849580"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Yeah, I think this naming is going to be tricky to get right (... or at least good enough that I'll feel satisfied with it). I was feeling pretty good about the name `CanWriteRequiredData` until @sloretz made me realize the tragic ambiguity of it.\n\nI'm worried that any alternatives we think of that follow this pattern are going to be grossly verbose. Coming up with a good name might require some fresh ideas.", "markup": "markdown", "html": "<p>Yeah, I think this naming is going to be tricky to get right (... or at least good enough that I'll feel satisfied with it). I was feeling pretty good about the name <code>CanWriteRequiredData</code> until @sloretz made me realize the tragic ambiguity of it.</p>\n<p>I'm worried that any alternatives we think of that follow this pattern are going to be grossly verbose. Coming up with a good name might require some fresh ideas.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:37:17.448501+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:51:57.612061+00:00", "type": "pullrequest_comment", "id": 46850787}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849831.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849831"}}, "parent": {"id": 46848911, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848911.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848911"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I may have misunderstood what you were asking. I do think `EndEffectorPose` is too specific for us to include it as a canonical `ExpectedData` for `Output`, since there could be arbitrarily many end effectors, and having an output data structure that only accepts one pose would not be generally useful or meaningful.", "markup": "markdown", "html": "<p>I may have misunderstood what you were asking. I do think <code>EndEffectorPose</code> is too specific for us to include it as a canonical <code>ExpectedData</code> for <code>Output</code>, since there could be arbitrarily many end effectors, and having an output data structure that only accepts one pose would not be generally useful or meaningful.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:24:02.743103+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:24:02.964919+00:00", "type": "pullrequest_comment", "id": 46849831}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849579.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849579"}}, "parent": {"id": 46848412, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848412.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848412"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I think there are ways to suppress these warnings on these specific lines, which is the solution I would prefer, since we do expect them to be bit-for-bit equivalent. I just haven't done the research on what the warning suppression tokens are yet.", "markup": "markdown", "html": "<p>I think there are ways to suppress these warnings on these specific lines, which is the solution I would prefer, since we do expect them to be bit-for-bit equivalent. I just haven't done the research on what the warning suppression tokens are yet.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:20:23.932532+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:20:41.919259+00:00", "type": "pullrequest_comment", "id": 46849579}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849580.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849580"}}, "parent": {"id": 45214547, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45214547.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45214547"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "If I understand @sloretz correctly, I think `can` here means `be able to`, but not `required`   \nThen the name gives the sense that it is able to write to the output, but not forced to.      \nWhile in the code now, we force it to have a `write`     \n\nMaybe another way to put this: We `must` provide `write` method for `RequiredData`, while we can provide `write` method for `ExpectedData`    \nThe `may` or `must` is more closed tied to the data type   \nAs I am using this more with the ODE plugin, I totally get the point and it is not confusing me any more :)   ", "markup": "markdown", "html": "<p>If I understand @sloretz correctly, I think <code>can</code> here means <code>be able to</code>, but not <code>required</code> <br />\nThen the name gives the sense that it is able to write to the output, but not forced to.    <br />\nWhile in the code now, we force it to have a <code>write</code>     </p>\n<p>Maybe another way to put this: We <code>must</code> provide <code>write</code> method for <code>RequiredData</code>, while we can provide <code>write</code> method for <code>ExpectedData</code>  <br />\nThe <code>may</code> or <code>must</code> is more closed tied to the data type <br />\nAs I am using this more with the ODE plugin, I totally get the point and it is not confusing me any more :)   </p>", "type": "rendered"}, "created_on": "2017-10-10T19:20:24.809172+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T19:20:24.842187+00:00", "type": "pullrequest_comment", "id": 46849580}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849511.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849511"}}, "parent": {"id": 46848274, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848274.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848274"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Right, arbitrary data is allowed in all of the `CompositeData` that goes in and out of `ForwardStep`, including both `Input` and `Output` (e.g. the `EndEffectorPose` output is neither expected nor required by `Output`).\n\nIn fact, except for the `WorldPoses` required by `Output`, none of the data being used or provided by this plugin is expected or required.", "markup": "markdown", "html": "<p>Right, arbitrary data is allowed in all of the <code>CompositeData</code> that goes in and out of <code>ForwardStep</code>, including both <code>Input</code> and <code>Output</code> (e.g. the <code>EndEffectorPose</code> output is neither expected nor required by <code>Output</code>).</p>\n<p>In fact, except for the <code>WorldPoses</code> required by <code>Output</code>, none of the data being used or provided by this plugin is expected or required.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:19:25.662473+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:19:25.666421+00:00", "type": "pullrequest_comment", "id": 46849511}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849347.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849347"}}, "parent": {"id": 46848075, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848075.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848075"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "For the most part, I expect plugin loading to be something done through a GUI. Setting up the plugin paths (which we're doing here) should be taken care of automatically somewhere inside Gazebo. We would probably want to allow end-users to also specify additional plugin paths through the GUI (...maybe through SDF as well?), but that would be optional.\n\nFor users who are programmatically loading plugins, we will likely have a general purpose `PluginLoader` object available to them which is pre-loaded with a default set of plugin paths, and the user can choose to add the paths of their plugins if necessary.\n\nI'm not sure if that answers your question; please let me know if I'm misinterpreting.", "markup": "markdown", "html": "<p>For the most part, I expect plugin loading to be something done through a GUI. Setting up the plugin paths (which we're doing here) should be taken care of automatically somewhere inside Gazebo. We would probably want to allow end-users to also specify additional plugin paths through the GUI (...maybe through SDF as well?), but that would be optional.</p>\n<p>For users who are programmatically loading plugins, we will likely have a general purpose <code>PluginLoader</code> object available to them which is pre-loaded with a default set of plugin paths, and the user can choose to add the paths of their plugins if necessary.</p>\n<p>I'm not sure if that answers your question; please let me know if I'm misinterpreting.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:16:59.946412+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:16:59.950319+00:00", "type": "pullrequest_comment", "id": 46849347}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46849030.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46849030"}}, "parent": {"id": 46847743, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847743.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847743"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "To clarify, there's a pure abstract class called `SetState` which is currently defined in `ForwardStep.hh` (but it really belongs in its own header, `SetState.hh`), and the `SetState` class has a function named `SetStateTo(~)`, which is being overridden here by the `OperationalSpaceController` plugin.\n\nBut yes, the names `SetState` and `SetStateTo` are very confusing and deeply unsatisfying.", "markup": "markdown", "html": "<p>To clarify, there's a pure abstract class called <code>SetState</code> which is currently defined in <code>ForwardStep.hh</code> (but it really belongs in its own header, <code>SetState.hh</code>), and the <code>SetState</code> class has a function named <code>SetStateTo(~)</code>, which is being overridden here by the <code>OperationalSpaceController</code> plugin.</p>\n<p>But yes, the names <code>SetState</code> and <code>SetStateTo</code> are very confusing and deeply unsatisfying.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:13:02.671827+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:13:02.675800+00:00", "type": "pullrequest_comment", "id": 46849030}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848911.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848911"}}, "parent": {"id": 46848053, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848053.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848053"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "The `output` in `ForwardStep.hh` using `WorldPoses` as `RequiredData` is a nice one!   \nI realized that it does not require anything about the `EndEffectorPose` class", "markup": "markdown", "html": "<p>The <code>output</code> in <code>ForwardStep.hh</code> using <code>WorldPoses</code> as <code>RequiredData</code> is a nice one! <br />\nI realized that it does not require anything about the <code>EndEffectorPose</code> class</p>", "type": "rendered"}, "created_on": "2017-10-10T19:11:05.982991+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T19:11:05.985955+00:00", "type": "pullrequest_comment", "id": 46848911}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848829.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848829"}}, "parent": {"id": 46847534, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847534.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847534"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "The behavior of the query flags and these metaprogramming functions (like `WriteRequiredData`) is probably something we should discuss and flesh out more.\n\nIn the current implementation, you have two choices for ensuring that all relevant data is written:\n\n1. Call `h.ResetQueries();` before `WriteRequiredData(h);`\n\n2. Call `WriteRequiredData(h, WriteOptions(false, false));`\n\nThe first argument to `WriteOptions` says whether `WriteRequiredData` should skip writing to data entries that are not already present in the `CompositeData` (default is false). The second argument says whether it should only write to data entries which have not yet been queried (default is true).\n\nI don't have very strong opinions about this behavior. I'm very open to alternatives. For example, we could have the default be that it does write data to queried entries, and then if the user wants better performance, they can choose to instruct `WriteRequiredData` to skip the already-queried entries. That would probably be the safer default.", "markup": "markdown", "html": "<p>The behavior of the query flags and these metaprogramming functions (like <code>WriteRequiredData</code>) is probably something we should discuss and flesh out more.</p>\n<p>In the current implementation, you have two choices for ensuring that all relevant data is written:</p>\n<ol>\n<li>\n<p>Call <code>h.ResetQueries();</code> before <code>WriteRequiredData(h);</code></p>\n</li>\n<li>\n<p>Call <code>WriteRequiredData(h, WriteOptions(false, false));</code></p>\n</li>\n</ol>\n<p>The first argument to <code>WriteOptions</code> says whether <code>WriteRequiredData</code> should skip writing to data entries that are not already present in the <code>CompositeData</code> (default is false). The second argument says whether it should only write to data entries which have not yet been queried (default is true).</p>\n<p>I don't have very strong opinions about this behavior. I'm very open to alternatives. For example, we could have the default be that it does write data to queried entries, and then if the user wants better performance, they can choose to instruct <code>WriteRequiredData</code> to skip the already-queried entries. That would probably be the safer default.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:09:42.518241+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:09:42.522423+00:00", "type": "pullrequest_comment", "id": 46848829}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848624.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848624"}}, "parent": {"id": 46847185, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847185.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847185"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Agreed! ", "markup": "markdown", "html": "<p>Agreed! </p>", "type": "rendered"}, "created_on": "2017-10-10T19:07:30.487561+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T19:07:30.490808+00:00", "type": "pullrequest_comment", "id": 46848624}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848412.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848412"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "It's great to see the error matches the history. But I think gtest has some warning on apply `equal` operator on two double / float type.    \nMaybe we could `EXPECT_LT(abs(errorHisotry[0] - err), 10^(-16))` to get rid of the warnings? ", "markup": "markdown", "html": "<p>It's great to see the error matches the history. But I think gtest has some warning on apply <code>equal</code> operator on two double / float type.  <br />\nMaybe we could <code>EXPECT_LT(abs(errorHisotry[0] - err), 10^(-16))</code> to get rid of the warnings? </p>", "type": "rendered"}, "created_on": "2017-10-10T19:05:20.393137+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T19:05:20.395676+00:00", "type": "pullrequest_comment", "id": 46848412}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848274.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848274"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "As for `input` DS defined in `ForwardStep.hh`, it seems there is no either `ExpectData` or `RequiredData` as of type `TargetPose`      \nDoes this mean we could get arbitrary data type from input? ", "markup": "markdown", "html": "<p>As for <code>input</code> DS defined in <code>ForwardStep.hh</code>, it seems there is no either <code>ExpectData</code> or <code>RequiredData</code> as of type <code>TargetPose</code>    <br />\nDoes this mean we could get arbitrary data type from input? </p>", "type": "rendered"}, "created_on": "2017-10-10T19:03:31.209768+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T19:03:31.212417+00:00", "type": "pullrequest_comment", "id": 46848274}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848075.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848075"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "In order to `LoadLibrary`,  do I have to set up some string in the `ign-common`? ", "markup": "markdown", "html": "<p>In order to <code>LoadLibrary</code>,  do I have to set up some string in the <code>ign-common</code>? </p>", "type": "rendered"}, "created_on": "2017-10-10T19:01:09.188178+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T19:01:09.192069+00:00", "type": "pullrequest_comment", "id": 46848075}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848053.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848053"}}, "parent": {"id": 46847427, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847427.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847427"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Yeah, it absolutely doesn't belong in a final implementation. It's just a gross temporary hack to help the demo along.\n\nNote however that even though `EndEffectorPose` is defined in the `ForwardStep.hh`, it is **not** defined as an output for `ForwardStep`.  The `ForwardStep` class does not need to know anything about the `EndEffectorPose` class, and the code would all work just the same. We could move `EndEffectorPose` to a different header which **only** gets `#included` by the (1) the unit test and (2) the dart plugin implementation, and the demo would still work all the same. The only reason I didn't do it that way was ... laziness, mostly... and to cut down on clutter from headers that we're not likely to keep around anyway.", "markup": "markdown", "html": "<p>Yeah, it absolutely doesn't belong in a final implementation. It's just a gross temporary hack to help the demo along.</p>\n<p>Note however that even though <code>EndEffectorPose</code> is defined in the <code>ForwardStep.hh</code>, it is <strong>not</strong> defined as an output for <code>ForwardStep</code>.  The <code>ForwardStep</code> class does not need to know anything about the <code>EndEffectorPose</code> class, and the code would all work just the same. We could move <code>EndEffectorPose</code> to a different header which <strong>only</strong> gets <code>#included</code> by the (1) the unit test and (2) the dart plugin implementation, and the demo would still work all the same. The only reason I didn't do it that way was ... laziness, mostly... and to cut down on clutter from headers that we're not likely to keep around anyway.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:00:55.839374+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T19:00:55.843023+00:00", "type": "pullrequest_comment", "id": 46848053}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847743.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847743"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "As talked offline, `SetStateTo` is a method here, there is another method named `SetState`      \nInside `ForwardStep.hh`, there is a class named `SetState`,  we can probabbly discuss and make the naming less confusing ", "markup": "markdown", "html": "<p>As talked offline, <code>SetStateTo</code> is a method here, there is another method named <code>SetState</code>    <br />\nInside <code>ForwardStep.hh</code>, there is a class named <code>SetState</code>,  we can probabbly discuss and make the naming less confusing </p>", "type": "rendered"}, "created_on": "2017-10-10T18:57:16.382087+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T18:57:35.225033+00:00", "type": "pullrequest_comment", "id": 46847743}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847534.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847534"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Is this `Reset` required every time before we write data to output `h`?   ", "markup": "markdown", "html": "<p>Is this <code>Reset</code> required every time before we write data to output <code>h</code>?   </p>", "type": "rendered"}, "created_on": "2017-10-10T18:54:31.658540+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T18:54:31.661926+00:00", "type": "pullrequest_comment", "id": 46847534}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847427.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847427"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "`EndEffectorPose` is currently defined in the `ForwardStep.hh` as an output DS, we briefly discussed that we     \ncould provide a list of standard output DS and users choose which to be `Required` or `Expected`, or       \nadd their own as `Expected`, which I strongly agree. In that case, would a `EndEffectorPose` be too specific?    \nSince we could derive infinite number of poses   \n\nOr we only provide a WorldPose, so that users could add their own XXXPose to be WorldPose? ", "markup": "markdown", "html": "<p><code>EndEffectorPose</code> is currently defined in the <code>ForwardStep.hh</code> as an output DS, we briefly discussed that we   <br />\ncould provide a list of standard output DS and users choose which to be <code>Required</code> or <code>Expected</code>, or     <br />\nadd their own as <code>Expected</code>, which I strongly agree. In that case, would a <code>EndEffectorPose</code> be too specific?  <br />\nSince we could derive infinite number of poses   </p>\n<p>Or we only provide a WorldPose, so that users could add their own XXXPose to be WorldPose? </p>", "type": "rendered"}, "created_on": "2017-10-10T18:53:35.175235+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T18:53:35.178360+00:00", "type": "pullrequest_comment", "id": 46847427}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847273.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847273"}}, "parent": {"id": 46847185, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847185.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847185"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "But you're right; there may be all sorts of low-level conversions required by users. I think we should only create and maintain math conversions for the math libraries that are needed by our natively supported physics engines (and rendering engines, etc).", "markup": "markdown", "html": "<p>But you're right; there may be all sorts of low-level conversions required by users. I think we should only create and maintain math conversions for the math libraries that are needed by our natively supported physics engines (and rendering engines, etc).</p>", "type": "rendered"}, "created_on": "2017-10-10T18:51:32.253956+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T18:51:32.257233+00:00", "type": "pullrequest_comment", "id": 46847273}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847185.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847185"}}, "parent": {"id": 46846934, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46846934.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46846934"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I think math conversion headers should probably be \"components\" of `ignition-math` for maximum reusability. Each of the components would depend only on the math library that it converts to/from, and most of the time, the components would be optional.", "markup": "markdown", "html": "<p>I think math conversion headers should probably be \"components\" of <code>ignition-math</code> for maximum reusability. Each of the components would depend only on the math library that it converts to/from, and most of the time, the components would be optional.</p>", "type": "rendered"}, "created_on": "2017-10-10T18:50:28.781976+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-10-10T18:50:28.784837+00:00", "type": "pullrequest_comment", "id": 46847185}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46846934.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46846934"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Would you prefer to have a MathConversions file for each physics engine? Say ODE uses dReal*  and DART uses Eigen (we might adopt Eigen along the way)   \nCurrently I created a similar MathConversions file and provide conversions between ODE dReal* and ignition::math::XXX      \nFrom a user's perspective, they might have all kinds of low-level customized data structures, maybe we leave this to the users for conversion? \n", "markup": "markdown", "html": "<p>Would you prefer to have a MathConversions file for each physics engine? Say ODE uses dReal<em>  and DART uses Eigen (we might adopt Eigen along the way) <br />\nCurrently I created a similar MathConversions file and provide conversions between ODE dReal</em> and ignition::math::XXX    <br />\nFrom a user's perspective, they might have all kinds of low-level customized data structures, maybe we leave this to the users for conversion? </p>", "type": "rendered"}, "created_on": "2017-10-10T18:47:51.703176+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "inline": {}, "updated_on": "2017-10-10T18:47:51.706727+00:00", "type": "pullrequest_comment", "id": 46846934}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45214547.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45214547"}}, "parent": {"id": 45022145, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022145.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022145"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "It took embarrassingly long for this to register in my head, but I finally realized that the word \"can\" has **two** definitions that would apply in this context:\n\n1. be able to.\n\n2. be permitted to.\n\nObviously, I was only considering definition (1), but you were inferring the possible use of definition (2) here. It took me this long to recognize the ambiguity because I've always been somewhat of a pedant who believes that only definition (1) is valid, and that definition (2) should be reserved for the word \"may\". However, not everyone is going to share my views on that distinction (nor should I expect them to), so you're very right to point out that there is ambiguity here.\n\nI don't think `MustWriteRequiredData` is accurate, because it implies that the action of writing required data must be performed by the object. However, maybe something like `IsAbleToWriteRequiredData` would be more accurate and unambiguous? `MustBeAbleToWriteRequiredData` would probably be the most accurate, but that starts to get rather verbose.", "markup": "markdown", "html": "<p>It took embarrassingly long for this to register in my head, but I finally realized that the word \"can\" has <strong>two</strong> definitions that would apply in this context:</p>\n<ol>\n<li>\n<p>be able to.</p>\n</li>\n<li>\n<p>be permitted to.</p>\n</li>\n</ol>\n<p>Obviously, I was only considering definition (1), but you were inferring the possible use of definition (2) here. It took me this long to recognize the ambiguity because I've always been somewhat of a pedant who believes that only definition (1) is valid, and that definition (2) should be reserved for the word \"may\". However, not everyone is going to share my views on that distinction (nor should I expect them to), so you're very right to point out that there is ambiguity here.</p>\n<p>I don't think <code>MustWriteRequiredData</code> is accurate, because it implies that the action of writing required data must be performed by the object. However, maybe something like <code>IsAbleToWriteRequiredData</code> would be more accurate and unambiguous? <code>MustBeAbleToWriteRequiredData</code> would probably be the most accurate, but that starts to get rather verbose.</p>", "type": "rendered"}, "created_on": "2017-09-18T17:01:20.019483+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-18T17:01:20.022581+00:00", "type": "pullrequest_comment", "id": 45214547}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45023297.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45023297"}}, "parent": {"id": 45023214, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45023214.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45023214"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "We should do a user study where we take a list of possible class names, show them to a random set of developers and ask each of them what they think each class entails.", "markup": "markdown", "html": "<p>We should do a user study where we take a list of possible class names, show them to a random set of developers and ask each of them what they think each class entails.</p>", "type": "rendered"}, "created_on": "2017-09-14T22:33:51.430082+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-14T22:33:51.432561+00:00", "type": "pullrequest_comment", "id": 45023297}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45023214.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45023214"}}, "parent": {"id": 45023059, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45023059.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45023059"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I'm a newbie who found the current name confusing ;-)", "markup": "markdown", "html": "<p>I'm a newbie who found the current name confusing ;-)</p>", "type": "rendered"}, "created_on": "2017-09-14T22:31:42.468288+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-09-14T22:31:42.470863+00:00", "type": "pullrequest_comment", "id": 45023214}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45023059.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45023059"}}, "parent": {"id": 45022947, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022947.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022947"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I'm open to suggestions. I don't personally see it as being ambiguous, and I feel that all the alternatives I'm imagining would be more confusing, misleading, or inaccurate, but I'm very biased since I wrote it in the first place.", "markup": "markdown", "html": "<p>I'm open to suggestions. I don't personally see it as being ambiguous, and I feel that all the alternatives I'm imagining would be more confusing, misleading, or inaccurate, but I'm very biased since I wrote it in the first place.</p>", "type": "rendered"}, "created_on": "2017-09-14T22:27:41.551685+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-14T22:27:41.554309+00:00", "type": "pullrequest_comment", "id": 45023059}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022947.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022947"}}, "parent": {"id": 45022779, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022779.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022779"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Are there any names that make it clear it must be able to write, but won't necessarily be called on to write? `Writes`, or `Implements`, or `HasInterface`, or ...?", "markup": "markdown", "html": "<p>Are there any names that make it clear it must be able to write, but won't necessarily be called on to write? <code>Writes</code>, or <code>Implements</code>, or <code>HasInterface</code>, or ...?</p>", "type": "rendered"}, "created_on": "2017-09-14T22:24:36.164158+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-09-14T22:24:36.166594+00:00", "type": "pullrequest_comment", "id": 45022947}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022869.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022869"}}, "parent": {"id": 45022590, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022590.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022590"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "In other words, it **must** contain the method (i.e. be able to do it, i.e. \"can\" do it), but it won't necessarily perform the action, because it might never be instructed to.", "markup": "markdown", "html": "<p>In other words, it <strong>must</strong> contain the method (i.e. be able to do it, i.e. \"can\" do it), but it won't necessarily perform the action, because it might never be instructed to.</p>", "type": "rendered"}, "created_on": "2017-09-14T22:22:46.002618+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-14T22:22:46.005604+00:00", "type": "pullrequest_comment", "id": 45022869}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022779.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022779"}}, "parent": {"id": 45022590, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022590.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022590"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "I thought about that, but I chose not to, because `MustWriteRequiredData` sounds like it's saying \"This class is going to write some required data at some point\", but really what the `CanWriteRequiredData` is expressing is that the class which inherits it is *able* to write the required data, not that it necessarily will do any required data writing. The function `WriteRequiredData(~)` must still be called on it before it does any kind of writing. If I say that I \"can\" do something, I don't think there's any ambiguity about my ability to do the thing; there's only a question of whether I actually will do it or not.\n", "markup": "markdown", "html": "<p>I thought about that, but I chose not to, because <code>MustWriteRequiredData</code> sounds like it's saying \"This class is going to write some required data at some point\", but really what the <code>CanWriteRequiredData</code> is expressing is that the class which inherits it is <em>able</em> to write the required data, not that it necessarily will do any required data writing. The function <code>WriteRequiredData(~)</code> must still be called on it before it does any kind of writing. If I say that I \"can\" do something, I don't think there's any ambiguity about my ability to do the thing; there's only a question of whether I actually will do it or not.</p>", "type": "rendered"}, "created_on": "2017-09-14T22:20:20.875833+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-14T22:21:23.916625+00:00", "type": "pullrequest_comment", "id": 45022779}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022590.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022590"}}, "parent": {"id": 45022499, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022499.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022499"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "When I read `Can` I thought it might have been optional, like it can write if it chooses to. How about `MustWriteRequiredData` or `WritesRequiredData`, or ...?", "markup": "markdown", "html": "<p>When I read <code>Can</code> I thought it might have been optional, like it can write if it chooses to. How about <code>MustWriteRequiredData</code> or <code>WritesRequiredData</code>, or ...?</p>", "type": "rendered"}, "created_on": "2017-09-14T22:15:49.141913+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-09-14T22:15:49.144967+00:00", "type": "pullrequest_comment", "id": 45022590}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022449.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022449"}}, "parent": {"id": 45022249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022249.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022249"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "To elaborate on this, the benefit is that if we make a change to what kind of data we require in `ForwardStep::Output`, then a developer (or user) who has written a Plugin that claims to be suitable for modifying a `ForwardStep::Output` will get a compilation error when they build against the latest version of our library, until they update their class to meet the latest specification.", "markup": "markdown", "html": "<p>To elaborate on this, the benefit is that if we make a change to what kind of data we require in <code>ForwardStep::Output</code>, then a developer (or user) who has written a Plugin that claims to be suitable for modifying a <code>ForwardStep::Output</code> will get a compilation error when they build against the latest version of our library, until they update their class to meet the latest specification.</p>", "type": "rendered"}, "created_on": "2017-09-14T22:12:46.064202+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-14T22:14:33.180966+00:00", "type": "pullrequest_comment", "id": 45022449}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022499.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022499"}}, "parent": {"id": 45022379, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022379.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022379"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "It *must* have, and a compilation error will occur if it does not.", "markup": "markdown", "html": "<p>It <em>must</em> have, and a compilation error will occur if it does not.</p>", "type": "rendered"}, "created_on": "2017-09-14T22:13:50.644301+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-14T22:13:50.646654+00:00", "type": "pullrequest_comment", "id": 45022499}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022379.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022379"}}, "parent": {"id": 45022249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022249.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022249"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "Does `CanWrite` mean it could have a write method for the required data, or must have a write method for the required data?", "markup": "markdown", "html": "<p>Does <code>CanWrite</code> mean it could have a write method for the required data, or must have a write method for the required data?</p>", "type": "rendered"}, "created_on": "2017-09-14T22:11:19.457941+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-09-14T22:11:19.460282+00:00", "type": "pullrequest_comment", "id": 45022379}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022145.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022145"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "From the perspective of someone looking at the code for the first time, it's not clear to me what `CanWriteRequiredData` means. Is it saying this class can modify a `ForwardStep::Output`?", "markup": "markdown", "html": "<p>From the perspective of someone looking at the code for the first time, it's not clear to me what <code>CanWriteRequiredData</code> means. Is it saying this class can modify a <code>ForwardStep::Output</code>?</p>", "type": "rendered"}, "created_on": "2017-09-14T22:06:12.414159+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {}, "updated_on": "2017-09-14T22:09:47.392708+00:00", "type": "pullrequest_comment", "id": 45022145}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022249.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022249"}}, "parent": {"id": 45022145, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/45022145.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-45022145"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "That's correct. More specifically, it's saying it has a `Write(~)` function overloaded for each type of data that is specified as `Required` by `ForwardStep::Output`.", "markup": "markdown", "html": "<p>That's correct. More specifically, it's saying it has a <code>Write(~)</code> function overloaded for each type of data that is specified as <code>Required</code> by <code>ForwardStep::Output</code>.</p>", "type": "rendered"}, "created_on": "2017-09-14T22:08:55.022833+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2017-09-14T22:09:33.818775+00:00", "type": "pullrequest_comment", "id": 45022249}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/44114032.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-44114032"}}, "parent": {"id": 43743392, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/43743392.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-43743392"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "ok, I was confused because I had been looking at the [wrong operational space control example](https://github.com/dartsim/dart/blob/master/examples/operationalSpaceControl/Controller.cpp). I would consider reverting the style changes so it is easier to see what changes are needed to port an example over to ignition physics.", "markup": "markdown", "html": "<p>ok, I was confused because I had been looking at the <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/blob/master/examples/operationalSpaceControl/Controller.cpp\" rel=\"nofollow\">wrong operational space control example</a>. I would consider reverting the style changes so it is easier to see what changes are needed to port an example over to ignition physics.</p>", "type": "rendered"}, "created_on": "2017-09-01T20:39:37.895481+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-09-01T20:39:37.898488+00:00", "type": "pullrequest_comment", "id": 44114032}, "pull_request": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}}], "next": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/activity_ctx=ndRt99Hasg.json"}