{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46848829.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:a67d98080199..f4a850262d87?path=ignition-physics-dart%2FOperationalSpaceController.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46848829"}}, "parent": {"id": 46847534, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments/46847534.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2/_/diff#comment-46847534"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}}, "title": "Created OperationalSpaceController plugin example that uses DART"}, "content": {"raw": "The behavior of the query flags and these metaprogramming functions (like `WriteRequiredData`) is probably something we should discuss and flesh out more.\n\nIn the current implementation, you have two choices for ensuring that all relevant data is written:\n\n1. Call `h.ResetQueries();` before `WriteRequiredData(h);`\n\n2. Call `WriteRequiredData(h, WriteOptions(false, false));`\n\nThe first argument to `WriteOptions` says whether `WriteRequiredData` should skip writing to data entries that are not already present in the `CompositeData` (default is false). The second argument says whether it should only write to data entries which have not yet been queried (default is true).\n\nI don't have very strong opinions about this behavior. I'm very open to alternatives. For example, we could have the default be that it does write data to queried entries, and then if the user wants better performance, they can choose to instruct `WriteRequiredData` to skip the already-queried entries. That would probably be the safer default.", "markup": "markdown", "html": "<p>The behavior of the query flags and these metaprogramming functions (like <code>WriteRequiredData</code>) is probably something we should discuss and flesh out more.</p>\n<p>In the current implementation, you have two choices for ensuring that all relevant data is written:</p>\n<ol>\n<li>\n<p>Call <code>h.ResetQueries();</code> before <code>WriteRequiredData(h);</code></p>\n</li>\n<li>\n<p>Call <code>WriteRequiredData(h, WriteOptions(false, false));</code></p>\n</li>\n</ol>\n<p>The first argument to <code>WriteOptions</code> says whether <code>WriteRequiredData</code> should skip writing to data entries that are not already present in the <code>CompositeData</code> (default is false). The second argument says whether it should only write to data entries which have not yet been queried (default is true).</p>\n<p>I don't have very strong opinions about this behavior. I'm very open to alternatives. For example, we could have the default be that it does write data to queried entries, and then if the user wants better performance, they can choose to instruct <code>WriteRequiredData</code> to skip the already-queried entries. That would probably be the safer default.</p>", "type": "rendered"}, "created_on": "2017-10-10T19:09:42.518241+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "ignition-physics-dart/OperationalSpaceController.cc"}, "updated_on": "2017-10-10T19:09:42.522423+00:00", "type": "pullrequest_comment", "id": 46848829}