{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/56/comments/89271000.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:ed90b205c748..588b98c2d68e?path=dartsim%2Fsrc%2FEntityManagementFeatures.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/56/_/diff#comment-89271000"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/56.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/56"}}, "title": "Use references in an Entity"}, "content": {"raw": "I return`GenerateInvalidId()` here when the containing entity has been  removed. This would cause a segfault if the user proceeds to use the returned object without checking its validity. The underlying `joint` entity potentially still exists in DART so it would be nice to return a valid Identity and prevent a segfault. This would also allow us to keep consistency with `GetJointCount` which would return a positive number (assuming the model had some joints before it was removed).\n\nA possible solution is to create a new jointID by calling `GetNextEntity` here and use it in `GenerateIdentity`. For that we will need to make `Base::entityCount` mutable, since it needs to be incremented from otherwise const functions. ", "markup": "markdown", "html": "<p>I return<code>GenerateInvalidId()</code> here when the containing entity has been  removed. This would cause a segfault if the user proceeds to use the returned object without checking its validity. The underlying <code>joint</code> entity potentially still exists in DART so it would be nice to return a valid Identity and prevent a segfault. This would also allow us to keep consistency with <code>GetJointCount</code> which would return a positive number (assuming the model had some joints before it was removed).</p>\n<p>A possible solution is to create a new jointID by calling <code>GetNextEntity</code> here and use it in <code>GenerateIdentity</code>. For that we will need to make <code>Base::entityCount</code> mutable, since it needs to be incremented from otherwise const functions. </p>", "type": "rendered"}, "created_on": "2019-01-25T00:23:31.100440+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 260, "from": null, "outdated": true, "path": "dartsim/src/EntityManagementFeatures.cc"}, "updated_on": "2019-01-25T00:23:31.108743+00:00", "type": "pullrequest_comment", "id": 89271000}