{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments/73911123.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:ccaa7c302b6d..fbc7c458ca2a?path=include%2Fignition%2Fphysics%2Fdetail%2FFrameSemantics.hh"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26/_/diff#comment-73911123"}}, "parent": {"id": 73868276, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments/73868276.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26/_/diff#comment-73868276"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 26, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26"}}, "title": "Feature System Part 2: Frame Semantics"}, "content": {"raw": "In my opinion, not in this case.\n\nAn important aspect of the PImpl\\+ECS design is that absolutely nothing in the inheritance structure contains any member data except for the bottom-most base `Entity<P, F>` class.\n\nIt's plausible that we might get some marginal performance improvement if we have this class store a `FrameID` object that gets initialized during construction and then returned by reference here. However, it\u2019s also plausible that this would result in a marginal hit to performance, because it means copying and moving are more expensive.\n\nWorse, doing this would make copying and moving much more complicated. Right now, since every \"Feature API\" class contains no member data, we can have our highest-level copy and move operations do nothing but `static_cast<Entity<P, F>&>(*this) = other;` and `static_cast<Entity<P, F>&(*this) = std::move(other)`. This is helpful because otherwise copy and move operations would have to traverse the entire inheritance structure, calling the copy/move operations of all member objects recursively. Since we're using lots of virtual inheritance, this means that many data members would be getting redundantly copied/moved again and again. By taking advantage of the fact that absolutely all data is stored solely in `Entity<P, F>`, we can write extremely efficient copies and moves.\n\nAnd then factoring in things like Return Value Optimization as well as the fact that this data structure is extremely light weight, I don\u2019t think it\u2019s worth tainting the inheritance structure by adding member data for this case alone.", "markup": "markdown", "html": "<p>In my opinion, not in this case.</p>\n<p>An important aspect of the PImpl+ECS design is that absolutely nothing in the inheritance structure contains any member data except for the bottom-most base <code>Entity&lt;P, F&gt;</code> class.</p>\n<p>It's plausible that we might get some marginal performance improvement if we have this class store a <code>FrameID</code> object that gets initialized during construction and then returned by reference here. However, it\u2019s also plausible that this would result in a marginal hit to performance, because it means copying and moving are more expensive.</p>\n<p>Worse, doing this would make copying and moving much more complicated. Right now, since every \"Feature API\" class contains no member data, we can have our highest-level copy and move operations do nothing but <code>static_cast&lt;Entity&lt;P, F&gt;&amp;&gt;(*this) = other;</code> and <code>static_cast&lt;Entity&lt;P, F&gt;&amp;(*this) = std::move(other)</code>. This is helpful because otherwise copy and move operations would have to traverse the entire inheritance structure, calling the copy/move operations of all member objects recursively. Since we're using lots of virtual inheritance, this means that many data members would be getting redundantly copied/moved again and again. By taking advantage of the fact that absolutely all data is stored solely in <code>Entity&lt;P, F&gt;</code>, we can write extremely efficient copies and moves.</p>\n<p>And then factoring in things like Return Value Optimization as well as the fact that this data structure is extremely light weight, I don\u2019t think it\u2019s worth tainting the inheritance structure by adding member data for this case alone.</p>", "type": "rendered"}, "created_on": "2018-08-24T00:57:39.757097+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/physics/detail/FrameSemantics.hh"}, "updated_on": "2018-08-24T00:57:39.762702+00:00", "type": "pullrequest_comment", "id": 73911123}