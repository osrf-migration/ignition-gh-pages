{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments/70930403.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26/_/diff#comment-70930403"}}, "parent": {"id": 70911124, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments/70911124.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26/_/diff#comment-70911124"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 26, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26"}}, "title": "Feature System Part 2: Frame Semantics"}, "content": {"raw": "With implicit conversion operators in the `ign-math` algebraic types, the other libraries could opaquely receive `Eigen` objects as if they were `ign-math` objects. For example, you could have this:\n\n    Eigen::Vector3d SomeFunction();\n    \n    int main()\n    {\n      ignition::math::Vector3d v = SomeFunction();\n    }\n\nWe could even keep those `ign-math` types around indefinitely if we really wanted to, so no one ever has to move away from `ign-math`'s algebraic types.\n\nBasically, some small tweaks to `ign-math` would trivially give us complete interoperability between `ign-math` and `Eigen` types.", "markup": "markdown", "html": "<p>With implicit conversion operators in the <code>ign-math</code> algebraic types, the other libraries could opaquely receive <code>Eigen</code> objects as if they were <code>ign-math</code> objects. For example, you could have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">Eigen</span><span class=\"p\">::</span><span class=\"nd\">Vector3d</span> <span class=\"nt\">SomeFunction</span><span class=\"o\">();</span>\n\n<span class=\"nt\">int</span> <span class=\"nt\">main</span><span class=\"o\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ignition</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Vector3d</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">SomeFunction</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>We could even keep those <code>ign-math</code> types around indefinitely if we really wanted to, so no one ever has to move away from <code>ign-math</code>'s algebraic types.</p>\n<p>Basically, some small tweaks to <code>ign-math</code> would trivially give us complete interoperability between <code>ign-math</code> and <code>Eigen</code> types.</p>", "type": "rendered"}, "created_on": "2018-07-25T00:28:48.053810+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-07-25T00:28:48.060421+00:00", "type": "pullrequest_comment", "id": 70930403}