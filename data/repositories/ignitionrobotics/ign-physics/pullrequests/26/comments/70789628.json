{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments/70789628.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26/_/diff#comment-70789628"}}, "parent": {"id": 70786044, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments/70786044.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26/_/diff#comment-70786044"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 26, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26"}}, "title": "Feature System Part 2: Frame Semantics"}, "content": {"raw": "Not just pose information, but all linear algebraic quantities, like vectors, matrixes, rotations, and transforms would use `Eigen` instead of `ign-math`.\n\nThis would allow us to simultaneously support 2D and 3D simulation without doubling all of our development and maintenance effort. At the last ROSCon, I talked with a lot of people who are very interested in using Gazebo for 2D simulation, which is especially useful for testing things like fleet management or swarm control algorithms.\n\nThe long-term goal would be to have `ign-math` use `Eigen` for its linear algebra data types. That could easily be achieved with a three step process:\n\n1. Add an optional `Eigen` component to `ign-math` that provides conversion utilities between the two.\n2. Make `Eigen` a mandatory dependency of `ign-math` \\(or just add the `Eigen` headers to the `ign-math` source code to avoid a new packaging dependency\\). Give the existing `ign-math` classes implicit conversions to/from the `Eigen` data types and deprecate the `ign-math` vector, matrix, quaternion, and pose classes.\n3. After users have had time to make the switch, consider removing the `ign-math` vector, matrix, quaternion, and pose classes.\n\nThis would make `ign-math`'s linear algebra much more powerful, flexible, and performant while also reducing our maintenance efforts. Meanwhile, `ign-math` would continue to provide useful utilities that would build off of the more powerful `Eigen` data structures instead of the less developed custom data structures that we need to maintain ourselves.\n\nThere\u2019s more discussion on this topic [here](https://bitbucket.org/osrf/gazebo/issues/929/consider-using-eigen-to-improve-math) and [here](#!/ignitionrobotics/ign-math/issues/19/consider-using-eigen), so that\u2019s probably where further comments should go.", "markup": "markdown", "html": "<p>Not just pose information, but all linear algebraic quantities, like vectors, matrixes, rotations, and transforms would use <code>Eigen</code> instead of <code>ign-math</code>.</p>\n<p>This would allow us to simultaneously support 2D and 3D simulation without doubling all of our development and maintenance effort. At the last ROSCon, I talked with a lot of people who are very interested in using Gazebo for 2D simulation, which is especially useful for testing things like fleet management or swarm control algorithms.</p>\n<p>The long-term goal would be to have <code>ign-math</code> use <code>Eigen</code> for its linear algebra data types. That could easily be achieved with a three step process:</p>\n<ol>\n<li>Add an optional <code>Eigen</code> component to <code>ign-math</code> that provides conversion utilities between the two.</li>\n<li>Make <code>Eigen</code> a mandatory dependency of <code>ign-math</code> (or just add the <code>Eigen</code> headers to the <code>ign-math</code> source code to avoid a new packaging dependency). Give the existing <code>ign-math</code> classes implicit conversions to/from the <code>Eigen</code> data types and deprecate the <code>ign-math</code> vector, matrix, quaternion, and pose classes.</li>\n<li>After users have had time to make the switch, consider removing the <code>ign-math</code> vector, matrix, quaternion, and pose classes.</li>\n</ol>\n<p>This would make <code>ign-math</code>'s linear algebra much more powerful, flexible, and performant while also reducing our maintenance efforts. Meanwhile, <code>ign-math</code> would continue to provide useful utilities that would build off of the more powerful <code>Eigen</code> data structures instead of the less developed custom data structures that we need to maintain ourselves.</p>\n<p>There\u2019s more discussion on this topic <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/issues/929/consider-using-eigen-to-improve-math\" rel=\"nofollow\">here</a> and <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/issues/19/consider-using-eigen\" rel=\"nofollow\">here</a>, so that\u2019s probably where further comments should go.</p>", "type": "rendered"}, "created_on": "2018-07-24T00:36:20.108280+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-07-24T00:38:26.614242+00:00", "type": "pullrequest_comment", "id": 70789628}