{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/comments/88194800.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46/_/diff#comment-88194800"}}, "parent": {"id": 87852101, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/comments/87852101.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46/_/diff#comment-87852101"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 46, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46"}}, "title": "[WIP] Add Link features"}, "content": {"raw": "I think the trouble with \u201cUnconstrained Link\u201d is that it implies the link has no joints whatsoever, which would eliminate any articulated model, even though the functionality might still be useful for articulated models \\(e.g. if I want to add some velocity to the root link of a humanoid robot because I\u2019m launching it out of a canon\\).\n\nI would tweak your proposal with this: `FreeGroupPtr group = link->GetFreeGroup();`\n\nThe `FreeGroup` entity type refers to a subset of a model whose constraints are entirely self-contained. You could then call `group->SetComLinearVelocity(v);` to set the velocity of the group's center of mass or `group->SetRootLinearVelocity(v)` to set the velocity of the group\u2019s root link \\(a.k.a. \u201ccanonical\u201d link\\).\n\nI think this would solve most of the conceptual hangups with setting velocity, and it would apply equally well to generalized coordinates and maximal coordinates.\n\nIf the `link` from `link->GetFreeGroup()` belongs to a model subset that is constrained to the world, then the return value will be an invalid entity.\n\n\\(Note that I'm totally open to name suggestions besides `FreeGroup`\\).", "markup": "markdown", "html": "<p>I think the trouble with \u201cUnconstrained Link\u201d is that it implies the link has no joints whatsoever, which would eliminate any articulated model, even though the functionality might still be useful for articulated models (e.g. if I want to add some velocity to the root link of a humanoid robot because I\u2019m launching it out of a canon).</p>\n<p>I would tweak your proposal with this: <code>FreeGroupPtr group = link-&gt;GetFreeGroup();</code></p>\n<p>The <code>FreeGroup</code> entity type refers to a subset of a model whose constraints are entirely self-contained. You could then call <code>group-&gt;SetComLinearVelocity(v);</code> to set the velocity of the group's center of mass or <code>group-&gt;SetRootLinearVelocity(v)</code> to set the velocity of the group\u2019s root link (a.k.a. \u201ccanonical\u201d link).</p>\n<p>I think this would solve most of the conceptual hangups with setting velocity, and it would apply equally well to generalized coordinates and maximal coordinates.</p>\n<p>If the <code>link</code> from <code>link-&gt;GetFreeGroup()</code> belongs to a model subset that is constrained to the world, then the return value will be an invalid entity.</p>\n<p>(Note that I'm totally open to name suggestions besides <code>FreeGroup</code>).</p>", "type": "rendered"}, "created_on": "2019-01-16T06:22:39.348273+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-01-16T06:22:39.356632+00:00", "type": "pullrequest_comment", "id": 88194800}