{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/comments/87592809.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46/_/diff#comment-87592809"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 46, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46"}}, "title": "[WIP] Add Link features"}, "content": {"raw": "Sorry for being late to this, but I'm very worried about the `SetLinearVelocity(~)` and `SetAngularVelocity(~)` functions. I think the ability to \u201cset\u201d the \u201cvelocity\u201d of a link in Gazebo was a recurring source of problems, because it doesn\u2019t make a lot of sense in the context of an articulated body. It can make perfect sense for an unarticulated rigid body, but once it has any joints there are many questions about what it actually means to \u201cset\u201d the \u201cvelocity\u201d. For example, should the parent and child joint velocities be adjusted? What if the body is rigidly anchored to the world by its joints?\n\nThat being said, it's certainly valuable to be able to directly set the velocity on an unarticulated rigid body, or set the base velocity of an articulated model. To do that, I might recommend some kind of proxy entity that you can only obtain when the link you're referring to has an unconstrained base. This would be similar to the \"FreeJoint\" of dartsim, which is a joint type that represents the absence of any joint constraints. Here's an example of this concept that uses the name `FreeJoint`, but we could use some other name if someone has a recommendation:\n\n    FreeJointPtr free = link->GetParentFreeJoint();\n    if(free)\n    {\n      free->SetLinearVelocity(linearVelocity);\n      free->SetAngularVelocity(angularVelocity);\n    }\n\nThe `Link` class itself would not have any `SetLinearVelocity(~)` or `SetAngularVelocity(~)` functions.\n\nThis would allow the same API to be used by physics engines that use either generalized coordinates or maximal coordinates, and it would avoid nonsensical physics input where someone is trying to set a physically impossible velocity on a body.", "markup": "markdown", "html": "<p>Sorry for being late to this, but I'm very worried about the <code>SetLinearVelocity(~)</code> and <code>SetAngularVelocity(~)</code> functions. I think the ability to \u201cset\u201d the \u201cvelocity\u201d of a link in Gazebo was a recurring source of problems, because it doesn\u2019t make a lot of sense in the context of an articulated body. It can make perfect sense for an unarticulated rigid body, but once it has any joints there are many questions about what it actually means to \u201cset\u201d the \u201cvelocity\u201d. For example, should the parent and child joint velocities be adjusted? What if the body is rigidly anchored to the world by its joints?</p>\n<p>That being said, it's certainly valuable to be able to directly set the velocity on an unarticulated rigid body, or set the base velocity of an articulated model. To do that, I might recommend some kind of proxy entity that you can only obtain when the link you're referring to has an unconstrained base. This would be similar to the \"FreeJoint\" of dartsim, which is a joint type that represents the absence of any joint constraints. Here's an example of this concept that uses the name <code>FreeJoint</code>, but we could use some other name if someone has a recommendation:</p>\n<div class=\"codehilite\"><pre><span></span>FreeJointPtr free = link-&gt;GetParentFreeJoint();\nif(free)\n{\n  free-&gt;SetLinearVelocity(linearVelocity);\n  free-&gt;SetAngularVelocity(angularVelocity);\n}\n</pre></div>\n\n\n<p>The <code>Link</code> class itself would not have any <code>SetLinearVelocity(~)</code> or <code>SetAngularVelocity(~)</code> functions.</p>\n<p>This would allow the same API to be used by physics engines that use either generalized coordinates or maximal coordinates, and it would avoid nonsensical physics input where someone is trying to set a physically impossible velocity on a body.</p>", "type": "rendered"}, "created_on": "2019-01-10T05:45:12.792709+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-01-10T05:45:12.799032+00:00", "type": "pullrequest_comment", "id": 87592809}