{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/comments/87734054.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46/_/diff#comment-87734054"}}, "parent": {"id": 87718769, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46/comments/87718769.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46/_/diff#comment-87718769"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 46, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/46.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/46"}}, "title": "[WIP] Add Link features"}, "content": {"raw": "> I usually think of 2\\(b\\) as an external force, but I guess it depends on whether the physics engine has some internal support for actuators.\n\nThis is certainly a tricky one, and I'd say it boils down to how you choose to express your dynamic model. But at the very least, it's important to distinguish the actuator force \\(which is usually manipulated with a function like `Joint::SetForce(~)`\\) from any of the forces under Category 1.\n\n> I also think that it can be difficult at times to tell 1\\(3\\) from 1\\(4\\). For example, magnetic forces may be implemented by an external plugin which calls the\u00a0`SetAppliedForce`\u00a0API.\n\nI completely agree! I imagine a lot of plugin systems will use the API of 1\\(4\\) to actualize 1\\(3\\). It would be great if we could make an API to distinguish these somehow, but I don't have any great ideas off the top of my head. One thing that could help is to provide a function like `AddExternal[Force|Torque](~)` to avoid unintentionally overwriting the forces that another system has been applying. But this means we need to reset the external force/torque state with each simulation step, and we need to make it clear to users that we will do so.\n\n> It may also be useful to think about an \"Add\" API.\n\nI wrote out that last suggestion before reading this bullet point. I completely agree :grin: ", "markup": "markdown", "html": "<blockquote>\n<p>I usually think of 2(b) as an external force, but I guess it depends on whether the physics engine has some internal support for actuators.</p>\n</blockquote>\n<p>This is certainly a tricky one, and I'd say it boils down to how you choose to express your dynamic model. But at the very least, it's important to distinguish the actuator force (which is usually manipulated with a function like <code>Joint::SetForce(~)</code>) from any of the forces under Category 1.</p>\n<blockquote>\n<p>I also think that it can be difficult at times to tell 1(3) from 1(4). For example, magnetic forces may be implemented by an external plugin which calls the\u00a0<code>SetAppliedForce</code>\u00a0API.</p>\n</blockquote>\n<p>I completely agree! I imagine a lot of plugin systems will use the API of 1(4) to actualize 1(3). It would be great if we could make an API to distinguish these somehow, but I don't have any great ideas off the top of my head. One thing that could help is to provide a function like <code>AddExternal[Force|Torque](~)</code> to avoid unintentionally overwriting the forces that another system has been applying. But this means we need to reset the external force/torque state with each simulation step, and we need to make it clear to users that we will do so.</p>\n<blockquote>\n<p>It may also be useful to think about an \"Add\" API.</p>\n</blockquote>\n<p>I wrote out that last suggestion before reading this bullet point. I completely agree <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f601.png\" alt=\"\ud83d\ude01\" title=\":grin:\" data-emoji-short-name=\":grin:\" /> </p>", "type": "rendered"}, "created_on": "2019-01-11T02:25:56.861091+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-01-11T02:25:56.870178+00:00", "type": "pullrequest_comment", "id": 87734054}