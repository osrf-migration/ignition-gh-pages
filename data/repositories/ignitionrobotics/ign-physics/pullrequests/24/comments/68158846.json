{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24/comments/68158846.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/24/_/diff#comment-68158846"}}, "parent": {"id": 68141479, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24/comments/68141479.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/24/_/diff#comment-68141479"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 24, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/24.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/24"}}, "title": "Feature System Part 1"}, "content": {"raw": "> I'm seeing lots of template parameters\u00a0`typename Policy`, and I'm not sure what that means.\n\nYour followup is correct: this refers to policy-based design. We might be able to come up with a better name for this template parameter than `Policy`, but I haven\u2019t thought of a better name yet.\n\nCurrently, we use the `Policy` parameter class to tell the template whether it should be a 2D object or a 3D object, as well as whether it should use `double` or `float` precision. In the future, we could devise more policy properties which could affect the structure or behavior of features, but I haven't thought of any other potential properties yet. It's also possible for custom plugins to define their own policy properties and embed those into the `Policy` class.\n\n> if you're just looking at the\u00a0`Entity`\u00a0class, it's hard to know what the\u00a0`Policy`\u00a0means.\n\nYeah, this is one of the biggest disadvantages of CRTP design \\(second only to the craziness of C\\+\\+ template syntax\\). Since the template implementations are recursive, it\u2019s hard to start at one point and work your way up/down when trying to understand the code. Most likely, you\u2019ll need to cycle through the code several times before fully grokking it.\n\nThe upside is, it\u2019s an extremely powerful pattern which is highly maintainable because of the way concerns are separated. It\u2019s just the initial attempt to understand it that requires a lot of legwork. Luckily, only maintainers need to do that legwork; users shouldn\u2019t have to worry about those details.", "markup": "markdown", "html": "<blockquote>\n<p>I'm seeing lots of template parameters\u00a0<code>typename Policy</code>, and I'm not sure what that means.</p>\n</blockquote>\n<p>Your followup is correct: this refers to policy-based design. We might be able to come up with a better name for this template parameter than <code>Policy</code>, but I haven\u2019t thought of a better name yet.</p>\n<p>Currently, we use the <code>Policy</code> parameter class to tell the template whether it should be a 2D object or a 3D object, as well as whether it should use <code>double</code> or <code>float</code> precision. In the future, we could devise more policy properties which could affect the structure or behavior of features, but I haven't thought of any other potential properties yet. It's also possible for custom plugins to define their own policy properties and embed those into the <code>Policy</code> class.</p>\n<blockquote>\n<p>if you're just looking at the\u00a0<code>Entity</code>\u00a0class, it's hard to know what the\u00a0<code>Policy</code>\u00a0means.</p>\n</blockquote>\n<p>Yeah, this is one of the biggest disadvantages of CRTP design (second only to the craziness of C++ template syntax). Since the template implementations are recursive, it\u2019s hard to start at one point and work your way up/down when trying to understand the code. Most likely, you\u2019ll need to cycle through the code several times before fully grokking it.</p>\n<p>The upside is, it\u2019s an extremely powerful pattern which is highly maintainable because of the way concerns are separated. It\u2019s just the initial attempt to understand it that requires a lot of legwork. Luckily, only maintainers need to do that legwork; users shouldn\u2019t have to worry about those details.</p>", "type": "rendered"}, "created_on": "2018-06-26T06:06:27.006090+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-06-26T06:06:27.012499+00:00", "type": "pullrequest_comment", "id": 68158846}