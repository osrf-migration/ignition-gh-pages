{"rendered": {"description": {"raw": "This pull request lays the foundation for the upcoming remove entities feature. The idea is if an engine supports reference-counted entities, we should use those references to manipulate the entities inside the engine. This would prevent segfaults or exceptions from occurring when operations are performed on a removed entity via an `EntityPtr` object.\r\n\r\nThis is different from what we are doing right now in the `dartsim` wrapper because we store strong references in `EntityStorage` data structures and use those to manipulate the entities in the engine.\r\n\r\neg.\r\n\r\nInstead of\r\n\r\n\r\n```\r\n#!c++\r\n\r\n const std::string &EntityManagementFeatures::GetModelName(\r\n     const std::size_t _modelID) const\r\n {\r\n   return this->models.at(_modelID)->getName();\r\n }\r\n```\r\n\r\n\r\nwe would have \r\n\r\n```\r\n#!c++\r\n\r\n\r\n  const std::string &EntityManagementFeatures::GetModelName(\r\n     const Identity &_modelID) const\r\n {\r\n   return this->ReferenceInterface<DartSkeleton>(_modelID)->getName();\r\n }\r\n \r\n```\r\nIn the first `GetModelName`, the call to `this->models.at(_modelID)` will throw if the model has been removed. But in the second `GetModelName`, `getName` is called via the pointer stored in the `EntityPtr` (actually in the `Identity` object of `Entity`). This call would succeed even if the model is removed from the world because the the memory allocated for the skeleton would not have been destroyed.\r\n\r\n\r\n## TODO:\r\n* ~~`ReferenceInterface` is currently used only in a couple of places for proof of concept. If the concept is acceptable, I'll update the rest of the implementation~~.", "markup": "markdown", "html": "<p>This pull request lays the foundation for the upcoming remove entities feature. The idea is if an engine supports reference-counted entities, we should use those references to manipulate the entities inside the engine. This would prevent segfaults or exceptions from occurring when operations are performed on a removed entity via an <code>EntityPtr</code> object.</p>\n<p>This is different from what we are doing right now in the <code>dartsim</code> wrapper because we store strong references in <code>EntityStorage</code> data structures and use those to manipulate the entities in the engine.</p>\n<p>eg.</p>\n<p>Instead of</p>\n<div class=\"codehilite language-c++\"><pre><span></span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">EntityManagementFeatures</span><span class=\"o\">::</span><span class=\"n\">GetModelName</span><span class=\"p\">(</span>\n     <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">size_t</span> <span class=\"n\">_modelID</span><span class=\"p\">)</span> <span class=\"k\">const</span>\n <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">_modelID</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">getName</span><span class=\"p\">();</span>\n <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>we would have </p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">EntityManagementFeatures</span><span class=\"o\">::</span><span class=\"n\">GetModelName</span><span class=\"p\">(</span>\n     <span class=\"k\">const</span> <span class=\"n\">Identity</span> <span class=\"o\">&amp;</span><span class=\"n\">_modelID</span><span class=\"p\">)</span> <span class=\"k\">const</span>\n <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">ReferenceInterface</span><span class=\"o\">&lt;</span><span class=\"n\">DartSkeleton</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_modelID</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">getName</span><span class=\"p\">();</span>\n <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>In the first <code>GetModelName</code>, the call to <code>this-&gt;models.at(_modelID)</code> will throw if the model has been removed. But in the second <code>GetModelName</code>, <code>getName</code> is called via the pointer stored in the <code>EntityPtr</code> (actually in the <code>Identity</code> object of <code>Entity</code>). This call would succeed even if the model is removed from the world because the the memory allocated for the skeleton would not have been destroyed.</p>\n<h2 id=\"markdown-header-todo\">TODO:</h2>\n<ul>\n<li><del><code>ReferenceInterface</code> is currently used only in a couple of places for proof of concept. If the concept is acceptable, I'll update the rest of the implementation</del>.</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Use references in an Entity", "markup": "markdown", "html": "<p>Use references in an Entity</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request lays the foundation for the upcoming remove entities feature. The idea is if an engine supports reference-counted entities, we should use those references to manipulate the entities inside the engine. This would prevent segfaults or exceptions from occurring when operations are performed on a removed entity via an `EntityPtr` object.\r\n\r\nThis is different from what we are doing right now in the `dartsim` wrapper because we store strong references in `EntityStorage` data structures and use those to manipulate the entities in the engine.\r\n\r\neg.\r\n\r\nInstead of\r\n\r\n\r\n```\r\n#!c++\r\n\r\n const std::string &EntityManagementFeatures::GetModelName(\r\n     const std::size_t _modelID) const\r\n {\r\n   return this->models.at(_modelID)->getName();\r\n }\r\n```\r\n\r\n\r\nwe would have \r\n\r\n```\r\n#!c++\r\n\r\n\r\n  const std::string &EntityManagementFeatures::GetModelName(\r\n     const Identity &_modelID) const\r\n {\r\n   return this->ReferenceInterface<DartSkeleton>(_modelID)->getName();\r\n }\r\n \r\n```\r\nIn the first `GetModelName`, the call to `this->models.at(_modelID)` will throw if the model has been removed. But in the second `GetModelName`, `getName` is called via the pointer stored in the `EntityPtr` (actually in the `Identity` object of `Entity`). This call would succeed even if the model is removed from the world because the the memory allocated for the skeleton would not have been destroyed.\r\n\r\n\r\n## TODO:\r\n* ~~`ReferenceInterface` is currently used only in a couple of places for proof of concept. If the concept is acceptable, I'll update the rest of the implementation~~.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/56/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:79076e02b39e%0D588b98c2d68e?from_pullrequest_id=56"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/56/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/56.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/56/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/56/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/56"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/56/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:79076e02b39e%0D588b98c2d68e?from_pullrequest_id=56"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/56/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/56/statuses_page=1.json"}}, "title": "Use references in an Entity", "close_source_branch": true, "reviewers": [{"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}], "id": 56, "destination": {"commit": {"hash": "588b98c2d68e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/588b98c2d68e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/588b98c2d68e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2019-01-15T19:54:37.361700+00:00", "summary": {"raw": "This pull request lays the foundation for the upcoming remove entities feature. The idea is if an engine supports reference-counted entities, we should use those references to manipulate the entities inside the engine. This would prevent segfaults or exceptions from occurring when operations are performed on a removed entity via an `EntityPtr` object.\r\n\r\nThis is different from what we are doing right now in the `dartsim` wrapper because we store strong references in `EntityStorage` data structures and use those to manipulate the entities in the engine.\r\n\r\neg.\r\n\r\nInstead of\r\n\r\n\r\n```\r\n#!c++\r\n\r\n const std::string &EntityManagementFeatures::GetModelName(\r\n     const std::size_t _modelID) const\r\n {\r\n   return this->models.at(_modelID)->getName();\r\n }\r\n```\r\n\r\n\r\nwe would have \r\n\r\n```\r\n#!c++\r\n\r\n\r\n  const std::string &EntityManagementFeatures::GetModelName(\r\n     const Identity &_modelID) const\r\n {\r\n   return this->ReferenceInterface<DartSkeleton>(_modelID)->getName();\r\n }\r\n \r\n```\r\nIn the first `GetModelName`, the call to `this->models.at(_modelID)` will throw if the model has been removed. But in the second `GetModelName`, `getName` is called via the pointer stored in the `EntityPtr` (actually in the `Identity` object of `Entity`). This call would succeed even if the model is removed from the world because the the memory allocated for the skeleton would not have been destroyed.\r\n\r\n\r\n## TODO:\r\n* ~~`ReferenceInterface` is currently used only in a couple of places for proof of concept. If the concept is acceptable, I'll update the rest of the implementation~~.", "markup": "markdown", "html": "<p>This pull request lays the foundation for the upcoming remove entities feature. The idea is if an engine supports reference-counted entities, we should use those references to manipulate the entities inside the engine. This would prevent segfaults or exceptions from occurring when operations are performed on a removed entity via an <code>EntityPtr</code> object.</p>\n<p>This is different from what we are doing right now in the <code>dartsim</code> wrapper because we store strong references in <code>EntityStorage</code> data structures and use those to manipulate the entities in the engine.</p>\n<p>eg.</p>\n<p>Instead of</p>\n<div class=\"codehilite language-c++\"><pre><span></span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">EntityManagementFeatures</span><span class=\"o\">::</span><span class=\"n\">GetModelName</span><span class=\"p\">(</span>\n     <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">size_t</span> <span class=\"n\">_modelID</span><span class=\"p\">)</span> <span class=\"k\">const</span>\n <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">_modelID</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">getName</span><span class=\"p\">();</span>\n <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>we would have </p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">EntityManagementFeatures</span><span class=\"o\">::</span><span class=\"n\">GetModelName</span><span class=\"p\">(</span>\n     <span class=\"k\">const</span> <span class=\"n\">Identity</span> <span class=\"o\">&amp;</span><span class=\"n\">_modelID</span><span class=\"p\">)</span> <span class=\"k\">const</span>\n <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">ReferenceInterface</span><span class=\"o\">&lt;</span><span class=\"n\">DartSkeleton</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_modelID</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">getName</span><span class=\"p\">();</span>\n <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>In the first <code>GetModelName</code>, the call to <code>this-&gt;models.at(_modelID)</code> will throw if the model has been removed. But in the second <code>GetModelName</code>, <code>getName</code> is called via the pointer stored in the <code>EntityPtr</code> (actually in the <code>Identity</code> object of <code>Entity</code>). This call would succeed even if the model is removed from the world because the the memory allocated for the skeleton would not have been destroyed.</p>\n<h2 id=\"markdown-header-todo\">TODO:</h2>\n<ul>\n<li><del><code>ReferenceInterface</code> is currently used only in a couple of places for proof of concept. If the concept is acceptable, I'll update the rest of the implementation</del>.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "f9f2afceebc2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/f9f2afceebc2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/f9f2afceebc2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "use_refs_in_entity"}}, "comment_count": 10, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-01-15T23:12:47.557535+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2019-01-25T23:14:25.152370+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2019-01-25T00:30:51.679674+00:00", "type": "participant", "approved": false, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "REVIEWER", "participated_on": "2019-01-18T06:23:42.282909+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2019-01-28T18:32:52.034593+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "79076e02b39e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/79076e02b39e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/79076e02b39e"}}}, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}