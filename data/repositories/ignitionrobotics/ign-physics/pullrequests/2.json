{"rendered": {"description": {"raw": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "markup": "markdown", "html": "<p>This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the <code>CompositeData</code> prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.</p>\n<p>This demo utilizes the Plugin framework from <code>ignition::common</code>, specialized plugins, <code>CompositeData</code>, <code>SpecifyData</code>, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.</p>\n<p>The purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&amp;fileviewer=file-view-default\" rel=\"nofollow\">test here</a> you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.</p>\n<p>Prior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the <code>ignition::physics::SetState</code> interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).</p>\n<p>You can see the implementation of the dart plugin <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&amp;fileviewer=file-view-default\" rel=\"nofollow\">here</a>. Most of it is copy-pasted from a <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp\" rel=\"nofollow\">dart example program</a>. Note that this plugin is compiled to its own library, separate from <code>ignition-physics</code>, and the test program does <strong>not</strong> link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using <code>ignition-physics</code> and <code>ignition-common</code> headers).</p>", "type": "rendered"}, "title": {"raw": "Created OperationalSpaceController plugin example that uses DART", "markup": "markdown", "html": "<p>Created OperationalSpaceController plugin example that uses DART</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/2/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:3f8e51d6e016%0D79076e02b39e?from_pullrequest_id=2"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/2/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/2"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:3f8e51d6e016%0D79076e02b39e?from_pullrequest_id=2"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/2/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/2/statuses_page=1.json"}}, "title": "Created OperationalSpaceController plugin example that uses DART", "close_source_branch": false, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}], "id": 2, "destination": {"commit": {"hash": "79076e02b39e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/79076e02b39e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/79076e02b39e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2017-08-26T00:28:02.378460+00:00", "summary": {"raw": "This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the `CompositeData` prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.\r\n\r\nThis demo utilizes the Plugin framework from `ignition::common`, specialized plugins, `CompositeData`, `SpecifyData`, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.\r\n\r\nThe purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the [test here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&fileviewer=file-view-default) you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.\r\n\r\nPrior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the `ignition::physics::SetState` interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).\r\n\r\nYou can see the implementation of the dart plugin [here](#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&fileviewer=file-view-default). Most of it is copy-pasted from a [dart example program](https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp). Note that this plugin is compiled to its own library, separate from `ignition-physics`, and the test program does **not** link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using `ignition-physics` and `ignition-common` headers).", "markup": "markdown", "html": "<p>This pull request implements and tests a DART-based forward simulation plugin. I'm aiming the pull request at the branch that introduces the <code>CompositeData</code> prototype in order to minimize the diff and focus it on the plugin implementation and the test demo.</p>\n<p>This demo utilizes the Plugin framework from <code>ignition::common</code>, specialized plugins, <code>CompositeData</code>, <code>SpecifyData</code>, and the pure abstract physics interfaces. This is basically an integration demo of all the design elements that we've been discussing for the last couple weeks.</p>\n<p>The purpose of the plugin is to simulate an operational space controller. The role of an operational space controller is to determine joint forces that achieve a workspace (or operational space) objective, usually reaching or maintaining a given end effector pose. In the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController_TEST.cc?at=experimental%2Fdart&amp;fileviewer=file-view-default\" rel=\"nofollow\">test here</a> you can see us load the dart-based plugin, find its end effector location, and move its input target twice while the simulation plugin (which has the feedback/feedforward controller embedded in it) makes the end effector converge to the target location.</p>\n<p>Prior to moving the target the second time, we bookmark the state that is being output by the plugin. After the second time that the end effector has converged, we use the <code>ignition::physics::SetState</code> interface to reset the state to what it was just after the first convergence, and we watch the simulation re-simulate the second convergence from there. We test that the errors which are output by the system perfectly match the previous run (And they do! All the way down to the bit!).</p>\n<p>You can see the implementation of the dart plugin <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/45215440739699360ac668a35e1f0cf777f67503/ignition-physics-dart/OperationalSpaceController.cc?at=experimental%2Fdart&amp;fileviewer=file-view-default\" rel=\"nofollow\">here</a>. Most of it is copy-pasted from a <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/blob/master/examples/osgExamples/osgOperationalSpaceControl/osgOperationalSpaceControl.cpp\" rel=\"nofollow\">dart example program</a>. Note that this plugin is compiled to its own library, separate from <code>ignition-physics</code>, and the test program does <strong>not</strong> link to this library until it gets loaded at run time. The test program has no knowledge of the library or the plugin at compile-time (except that I hard code some strings so the program can find plugin at run time, but that doesn't count), and it never includes any of the plugin library's headers (everything is done using <code>ignition-physics</code> and <code>ignition-common</code> headers).</p>", "type": "rendered"}, "source": {"commit": {"hash": "3f8e51d6e016", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/3f8e51d6e016.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/3f8e51d6e016"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "experimental/dart"}}, "comment_count": 68, "state": "DECLINED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-11-14T09:12:24.298774+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jeongseok Lee", "uuid": "{3907b560-aed7-43bd-bfa9-fd9873322291}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D"}, "html": {"href": "https://bitbucket.org/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/242819b368397b2b4cddf273b2ba9bf8d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJL-0.png"}}, "nickname": "jlee02", "type": "user", "account_id": "557058:e3fbdece-a1d8-4fb6-a9f1-236ecb09bd9d"}}, {"role": "REVIEWER", "participated_on": "2017-09-14T22:31:42.470863+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "REVIEWER", "participated_on": "2018-05-02T14:27:40.328633+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2017-11-14T02:23:39.481586+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}}, {"role": "REVIEWER", "participated_on": "2019-01-28T19:18:49.764039+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2018-01-30T02:13:36.641347+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2019-01-28T19:18:56.303422+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}