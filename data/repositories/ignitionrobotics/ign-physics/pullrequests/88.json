{"rendered": {"description": {"raw": "This PR drastically improves the compile times of applications and libraries that use `ign-physics`. The key issue was that the length of symbol names was growing unbounded for classes that were being instantiated from templates. The itanium ABI mangles the names of template arguments into the symbol names of classes that get instantiated from templates, so the full name of each new feature that we added to a link, model, joint, world, etc, was getting mangled into all the symbol names that were being produced.\r\n\r\nThis PR mitigates this by using some class inheritance and SNFINAE tricks that allow us to easily minimize the symbol names. For example, a symbol that used to come out as\r\n\r\n```\r\n_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineEvvE4typeIJNS0_13FeaturePolicyIdLm3EEENS0_11FeatureListIJNS8_IJNS0_26GetCylinderShapePropertiesENS0_26SetCylinderShapePropertiesENS0_26AttachCylinderShapeFeatureEEEENS8_IJNS0_26GetRevoluteJointPropertiesENS0_26SetRevoluteJointPropertiesEEEENS8_IJNS0_21GetBoxShapePropertiesENS0_21SetBoxShapePropertiesENS0_21AttachBoxShapeFeatureEEEEEEEEEE\r\n```\r\n\r\ncan now come out as\r\n\r\n```\r\n_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineENS1_7GetNextINS4_I15FeatureSetClassvE1nEvE1nEvE4typeIJNS0_13FeaturePolicyIdLm3EEES5_EEE\r\n```\r\n\r\nWe can also add many more features into this symbol without significantly impacting the length of its name. The key is to group features into sets of features using explicit inheritance. For example, we use to do this:\r\n\r\n```\r\nusing MyFeatureList = ignition::physics::FeatureList<\r\n  /* some list of features */\r\n>;\r\n```\r\n\r\nbut now we can do this instead:\r\n\r\n```\r\nstruct MyFeatureList : ignition::physics::FeatureList<\r\n  /* some list of features */\r\n> { };\r\n```\r\n\r\nand the resulting symbol names from using `MyFeatureList` will be very lean and not have any dependence on the lengths of the feature names.\r\n\r\nThis matters primarily because the compile times on GCC seem to grow almost exponentially as the sizes of symbol names increase. Clang is also affected, but not as severely. Here are some charts of the compile times that I observed before and after these changes:\r\n\r\n| Before | -j1 | -j16 |\r\n| --- | --- | --- |\r\n| gcc | 17:59 | 15:18 |\r\n| clang | 5:30 | 1:55 |\r\n\r\n| After | -j1 | -j16 |\r\n| --- | --- | --- |\r\n| gcc | 6:58 | 2:05 |\r\n| clang | 5:11 | 1:12 |\r\n\r\nThis PR depends on an [ign-plugin PR here](#!/ignitionrobotics/ign-plugin/pull-requests/32/).\r\n\r\nUpdate: retargeted to `improve_compile_times_headers` branch of pr #93", "markup": "markdown", "html": "<p>This PR drastically improves the compile times of applications and libraries that use <code>ign-physics</code>. The key issue was that the length of symbol names was growing unbounded for classes that were being instantiated from templates. The itanium ABI mangles the names of template arguments into the symbol names of classes that get instantiated from templates, so the full name of each new feature that we added to a link, model, joint, world, etc, was getting mangled into all the symbol names that were being produced.</p>\n<p>This PR mitigates this by using some class inheritance and SNFINAE tricks that allow us to easily minimize the symbol names. For example, a symbol that used to come out as</p>\n<div class=\"codehilite\"><pre><span></span>_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineEvvE4typeIJNS0_13FeaturePolicyIdLm3EEENS0_11FeatureListIJNS8_IJNS0_26GetCylinderShapePropertiesENS0_26SetCylinderShapePropertiesENS0_26AttachCylinderShapeFeatureEEEENS8_IJNS0_26GetRevoluteJointPropertiesENS0_26SetRevoluteJointPropertiesEEEENS8_IJNS0_21GetBoxShapePropertiesENS0_21SetBoxShapePropertiesENS0_21AttachBoxShapeFeatureEEEEEEEEEE\n</pre></div>\n\n\n<p>can now come out as</p>\n<div class=\"codehilite\"><pre><span></span>_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineENS1_7GetNextINS4_I15FeatureSetClassvE1nEvE1nEvE4typeIJNS0_13FeaturePolicyIdLm3EEES5_EEE\n</pre></div>\n\n\n<p>We can also add many more features into this symbol without significantly impacting the length of its name. The key is to group features into sets of features using explicit inheritance. For example, we use to do this:</p>\n<div class=\"codehilite\"><pre><span></span>using MyFeatureList = ignition::physics::FeatureList&lt;\n  /* some list of features */\n&gt;;\n</pre></div>\n\n\n<p>but now we can do this instead:</p>\n<div class=\"codehilite\"><pre><span></span>struct MyFeatureList : ignition::physics::FeatureList&lt;\n  /* some list of features */\n&gt; { };\n</pre></div>\n\n\n<p>and the resulting symbol names from using <code>MyFeatureList</code> will be very lean and not have any dependence on the lengths of the feature names.</p>\n<p>This matters primarily because the compile times on GCC seem to grow almost exponentially as the sizes of symbol names increase. Clang is also affected, but not as severely. Here are some charts of the compile times that I observed before and after these changes:</p>\n<table>\n<thead>\n<tr>\n<th>Before</th>\n<th>-j1</th>\n<th>-j16</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gcc</td>\n<td>17:59</td>\n<td>15:18</td>\n</tr>\n<tr>\n<td>clang</td>\n<td>5:30</td>\n<td>1:55</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>After</th>\n<th>-j1</th>\n<th>-j16</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gcc</td>\n<td>6:58</td>\n<td>2:05</td>\n</tr>\n<tr>\n<td>clang</td>\n<td>5:11</td>\n<td>1:12</td>\n</tr>\n</tbody>\n</table>\n<p>This PR depends on an <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-plugin/pull-requests/32/\" rel=\"nofollow\">ign-plugin PR here</a>.</p>\n<p>Update: retargeted to <code>improve_compile_times_headers</code> branch of <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/93/citadel-improve-compile-time-headers-only\" rel=\"nofollow\" class=\"ap-connect-link\">pr #93</a></p>", "type": "rendered"}, "title": {"raw": "[Citadel] Improve compile times", "markup": "markdown", "html": "<p>[Citadel] Improve compile times</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR drastically improves the compile times of applications and libraries that use `ign-physics`. The key issue was that the length of symbol names was growing unbounded for classes that were being instantiated from templates. The itanium ABI mangles the names of template arguments into the symbol names of classes that get instantiated from templates, so the full name of each new feature that we added to a link, model, joint, world, etc, was getting mangled into all the symbol names that were being produced.\r\n\r\nThis PR mitigates this by using some class inheritance and SNFINAE tricks that allow us to easily minimize the symbol names. For example, a symbol that used to come out as\r\n\r\n```\r\n_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineEvvE4typeIJNS0_13FeaturePolicyIdLm3EEENS0_11FeatureListIJNS8_IJNS0_26GetCylinderShapePropertiesENS0_26SetCylinderShapePropertiesENS0_26AttachCylinderShapeFeatureEEEENS8_IJNS0_26GetRevoluteJointPropertiesENS0_26SetRevoluteJointPropertiesEEEENS8_IJNS0_21GetBoxShapePropertiesENS0_21SetBoxShapePropertiesENS0_21AttachBoxShapeFeatureEEEEEEEEEE\r\n```\r\n\r\ncan now come out as\r\n\r\n```\r\n_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineENS1_7GetNextINS4_I15FeatureSetClassvE1nEvE1nEvE4typeIJNS0_13FeaturePolicyIdLm3EEES5_EEE\r\n```\r\n\r\nWe can also add many more features into this symbol without significantly impacting the length of its name. The key is to group features into sets of features using explicit inheritance. For example, we use to do this:\r\n\r\n```\r\nusing MyFeatureList = ignition::physics::FeatureList<\r\n  /* some list of features */\r\n>;\r\n```\r\n\r\nbut now we can do this instead:\r\n\r\n```\r\nstruct MyFeatureList : ignition::physics::FeatureList<\r\n  /* some list of features */\r\n> { };\r\n```\r\n\r\nand the resulting symbol names from using `MyFeatureList` will be very lean and not have any dependence on the lengths of the feature names.\r\n\r\nThis matters primarily because the compile times on GCC seem to grow almost exponentially as the sizes of symbol names increase. Clang is also affected, but not as severely. Here are some charts of the compile times that I observed before and after these changes:\r\n\r\n| Before | -j1 | -j16 |\r\n| --- | --- | --- |\r\n| gcc | 17:59 | 15:18 |\r\n| clang | 5:30 | 1:55 |\r\n\r\n| After | -j1 | -j16 |\r\n| --- | --- | --- |\r\n| gcc | 6:58 | 2:05 |\r\n| clang | 5:11 | 1:12 |\r\n\r\nThis PR depends on an [ign-plugin PR here](#!/ignitionrobotics/ign-plugin/pull-requests/32/).\r\n\r\nUpdate: retargeted to `improve_compile_times_headers` branch of pr #93", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/88/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:cafeceb88ccc%0Da31b57dc5ce8?from_pullrequest_id=88"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/88/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/88.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/88/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/88/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/88"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/88/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:cafeceb88ccc%0Da31b57dc5ce8?from_pullrequest_id=88"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/88/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/88/statuses_page=1.json"}}, "title": "[Citadel] Improve compile times", "close_source_branch": true, "reviewers": [], "id": 88, "destination": {"commit": {"hash": "a31b57dc5ce8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/a31b57dc5ce8.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/a31b57dc5ce8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2019-05-14T06:43:35.934309+00:00", "summary": {"raw": "This PR drastically improves the compile times of applications and libraries that use `ign-physics`. The key issue was that the length of symbol names was growing unbounded for classes that were being instantiated from templates. The itanium ABI mangles the names of template arguments into the symbol names of classes that get instantiated from templates, so the full name of each new feature that we added to a link, model, joint, world, etc, was getting mangled into all the symbol names that were being produced.\r\n\r\nThis PR mitigates this by using some class inheritance and SNFINAE tricks that allow us to easily minimize the symbol names. For example, a symbol that used to come out as\r\n\r\n```\r\n_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineEvvE4typeIJNS0_13FeaturePolicyIdLm3EEENS0_11FeatureListIJNS8_IJNS0_26GetCylinderShapePropertiesENS0_26SetCylinderShapePropertiesENS0_26AttachCylinderShapeFeatureEEEENS8_IJNS0_26GetRevoluteJointPropertiesENS0_26SetRevoluteJointPropertiesEEEENS8_IJNS0_21GetBoxShapePropertiesENS0_21SetBoxShapePropertiesENS0_21AttachBoxShapeFeatureEEEEEEEEEE\r\n```\r\n\r\ncan now come out as\r\n\r\n```\r\n_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineENS1_7GetNextINS4_I15FeatureSetClassvE1nEvE1nEvE4typeIJNS0_13FeaturePolicyIdLm3EEES5_EEE\r\n```\r\n\r\nWe can also add many more features into this symbol without significantly impacting the length of its name. The key is to group features into sets of features using explicit inheritance. For example, we use to do this:\r\n\r\n```\r\nusing MyFeatureList = ignition::physics::FeatureList<\r\n  /* some list of features */\r\n>;\r\n```\r\n\r\nbut now we can do this instead:\r\n\r\n```\r\nstruct MyFeatureList : ignition::physics::FeatureList<\r\n  /* some list of features */\r\n> { };\r\n```\r\n\r\nand the resulting symbol names from using `MyFeatureList` will be very lean and not have any dependence on the lengths of the feature names.\r\n\r\nThis matters primarily because the compile times on GCC seem to grow almost exponentially as the sizes of symbol names increase. Clang is also affected, but not as severely. Here are some charts of the compile times that I observed before and after these changes:\r\n\r\n| Before | -j1 | -j16 |\r\n| --- | --- | --- |\r\n| gcc | 17:59 | 15:18 |\r\n| clang | 5:30 | 1:55 |\r\n\r\n| After | -j1 | -j16 |\r\n| --- | --- | --- |\r\n| gcc | 6:58 | 2:05 |\r\n| clang | 5:11 | 1:12 |\r\n\r\nThis PR depends on an [ign-plugin PR here](#!/ignitionrobotics/ign-plugin/pull-requests/32/).\r\n\r\nUpdate: retargeted to `improve_compile_times_headers` branch of pr #93", "markup": "markdown", "html": "<p>This PR drastically improves the compile times of applications and libraries that use <code>ign-physics</code>. The key issue was that the length of symbol names was growing unbounded for classes that were being instantiated from templates. The itanium ABI mangles the names of template arguments into the symbol names of classes that get instantiated from templates, so the full name of each new feature that we added to a link, model, joint, world, etc, was getting mangled into all the symbol names that were being produced.</p>\n<p>This PR mitigates this by using some class inheritance and SNFINAE tricks that allow us to easily minimize the symbol names. For example, a symbol that used to come out as</p>\n<div class=\"codehilite\"><pre><span></span>_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineEvvE4typeIJNS0_13FeaturePolicyIdLm3EEENS0_11FeatureListIJNS8_IJNS0_26GetCylinderShapePropertiesENS0_26SetCylinderShapePropertiesENS0_26AttachCylinderShapeFeatureEEEENS8_IJNS0_26GetRevoluteJointPropertiesENS0_26SetRevoluteJointPropertiesEEEENS8_IJNS0_21GetBoxShapePropertiesENS0_21SetBoxShapePropertiesENS0_21AttachBoxShapeFeatureEEEEEEEEEE\n</pre></div>\n\n\n<p>can now come out as</p>\n<div class=\"codehilite\"><pre><span></span>_ZTIN8ignition7physics6detail9AggregateINS1_12SelectEngineENS1_7GetNextINS4_I15FeatureSetClassvE1nEvE1nEvE4typeIJNS0_13FeaturePolicyIdLm3EEES5_EEE\n</pre></div>\n\n\n<p>We can also add many more features into this symbol without significantly impacting the length of its name. The key is to group features into sets of features using explicit inheritance. For example, we use to do this:</p>\n<div class=\"codehilite\"><pre><span></span>using MyFeatureList = ignition::physics::FeatureList&lt;\n  /* some list of features */\n&gt;;\n</pre></div>\n\n\n<p>but now we can do this instead:</p>\n<div class=\"codehilite\"><pre><span></span>struct MyFeatureList : ignition::physics::FeatureList&lt;\n  /* some list of features */\n&gt; { };\n</pre></div>\n\n\n<p>and the resulting symbol names from using <code>MyFeatureList</code> will be very lean and not have any dependence on the lengths of the feature names.</p>\n<p>This matters primarily because the compile times on GCC seem to grow almost exponentially as the sizes of symbol names increase. Clang is also affected, but not as severely. Here are some charts of the compile times that I observed before and after these changes:</p>\n<table>\n<thead>\n<tr>\n<th>Before</th>\n<th>-j1</th>\n<th>-j16</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gcc</td>\n<td>17:59</td>\n<td>15:18</td>\n</tr>\n<tr>\n<td>clang</td>\n<td>5:30</td>\n<td>1:55</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>After</th>\n<th>-j1</th>\n<th>-j16</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gcc</td>\n<td>6:58</td>\n<td>2:05</td>\n</tr>\n<tr>\n<td>clang</td>\n<td>5:11</td>\n<td>1:12</td>\n</tr>\n</tbody>\n</table>\n<p>This PR depends on an <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-plugin/pull-requests/32/\" rel=\"nofollow\">ign-plugin PR here</a>.</p>\n<p>Update: retargeted to <code>improve_compile_times_headers</code> branch of <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/93/citadel-improve-compile-time-headers-only\" rel=\"nofollow\" class=\"ap-connect-link\">pr #93</a></p>", "type": "rendered"}, "source": {"commit": {"hash": "afb8307ca9a5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/afb8307ca9a5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/afb8307ca9a5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "improve_compile_times"}}, "comment_count": 12, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-06-17T20:51:48.178495+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-11-25T19:46:40.163427+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-30T02:58:18.748551+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2019-11-25T19:46:49.028400+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "cafeceb88ccc", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/cafeceb88ccc.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/cafeceb88ccc"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}