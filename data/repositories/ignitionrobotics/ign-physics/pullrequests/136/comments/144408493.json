{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/136/comments/144408493.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/136/_/diff#comment-144408493"}}, "parent": {"id": 144395420, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/136/comments/144395420.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/136/_/diff#comment-144395420"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 136, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/136.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/136"}}, "title": "Reduce the symbol load caused by feature templates"}, "content": {"raw": "On the topic of ABI, I don\u2019t think a typical ABI checker is going to catch the full picture here. \n\nThe ABI changes should be totally fine for libraries that are simply using `ignition-physics` internally, but I believe there could easily be ABI issues for any libraries that are passing `ignition-physics` entity types \\(e.g. `Link3d<SomeFeautreList>`, `Joint3d<SomeFeatureList>`\\) between library boundaries \\(i.e. using these object types in their public API\\).\n\nI don\u2019t think anyone is doing that currently, so these changes should be okay. But if that\u2019s not the case, then there _could_ be some cause for concern. Then again it\u2019s entirely possible that it still would not be a concern at all, because it\u2019s possible that the compiler is producing an object with the exact same memory footprint despite the massive changes in inheritance hierarchy; I honestly don\u2019t know.", "markup": "markdown", "html": "<p>On the topic of ABI, I don\u2019t think a typical ABI checker is going to catch the full picture here. </p>\n<p>The ABI changes should be totally fine for libraries that are simply using <code>ignition-physics</code> internally, but I believe there could easily be ABI issues for any libraries that are passing <code>ignition-physics</code> entity types (e.g. <code>Link3d&lt;SomeFeautreList&gt;</code>, <code>Joint3d&lt;SomeFeatureList&gt;</code>) between library boundaries (i.e. using these object types in their public API).</p>\n<p>I don\u2019t think anyone is doing that currently, so these changes should be okay. But if that\u2019s not the case, then there <em>could</em> be some cause for concern. Then again it\u2019s entirely possible that it still would not be a concern at all, because it\u2019s possible that the compiler is producing an object with the exact same memory footprint despite the massive changes in inheritance hierarchy; I honestly don\u2019t know.</p>", "type": "rendered"}, "created_on": "2020-04-09T04:05:41.526064+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2020-04-09T04:05:41.532601+00:00", "type": "pullrequest_comment", "id": 144408493}