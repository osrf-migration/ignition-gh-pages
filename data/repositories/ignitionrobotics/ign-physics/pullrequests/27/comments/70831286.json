{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/27/comments/70831286.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/27/_/diff#comment-70831286"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 27, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/27.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/27"}}, "title": "Feature System Part 3: Revolute Joint (plus framework for other joint types)"}, "content": {"raw": "To get a sense for what\u2019s happening, we\u2019ve basically made this possible:\n\n    // Cast from a generic joint to a RevoluteJoint\n    auto revolute = joint->CastToRevoluteJoint();\n    \n    // Now use the API that is specific to RevoluteJoints,\n    // like setting the joint axis.\n    revolute->SetAxis(Eigen::UnitZ());\n\nThe `Joint` class will have a function `CastToXXX()` for each joint type that the physics plugin supports. If a joint can be casted to the requested type `XXX`, the user will be given a `std::unique_ptr<XXX>` \\(in the future we will switch to `std::optional` instead of `std::unique_ptr`\\). If the joint object that the user attempted to cast could not be converted into the more specific type, then the cast function will return a `nullptr` \\(or in the future `nullopt`\\). If the cast was valid, then the user can safely start to call on the API of the specific type.", "markup": "markdown", "html": "<p>To get a sense for what\u2019s happening, we\u2019ve basically made this possible:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//</span> <span class=\"nt\">Cast</span> <span class=\"nt\">from</span> <span class=\"nt\">a</span> <span class=\"nt\">generic</span> <span class=\"nt\">joint</span> <span class=\"nt\">to</span> <span class=\"nt\">a</span> <span class=\"nt\">RevoluteJoint</span>\n<span class=\"nt\">auto</span> <span class=\"nt\">revolute</span> <span class=\"o\">=</span> <span class=\"nt\">joint-</span><span class=\"o\">&gt;</span><span class=\"nt\">CastToRevoluteJoint</span><span class=\"o\">();</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">Now</span> <span class=\"nt\">use</span> <span class=\"nt\">the</span> <span class=\"nt\">API</span> <span class=\"nt\">that</span> <span class=\"nt\">is</span> <span class=\"nt\">specific</span> <span class=\"nt\">to</span> <span class=\"nt\">RevoluteJoints</span><span class=\"o\">,</span>\n<span class=\"o\">//</span> <span class=\"nt\">like</span> <span class=\"nt\">setting</span> <span class=\"nt\">the</span> <span class=\"nt\">joint</span> <span class=\"nt\">axis</span><span class=\"o\">.</span>\n<span class=\"nt\">revolute-</span><span class=\"o\">&gt;</span><span class=\"nt\">SetAxis</span><span class=\"o\">(</span><span class=\"nt\">Eigen</span><span class=\"p\">::</span><span class=\"nd\">UnitZ</span><span class=\"o\">());</span>\n</pre></div>\n\n\n<p>The <code>Joint</code> class will have a function <code>CastToXXX()</code> for each joint type that the physics plugin supports. If a joint can be casted to the requested type <code>XXX</code>, the user will be given a <code>std::unique_ptr&lt;XXX&gt;</code> (in the future we will switch to <code>std::optional</code> instead of <code>std::unique_ptr</code>). If the joint object that the user attempted to cast could not be converted into the more specific type, then the cast function will return a <code>nullptr</code> (or in the future <code>nullopt</code>). If the cast was valid, then the user can safely start to call on the API of the specific type.</p>", "type": "rendered"}, "created_on": "2018-07-24T09:37:35.606913+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-07-24T09:37:35.622762+00:00", "type": "pullrequest_comment", "id": 70831286}