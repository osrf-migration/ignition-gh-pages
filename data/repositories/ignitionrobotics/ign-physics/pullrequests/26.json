{"rendered": {"description": {"raw": "This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the [Feature System PR](#!/ignitionrobotics/ign-physics/pull-requests/24).\r\n\r\nThe concept and implementation follows the [design doc](https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics) pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:\r\n\r\n* Quantities \\(e.g. vectors, points, poses\\) that have a frame of reference are given by a `FramedQuantity<>`. `FramedQuantity<>` is a class template that allows any kind of mathematical quantity to be framed \\(assuming it makes mathematical sense for the quantity to be framed\\). It uses the [policy-based design](https://en.wikipedia.org/wiki/Policy-based_design) pattern to determine how to transform various quantities between reference frames.\r\n* Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.\r\n* FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation \\(note: fixed precision has not been tested yet, but should be possible in theory\\). However, to make this possible, the implementation is using the Eigen C\\+\\+ library instead of ignition-math for its underlying data types.\r\n* Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames \\(e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints\\). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.\r\n* FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.", "markup": "markdown", "html": "<p>This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/pull-requests/24\" rel=\"nofollow\">Feature System PR</a>.</p>\n<p>The concept and implementation follows the <a data-is-external-link=\"true\" href=\"https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics\" rel=\"nofollow\">design doc</a> pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:</p>\n<ul>\n<li>Quantities (e.g. vectors, points, poses) that have a frame of reference are given by a <code>FramedQuantity&lt;&gt;</code>. <code>FramedQuantity&lt;&gt;</code> is a class template that allows any kind of mathematical quantity to be framed (assuming it makes mathematical sense for the quantity to be framed). It uses the <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Policy-based_design\" rel=\"nofollow\">policy-based design</a> pattern to determine how to transform various quantities between reference frames.</li>\n<li>Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.</li>\n<li>FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation (note: fixed precision has not been tested yet, but should be possible in theory). However, to make this possible, the implementation is using the Eigen C++ library instead of ignition-math for its underlying data types.</li>\n<li>Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames (e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.</li>\n<li>FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Feature System Part 2: Frame Semantics", "markup": "markdown", "html": "<p>Feature System Part 2: Frame Semantics</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the [Feature System PR](#!/ignitionrobotics/ign-physics/pull-requests/24).\r\n\r\nThe concept and implementation follows the [design doc](https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics) pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:\r\n\r\n* Quantities \\(e.g. vectors, points, poses\\) that have a frame of reference are given by a `FramedQuantity<>`. `FramedQuantity<>` is a class template that allows any kind of mathematical quantity to be framed \\(assuming it makes mathematical sense for the quantity to be framed\\). It uses the [policy-based design](https://en.wikipedia.org/wiki/Policy-based_design) pattern to determine how to transform various quantities between reference frames.\r\n* Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.\r\n* FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation \\(note: fixed precision has not been tested yet, but should be possible in theory\\). However, to make this possible, the implementation is using the Eigen C\\+\\+ library instead of ignition-math for its underlying data types.\r\n* Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames \\(e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints\\). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.\r\n* FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/26/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:6cb137ea8718%0Dfbc7c458ca2a?from_pullrequest_id=26"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/26/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/26"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:6cb137ea8718%0Dfbc7c458ca2a?from_pullrequest_id=26"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/26/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/26/statuses_page=1.json"}}, "title": "Feature System Part 2: Frame Semantics", "close_source_branch": true, "reviewers": [], "id": 26, "destination": {"commit": {"hash": "fbc7c458ca2a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/fbc7c458ca2a.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/fbc7c458ca2a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-06-24T17:54:40.574727+00:00", "summary": {"raw": "This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the [Feature System PR](#!/ignitionrobotics/ign-physics/pull-requests/24).\r\n\r\nThe concept and implementation follows the [design doc](https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics) pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:\r\n\r\n* Quantities \\(e.g. vectors, points, poses\\) that have a frame of reference are given by a `FramedQuantity<>`. `FramedQuantity<>` is a class template that allows any kind of mathematical quantity to be framed \\(assuming it makes mathematical sense for the quantity to be framed\\). It uses the [policy-based design](https://en.wikipedia.org/wiki/Policy-based_design) pattern to determine how to transform various quantities between reference frames.\r\n* Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.\r\n* FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation \\(note: fixed precision has not been tested yet, but should be possible in theory\\). However, to make this possible, the implementation is using the Eigen C\\+\\+ library instead of ignition-math for its underlying data types.\r\n* Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames \\(e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints\\). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.\r\n* FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.", "markup": "markdown", "html": "<p>This PR introduces an implementation of Frame Semantics, as described in the design docs. It builds directly off of the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/pull-requests/24\" rel=\"nofollow\">Feature System PR</a>.</p>\n<p>The concept and implementation follows the <a data-is-external-link=\"true\" href=\"https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics\" rel=\"nofollow\">design doc</a> pretty closely, so I suggest looking there for an exhaustive explanation. But here is a high-level outline of what we have:</p>\n<ul>\n<li>Quantities (e.g. vectors, points, poses) that have a frame of reference are given by a <code>FramedQuantity&lt;&gt;</code>. <code>FramedQuantity&lt;&gt;</code> is a class template that allows any kind of mathematical quantity to be framed (assuming it makes mathematical sense for the quantity to be framed). It uses the <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Policy-based_design\" rel=\"nofollow\">policy-based design</a> pattern to determine how to transform various quantities between reference frames.</li>\n<li>Frames are identified by a FrameID. The FrameID is very similar to the Identity class which is used by the Feature System, except FrameIDs are only available for entities that are considered frames by their physics plugin.</li>\n<li>FramedQuantities and Frames are templated on their dimensionality and precision. This allows us to simultaneously support 2D/3D spaces and float/double precision with all the same API and implementation (note: fixed precision has not been tested yet, but should be possible in theory). However, to make this possible, the implementation is using the Eigen C++ library instead of ignition-math for its underlying data types.</li>\n<li>Physics plugins can decide whether they support expressing Models, Links, and/or Joints as frames (e.g. a plugin can decide that it considers Models and Links to be frames, but not Joints). The physics engine only needs to be able to return the transform of a frame with respect to the world, and the Frame Semantics implementation will take care of the rest.</li>\n<li>FramedQuantities can be \u201cresolved\u201d with respect to any reference frame. This means that there is a very simple API which will give you the raw quantity of a FramedQuantity as it would be expressed with respect to any arbitrary frame of your choosing.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "0d401b8f0573", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0d401b8f0573.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0d401b8f0573"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "FrameSemantics_raw"}}, "comment_count": 87, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-08-27T04:54:56.017182+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2018-08-27T15:29:23.376100+00:00", "type": "participant", "approved": true, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "PARTICIPANT", "participated_on": "2018-08-24T05:51:28.583878+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-26T14:43:00.931650+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2018-08-27T17:58:30.142001+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "6cb137ea8718", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/6cb137ea8718.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/6cb137ea8718"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}