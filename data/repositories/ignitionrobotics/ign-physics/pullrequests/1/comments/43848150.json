{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/1/comments/43848150.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/1/_/diff#comment-43848150"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/1.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/1"}}, "title": "Part 3: CompositeData prototype summary"}, "content": {"raw": "Great job @mxgrey That's a lot of code and obviously with thorough thoughts and careful designs!     \nSome high level comments from first pass, I suggest us fully agree on these pull requests before we move on to the next step :)       \n\n1. Instead of using `RequireData` and `ExpectData`, can we get started with something simple: like the `function overloading` in C++,   \n     of course we will lose some flexibility since we have to always put required data ahead of the optional ones in the function arguments   \n\n2.  Instead of holding `SearchForStuff.cmake`, `FindFreeImage.cmake`, `FindSSE.cmake`, etc, in the repositories of gazebo, ign-commons, ign-math, and now one more ign-physics, and   \n     let them diverge (since I saw some changes from this ign-physics PR), we might want to put them in one place and offer a URL to get a collection of these files   \n     Similar application in ROS to maintain multiple packages, but not exactly the same: https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos  \n     We can similarly add some script to download these .cmake from a common place, to the gazebo repo's cmake directory    \n\n3. Regarding the `CompositeData` `SpecifiyData`, `RequiredData`, how much would you think to be exposed to developers or potential contributors? When I first read the API, I personally feel    \n    it is not that straightforward to contribute and use. But it makes more sense after reading the test for some example usages. So I am kind of wondering if we can wrap one more layer on top    \n    to facilitate the usage and understanding. Or provide concise examples.     \n\n4. As for the `GetOrCreate` API,  if I have `data.Get<JointProperty>(2)`    \n       (1) if the JointProperty data type is NOT available, this means constructing a `JointProperty` with the argument of 2    \n       (2) if the JointProperty data type is available, this means get the JointProperty of index at 2? (Or my understanding is only `query` API will get data)    \n\n5. more explanation on `silent query` would be appreciated, maybe 1-2 sentence descriptive example usage in the physics simulation where we require query to have state    \n\n\n(side note: No need to address these comments in rush, we can talk)   \n", "markup": "markdown", "html": "<p>Great job @mxgrey That's a lot of code and obviously with thorough thoughts and careful designs!   <br />\nSome high level comments from first pass, I suggest us fully agree on these pull requests before we move on to the next step :)       </p>\n<ol>\n<li>\n<p>Instead of using <code>RequireData</code> and <code>ExpectData</code>, can we get started with something simple: like the <code>function overloading</code> in C++, <br />\n     of course we will lose some flexibility since we have to always put required data ahead of the optional ones in the function arguments   </p>\n</li>\n<li>\n<p>Instead of holding <code>SearchForStuff.cmake</code>, <code>FindFreeImage.cmake</code>, <code>FindSSE.cmake</code>, etc, in the repositories of gazebo, ign-commons, ign-math, and now one more ign-physics, and <br />\n     let them diverge (since I saw some changes from this ign-physics PR), we might want to put them in one place and offer a URL to get a collection of these files <br />\n     Similar application in ROS to maintain multiple packages, but not exactly the same: <a href=\"https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos\" rel=\"nofollow\" class=\"ap-connect-link\">https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos</a><br />\n     We can similarly add some script to download these .cmake from a common place, to the gazebo repo's cmake directory    </p>\n</li>\n<li>\n<p>Regarding the <code>CompositeData</code> <code>SpecifiyData</code>, <code>RequiredData</code>, how much would you think to be exposed to developers or potential contributors? When I first read the API, I personally feel  <br />\n    it is not that straightforward to contribute and use. But it makes more sense after reading the test for some example usages. So I am kind of wondering if we can wrap one more layer on top  <br />\n    to facilitate the usage and understanding. Or provide concise examples.     </p>\n</li>\n<li>\n<p>As for the <code>GetOrCreate</code> API,  if I have <code>data.Get&lt;JointProperty&gt;(2)</code>  <br />\n       (1) if the JointProperty data type is NOT available, this means constructing a <code>JointProperty</code> with the argument of 2  <br />\n       (2) if the JointProperty data type is available, this means get the JointProperty of index at 2? (Or my understanding is only <code>query</code> API will get data)    </p>\n</li>\n<li>\n<p>more explanation on <code>silent query</code> would be appreciated, maybe 1-2 sentence descriptive example usage in the physics simulation where we require query to have state    </p>\n</li>\n</ol>\n<p>(side note: No need to address these comments in rush, we can talk)   </p>", "type": "rendered"}, "created_on": "2017-08-30T04:08:43.532692+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-08-30T04:16:56.753182+00:00", "type": "pullrequest_comment", "id": 43848150}