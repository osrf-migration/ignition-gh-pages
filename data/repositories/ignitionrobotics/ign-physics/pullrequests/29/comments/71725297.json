{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/71725297.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-71725297"}}, "parent": {"id": 71615795, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/71615795.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-71615795"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29"}}, "title": "Feature System Part 6: Features for constructing objects from SDF data"}, "content": {"raw": "> I\u2019m pretty confident that we won\u2019t have a sufficiently developed ECS framework in place for our upcoming development targets\n\nI'm not sure if you've synced with @nkoenig on this, but my understanding was that the gz11 beta would use `ign-gazebo`'s ECS and `ign-physics`.\n\n> Eventually the core ign-physics library will define features to allow users programmatically construct simulation objects and set the states/properties of those objects, independently of SDF (we could have those features right now, but it involves a lot of typing, which we don't immediately have time for).\n\nSo it sounds like we'll start with native SDF support first and a full C++ API later. Again, I'm not sure if you've already discussed this, but by looking at how `ign-gazebo` is already doing [its own SDF parsing](#!/ignitionrobotics/ign-gazebo/pull-requests/13/server-update/diff#Lsrc/ServerPrivate.ccT89) and the [example physics system](#!/ignitionrobotics/ign-gazebo/pull-requests/15/systems/diff#chg-src/PhysicsSystem.cc) is SDF-agnostic, it sounds to me like we may need that C++ API before the SDF interface?", "markup": "markdown", "html": "<blockquote>\n<p>I\u2019m pretty confident that we won\u2019t have a sufficiently developed ECS framework in place for our upcoming development targets</p>\n</blockquote>\n<p>I'm not sure if you've synced with @nkoenig on this, but my understanding was that the gz11 beta would use <code>ign-gazebo</code>'s ECS and <code>ign-physics</code>.</p>\n<blockquote>\n<p>Eventually the core ign-physics library will define features to allow users programmatically construct simulation objects and set the states/properties of those objects, independently of SDF (we could have those features right now, but it involves a lot of typing, which we don't immediately have time for).</p>\n</blockquote>\n<p>So it sounds like we'll start with native SDF support first and a full C++ API later. Again, I'm not sure if you've already discussed this, but by looking at how <code>ign-gazebo</code> is already doing <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/13/server-update/diff#Lsrc/ServerPrivate.ccT89\" rel=\"nofollow\">its own SDF parsing</a> and the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/15/systems/diff#chg-src/PhysicsSystem.cc\" rel=\"nofollow\">example physics system</a> is SDF-agnostic, it sounds to me like we may need that C++ API before the SDF interface?</p>", "type": "rendered"}, "created_on": "2018-08-01T19:11:08.794643+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-08-01T19:11:08.811312+00:00", "type": "pullrequest_comment", "id": 71725297}