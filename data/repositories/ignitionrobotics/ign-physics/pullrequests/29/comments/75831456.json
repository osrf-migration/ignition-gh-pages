{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/75831456.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:f2670aa89e10..56e5d19776ab?path=dartsim%2Fsrc%2FEntityManagementFeatures.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-75831456"}}, "parent": {"id": 75825573, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/75825573.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-75825573"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29"}}, "title": "Feature System Part 6: Features for constructing objects from SDF data"}, "content": {"raw": "Yeah, I\u2019m doing that intentionally to help sniff out bugs.\n\nI believe if I've designed the feature system correctly and implemented the plugin correctly, it should never throw in any of these `at(~)` calls. So if it does throw, then I\u2019m making some faulty assumption or left a bug in the code somewhere.\n\nI actually plan on totally redoing the design of the entity management within the plugin once we've had some time to break in this code and give the feature system an endurance test. If we can confirm that the feature system design is air-tight, then we can replace these maps with `std::vector<void*>` containers and use static\\_casts to manage everything. That would be a maximally efficient and maximally performant plugin wrapper, which could probably be generalized to other physics engines very easily.", "markup": "markdown", "html": "<p>Yeah, I\u2019m doing that intentionally to help sniff out bugs.</p>\n<p>I believe if I've designed the feature system correctly and implemented the plugin correctly, it should never throw in any of these <code>at(~)</code> calls. So if it does throw, then I\u2019m making some faulty assumption or left a bug in the code somewhere.</p>\n<p>I actually plan on totally redoing the design of the entity management within the plugin once we've had some time to break in this code and give the feature system an endurance test. If we can confirm that the feature system design is air-tight, then we can replace these maps with <code>std::vector&lt;void*&gt;</code> containers and use static_casts to manage everything. That would be a maximally efficient and maximally performant plugin wrapper, which could probably be generalized to other physics engines very easily.</p>", "type": "rendered"}, "created_on": "2018-09-13T03:13:47.929278+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "dartsim/src/EntityManagementFeatures.cc"}, "updated_on": "2018-09-13T03:13:47.935780+00:00", "type": "pullrequest_comment", "id": 75831456}