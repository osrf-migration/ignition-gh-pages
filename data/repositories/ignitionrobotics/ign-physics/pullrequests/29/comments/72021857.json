{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/72021857.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-72021857"}}, "parent": {"id": 71999162, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/71999162.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-71999162"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29"}}, "title": "Feature System Part 6: Features for constructing objects from SDF data"}, "content": {"raw": "Right, for engines where everything in a model needs to be initialized upfront, they would only be able to provide the `ConstructModel` and/or `ConstructWorld` features. The `ConstructLink` and `ConstructJoint` wouldn\u2019t be options for those engines.\n\nIn dartsim, a Joint always needs to be constructed at the same time as a Link, but we'll be side-stepping this issue by having `ConstructLink` always create a Link with a `FreeJoint`, and then `ConstructJoint` will simply take an existing Link and reattach it to its new parent \\(as defined by the `sdf::Joint`\\) while changing the joint type if necessary. The catch with this approach is that `ConstructJoint` cannot be called on an `sdf::Joint` if the parent or child Link of that Joint has not already been created, but I think that\u2019s a reasonable restriction to have.", "markup": "markdown", "html": "<p>Right, for engines where everything in a model needs to be initialized upfront, they would only be able to provide the <code>ConstructModel</code> and/or <code>ConstructWorld</code> features. The <code>ConstructLink</code> and <code>ConstructJoint</code> wouldn\u2019t be options for those engines.</p>\n<p>In dartsim, a Joint always needs to be constructed at the same time as a Link, but we'll be side-stepping this issue by having <code>ConstructLink</code> always create a Link with a <code>FreeJoint</code>, and then <code>ConstructJoint</code> will simply take an existing Link and reattach it to its new parent (as defined by the <code>sdf::Joint</code>) while changing the joint type if necessary. The catch with this approach is that <code>ConstructJoint</code> cannot be called on an <code>sdf::Joint</code> if the parent or child Link of that Joint has not already been created, but I think that\u2019s a reasonable restriction to have.</p>", "type": "rendered"}, "created_on": "2018-08-06T02:10:14.501330+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-08-06T02:10:14.507499+00:00", "type": "pullrequest_comment", "id": 72021857}