{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/71615795.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-71615795"}}, "parent": {"id": 71577549, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29/comments/71577549.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29/_/diff#comment-71577549"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/29.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/29"}}, "title": "Feature System Part 6: Features for constructing objects from SDF data"}, "content": {"raw": "Great point! As of right now, I'm not sure where the `ign-gazebo` stands in terms of ECS architecture, but I\u2019m pretty confident that we won\u2019t have a sufficiently developed ECS framework in place for our upcoming development targets.\n\nIn terms of being sdf-agnostic, the beauty of the Feature System \\+ optional `ign-physics-sdf` component library is that it gives physics engines the option of whether or not they will depend on \\(and consume\\) SDF information. SDF is not a hard dependency of the core `ign-physics` library, so a physics engine is not required to depend on SDF. Moreover, the Feature System will allow `ign-gazebo` to inspect whether a plugin has `ign-physics-sdf` features at run time, and then make decisions based on that.\n\nEventually the core `ign-physics` library will define features to allow users programmatically construct simulation objects and set the states/properties of those objects, independently of SDF \\(we could have those features right now, but it involves a lot of typing, which we don't immediately have time for\\). Once those core features are available, then `ign-gazebo` will have an alternative means to transfer SDF information into the simulator. So here\u2019s the control flow that I\u2019m envisioning:\n\n1. `ign-gazebo` loads an SDF file into the native SDF data structures.\n2. `ign-gazebo` checks whether the physics engine supports the `ign-physics-sdf` features.\n3. If it does, then `ign-gazebo` passes the SDF data structures directly to the physics engine. This is ideal, because it allows physics engines to support custom parameters within an SDF. For example, our `dartsim` engine could support `<collision_detector>` SDF elements that allow users to choose one of the four collision detectors that `dartsim` supports. Our `ODE` engine could support parameters like `CFM` within the SDF. Other custom engines created by end-users could support their own custom SDF extensions.\n4. If the physics engine does not support `ign-physics-sdf`, then `ign-gazebo` can use the \\(future\\) core `ign-physics` features to construct the specifications of the SDF file on a best-effort basis. Some physics engines may be lacking the necessary features to construct everything that is specified in any given SDF file, so `ign-gazebo` will log warnings about what features are missing from the physics engine and which parts of the SDF cannot be loaded because of it.\n5. If a physics engine does not support `ign-gazebo` and also does not support programmatic construction of simulation objects, then it will need to determine its own way of constructing its simulation environment. Maybe it gets its information from another source, or maybe its environment is hard-coded into the engine/wrapper. This would be entirely up to whoever develops the plugin wrapper.\n\n", "markup": "markdown", "html": "<p>Great point! As of right now, I'm not sure where the <code>ign-gazebo</code> stands in terms of ECS architecture, but I\u2019m pretty confident that we won\u2019t have a sufficiently developed ECS framework in place for our upcoming development targets.</p>\n<p>In terms of being sdf-agnostic, the beauty of the Feature System + optional <code>ign-physics-sdf</code> component library is that it gives physics engines the option of whether or not they will depend on (and consume) SDF information. SDF is not a hard dependency of the core <code>ign-physics</code> library, so a physics engine is not required to depend on SDF. Moreover, the Feature System will allow <code>ign-gazebo</code> to inspect whether a plugin has <code>ign-physics-sdf</code> features at run time, and then make decisions based on that.</p>\n<p>Eventually the core <code>ign-physics</code> library will define features to allow users programmatically construct simulation objects and set the states/properties of those objects, independently of SDF (we could have those features right now, but it involves a lot of typing, which we don't immediately have time for). Once those core features are available, then <code>ign-gazebo</code> will have an alternative means to transfer SDF information into the simulator. So here\u2019s the control flow that I\u2019m envisioning:</p>\n<ol>\n<li><code>ign-gazebo</code> loads an SDF file into the native SDF data structures.</li>\n<li><code>ign-gazebo</code> checks whether the physics engine supports the <code>ign-physics-sdf</code> features.</li>\n<li>If it does, then <code>ign-gazebo</code> passes the SDF data structures directly to the physics engine. This is ideal, because it allows physics engines to support custom parameters within an SDF. For example, our <code>dartsim</code> engine could support <code>&lt;collision_detector&gt;</code> SDF elements that allow users to choose one of the four collision detectors that <code>dartsim</code> supports. Our <code>ODE</code> engine could support parameters like <code>CFM</code> within the SDF. Other custom engines created by end-users could support their own custom SDF extensions.</li>\n<li>If the physics engine does not support <code>ign-physics-sdf</code>, then <code>ign-gazebo</code> can use the (future) core <code>ign-physics</code> features to construct the specifications of the SDF file on a best-effort basis. Some physics engines may be lacking the necessary features to construct everything that is specified in any given SDF file, so <code>ign-gazebo</code> will log warnings about what features are missing from the physics engine and which parts of the SDF cannot be loaded because of it.</li>\n<li>If a physics engine does not support <code>ign-gazebo</code> and also does not support programmatic construction of simulation objects, then it will need to determine its own way of constructing its simulation environment. Maybe it gets its information from another source, or maybe its environment is hard-coded into the engine/wrapper. This would be entirely up to whoever develops the plugin wrapper.</li>\n</ol>", "type": "rendered"}, "created_on": "2018-08-01T02:59:12.759113+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-08-01T02:59:12.771595+00:00", "type": "pullrequest_comment", "id": 71615795}