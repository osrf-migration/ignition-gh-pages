{"rendered": {"description": {"raw": "This PR continues builds on the Feature System by introducing the `EntityPtr`. I found that we have a tricky situation when it comes to handling entities. I considered both `std::unique_ptr` and `std::optional` as potential containers for our Entity objects, but I found the following issues:\r\n\r\n* `std::unique_ptr` requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an `ign-physics` object, even if no object or information is really being created or destroyed.\r\n* `std::optional` would violate logical const-correctness in our case. To illustrate this, we want a `ConstModelPtr` to only be able to access the const-qualified functions of the `Model` API. However, if we have `std::optional<const Model> constModel = /* get const model */`, then a user can simply do `std::optional<Model> nonConstModel = constModel`, and then suddenly the user has full access to the const-unqualified API of the object `constModel`. Note that `Model` is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.\r\n\r\nTherefore, we need a container class that gives us the const semantics of `std::unique_ptr` with the performance of `std::optional`. That's exactly what `EntityPtr` does.\r\n\r\nNote that there are few pointer semantics functions that haven't been implemented yet for `EntityPtr` because they\u2019re low priority, but I left a TODO for myself in the code.", "markup": "markdown", "html": "<p>This PR continues builds on the Feature System by introducing the <code>EntityPtr</code>. I found that we have a tricky situation when it comes to handling entities. I considered both <code>std::unique_ptr</code> and <code>std::optional</code> as potential containers for our Entity objects, but I found the following issues:</p>\n<ul>\n<li><code>std::unique_ptr</code> requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an <code>ign-physics</code> object, even if no object or information is really being created or destroyed.</li>\n<li><code>std::optional</code> would violate logical const-correctness in our case. To illustrate this, we want a <code>ConstModelPtr</code> to only be able to access the const-qualified functions of the <code>Model</code> API. However, if we have <code>std::optional&lt;const Model&gt; constModel = /* get const model */</code>, then a user can simply do <code>std::optional&lt;Model&gt; nonConstModel = constModel</code>, and then suddenly the user has full access to the const-unqualified API of the object <code>constModel</code>. Note that <code>Model</code> is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.</li>\n</ul>\n<p>Therefore, we need a container class that gives us the const semantics of <code>std::unique_ptr</code> with the performance of <code>std::optional</code>. That's exactly what <code>EntityPtr</code> does.</p>\n<p>Note that there are few pointer semantics functions that haven't been implemented yet for <code>EntityPtr</code> because they\u2019re low priority, but I left a TODO for myself in the code.</p>", "type": "rendered"}, "title": {"raw": "Feature System Part 5: EntityPtr", "markup": "markdown", "html": "<p>Feature System Part 5: EntityPtr</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR continues builds on the Feature System by introducing the `EntityPtr`. I found that we have a tricky situation when it comes to handling entities. I considered both `std::unique_ptr` and `std::optional` as potential containers for our Entity objects, but I found the following issues:\r\n\r\n* `std::unique_ptr` requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an `ign-physics` object, even if no object or information is really being created or destroyed.\r\n* `std::optional` would violate logical const-correctness in our case. To illustrate this, we want a `ConstModelPtr` to only be able to access the const-qualified functions of the `Model` API. However, if we have `std::optional<const Model> constModel = /* get const model */`, then a user can simply do `std::optional<Model> nonConstModel = constModel`, and then suddenly the user has full access to the const-unqualified API of the object `constModel`. Note that `Model` is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.\r\n\r\nTherefore, we need a container class that gives us the const semantics of `std::unique_ptr` with the performance of `std::optional`. That's exactly what `EntityPtr` does.\r\n\r\nNote that there are few pointer semantics functions that haven't been implemented yet for `EntityPtr` because they\u2019re low priority, but I left a TODO for myself in the code.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/31/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diffstat/ignitionrobotics/ign-physics:56e5d19776ab%0D03f057d3ba9e?from_pullrequest_id=31"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/31/merge"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/31"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:56e5d19776ab%0D03f057d3ba9e?from_pullrequest_id=31"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/pullrequests/31/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/31/statuses_page=1.json"}}, "title": "Feature System Part 5: EntityPtr", "close_source_branch": true, "reviewers": [{"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}], "id": 31, "destination": {"commit": {"hash": "03f057d3ba9e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/03f057d3ba9e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/03f057d3ba9e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "created_on": "2018-08-20T10:11:10.308190+00:00", "summary": {"raw": "This PR continues builds on the Feature System by introducing the `EntityPtr`. I found that we have a tricky situation when it comes to handling entities. I considered both `std::unique_ptr` and `std::optional` as potential containers for our Entity objects, but I found the following issues:\r\n\r\n* `std::unique_ptr` requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an `ign-physics` object, even if no object or information is really being created or destroyed.\r\n* `std::optional` would violate logical const-correctness in our case. To illustrate this, we want a `ConstModelPtr` to only be able to access the const-qualified functions of the `Model` API. However, if we have `std::optional<const Model> constModel = /* get const model */`, then a user can simply do `std::optional<Model> nonConstModel = constModel`, and then suddenly the user has full access to the const-unqualified API of the object `constModel`. Note that `Model` is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.\r\n\r\nTherefore, we need a container class that gives us the const semantics of `std::unique_ptr` with the performance of `std::optional`. That's exactly what `EntityPtr` does.\r\n\r\nNote that there are few pointer semantics functions that haven't been implemented yet for `EntityPtr` because they\u2019re low priority, but I left a TODO for myself in the code.", "markup": "markdown", "html": "<p>This PR continues builds on the Feature System by introducing the <code>EntityPtr</code>. I found that we have a tricky situation when it comes to handling entities. I considered both <code>std::unique_ptr</code> and <code>std::optional</code> as potential containers for our Entity objects, but I found the following issues:</p>\n<ul>\n<li><code>std::unique_ptr</code> requires allocating and deallocating memory. This is troublesome for us, because that means we need to perform allocations and deallocations any time a user wants to view an <code>ign-physics</code> object, even if no object or information is really being created or destroyed.</li>\n<li><code>std::optional</code> would violate logical const-correctness in our case. To illustrate this, we want a <code>ConstModelPtr</code> to only be able to access the const-qualified functions of the <code>Model</code> API. However, if we have <code>std::optional&lt;const Model&gt; constModel = /* get const model */</code>, then a user can simply do <code>std::optional&lt;Model&gt; nonConstModel = constModel</code>, and then suddenly the user has full access to the const-unqualified API of the object <code>constModel</code>. Note that <code>Model</code> is itself a proxy class, so making a \u201ccopy\u201d of a model object does not really copy the underlying data; it really creates a new reference to an object within the physics engine.</li>\n</ul>\n<p>Therefore, we need a container class that gives us the const semantics of <code>std::unique_ptr</code> with the performance of <code>std::optional</code>. That's exactly what <code>EntityPtr</code> does.</p>\n<p>Note that there are few pointer semantics functions that haven't been implemented yet for <code>EntityPtr</code> because they\u2019re low priority, but I left a TODO for myself in the code.</p>", "type": "rendered"}, "source": {"commit": {"hash": "967ab1414368", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/967ab1414368.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/967ab1414368"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "EntityHandling"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-09-07T23:49:30.230005+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2018-09-04T15:28:38.990448+00:00", "type": "participant", "approved": true, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "PARTICIPANT", "participated_on": "2018-09-03T02:14:08.025497+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2018-09-07T23:49:38.366233+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "56e5d19776ab", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/56e5d19776ab.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/56e5d19776ab"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}