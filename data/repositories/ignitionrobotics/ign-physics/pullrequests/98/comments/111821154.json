{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98/comments/111821154.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98/_/diff#comment-111821154"}}, "parent": {"id": 111779732, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98/comments/111779732.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98/_/diff#comment-111779732"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 98, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98"}}, "title": "[WIP] Add Bullet physics engine"}, "content": {"raw": "> we would want `sdf::Model` to have complete information of its links, joints and etc., so that the whole model could be constructed in a single call\n\nCorrect, and I think ordinarily that's how sdformat is meant to be used, where the `sdf::Model` has complete information about its `sdf::Link` and `sdf::Joint` members.\n\n> I don't think it has access to the sdf element pointer in `ign-gazebo` physics system when it was being constructed\n\nBased on [CreatePhysicsEntities](#!/ignitionrobotics/ign-gazebo/src/4b23bd2fe9c304c655ca15c047725d7f91b9bba1/src/systems/physics/Physics.cc#lines-299) it seems you're right: the SDF entities that get passed to the `ConstructSdf*`  functions are minimal and created on the fly based on model, link, and joint components. And you're also right that because of limitations in sdformat's API, it's not possible to aggregate all that data into a single `sdf::Model` instance without reconstructing an equivalent `sdf::Element` instance.\n\nIn my view this is an abuse of how sdformat is designed to be used. To me that suggests that we should either:\n\n1. Rework the design of sdformat to allow users to explicitly insert links, joints, etc into their parent objects, and then have `ign-gazebo` aggregate all the information into an `sdf::Model` instance\n2. or have `ign-gazebo` store the original `sdf::Model` element in a component that `ign-gazebo` can lookup later.\n\nI would lean heavily towards the second option, because that would be the most straightforward way for physics engine plugins to support custom sdformat fields \\(like the `<ode>` and `<bullet>` tags.", "markup": "markdown", "html": "<blockquote>\n<p>we would want <code>sdf::Model</code> to have complete information of its links, joints and etc., so that the whole model could be constructed in a single call</p>\n</blockquote>\n<p>Correct, and I think ordinarily that's how sdformat is meant to be used, where the <code>sdf::Model</code> has complete information about its <code>sdf::Link</code> and <code>sdf::Joint</code> members.</p>\n<blockquote>\n<p>I don't think it has access to the sdf element pointer in <code>ign-gazebo</code> physics system when it was being constructed</p>\n</blockquote>\n<p>Based on <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/4b23bd2fe9c304c655ca15c047725d7f91b9bba1/src/systems/physics/Physics.cc#lines-299\" rel=\"nofollow\">CreatePhysicsEntities</a> it seems you're right: the SDF entities that get passed to the <code>ConstructSdf*</code>  functions are minimal and created on the fly based on model, link, and joint components. And you're also right that because of limitations in sdformat's API, it's not possible to aggregate all that data into a single <code>sdf::Model</code> instance without reconstructing an equivalent <code>sdf::Element</code> instance.</p>\n<p>In my view this is an abuse of how sdformat is designed to be used. To me that suggests that we should either:</p>\n<ol>\n<li>Rework the design of sdformat to allow users to explicitly insert links, joints, etc into their parent objects, and then have <code>ign-gazebo</code> aggregate all the information into an <code>sdf::Model</code> instance</li>\n<li>or have <code>ign-gazebo</code> store the original <code>sdf::Model</code> element in a component that <code>ign-gazebo</code> can lookup later.</li>\n</ol>\n<p>I would lean heavily towards the second option, because that would be the most straightforward way for physics engine plugins to support custom sdformat fields (like the <code>&lt;ode&gt;</code> and <code>&lt;bullet&gt;</code> tags.</p>", "type": "rendered"}, "created_on": "2019-08-05T02:22:27.652970+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-08-05T02:22:27.664035+00:00", "type": "pullrequest_comment", "id": 111821154}