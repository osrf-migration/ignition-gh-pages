{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98/comments/111779732.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98/_/diff#comment-111779732"}}, "parent": {"id": 111674912, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98/comments/111674912.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98/_/diff#comment-111674912"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 98, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98"}}, "title": "[WIP] Add Bullet physics engine"}, "content": {"raw": "Hi Grey, calling `btMultiBody::finalizeMultiDof()` multiple times was fine. I added `FinalizeModels` for two reasons:\n\n* Changing the number of links after having created `btMultiBody` gave errors. In other words, I had to know the number of links a model has before initializing the model. However, I had just looked further into it, and it turned out to be a bug in Bullet. A fix has also been merged, but that only exists in the `master` branch at the moment.\n* When constructing a joint that attaches a link to the fixed world frame, I would set the `btMultiBody` to have fixed base, and attach the joint between link and base. Otherwise `btMultiBody` would have floating base by default. I need to set whether fixed base when initializing `btMultiBody`, but wouldn\u2019t get this information until all joints have been added.\n\nWith the above requirements, I then decided to lump everything together and construct `btMultiBody` with the `FinalizeModels` call in the end when the information was complete. I didn't like it either, since it deviates from the original flow of model construction in `ign-physics`. But that seemed to be the only way I could implement bullet plugin, so I just went with it.\n\n\u200c\n\nAs for not supporting `ConstructSdfLink()`, `ConstructSdfJoint()` and etc., I think that makes sense but I have two questions:\n\n* In that case, when we pass `sdf::Model` to `ConstructSdfModel()`, we would want `sdf::Model` to have complete information of its links, joints and etc., so that the whole model could be constructed in a single call. I think that is what you are suggesting? But `sdf::Model` has no way of setting them, apart from its `Load(ElementPtr _sdf)`function, but I don't think it has access to the sdf element pointer in `ign-gazebo` physics system when it was being constructed.\n* I haven't yet figured out how to use optional features when using `ign-physics`. Currently in `ign-gazebo` physics system, if the plugin does not pass the `MinimumFeatureList`, it wouldn't be loaded. But I don\u2019t know how do I specify optional feature list, or call functions not in the `MinimumFeatureList`.\n\n", "markup": "markdown", "html": "<p>Hi Grey, calling <code>btMultiBody::finalizeMultiDof()</code> multiple times was fine. I added <code>FinalizeModels</code> for two reasons:</p>\n<ul>\n<li>Changing the number of links after having created <code>btMultiBody</code> gave errors. In other words, I had to know the number of links a model has before initializing the model. However, I had just looked further into it, and it turned out to be a bug in Bullet. A fix has also been merged, but that only exists in the <code>master</code> branch at the moment.</li>\n<li>When constructing a joint that attaches a link to the fixed world frame, I would set the <code>btMultiBody</code> to have fixed base, and attach the joint between link and base. Otherwise <code>btMultiBody</code> would have floating base by default. I need to set whether fixed base when initializing <code>btMultiBody</code>, but wouldn\u2019t get this information until all joints have been added.</li>\n</ul>\n<p>With the above requirements, I then decided to lump everything together and construct <code>btMultiBody</code> with the <code>FinalizeModels</code> call in the end when the information was complete. I didn't like it either, since it deviates from the original flow of model construction in <code>ign-physics</code>. But that seemed to be the only way I could implement bullet plugin, so I just went with it.</p>\n<p>\u200c</p>\n<p>As for not supporting <code>ConstructSdfLink()</code>, <code>ConstructSdfJoint()</code> and etc., I think that makes sense but I have two questions:</p>\n<ul>\n<li>In that case, when we pass <code>sdf::Model</code> to <code>ConstructSdfModel()</code>, we would want <code>sdf::Model</code> to have complete information of its links, joints and etc., so that the whole model could be constructed in a single call. I think that is what you are suggesting? But <code>sdf::Model</code> has no way of setting them, apart from its <code>Load(ElementPtr _sdf)</code>function, but I don't think it has access to the sdf element pointer in <code>ign-gazebo</code> physics system when it was being constructed.</li>\n<li>I haven't yet figured out how to use optional features when using <code>ign-physics</code>. Currently in <code>ign-gazebo</code> physics system, if the plugin does not pass the <code>MinimumFeatureList</code>, it wouldn't be loaded. But I don\u2019t know how do I specify optional feature list, or call functions not in the <code>MinimumFeatureList</code>.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-08-02T20:11:10.301467+00:00", "user": {"display_name": "Jay Li", "uuid": "{02a90bb3-c425-4331-9521-27292683a02d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02a90bb3-c425-4331-9521-27292683a02d%7D"}, "html": {"href": "https://bitbucket.org/%7B02a90bb3-c425-4331-9521-27292683a02d%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5ced8302f0a52d0f240650f8/a72f0929-4cec-427a-9f67-b2c3a973f859/128"}}, "nickname": "j_li0", "type": "user", "account_id": "5ced8302f0a52d0f240650f8"}, "updated_on": "2019-08-02T20:11:10.511801+00:00", "type": "pullrequest_comment", "id": 111779732}