{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98/comments/111674912.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98/_/diff#comment-111674912"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 98, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/98.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/98"}}, "title": "[WIP] Add Bullet physics engine"}, "content": {"raw": "I have some concerns about the `FinalizeModels` function for two reasons:\n\n* In OOP, it's best to avoid patterns where objects may have \"incomplete\" states. That means avoiding member functions like `init()` and `finalize()` \\(I know these kinds of functions are being used in other ignition libraries currently, but I consider that to be baggage which we've managed to avoid in `ignition-physics`\\)\n* The need to \"finalize\" a model is based on an implementation detail of Bullet, but that requirement is being pushed up to `ignition-physics` in this PR. A goal of `ignition-physics` is to avoid the situation where implementation details of physics engines are dictating the end user\u2019s experience.\n\nInstead I recommend we use the [builder pattern](https://cpppatterns.com/patterns/builder.html). This means that we would build up a description of a model in a \"builder\" object, and then hand that builder object to some member function of the `Model` class once the description is complete.\n\nWe actually have an effective builder pattern already thanks to the function `ignition::physics::sdf::ConstructSdfModel(~)`. The `sdf::Model` class can be thought of as the builder class in that context.\n\nThis brings me to a question about how bullet works: Is it possible to call `btMultiBody::finalizeMultiDof()` multiple times on the same `btMultiBody` object?\n\n* If so, we can support incremental building \\(like `ConstructSdfLink()`, `ConstructSdfJoint()` by re-finalizing the `btMultiBody` at the end of each of those function calls.\n* If not, we should consider **not supporting** incremental building for the bullet plugin by simply not including `sdf::ConstructSdfLink` and `sdf::ConstructSdfJoint` in the feature set of the bullet plugin. One of the design goals of `ignition-physics` is to make it so that not all plugins need to support all features.\n\n", "markup": "markdown", "html": "<p>I have some concerns about the <code>FinalizeModels</code> function for two reasons:</p>\n<ul>\n<li>In OOP, it's best to avoid patterns where objects may have \"incomplete\" states. That means avoiding member functions like <code>init()</code> and <code>finalize()</code> (I know these kinds of functions are being used in other ignition libraries currently, but I consider that to be baggage which we've managed to avoid in <code>ignition-physics</code>)</li>\n<li>The need to \"finalize\" a model is based on an implementation detail of Bullet, but that requirement is being pushed up to <code>ignition-physics</code> in this PR. A goal of <code>ignition-physics</code> is to avoid the situation where implementation details of physics engines are dictating the end user\u2019s experience.</li>\n</ul>\n<p>Instead I recommend we use the <a data-is-external-link=\"true\" href=\"https://cpppatterns.com/patterns/builder.html\" rel=\"nofollow\">builder pattern</a>. This means that we would build up a description of a model in a \"builder\" object, and then hand that builder object to some member function of the <code>Model</code> class once the description is complete.</p>\n<p>We actually have an effective builder pattern already thanks to the function <code>ignition::physics::sdf::ConstructSdfModel(~)</code>. The <code>sdf::Model</code> class can be thought of as the builder class in that context.</p>\n<p>This brings me to a question about how bullet works: Is it possible to call <code>btMultiBody::finalizeMultiDof()</code> multiple times on the same <code>btMultiBody</code> object?</p>\n<ul>\n<li>If so, we can support incremental building (like <code>ConstructSdfLink()</code>, <code>ConstructSdfJoint()</code> by re-finalizing the <code>btMultiBody</code> at the end of each of those function calls.</li>\n<li>If not, we should consider <strong>not supporting</strong> incremental building for the bullet plugin by simply not including <code>sdf::ConstructSdfLink</code> and <code>sdf::ConstructSdfJoint</code> in the feature set of the bullet plugin. One of the design goals of <code>ignition-physics</code> is to make it so that not all plugins need to support all features.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-08-02T07:33:30.530232+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-08-02T07:35:48.168001+00:00", "type": "pullrequest_comment", "id": 111674912}