{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59266844.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59266844"}}, "parent": {"id": 59261972, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59261972.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59261972"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "There are definitely strong conceptual parallels between the two, and `std::any` could serve the same purpose as `Cloneable` + `MakeCloneable` here.\n\nThe key difference is that `std::any` is intended for broader use cases, and as a result it has some overhead for ensuring type safety. The way we use `Cloneable` + `MakeCloneable` has no type safety overhead, which is fine in this context because our type safety is ensured very efficiently by the `CompositeData` class.\n\nSince `CompositeData` is likely to be a very significant hotspot in the physics engine pipelines, I would recommend that we do some very careful full-stack profiling before making the decision to switch to `std::any`. If the overhead turns out to be imperceptible, then it definitely makes sense to switch to `std::any`. Otherwise, we wouldn't lose much (in terms of maintenance) by hanging onto `Cloneable` + `MakeCloneable`, since their duties are very simple, straightforward, and stable.", "markup": "markdown", "html": "<p>There are definitely strong conceptual parallels between the two, and <code>std::any</code> could serve the same purpose as <code>Cloneable</code> + <code>MakeCloneable</code> here.</p>\n<p>The key difference is that <code>std::any</code> is intended for broader use cases, and as a result it has some overhead for ensuring type safety. The way we use <code>Cloneable</code> + <code>MakeCloneable</code> has no type safety overhead, which is fine in this context because our type safety is ensured very efficiently by the <code>CompositeData</code> class.</p>\n<p>Since <code>CompositeData</code> is likely to be a very significant hotspot in the physics engine pipelines, I would recommend that we do some very careful full-stack profiling before making the decision to switch to <code>std::any</code>. If the overhead turns out to be imperceptible, then it definitely makes sense to switch to <code>std::any</code>. Otherwise, we wouldn't lose much (in terms of maintenance) by hanging onto <code>Cloneable</code> + <code>MakeCloneable</code>, since their duties are very simple, straightforward, and stable.</p>", "type": "rendered"}, "created_on": "2018-03-20T00:28:51.184162+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T00:28:51.187326+00:00", "type": "pullrequest_comment", "id": 59266844}