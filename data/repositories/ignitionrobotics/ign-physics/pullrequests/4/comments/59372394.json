{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59372394.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59372394"}}, "parent": {"id": 59266844, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59266844.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59266844"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Type safety in `CompositeData` is achieved through the use of `typeid(some_type).name()` in he map?\n\nCan you create an issue to capture the idea of comparing `std::any` to `Cloneable`+`MakeCloneable`?", "markup": "markdown", "html": "<p>Type safety in <code>CompositeData</code> is achieved through the use of <code>typeid(some_type).name()</code> in he map?</p>\n<p>Can you create an issue to capture the idea of comparing <code>std::any</code> to <code>Cloneable</code>+<code>MakeCloneable</code>?</p>", "type": "rendered"}, "created_on": "2018-03-20T18:08:08.032982+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T18:08:08.036943+00:00", "type": "pullrequest_comment", "id": 59372394}