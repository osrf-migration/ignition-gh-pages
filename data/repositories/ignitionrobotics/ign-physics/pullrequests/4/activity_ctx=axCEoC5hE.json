{"pagelen": 50, "values": [{"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "Part 1: CompositeData implementation and tests", "destination": {"commit": {"hash": "27507b93b292", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/27507b93b292.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/27507b93b292"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b26a67fe2f78", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/b26a67fe2f78.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/b26a67fe2f78"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-04-09T17:48:04.249468+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/60027188.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-60027188"}}, "parent": {"id": 60022217, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/60022217.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-60022217"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "merged into this branch in c8c480b", "markup": "markdown", "html": "<p>merged into this branch in <a href=\"#!/ignitionrobotics/ign-physics/commits/c8c480b\" rel=\"nofollow\" class=\"ap-connect-link\">c8c480b</a></p>", "type": "rendered"}, "created_on": "2018-03-27T17:35:02.217257+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-27T17:35:02.220356+00:00", "type": "pullrequest_comment", "id": 60027188}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "Part 1: CompositeData implementation and tests", "destination": {"commit": {"hash": "27507b93b292", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/27507b93b292.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/27507b93b292"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cb7703fffb61", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/cb7703fffb61.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/cb7703fffb61"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-27T17:27:12.221289+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "Part 1: CompositeData implementation and tests", "destination": {"commit": {"hash": "27507b93b292", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/27507b93b292.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/27507b93b292"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c8c480b9b96e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/c8c480b9b96e.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/c8c480b9b96e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-27T17:16:06.822729+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/60022217.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-60022217"}}, "parent": {"id": 60017397, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/60017397.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-60017397"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Now pull request #18", "markup": "markdown", "html": "<p>Now <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/18/updated-cpplint\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #18</a></p>", "type": "rendered"}, "created_on": "2018-03-27T16:42:40.422699+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-27T16:42:40.427287+00:00", "type": "pullrequest_comment", "id": 60022217}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/60017397.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-60017397"}}, "parent": {"id": 58870625, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/58870625.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-58870625"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Updated linter, with reasonable output, in pull request #17.", "markup": "markdown", "html": "<p>Updated linter, with reasonable output, in <a href=\"#!/ignitionrobotics/ign-physics/pull-requests/17/update-cpplint-to-latest\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #17</a>.</p>", "type": "rendered"}, "created_on": "2018-03-27T15:58:03.080476+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-27T15:58:03.083743+00:00", "type": "pullrequest_comment", "id": 60017397}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59928138.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59928138"}}, "parent": {"id": 59770173, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59770173.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59770173"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "`CopyOptions` has been removed and replaced with a `Copy()` and `Merge()` combo: d0dba45", "markup": "markdown", "html": "<p><code>CopyOptions</code> has been removed and replaced with a <code>Copy()</code> and <code>Merge()</code> combo: <a href=\"#!/ignitionrobotics/ign-physics/commits/d0dba45\" rel=\"nofollow\" class=\"ap-connect-link\">d0dba45</a></p>", "type": "rendered"}, "created_on": "2018-03-27T01:17:35.203767+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-27T01:17:35.206565+00:00", "type": "pullrequest_comment", "id": 59928138}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "Part 1: CompositeData implementation and tests", "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d0dba45525e5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/d0dba45525e5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/d0dba45525e5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-27T01:14:53.344662+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59922232.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59922232"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "remove QueryMode argument, default silent here too", "markup": "markdown", "html": "<p>remove QueryMode argument, default silent here too</p>", "type": "rendered"}, "created_on": "2018-03-26T22:58:25.404372+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-26T22:58:25.408371+00:00", "type": "pullrequest_comment", "id": 59922232}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59922142.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59922142"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "remove QueryMode parameter, make silent by default", "markup": "markdown", "html": "<p>remove QueryMode parameter, make silent by default</p>", "type": "rendered"}, "created_on": "2018-03-26T22:56:48.932307+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-26T22:56:48.936625+00:00", "type": "pullrequest_comment", "id": 59922142}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59921858.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59921858"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Call `InsertOrAssign` like [std::map::insert_or_assign](http://en.cppreference.com/w/cpp/container/map/insert_or_assign)? not sure", "markup": "markdown", "html": "<p>Call <code>InsertOrAssign</code> like <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/container/map/insert_or_assign\" rel=\"nofollow\">std::map::insert_or_assign</a>? not sure</p>", "type": "rendered"}, "created_on": "2018-03-26T22:51:51.394108+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-26T22:51:51.397891+00:00", "type": "pullrequest_comment", "id": 59921858}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59921804.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59921804"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "this is like the `[]` operator of `std::map`", "markup": "markdown", "html": "<p>this is like the <code>[]</code> operator of <code>std::map</code></p>", "type": "rendered"}, "created_on": "2018-03-26T22:50:37.164158+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-26T22:50:37.167573+00:00", "type": "pullrequest_comment", "id": 59921804}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59917599.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59917599"}}, "parent": {"id": 59770099, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59770099.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59770099"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "added in 64c3f7b", "markup": "markdown", "html": "<p>added in <a href=\"#!/ignitionrobotics/ign-physics/commits/64c3f7b\" rel=\"nofollow\" class=\"ap-connect-link\">64c3f7b</a></p>", "type": "rendered"}, "created_on": "2018-03-26T21:40:12.392710+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-26T21:40:12.396313+00:00", "type": "pullrequest_comment", "id": 59917599}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "Part 1: CompositeData implementation and tests", "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "64c3f7b12760", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/64c3f7b12760.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/64c3f7b12760"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-26T21:38:19.117911+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59916232.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59916232"}}, "parent": {"id": 59915424, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59915424.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59915424"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "+1", "markup": "markdown", "html": "<p>+1</p>", "type": "rendered"}, "created_on": "2018-03-26T21:21:22.164751+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-26T21:21:22.169101+00:00", "type": "pullrequest_comment", "id": 59916232}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59915424.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59915424"}}, "parent": {"id": 59399063, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59399063.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59399063"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "What if we replace `GetOrCreate<T>(args...)` with a function `Insert<T>(args...)` that returns a `std::pair<T&, bool>` where the `T&` is a reference to either (1) the newly created data entry or (2) the already existing data entry which prevented an insertion. Then the `bool` would be true if a new data entry was inserted or false if an existing data entry blocked the insertion. This would better parallel the well-established `std::map::insert` function.", "markup": "markdown", "html": "<p>What if we replace <code>GetOrCreate&lt;T&gt;(args...)</code> with a function <code>Insert&lt;T&gt;(args...)</code> that returns a <code>std::pair&lt;T&amp;, bool&gt;</code> where the <code>T&amp;</code> is a reference to either (1) the newly created data entry or (2) the already existing data entry which prevented an insertion. Then the <code>bool</code> would be true if a new data entry was inserted or false if an existing data entry blocked the insertion. This would better parallel the well-established <code>std::map::insert</code> function.</p>", "type": "rendered"}, "created_on": "2018-03-26T21:10:55.523873+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-26T21:11:29.659239+00:00", "type": "pullrequest_comment", "id": 59915424}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "Part 1: CompositeData implementation and tests", "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ff7ffe3f27f2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/ff7ffe3f27f2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/ff7ffe3f27f2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-26T19:42:39.852952+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59770173.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59770173"}}, "parent": {"id": 59393851, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59393851.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59393851"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "I agree, `Copy()` with `IDENTICAL` and `Merge()` with `HARD_MERGE`", "markup": "markdown", "html": "<p>I agree, <code>Copy()</code> with <code>IDENTICAL</code> and <code>Merge()</code> with <code>HARD_MERGE</code></p>", "type": "rendered"}, "created_on": "2018-03-23T21:43:02.917238+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-23T21:43:02.920907+00:00", "type": "pullrequest_comment", "id": 59770173}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59770099.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59770099"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "I think it's also nice to see what all the entries are in a given object: `std::set<std::string> AllEntries() const`", "markup": "markdown", "html": "<p>I think it's also nice to see what all the entries are in a given object: <code>std::set&lt;std::string&gt; AllEntries() const</code></p>", "type": "rendered"}, "created_on": "2018-03-23T21:41:12.501068+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-23T21:41:12.504851+00:00", "type": "pullrequest_comment", "id": 59770099}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59399649.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59399649"}}, "parent": {"id": 59254238, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254238.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254238"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "ff7ffe3", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-physics/commits/ff7ffe3\" rel=\"nofollow\" class=\"ap-connect-link\">ff7ffe3</a></p>", "type": "rendered"}, "created_on": "2018-03-20T23:54:02.326783+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-20T23:54:02.329931+00:00", "type": "pullrequest_comment", "id": 59399649}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59399639.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59399639"}}, "parent": {"id": 59254207, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254207.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254207"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "4b96aba", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-physics/commits/4b96aba\" rel=\"nofollow\" class=\"ap-connect-link\">4b96aba</a></p>", "type": "rendered"}, "created_on": "2018-03-20T23:53:43.983378+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-20T23:53:43.986231+00:00", "type": "pullrequest_comment", "id": 59399639}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "CompositeData Part 1: Only implementation and tests", "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ff7ffe3f27f2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/ff7ffe3f27f2.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/ff7ffe3f27f2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-20T23:48:42.049437+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59399063.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59399063"}}, "parent": {"id": 59395257, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59395257.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59395257"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "> I'm having a hard time with these functions:\n\n`GetOrCreate()` would essentially map to `std::map::insert(~)`, which will return an iterator to an entry if one already existed, or else create an entry based on the input arguments (it also returns a boolean to indicate whether the entry was actually inserted). Other than that, the summary is correct. `std::map` doesn't keep track of when an entry gets queried, so the idea of \"unquerying\" an entry is meaningless to it.\n\nI'm definitely open to API changes, as long as we maintain these features, which are all currently being used in the prototype examples.\n\n> The QueryMode with Unquery also seems like a feature we can add later.\n\nProbably the most controversial feature will be the concept of keeping track of queries. This concept arose during the early design discussions between Steve, Ying, and I. The concern was that it would be easy for a plugin to either (1) be unable to handle some of the data types that it's given or (2) give data types that we can't do anything with, because compile-time knowledge of the data types is required in order to access them. This could result in silent issues that are difficult to debug where plugins aren't communicating with each other properly because they're handling different types of data. This motivates us to have a mechanism for identifying which data types each plugin is actually touching on versus which data types are being ignored. With that information, we can provide valuable sanity checks to make sure that these data structures are being handled properly and that plugins are actually utilizing the data that they're supposed to. This feature is already being used by the DART and ODE example plugins, and in fact it helped me immediately identify a mistake in my initial implementation of the DART plugin (there was a required data type that I was forgetting to handle).\n\n> Is it possible to eliminate GetOrCreate right now? We can always add back in later if the need arises.\n\nWe could merge together `Get()` and `GetOrCreate(~)` into one function that has the behavior of `GetOrCreate(~)`. I resisted doing this because I was afraid of cases like `data.Get<T>(5)` or `data.Get<T>(\"some string\")`. At first glance, this looks like you're asking for an object of type `T` at some integer or string key within a map. In actuality, what you're saying is \"get an object of type `T`, but if one doesn't already exist then create it with the constructor `T(5)` or `T(\"some string\")`\". So instead, I made it so that `Get<T>()` never accepts an argument, and a user needs to explicitly call `GetOrCreate<T>(...args...)` if they want to specify arguments to potentially construct the data type with when an entry for that type does not already exist. If that doesn't seem like a compelling rationale, I'm certainly open to merging the functions, but I would urge us to give it due consideration.\n\nNote that the behavior of `GetOrCreate(...)` is needed in order to support data types that don't have a default constructor. Otherwise, every time a user wants to \"get\" that data type, they would need to do something like \n\n```\nT* thing = data.Query<T>();\nif(!thing)\n  thing = &data.Create<T>(args);\n```\n\nwhich I think is way too much code for doing such a basic operation.\n\n> Adoption would be streamlined if an API similar to their is used here.\n\nUnfortunately, `operator[]` cannot accept template arguments, so we can't use that to streamline our API at all. We could rename some of the functions to be vaguely similar, like `GetOrCreate(...)` could be renamed `Insert(...)`, but that's the only obvious change that I can think of. I wouldn't suggest renaming `Query()` to `Find()` because it's not returning an iterator, and I wouldn't rename `Create()` to `Emplace()` since I think `Create()` is a much less intimidating function name.\n\nGiven that our overall API for CompositeData is drastically simpler than the overall `std::map` API, I'm skeptical that there will be much we can realistically do to streamline it further without crippling ourselves. I suspect the biggest barrier is that this API doesn't feel as familiar because it's not able to use the usual STL container idioms.\n\nIn most cases, plugin developers will be able to get away with just using `Get()` and `Has()`, while the rest of these functions are simply available for advanced and internal use. But again, I'm absolutely on board with streamlining the API if we can come up with a concrete way to do so without eliminating important features.", "markup": "markdown", "html": "<blockquote>\n<p>I'm having a hard time with these functions:</p>\n</blockquote>\n<p><code>GetOrCreate()</code> would essentially map to <code>std::map::insert(~)</code>, which will return an iterator to an entry if one already existed, or else create an entry based on the input arguments (it also returns a boolean to indicate whether the entry was actually inserted). Other than that, the summary is correct. <code>std::map</code> doesn't keep track of when an entry gets queried, so the idea of \"unquerying\" an entry is meaningless to it.</p>\n<p>I'm definitely open to API changes, as long as we maintain these features, which are all currently being used in the prototype examples.</p>\n<blockquote>\n<p>The QueryMode with Unquery also seems like a feature we can add later.</p>\n</blockquote>\n<p>Probably the most controversial feature will be the concept of keeping track of queries. This concept arose during the early design discussions between Steve, Ying, and I. The concern was that it would be easy for a plugin to either (1) be unable to handle some of the data types that it's given or (2) give data types that we can't do anything with, because compile-time knowledge of the data types is required in order to access them. This could result in silent issues that are difficult to debug where plugins aren't communicating with each other properly because they're handling different types of data. This motivates us to have a mechanism for identifying which data types each plugin is actually touching on versus which data types are being ignored. With that information, we can provide valuable sanity checks to make sure that these data structures are being handled properly and that plugins are actually utilizing the data that they're supposed to. This feature is already being used by the DART and ODE example plugins, and in fact it helped me immediately identify a mistake in my initial implementation of the DART plugin (there was a required data type that I was forgetting to handle).</p>\n<blockquote>\n<p>Is it possible to eliminate GetOrCreate right now? We can always add back in later if the need arises.</p>\n</blockquote>\n<p>We could merge together <code>Get()</code> and <code>GetOrCreate(~)</code> into one function that has the behavior of <code>GetOrCreate(~)</code>. I resisted doing this because I was afraid of cases like <code>data.Get&lt;T&gt;(5)</code> or <code>data.Get&lt;T&gt;(\"some string\")</code>. At first glance, this looks like you're asking for an object of type <code>T</code> at some integer or string key within a map. In actuality, what you're saying is \"get an object of type <code>T</code>, but if one doesn't already exist then create it with the constructor <code>T(5)</code> or <code>T(\"some string\")</code>\". So instead, I made it so that <code>Get&lt;T&gt;()</code> never accepts an argument, and a user needs to explicitly call <code>GetOrCreate&lt;T&gt;(...args...)</code> if they want to specify arguments to potentially construct the data type with when an entry for that type does not already exist. If that doesn't seem like a compelling rationale, I'm certainly open to merging the functions, but I would urge us to give it due consideration.</p>\n<p>Note that the behavior of <code>GetOrCreate(...)</code> is needed in order to support data types that don't have a default constructor. Otherwise, every time a user wants to \"get\" that data type, they would need to do something like </p>\n<div class=\"codehilite\"><pre><span></span>T* thing = data.Query&lt;T&gt;();\nif(!thing)\n  thing = &amp;data.Create&lt;T&gt;(args);\n</pre></div>\n\n\n<p>which I think is way too much code for doing such a basic operation.</p>\n<blockquote>\n<p>Adoption would be streamlined if an API similar to their is used here.</p>\n</blockquote>\n<p>Unfortunately, <code>operator[]</code> cannot accept template arguments, so we can't use that to streamline our API at all. We could rename some of the functions to be vaguely similar, like <code>GetOrCreate(...)</code> could be renamed <code>Insert(...)</code>, but that's the only obvious change that I can think of. I wouldn't suggest renaming <code>Query()</code> to <code>Find()</code> because it's not returning an iterator, and I wouldn't rename <code>Create()</code> to <code>Emplace()</code> since I think <code>Create()</code> is a much less intimidating function name.</p>\n<p>Given that our overall API for CompositeData is drastically simpler than the overall <code>std::map</code> API, I'm skeptical that there will be much we can realistically do to streamline it further without crippling ourselves. I suspect the biggest barrier is that this API doesn't feel as familiar because it's not able to use the usual STL container idioms.</p>\n<p>In most cases, plugin developers will be able to get away with just using <code>Get()</code> and <code>Has()</code>, while the rest of these functions are simply available for advanced and internal use. But again, I'm absolutely on board with streamlining the API if we can come up with a concrete way to do so without eliminating important features.</p>", "type": "rendered"}, "created_on": "2018-03-20T23:40:15.348145+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T23:47:42.360981+00:00", "type": "pullrequest_comment", "id": 59399063}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59396089.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59396089"}}, "parent": {"id": 59395947, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59395947.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59395947"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "0da5d346b047", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-physics/commits/0da5d346b047\" rel=\"nofollow\" class=\"ap-connect-link\">0da5d346b047</a></p>", "type": "rendered"}, "created_on": "2018-03-20T22:49:23.376509+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-20T22:49:23.380690+00:00", "type": "pullrequest_comment", "id": 59396089}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "CompositeData Part 1: Only implementation and tests", "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0da5d346b047", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/0da5d346b047.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/0da5d346b047"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-03-20T22:49:16.740555+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59395947.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59395947"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "some of the comments are still have data labels that should be removed", "markup": "markdown", "html": "<p>some of the comments are still have data labels that should be removed</p>", "type": "rendered"}, "created_on": "2018-03-20T22:46:34.446249+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-20T22:46:34.450051+00:00", "type": "pullrequest_comment", "id": 59395947}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59395257.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59395257"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "I'm having a hard time with these functions: `Get`, `GetOrCreate`, `Create`, Query`, and `Unquery`. Correct me if I'm wrong, but I believe this is a mapping of these functions to versions provided by `std::map`:\n\n* `Get()` == `std::map::operator[]`\n* `GetOrCreate() == no mapping to `std::map`\n* `Create()` == `std::map::emplace`\n* `Query()` == `std::map::find`, sort of.\n* `Unquery()` == no mapping to `std::map`.\n\nComposite data has many characteristics to `std::map`. Adoption would be streamlined if an API similar to their is used here. \n\nIs it possible to eliminate `GetOrCreate` right now? We can always add back in later if the need arises.\n\nThe `QueryMode` with `Unquery` also seems like a feature we can add later. ", "markup": "markdown", "html": "<p>I'm having a hard time with these functions: <code>Get</code>, <code>GetOrCreate</code>, <code>Create</code>, Query<code>, and</code>Unquery<code>. Correct me if I'm wrong, but I believe this is a mapping of these functions to versions provided by</code>std::map`:</p>\n<ul>\n<li><code>Get()</code> == <code>std::map::operator[]</code></li>\n<li><code>GetOrCreate() == no mapping to</code>std::map`</li>\n<li><code>Create()</code> == <code>std::map::emplace</code></li>\n<li><code>Query()</code> == <code>std::map::find</code>, sort of.</li>\n<li><code>Unquery()</code> == no mapping to <code>std::map</code>.</li>\n</ul>\n<p>Composite data has many characteristics to <code>std::map</code>. Adoption would be streamlined if an API similar to their is used here. </p>\n<p>Is it possible to eliminate <code>GetOrCreate</code> right now? We can always add back in later if the need arises.</p>\n<p>The <code>QueryMode</code> with <code>Unquery</code> also seems like a feature we can add later. </p>", "type": "rendered"}, "created_on": "2018-03-20T22:33:28.832237+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T22:33:28.836124+00:00", "type": "pullrequest_comment", "id": 59395257}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59393851.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59393851"}}, "parent": {"id": 59254998, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254998.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254998"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "I'm in favor of removing `CopyOption`. I see the potential value, it looks like feature creep without a concrete need. A more complex API can always be added later, while simplifying a complex API almost never happens.\n\nA `Copy()` function that equal `IDENTICAL`, and a `Merge()` that equals `HARD_MERGE` looks good.", "markup": "markdown", "html": "<p>I'm in favor of removing <code>CopyOption</code>. I see the potential value, it looks like feature creep without a concrete need. A more complex API can always be added later, while simplifying a complex API almost never happens.</p>\n<p>A <code>Copy()</code> function that equal <code>IDENTICAL</code>, and a <code>Merge()</code> that equals <code>HARD_MERGE</code> looks good.</p>", "type": "rendered"}, "created_on": "2018-03-20T22:09:49.110490+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T22:09:49.115663+00:00", "type": "pullrequest_comment", "id": 59393851}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59390265.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59390265"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "This is starting to look good to me. I'd like to branch out just a bit on [this topic](#!/ignitionrobotics/ign-physics/pull-requests/14).", "markup": "markdown", "html": "<p>This is starting to look good to me. I'd like to branch out just a bit on <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/pull-requests/14\" rel=\"nofollow\">this topic</a>.</p>", "type": "rendered"}, "created_on": "2018-03-20T21:18:10.712532+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T21:18:10.715762+00:00", "type": "pullrequest_comment", "id": 59390265}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "CompositeData Part 1: Only implementation and tests", "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "91d37d897018", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/91d37d897018.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/91d37d897018"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-03-20T21:03:59.960178+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59373747.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59373747"}}, "parent": {"id": 59372394, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59372394.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59372394"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Exactly right. The fact that the data is stored in the map based on its type information, and access to that map is rigidly protected by the `CompositeData` class ensures that we will never mistake the data types. There is one potential pitfall if there is a class name collision between libraries, but that's an ODR violation, and `std::any` would have similar issues in that kind of scenario.\n\nI've [opened an issue](#!/ignitionrobotics/ign-physics/issues/4/compare-performance-between-cloneable) for this.", "markup": "markdown", "html": "<p>Exactly right. The fact that the data is stored in the map based on its type information, and access to that map is rigidly protected by the <code>CompositeData</code> class ensures that we will never mistake the data types. There is one potential pitfall if there is a class name collision between libraries, but that's an ODR violation, and <code>std::any</code> would have similar issues in that kind of scenario.</p>\n<p>I've <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/issues/4/compare-performance-between-cloneable\" rel=\"nofollow\">opened an issue</a> for this.</p>", "type": "rendered"}, "created_on": "2018-03-20T18:21:54.801179+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T18:21:54.806365+00:00", "type": "pullrequest_comment", "id": 59373747}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59372394.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59372394"}}, "parent": {"id": 59266844, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59266844.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59266844"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Type safety in `CompositeData` is achieved through the use of `typeid(some_type).name()` in he map?\n\nCan you create an issue to capture the idea of comparing `std::any` to `Cloneable`+`MakeCloneable`?", "markup": "markdown", "html": "<p>Type safety in <code>CompositeData</code> is achieved through the use of <code>typeid(some_type).name()</code> in he map?</p>\n<p>Can you create an issue to capture the idea of comparing <code>std::any</code> to <code>Cloneable</code>+<code>MakeCloneable</code>?</p>", "type": "rendered"}, "created_on": "2018-03-20T18:08:08.032982+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T18:08:08.036943+00:00", "type": "pullrequest_comment", "id": 59372394}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59266844.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59266844"}}, "parent": {"id": 59261972, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59261972.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59261972"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "There are definitely strong conceptual parallels between the two, and `std::any` could serve the same purpose as `Cloneable` + `MakeCloneable` here.\n\nThe key difference is that `std::any` is intended for broader use cases, and as a result it has some overhead for ensuring type safety. The way we use `Cloneable` + `MakeCloneable` has no type safety overhead, which is fine in this context because our type safety is ensured very efficiently by the `CompositeData` class.\n\nSince `CompositeData` is likely to be a very significant hotspot in the physics engine pipelines, I would recommend that we do some very careful full-stack profiling before making the decision to switch to `std::any`. If the overhead turns out to be imperceptible, then it definitely makes sense to switch to `std::any`. Otherwise, we wouldn't lose much (in terms of maintenance) by hanging onto `Cloneable` + `MakeCloneable`, since their duties are very simple, straightforward, and stable.", "markup": "markdown", "html": "<p>There are definitely strong conceptual parallels between the two, and <code>std::any</code> could serve the same purpose as <code>Cloneable</code> + <code>MakeCloneable</code> here.</p>\n<p>The key difference is that <code>std::any</code> is intended for broader use cases, and as a result it has some overhead for ensuring type safety. The way we use <code>Cloneable</code> + <code>MakeCloneable</code> has no type safety overhead, which is fine in this context because our type safety is ensured very efficiently by the <code>CompositeData</code> class.</p>\n<p>Since <code>CompositeData</code> is likely to be a very significant hotspot in the physics engine pipelines, I would recommend that we do some very careful full-stack profiling before making the decision to switch to <code>std::any</code>. If the overhead turns out to be imperceptible, then it definitely makes sense to switch to <code>std::any</code>. Otherwise, we wouldn't lose much (in terms of maintenance) by hanging onto <code>Cloneable</code> + <code>MakeCloneable</code>, since their duties are very simple, straightforward, and stable.</p>", "type": "rendered"}, "created_on": "2018-03-20T00:28:51.184162+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T00:28:51.187326+00:00", "type": "pullrequest_comment", "id": 59266844}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59261972.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59261972"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "`Cloneable` and `MakeCloneable` seem to fill the same role as `std::any`, as far as I can tell. SFormat has need for `std::any`, and there are likely other instances. There are reference implementation of c++17's `std::any`. We could put one of those reference implementations into `ign-common`, and use it here and in sdformat. Once c++17 is available, we can switch.\n\nThen `CompositeData` will be some sugar on top of `std::any` and `std::map`.", "markup": "markdown", "html": "<p><code>Cloneable</code> and <code>MakeCloneable</code> seem to fill the same role as <code>std::any</code>, as far as I can tell. SFormat has need for <code>std::any</code>, and there are likely other instances. There are reference implementation of c++17's <code>std::any</code>. We could put one of those reference implementations into <code>ign-common</code>, and use it here and in sdformat. Once c++17 is available, we can switch.</p>\n<p>Then <code>CompositeData</code> will be some sugar on top of <code>std::any</code> and <code>std::map</code>.</p>", "type": "rendered"}, "created_on": "2018-03-19T22:51:30.270362+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-19T22:51:30.274716+00:00", "type": "pullrequest_comment", "id": 59261972}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59256177.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59256177"}}, "parent": {"id": 59254282, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254282.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254282"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "(2) is the main reason. It prevents users from using integers, which can easily go stale.\n\nMight not be immediately important right now, but conversions to/from messages (protobufs for example) to C-style structs/classes benefit from `enum class` for reason 2. The following example is brittle, and should be avoided:\n\n```\nmessage MyMsg\n{\n    enum Type\n    {\n        A = 1;\n    }\n\n    required Type type = 1;\n}\n\n// Somewhere is C code...\n\nclass ConvertedMsg\n{\n  enum Type\n  {\n     A = 1;\n   }\n   Type type;\n}\n\nMyMsg msg;\nConvertedMsg cmsg;\n\ncmsg.type = msg.type();\n}\n```\n\n\n", "markup": "markdown", "html": "<p>(2) is the main reason. It prevents users from using integers, which can easily go stale.</p>\n<p>Might not be immediately important right now, but conversions to/from messages (protobufs for example) to C-style structs/classes benefit from <code>enum class</code> for reason 2. The following example is brittle, and should be avoided:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">message</span> <span class=\"nx\">MyMsg</span>\n<span class=\"p\">{</span>\n    <span class=\"kr\">enum</span> <span class=\"nx\">Type</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">A</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">required</span> <span class=\"nx\">Type</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Somewhere is C code...</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">ConvertedMsg</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">enum</span> <span class=\"nx\">Type</span>\n  <span class=\"p\">{</span>\n     <span class=\"nx\">A</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"nx\">Type</span> <span class=\"nx\">type</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">MyMsg</span> <span class=\"nx\">msg</span><span class=\"p\">;</span>\n<span class=\"nx\">ConvertedMsg</span> <span class=\"nx\">cmsg</span><span class=\"p\">;</span>\n\n<span class=\"nx\">cmsg</span><span class=\"p\">.</span><span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-19T21:22:53.994134+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T21:22:53.997785+00:00", "type": "pullrequest_comment", "id": 59256177}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59255396.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59255396"}}, "parent": {"id": 59255130, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59255130.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59255130"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Great, thanks.", "markup": "markdown", "html": "<p>Great, thanks.</p>", "type": "rendered"}, "created_on": "2018-03-19T21:12:31.012983+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T21:12:31.016697+00:00", "type": "pullrequest_comment", "id": 59255396}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59255130.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59255130"}}, "parent": {"id": 59254659, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254659.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254659"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "It's possible now, but it wasn't possible in the original implementation of CompositeData, which required each data class to contain a macro.\n\nWe can throw away these data types and just use the plain STL types now. I'll make that change in my next pass-through.", "markup": "markdown", "html": "<p>It's possible now, but it wasn't possible in the original implementation of CompositeData, which required each data class to contain a macro.</p>\n<p>We can throw away these data types and just use the plain STL types now. I'll make that change in my next pass-through.</p>", "type": "rendered"}, "created_on": "2018-03-19T21:09:08.706106+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-03-19T21:09:26.059752+00:00", "type": "pullrequest_comment", "id": 59255130}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254998.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254998"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "One thing I'd appreciate for reviewers to give some thought to is whether `CopyOption` should be kept, modified, or removed.\n\nWe could simplify the API so that we just have a `Copy()` function that follows the `IDENTICAL` behavior and a `Merge()` function that follows the `HARD_MERGE` behavior. That might be more intuitive to users and cut down on some of the API noise that we currently have here.\n\nI'm pretty torn on what the right API should be for copy semantics. I'm tempted to on doing something STL-style with a predicate that decides which copy to use, but that's probably outside the scope of this PR.", "markup": "markdown", "html": "<p>One thing I'd appreciate for reviewers to give some thought to is whether <code>CopyOption</code> should be kept, modified, or removed.</p>\n<p>We could simplify the API so that we just have a <code>Copy()</code> function that follows the <code>IDENTICAL</code> behavior and a <code>Merge()</code> function that follows the <code>HARD_MERGE</code> behavior. That might be more intuitive to users and cut down on some of the API noise that we currently have here.</p>\n<p>I'm pretty torn on what the right API should be for copy semantics. I'm tempted to on doing something STL-style with a predicate that decides which copy to use, but that's probably outside the scope of this PR.</p>", "type": "rendered"}, "created_on": "2018-03-19T21:07:34.912471+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-19T21:07:34.916648+00:00", "type": "pullrequest_comment", "id": 59254998}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254902.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254902"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Nitpick. Can you place `&` and `*` next to the variable instead of next to the data type? The former is more explicit than the latter. ", "markup": "markdown", "html": "<p>Nitpick. Can you place <code>&amp;</code> and <code>*</code> next to the variable instead of next to the data type? The former is more explicit than the latter. </p>", "type": "rendered"}, "created_on": "2018-03-19T21:06:37.558136+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T21:06:37.561013+00:00", "type": "pullrequest_comment", "id": 59254902}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254659.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254659"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Why have these classes. Is it not possible to use `std::string` and POD types in the tests?", "markup": "markdown", "html": "<p>Why have these classes. Is it not possible to use <code>std::string</code> and POD types in the tests?</p>", "type": "rendered"}, "created_on": "2018-03-19T21:03:51.510864+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T21:03:51.513729+00:00", "type": "pullrequest_comment", "id": 59254659}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254282.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254282"}}, "parent": {"id": 59253166, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59253166.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59253166"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "We can, although this enum is already nested within the `CompositeData` class, so that might be a bit excessive. As far as I'm aware, there are three benefits to enum class:\n\n1. The enumerations are scoped within the enum class name\n2. The enumerations cannot be implicitly cast from an integer value\n3. The memory footprint of the enumeration type is better defined\n\n(1) isn't important in this case because the enumerations are already nested. If we made it an enum class, then we'd need to say `CompositeData::QueryMode::QUERY_[NORMAL|SILENT]` every time we want to specify the mode, instead of `CompositeData::QUERY_[NORMAL|SILENT]`. The enumerations are already protected by the `CompositeData` scope, so this isn't an advantage here, and just creates more typing.\n\n(2) is probably the most compelling reason to use an enum class in this case, but I think the benefit is relatively small.\n\n(3) is a non-issue since it's extremely unlikely that we'd ever need more than 1 byte worth of enumerations here.\n\nIf you still think it's worthwhile, I can certainly make the change; I just wanted to point out the trade offs before making the switch.", "markup": "markdown", "html": "<p>We can, although this enum is already nested within the <code>CompositeData</code> class, so that might be a bit excessive. As far as I'm aware, there are three benefits to enum class:</p>\n<ol>\n<li>The enumerations are scoped within the enum class name</li>\n<li>The enumerations cannot be implicitly cast from an integer value</li>\n<li>The memory footprint of the enumeration type is better defined</li>\n</ol>\n<p>(1) isn't important in this case because the enumerations are already nested. If we made it an enum class, then we'd need to say <code>CompositeData::QueryMode::QUERY_[NORMAL|SILENT]</code> every time we want to specify the mode, instead of <code>CompositeData::QUERY_[NORMAL|SILENT]</code>. The enumerations are already protected by the <code>CompositeData</code> scope, so this isn't an advantage here, and just creates more typing.</p>\n<p>(2) is probably the most compelling reason to use an enum class in this case, but I think the benefit is relatively small.</p>\n<p>(3) is a non-issue since it's extremely unlikely that we'd ever need more than 1 byte worth of enumerations here.</p>\n<p>If you still think it's worthwhile, I can certainly make the change; I just wanted to point out the trade offs before making the switch.</p>", "type": "rendered"}, "created_on": "2018-03-19T20:59:05.004409+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-03-19T20:59:05.007877+00:00", "type": "pullrequest_comment", "id": 59254282}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254264.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254264"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "`enum class`?", "markup": "markdown", "html": "<p><code>enum class</code>?</p>", "type": "rendered"}, "created_on": "2018-03-19T20:58:52.560530+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:58:52.564848+00:00", "type": "pullrequest_comment", "id": 59254264}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254238.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254238"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Same about `Count` vs `Num`.", "markup": "markdown", "html": "<p>Same about <code>Count</code> vs <code>Num</code>.</p>", "type": "rendered"}, "created_on": "2018-03-19T20:58:35.356814+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:58:35.360434+00:00", "type": "pullrequest_comment", "id": 59254238}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59254207.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59254207"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Can you rename this to `EntryCount`. This is the style other gazebo/ignition libraries use. The rationale is that a `Num` prefix requires a plural noun, which can be awkward because [English can be silly](https://www.grammarly.com/blog/plural-nouns/). ", "markup": "markdown", "html": "<p>Can you rename this to <code>EntryCount</code>. This is the style other gazebo/ignition libraries use. The rationale is that a <code>Num</code> prefix requires a plural noun, which can be awkward because <a data-is-external-link=\"true\" href=\"https://www.grammarly.com/blog/plural-nouns/\" rel=\"nofollow\">English can be silly</a>. </p>", "type": "rendered"}, "created_on": "2018-03-19T20:58:16.365442+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:58:16.368141+00:00", "type": "pullrequest_comment", "id": 59254207}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59253578.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59253578"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Missing `\\param[in] _mode` documentation. Same for the following function.", "markup": "markdown", "html": "<p>Missing <code>\\param[in] _mode</code> documentation. Same for the following function.</p>", "type": "rendered"}, "created_on": "2018-03-19T20:51:15.872880+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:51:37.645566+00:00", "type": "pullrequest_comment", "id": 59253578}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59253166.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59253166"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Can this be an `enum class`?", "markup": "markdown", "html": "<p>Can this be an <code>enum class</code>?</p>", "type": "rendered"}, "created_on": "2018-03-19T20:46:19.999643+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:46:20.004141+00:00", "type": "pullrequest_comment", "id": 59253166}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59252630.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59252630"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Missing `\\return`", "markup": "markdown", "html": "<p>Missing <code>\\return</code></p>", "type": "rendered"}, "created_on": "2018-03-19T20:40:18.943901+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:40:18.946778+00:00", "type": "pullrequest_comment", "id": 59252630}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59251691.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59251691"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Missing `\\return` documentation.", "markup": "markdown", "html": "<p>Missing <code>\\return</code> documentation.</p>", "type": "rendered"}, "created_on": "2018-03-19T20:29:24.601511+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:29:24.605984+00:00", "type": "pullrequest_comment", "id": 59251691}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"update": {"description": "This pull request is a spin-off of pull request #1. This only includes the implementation of the generic CompositeData class, without any of the data specification or template metaprogramming.", "title": "CompositeData Part 1: Only implementation and tests", "destination": {"commit": {"hash": "efbccce50bc9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/efbccce50bc9.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/efbccce50bc9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "de12136388e0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/commit/de12136388e0.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/commits/de12136388e0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics"}, "avatar": {"href": "data/bytebucket.org/ravatar/{63a01c4f-5625-443b-96f0-73c4005ccada}ts=c_plus_plus"}}, "type": "repository", "name": "ign-physics", "full_name": "ignitionrobotics/ign-physics", "uuid": "{63a01c4f-5625-443b-96f0-73c4005ccada}"}, "branch": {"name": "JustCompositeData"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2018-03-19T20:21:46.750583+00:00"}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/comments/59250933.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4/_/diff#comment-59250933"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}, "content": {"raw": "Missing `_other` documentation, and also on the next function.", "markup": "markdown", "html": "<p>Missing <code>_other</code> documentation, and also on the next function.</p>", "type": "rendered"}, "created_on": "2018-03-19T20:21:21.998409+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-03-19T20:21:22.002174+00:00", "type": "pullrequest_comment", "id": 59250933}, "pull_request": {"type": "pullrequest", "id": 4, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/4"}}, "title": "Part 1: CompositeData implementation and tests"}}], "next": "data/repositories/ignitionrobotics/ign-physics/pullrequests/4/activity_ctx=xnFK6UAS7.json"}