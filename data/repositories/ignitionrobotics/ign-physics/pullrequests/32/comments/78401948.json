{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32/comments/78401948.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:4e6b0de2ba7d..692cb69975f7?path=include%2Fignition%2Fphysics%2Fdetail%2FEntity.hh"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/32/_/diff#comment-78401948"}}, "parent": {"id": 78398366, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32/comments/78398366.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/32/_/diff#comment-78398366"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/32.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/32"}}, "title": "Feature System Part 7: Features for programmatic construction of objects"}, "content": {"raw": "Yes.  I had to add the following in order for the move constructor of `std::shared_ptr` to be called \\(sorry for the verbosity\\).\n\n\u200c\n\n```diff\ndiff -r 20c870a6887a include/ignition/physics/Entity.hh\n--- a/include/ignition/physics/Entity.hh\tFri Oct 05 21:17:34 2018 -0500\n+++ b/include/ignition/physics/Entity.hh\tMon Oct 08 19:18:20 2018 -0500\n@@ -243,6 +243,9 @@\n         const std::shared_ptr<Pimpl> &_pimpl = nullptr,\n         const Identity &_identity = Identity());\n \n+      protected: Entity(\n+        std::shared_ptr<Pimpl> &&_pimpl,\n+        const Identity &_identity = Identity());\n       /// \\brief Get a pointer to the implementation of FeatureT.\n       ///\n       /// This is a convenience function so that entities don't have to query\ndiff -r 20c870a6887a include/ignition/physics/detail/Entity.hh\n--- a/include/ignition/physics/detail/Entity.hh\tFri Oct 05 21:17:34 2018 -0500\n+++ b/include/ignition/physics/detail/Entity.hh\tMon Oct 08 19:18:20 2018 -0500\n@@ -329,6 +329,15 @@\n       // Do nothing\n     }\n \n+    template <typename Policy, typename Features>\n+    Entity<Policy, Features>::Entity(\n+        std::shared_ptr<Pimpl> &&_pimpl,\n+        const Identity &_identity)\n+      : pimpl(std::move(_pimpl)),\n+        identity(_identity)\n+    {\n+      // Do nothing\n+    }\n     /////////////////////////////////////////////////\n     template <typename Policy, typename Features>\n     template <typename FeatureT>\ndiff -r 20c870a6887a include/ignition/physics/detail/FeatureList.hh\n--- a/include/ignition/physics/detail/FeatureList.hh\tFri Oct 05 21:17:34 2018 -0500\n+++ b/include/ignition/physics/detail/FeatureList.hh\tMon Oct 08 19:18:20 2018 -0500\n@@ -457,6 +457,9 @@\n     public: X(const std::shared_ptr<typename Base::Pimpl> &_pimpl, \\\n               const Identity &_identity) \\\n       : Entity<PolicyT, FeaturesT>(_pimpl, _identity) { } \\\n+    public: X(std::shared_ptr<typename Base::Pimpl> &&_pimpl, \\\n+              const Identity &_identity) \\\n+      : Entity<PolicyT, FeaturesT>(std::move(_pimpl), _identity) { } \\\n   }; \\\n   template <typename PolicyT, typename FeaturesT> \\\n   using X ## Ptr = ::ignition::physics::EntityPtr< \\\n```", "markup": "markdown", "html": "<p>Yes.  I had to add the following in order for the move constructor of <code>std::shared_ptr</code> to be called (sorry for the verbosity).</p>\n<p>\u200c</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 20c870a6887a include/ignition/physics/Entity.hh</span>\n<span class=\"gd\">--- a/include/ignition/physics/Entity.hh    Fri Oct 05 21:17:34 2018 -0500</span>\n<span class=\"gi\">+++ b/include/ignition/physics/Entity.hh    Mon Oct 08 19:18:20 2018 -0500</span>\n<span class=\"gu\">@@ -243,6 +243,9 @@</span>\n         const std::shared_ptr&lt;Pimpl&gt; &amp;_pimpl = nullptr,\n         const Identity &amp;_identity = Identity());\n\n<span class=\"gi\">+      protected: Entity(</span>\n<span class=\"gi\">+        std::shared_ptr&lt;Pimpl&gt; &amp;&amp;_pimpl,</span>\n<span class=\"gi\">+        const Identity &amp;_identity = Identity());</span>\n       /// \\brief Get a pointer to the implementation of FeatureT.\n       ///\n       /// This is a convenience function so that entities don&#39;t have to query\n<span class=\"gh\">diff -r 20c870a6887a include/ignition/physics/detail/Entity.hh</span>\n<span class=\"gd\">--- a/include/ignition/physics/detail/Entity.hh Fri Oct 05 21:17:34 2018 -0500</span>\n<span class=\"gi\">+++ b/include/ignition/physics/detail/Entity.hh Mon Oct 08 19:18:20 2018 -0500</span>\n<span class=\"gu\">@@ -329,6 +329,15 @@</span>\n       // Do nothing\n     }\n\n<span class=\"gi\">+    template &lt;typename Policy, typename Features&gt;</span>\n<span class=\"gi\">+    Entity&lt;Policy, Features&gt;::Entity(</span>\n<span class=\"gi\">+        std::shared_ptr&lt;Pimpl&gt; &amp;&amp;_pimpl,</span>\n<span class=\"gi\">+        const Identity &amp;_identity)</span>\n<span class=\"gi\">+      : pimpl(std::move(_pimpl)),</span>\n<span class=\"gi\">+        identity(_identity)</span>\n<span class=\"gi\">+    {</span>\n<span class=\"gi\">+      // Do nothing</span>\n<span class=\"gi\">+    }</span>\n     /////////////////////////////////////////////////\n     template &lt;typename Policy, typename Features&gt;\n     template &lt;typename FeatureT&gt;\n<span class=\"gh\">diff -r 20c870a6887a include/ignition/physics/detail/FeatureList.hh</span>\n<span class=\"gd\">--- a/include/ignition/physics/detail/FeatureList.hh    Fri Oct 05 21:17:34 2018 -0500</span>\n<span class=\"gi\">+++ b/include/ignition/physics/detail/FeatureList.hh    Mon Oct 08 19:18:20 2018 -0500</span>\n<span class=\"gu\">@@ -457,6 +457,9 @@</span>\n     public: X(const std::shared_ptr&lt;typename Base::Pimpl&gt; &amp;_pimpl, \\\n               const Identity &amp;_identity) \\\n       : Entity&lt;PolicyT, FeaturesT&gt;(_pimpl, _identity) { } \\\n<span class=\"gi\">+    public: X(std::shared_ptr&lt;typename Base::Pimpl&gt; &amp;&amp;_pimpl, \\</span>\n<span class=\"gi\">+              const Identity &amp;_identity) \\</span>\n<span class=\"gi\">+      : Entity&lt;PolicyT, FeaturesT&gt;(std::move(_pimpl), _identity) { } \\</span>\n   }; \\\n   template &lt;typename PolicyT, typename FeaturesT&gt; \\\n   using X ## Ptr = ::ignition::physics::EntityPtr&lt; \\\n</pre></div>", "type": "rendered"}, "created_on": "2018-10-09T00:52:19.516982+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 262, "from": null, "outdated": true, "path": "include/ignition/physics/detail/Entity.hh"}, "updated_on": "2018-10-09T00:52:19.528612+00:00", "type": "pullrequest_comment", "id": 78401948}