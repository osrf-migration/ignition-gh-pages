{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments/62868698.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5/_/diff#comment-62868698"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5"}}, "title": "Part 2: CompositeData, SpecifyData implementation and tests"}, "content": {"raw": "One thing I'd like to draw attention to was @sloretz 's [proposal a while back](#!/ignitionrobotics/ign-physics/pull-requests/5/part-2-compositedata-specifydata/activity#comment-45022763) about naming `ExpectData<T>` to `OptionalData<T>`, because it might be unclear what the difference is between `Expected` and `Required`.\n\nI'm definitely open to this idea. I think my only hesitation is that having an `Optional<T>` class might lead users to think that they need to specify every `T` that the object is able to accept (kind of like the [C++17 `std::variant` class](http://en.cppreference.com/w/cpp/utility/variant)). In reality, every type is already considered optional, while the `ExpectData<T>` class gives special performance benefits to any types that are specified.\n\nI would appreciate more opinions on this, because I'm not sure if the current name is appropriate, or if we should try to improve it.", "markup": "markdown", "html": "<p>One thing I'd like to draw attention to was @sloretz 's <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/pull-requests/5/part-2-compositedata-specifydata/activity#comment-45022763\" rel=\"nofollow\">proposal a while back</a> about naming <code>ExpectData&lt;T&gt;</code> to <code>OptionalData&lt;T&gt;</code>, because it might be unclear what the difference is between <code>Expected</code> and <code>Required</code>.</p>\n<p>I'm definitely open to this idea. I think my only hesitation is that having an <code>Optional&lt;T&gt;</code> class might lead users to think that they need to specify every <code>T</code> that the object is able to accept (kind of like the <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/utility/variant\" rel=\"nofollow\">C++17 <code>std::variant</code> class</a>). In reality, every type is already considered optional, while the <code>ExpectData&lt;T&gt;</code> class gives special performance benefits to any types that are specified.</p>\n<p>I would appreciate more opinions on this, because I'm not sure if the current name is appropriate, or if we should try to improve it.</p>", "type": "rendered"}, "created_on": "2018-04-27T18:13:18.428985+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-04-27T18:13:18.441812+00:00", "type": "pullrequest_comment", "id": 62868698}