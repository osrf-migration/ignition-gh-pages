{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments/62521928.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:e42648072940..8eb69edea97d?path=include%2Fignition%2Fphysics%2FSpecifyData.hh"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5/_/diff#comment-62521928"}}, "parent": {"id": 62521762, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments/62521762.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5/_/diff#comment-62521762"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5"}}, "title": "Part 2: CompositeData, SpecifyData implementation and tests"}, "content": {"raw": "This function is merely shadowing the `CompositeData::MakeRequired<T>(~)` function. There is no difference between the following two code snippets:\n\n```\nCompositeData data;\ndata.MakeRequired<Foo>();\ndata.MakeRequired<Bar>();\n```\nand\n\n```\nExpectData<Foo> data;\ndata.MakeRequired<Foo>();\ndata.MakeRequired<Bar>();\n```\n\nexcept that in the second one, line 2 will take something like a nanosecond (or less) instead of something on the order of microseconds. The speed of line 3 will be the same, because `Bar` wasn't expected.\n\n`ExpectData<T>` doesn't add any functionality over the generic `CompositeData` class except that when you perform operations involving the expected types, the performance is a few orders of magnitude faster. This is beneficial if you know what types you care about at compile time (which is usually the case).", "markup": "markdown", "html": "<p>This function is merely shadowing the <code>CompositeData::MakeRequired&lt;T&gt;(~)</code> function. There is no difference between the following two code snippets:</p>\n<div class=\"codehilite\"><pre><span></span>CompositeData data;\ndata.MakeRequired&lt;Foo&gt;();\ndata.MakeRequired&lt;Bar&gt;();\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>ExpectData&lt;Foo&gt; data;\ndata.MakeRequired&lt;Foo&gt;();\ndata.MakeRequired&lt;Bar&gt;();\n</pre></div>\n\n\n<p>except that in the second one, line 2 will take something like a nanosecond (or less) instead of something on the order of microseconds. The speed of line 3 will be the same, because <code>Bar</code> wasn't expected.</p>\n<p><code>ExpectData&lt;T&gt;</code> doesn't add any functionality over the generic <code>CompositeData</code> class except that when you perform operations involving the expected types, the performance is a few orders of magnitude faster. This is beneficial if you know what types you care about at compile time (which is usually the case).</p>", "type": "rendered"}, "created_on": "2018-04-25T00:39:23.091409+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/physics/SpecifyData.hh"}, "updated_on": "2018-04-25T00:40:12.532609+00:00", "type": "pullrequest_comment", "id": 62521928}