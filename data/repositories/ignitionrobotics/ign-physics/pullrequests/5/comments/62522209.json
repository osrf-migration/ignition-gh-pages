{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments/62522209.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:e42648072940..8eb69edea97d?path=include%2Fignition%2Fphysics%2FSpecifyData.hh"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5/_/diff#comment-62522209"}}, "parent": {"id": 62522066, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments/62522066.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5/_/diff#comment-62522066"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5"}}, "title": "Part 2: CompositeData, SpecifyData implementation and tests"}, "content": {"raw": "Thanks (tutorial fodder). And, did you mix up the placement of `EXPECT_FALSE(FooData::AlwaysRequires<Bar>());` and `EXPECT_FALSE(data.Requires<Bar>());` with respect to the comments? For example, should your example be:\n\n```\nusing FooData = RequireData<Foo>\nFooData data;\n\n// AlwaysRequires can NOT be called on an instance (Can this be reworded as AlwaysRequird will return false on an instance?)\nEXPECT_TRUE(FooData::AlwaysRequires<Foo>());\nEXPECT_FALSE(data.AlwaysRequires<Bar>());\n\n// Requires can ONLY be called on an instance\nEXPECT_TRUE(data.Requires<Foo>());\nEXPECT_FALSE(FooData::Requires<Bar>());\n\n// Requires() return value can change during runtime\ndata.MakeRequired<Bar>();\nEXPECT_TRUE(data.Requires<Bar>());\n\n// AlwaysRequires is determined from type information at compile time, so it can never change\nEXPECT_FALSE(FooData::AlwaysRequires<Bar>());\n```", "markup": "markdown", "html": "<p>Thanks (tutorial fodder). And, did you mix up the placement of <code>EXPECT_FALSE(FooData::AlwaysRequires&lt;Bar&gt;());</code> and <code>EXPECT_FALSE(data.Requires&lt;Bar&gt;());</code> with respect to the comments? For example, should your example be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">using</span> <span class=\"nt\">FooData</span> <span class=\"o\">=</span> <span class=\"nt\">RequireData</span><span class=\"o\">&lt;</span><span class=\"nt\">Foo</span><span class=\"o\">&gt;</span>\n<span class=\"nt\">FooData</span> <span class=\"nt\">data</span><span class=\"o\">;</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">AlwaysRequires</span> <span class=\"nt\">can</span> <span class=\"nt\">NOT</span> <span class=\"nt\">be</span> <span class=\"nt\">called</span> <span class=\"nt\">on</span> <span class=\"nt\">an</span> <span class=\"nt\">instance</span> <span class=\"o\">(</span><span class=\"nt\">Can</span> <span class=\"nt\">this</span> <span class=\"nt\">be</span> <span class=\"nt\">reworded</span> <span class=\"nt\">as</span> <span class=\"nt\">AlwaysRequird</span> <span class=\"nt\">will</span> <span class=\"nt\">return</span> <span class=\"nt\">false</span> <span class=\"nt\">on</span> <span class=\"nt\">an</span> <span class=\"nt\">instance</span><span class=\"o\">?)</span>\n<span class=\"nt\">EXPECT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">FooData</span><span class=\"p\">::</span><span class=\"nd\">AlwaysRequires</span><span class=\"o\">&lt;</span><span class=\"nt\">Foo</span><span class=\"o\">&gt;());</span>\n<span class=\"nt\">EXPECT_FALSE</span><span class=\"o\">(</span><span class=\"nt\">data</span><span class=\"p\">.</span><span class=\"nc\">AlwaysRequires</span><span class=\"o\">&lt;</span><span class=\"nt\">Bar</span><span class=\"o\">&gt;());</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">Requires</span> <span class=\"nt\">can</span> <span class=\"nt\">ONLY</span> <span class=\"nt\">be</span> <span class=\"nt\">called</span> <span class=\"nt\">on</span> <span class=\"nt\">an</span> <span class=\"nt\">instance</span>\n<span class=\"nt\">EXPECT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">data</span><span class=\"p\">.</span><span class=\"nc\">Requires</span><span class=\"o\">&lt;</span><span class=\"nt\">Foo</span><span class=\"o\">&gt;());</span>\n<span class=\"nt\">EXPECT_FALSE</span><span class=\"o\">(</span><span class=\"nt\">FooData</span><span class=\"p\">::</span><span class=\"nd\">Requires</span><span class=\"o\">&lt;</span><span class=\"nt\">Bar</span><span class=\"o\">&gt;());</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">Requires</span><span class=\"o\">()</span> <span class=\"nt\">return</span> <span class=\"nt\">value</span> <span class=\"nt\">can</span> <span class=\"nt\">change</span> <span class=\"nt\">during</span> <span class=\"nt\">runtime</span>\n<span class=\"nt\">data</span><span class=\"p\">.</span><span class=\"nc\">MakeRequired</span><span class=\"o\">&lt;</span><span class=\"nt\">Bar</span><span class=\"o\">&gt;();</span>\n<span class=\"nt\">EXPECT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">data</span><span class=\"p\">.</span><span class=\"nc\">Requires</span><span class=\"o\">&lt;</span><span class=\"nt\">Bar</span><span class=\"o\">&gt;());</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">AlwaysRequires</span> <span class=\"nt\">is</span> <span class=\"nt\">determined</span> <span class=\"nt\">from</span> <span class=\"nt\">type</span> <span class=\"nt\">information</span> <span class=\"nt\">at</span> <span class=\"nt\">compile</span> <span class=\"nt\">time</span><span class=\"o\">,</span> <span class=\"nt\">so</span> <span class=\"nt\">it</span> <span class=\"nt\">can</span> <span class=\"nt\">never</span> <span class=\"nt\">change</span>\n<span class=\"nt\">EXPECT_FALSE</span><span class=\"o\">(</span><span class=\"nt\">FooData</span><span class=\"p\">::</span><span class=\"nd\">AlwaysRequires</span><span class=\"o\">&lt;</span><span class=\"nt\">Bar</span><span class=\"o\">&gt;());</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-04-25T00:52:58.576001+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/physics/SpecifyData.hh"}, "updated_on": "2018-04-25T00:52:58.582488+00:00", "type": "pullrequest_comment", "id": 62522209}