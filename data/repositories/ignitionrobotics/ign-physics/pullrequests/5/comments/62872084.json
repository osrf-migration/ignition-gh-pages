{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments/62872084.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:bc902981b001..8eb69edea97d?path=src%2FSpecifyData_TEST.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5/_/diff#comment-62872084"}}, "parent": {"id": 62871407, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5/comments/62871407.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5/_/diff#comment-62871407"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/5.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/5"}}, "title": "Part 2: CompositeData, SpecifyData implementation and tests"}, "content": {"raw": "I'm certainly open to it, although I would urge some caution. I'm not sure if we really want to encourage using primitive data entries in a `CompositeData` object.\n\nThe underlying motivation of `CompositeData` is to enable backend plugin developers to embed their library's own data types into our pipelines. Encouraging the use of primitive types could easily confuse the pipeline, because how would any plugin know whether the `composite.Get<int>()` is their own `int` or whether it may have been overridden by another plugin's `composite.Get<int>()`?\n\nSupporting other commonly used types like `std::string` is an inevitable consequence of wanting to support arbitrary classes, so it would not be practical to block plugin developers from using those. But supporting primitives involves an active effort on our part, and I'm worried that might send the wrong message about what the purpose of this class is.", "markup": "markdown", "html": "<p>I'm certainly open to it, although I would urge some caution. I'm not sure if we really want to encourage using primitive data entries in a <code>CompositeData</code> object.</p>\n<p>The underlying motivation of <code>CompositeData</code> is to enable backend plugin developers to embed their library's own data types into our pipelines. Encouraging the use of primitive types could easily confuse the pipeline, because how would any plugin know whether the <code>composite.Get&lt;int&gt;()</code> is their own <code>int</code> or whether it may have been overridden by another plugin's <code>composite.Get&lt;int&gt;()</code>?</p>\n<p>Supporting other commonly used types like <code>std::string</code> is an inevitable consequence of wanting to support arbitrary classes, so it would not be practical to block plugin developers from using those. But supporting primitives involves an active effort on our part, and I'm worried that might send the wrong message about what the purpose of this class is.</p>", "type": "rendered"}, "created_on": "2018-04-27T18:56:50.767412+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": false, "path": "src/SpecifyData_TEST.cc"}, "updated_on": "2018-04-27T18:56:50.773764+00:00", "type": "pullrequest_comment", "id": 62872084}