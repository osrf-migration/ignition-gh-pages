{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/8/comments/47934325.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-physics/diff/ignitionrobotics/ign-physics:55c161130d8a..e95ce8514c46?path=ignition-physics-ode%2FBuggyDemoController.cc"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/8/_/diff#comment-47934325"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 8, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/8.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/8"}}, "title": "Create a Buggy plugin using ODE to demonstrate the buggyDemo"}, "content": {"raw": "A possible alternative to embedding the different body poses as their own types would be to add an interface to the plugin which can convert from a body name (string) to a body index (integer). You could then query the plugin for the indices of each of the bodies based on their names, and then use the standard output data (`WorldPoses`) to read the poses of the bodies that you're interested in.\n\nA big part of my motivation behind embedding the end effector pose as a data type in the DART example was to demonstrate the flexibility of CompositeData by giving it a non-standard data type. Here it might be valuable to show that custom data types aren't necessarily needed since you could just use the standard `WorldPoses` to get the pose data.\n\nI think in the final design of the physics engine plugin concept, we'll want a plugin interface that can map from body names to body indices anyway, so this might be a good chance to explore what that interface may look like.\n\nTo be clear, this comment is just a suggestion; I wouldn't have any problem with leaving this the way it is.", "markup": "markdown", "html": "<p>A possible alternative to embedding the different body poses as their own types would be to add an interface to the plugin which can convert from a body name (string) to a body index (integer). You could then query the plugin for the indices of each of the bodies based on their names, and then use the standard output data (<code>WorldPoses</code>) to read the poses of the bodies that you're interested in.</p>\n<p>A big part of my motivation behind embedding the end effector pose as a data type in the DART example was to demonstrate the flexibility of CompositeData by giving it a non-standard data type. Here it might be valuable to show that custom data types aren't necessarily needed since you could just use the standard <code>WorldPoses</code> to get the pose data.</p>\n<p>I think in the final design of the physics engine plugin concept, we'll want a plugin interface that can map from body names to body indices anyway, so this might be a good chance to explore what that interface may look like.</p>\n<p>To be clear, this comment is just a suggestion; I wouldn't have any problem with leaving this the way it is.</p>", "type": "rendered"}, "created_on": "2017-10-25T01:22:17.000811+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 330, "from": null, "outdated": true, "path": "ignition-physics-ode/BuggyDemoController.cc"}, "updated_on": "2017-10-25T01:23:09.052838+00:00", "type": "pullrequest_comment", "id": 47934325}