{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59391843.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59391843"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "Having a mechanism to test for memory leaks is a great idea, and would be extremely valuable.\n\nChecking *all* tests for memory leaks as a mandatory part of CI does seem like overkill, especially since many of the tests are obviously going to be leak-free simply due to their simplicity, and in my experience comprehensive memory checks tend to add a considerable amount of runtime overhead.\n\nHaving a specific category of `memory` tests (to go along with `integration`, `performance`, `regression`) would be my preference, even if it adds more work. Those tests could focus on trying to stress out any of our classes that are responsible in some way for memory management (`CompositeData` being a good example of this). So I like option (c) that's being done in this PR.\n\nWe could certainly use `ign-cmake` to facilitate this. I can think of three ways to do that:\n\n1. Add a new cmake function like `ign_build_memory_tests(~)` which is analogous to `ign_build_tests(~)`\n\n2. Add an optional `MEMORY` argument to `ign_build_tests(~)` which will run the executable through valgrind instead of simply running the executable.\n\n3. Make it so that `ign_build_tests(TYPE MEMORY ...)` will have special behavior and create tests that run through valgrind instead of using gtest.\n\nAny one of these options should make it so that `make test` will run the memory tests, without any involvement from gtest. I think (3) would be the most elegant, but I'm certainly open to alternatives.", "markup": "markdown", "html": "<p>Having a mechanism to test for memory leaks is a great idea, and would be extremely valuable.</p>\n<p>Checking <em>all</em> tests for memory leaks as a mandatory part of CI does seem like overkill, especially since many of the tests are obviously going to be leak-free simply due to their simplicity, and in my experience comprehensive memory checks tend to add a considerable amount of runtime overhead.</p>\n<p>Having a specific category of <code>memory</code> tests (to go along with <code>integration</code>, <code>performance</code>, <code>regression</code>) would be my preference, even if it adds more work. Those tests could focus on trying to stress out any of our classes that are responsible in some way for memory management (<code>CompositeData</code> being a good example of this). So I like option (c) that's being done in this PR.</p>\n<p>We could certainly use <code>ign-cmake</code> to facilitate this. I can think of three ways to do that:</p>\n<ol>\n<li>\n<p>Add a new cmake function like <code>ign_build_memory_tests(~)</code> which is analogous to <code>ign_build_tests(~)</code></p>\n</li>\n<li>\n<p>Add an optional <code>MEMORY</code> argument to <code>ign_build_tests(~)</code> which will run the executable through valgrind instead of simply running the executable.</p>\n</li>\n<li>\n<p>Make it so that <code>ign_build_tests(TYPE MEMORY ...)</code> will have special behavior and create tests that run through valgrind instead of using gtest.</p>\n</li>\n</ol>\n<p>Any one of these options should make it so that <code>make test</code> will run the memory tests, without any involvement from gtest. I think (3) would be the most elegant, but I'm certainly open to alternatives.</p>", "type": "rendered"}, "created_on": "2018-03-20T21:39:20.346134+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T21:39:20.349394+00:00", "type": "pullrequest_comment", "id": 59391843}