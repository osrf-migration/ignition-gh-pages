{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59391572.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59391572"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "I think valgrind might have an extra memory check or two, but it is possible to run tests with sanitizers using only arguments to cmake. And advantage is a problem detected by a sanitizer causes the test to return non zero exit code, so it looks like a test failure and can be part of normal testing rather than an extra step in pipelines.\n\nIt would look roughly like this. `gcc` has some sanitizer support, so the `clang` compiler part isn't strictly necessary.\n\n```\nexport SANITIZERS=\"-fsanitize=address -fsanitize=undefined\"\ncmake .. \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DCMAKE_C_COMPILER=\"/usr/bin/clang-6.0\" \\\n    -DCMAKE_CXX_COMPILER=\"/usr/bin/clang++-6.0\" \\\n    -DCMAKE_C_FLAGS=\"$SANITIZERS\" \\\n    -DCMAKE_CXX_FLAGS=\"$SANITIZERS\" \\\n    -DCMAKE_EXE_LINKER_FLAGS=\"$SANITIZERS\" \\\n    -DCMAKE_SHARED_LINKER_FLAGS=\"$SANITIZERS\" \\\n    -DCMAKE_MODULE_LINKER_FLAGS=\"$SANITIZERS\"\n\nmake -j 8\nmake test\n```", "markup": "markdown", "html": "<p>I think valgrind might have an extra memory check or two, but it is possible to run tests with sanitizers using only arguments to cmake. And advantage is a problem detected by a sanitizer causes the test to return non zero exit code, so it looks like a test failure and can be part of normal testing rather than an extra step in pipelines.</p>\n<p>It would look roughly like this. <code>gcc</code> has some sanitizer support, so the <code>clang</code> compiler part isn't strictly necessary.</p>\n<div class=\"codehilite\"><pre><span></span>export SANITIZERS=&quot;-fsanitize=address -fsanitize=undefined&quot;\ncmake .. \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DCMAKE_C_COMPILER=&quot;/usr/bin/clang-6.0&quot; \\\n    -DCMAKE_CXX_COMPILER=&quot;/usr/bin/clang++-6.0&quot; \\\n    -DCMAKE_C_FLAGS=&quot;$SANITIZERS&quot; \\\n    -DCMAKE_CXX_FLAGS=&quot;$SANITIZERS&quot; \\\n    -DCMAKE_EXE_LINKER_FLAGS=&quot;$SANITIZERS&quot; \\\n    -DCMAKE_SHARED_LINKER_FLAGS=&quot;$SANITIZERS&quot; \\\n    -DCMAKE_MODULE_LINKER_FLAGS=&quot;$SANITIZERS&quot;\n\nmake -j 8\nmake test\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-20T21:35:33.463133+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-03-20T21:35:33.466255+00:00", "type": "pullrequest_comment", "id": 59391572}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392059.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392059"}}, "parent": {"id": 59391572, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59391572.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59391572"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "It seems that the `valgrind` command will exit with 1 on a memcheck error when given the argument `--memcheck:error-exitcode=1`, so we should be able to add a valid cmake test that runs the test executable through valgrind, if I understand correctly.", "markup": "markdown", "html": "<p>It seems that the <code>valgrind</code> command will exit with 1 on a memcheck error when given the argument <code>--memcheck:error-exitcode=1</code>, so we should be able to add a valid cmake test that runs the test executable through valgrind, if I understand correctly.</p>", "type": "rendered"}, "created_on": "2018-03-20T21:42:37.390451+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T21:42:37.393121+00:00", "type": "pullrequest_comment", "id": 59392059}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392385.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392385"}}, "parent": {"id": 59392059, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392059.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392059"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "Yes, that is correct. Valgrind will exit with 1 on error, which should cause CI to fail.\n\nCan a compile-time sanitizer really check for all memory leaks without actually running the code?", "markup": "markdown", "html": "<p>Yes, that is correct. Valgrind will exit with 1 on error, which should cause CI to fail.</p>\n<p>Can a compile-time sanitizer really check for all memory leaks without actually running the code?</p>", "type": "rendered"}, "created_on": "2018-03-20T21:47:09.437084+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T21:47:09.440179+00:00", "type": "pullrequest_comment", "id": 59392385}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392509.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392509"}}, "parent": {"id": 59392385, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392385.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392385"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "After compiling with sanitizers the code must be run to detect leaks . The sanitizer adds instrumentation - extra instructions - to the executables. It will tell you leaks that happen at run time.", "markup": "markdown", "html": "<p>After compiling with sanitizers the code must be run to detect leaks . The sanitizer adds instrumentation - extra instructions - to the executables. It will tell you leaks that happen at run time.</p>", "type": "rendered"}, "created_on": "2018-03-20T21:48:56.799295+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-03-20T21:48:56.802970+00:00", "type": "pullrequest_comment", "id": 59392509}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392632.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392632"}}, "parent": {"id": 59392509, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392509.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392509"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "If I'm understanding the sanitizer docs correctly, the compiler sanitizer can make it so that the executable returns a non-zero exit code when a memory leak issue is detected, even if the program would have exited normally.\n\nEdit: And now I'm realizing that's basically what you're saying in your reply.", "markup": "markdown", "html": "<p>If I'm understanding the sanitizer docs correctly, the compiler sanitizer can make it so that the executable returns a non-zero exit code when a memory leak issue is detected, even if the program would have exited normally.</p>\n<p>Edit: And now I'm realizing that's basically what you're saying in your reply.</p>", "type": "rendered"}, "created_on": "2018-03-20T21:50:57.400116+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T21:51:58.584307+00:00", "type": "pullrequest_comment", "id": 59392632}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392747.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392747"}}, "parent": {"id": 59392632, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392632.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392632"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "It would be nice to avoid a dependency on valgrind. Does anyone know the tradeoffs  between these two options?", "markup": "markdown", "html": "<p>It would be nice to avoid a dependency on valgrind. Does anyone know the tradeoffs  between these two options?</p>", "type": "rendered"}, "created_on": "2018-03-20T21:52:30.503208+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T21:52:30.506953+00:00", "type": "pullrequest_comment", "id": 59392747}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392874.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392874"}}, "parent": {"id": 59392747, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392747.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392747"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "Here are trade offs of lots of options\n\nhttps://github.com/google/sanitizers/wiki/AddressSanitizerComparisonOfMemoryTools", "markup": "markdown", "html": "<p>Here are trade offs of lots of options</p>\n<p><a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizerComparisonOfMemoryTools\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/google/sanitizers/wiki/AddressSanitizerComparisonOfMemoryTools</a></p>", "type": "rendered"}, "created_on": "2018-03-20T21:54:27.926970+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-03-20T21:54:27.934412+00:00", "type": "pullrequest_comment", "id": 59392874}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392987.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392987"}}, "parent": {"id": 59392874, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392874.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392874"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "At first blush it seems that address sanitizers are a better way to go than valgrind. More info: https://stackoverflow.com/questions/47251533/memory-address-sanitizer-vs-valgrind", "markup": "markdown", "html": "<p>At first blush it seems that address sanitizers are a better way to go than valgrind. More info: <a href=\"https://stackoverflow.com/questions/47251533/memory-address-sanitizer-vs-valgrind\" rel=\"nofollow\" class=\"ap-connect-link\">https://stackoverflow.com/questions/47251533/memory-address-sanitizer-vs-valgrind</a></p>", "type": "rendered"}, "created_on": "2018-03-20T21:56:39.373525+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T21:56:39.376326+00:00", "type": "pullrequest_comment", "id": 59392987}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59393038.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59393038"}}, "parent": {"id": 59392632, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392632.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392632"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "~~Not seeing that in practice. Link to docs?~~ I misread your comment, default behavior looks fine\n\n```\nsloretz@nxt:/tmp$ g++ -fsanitize=address -g noleak.cpp -o noleak\nsloretz@nxt:/tmp$ g++ -fsanitize=address -g leak.cpp -o leak\nsloretz@nxt:/tmp$ ./noleak \nsloretz@nxt:/tmp$ echo $?\n0\nsloretz@nxt:/tmp$ ./leak\n\n=================================================================\n==27044==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 12345 byte(s) in 1 object(s) allocated from:\n    #0 0x7fa8a6e016b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\n    #1 0x4006fe in main /tmp/leak.cpp:3\n    #2 0x7fa8a69be82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\nSUMMARY: AddressSanitizer: 12345 byte(s) leaked in 1 allocation(s).\nsloretz@nxt:/tmp$ echo $?\n23\n\n```\n\n", "markup": "markdown", "html": "<p><del>Not seeing that in practice. Link to docs?</del> I misread your comment, default behavior looks fine</p>\n<div class=\"codehilite\"><pre><span></span>sloretz@nxt:/tmp$ g++ -fsanitize=address -g noleak.cpp -o noleak\nsloretz@nxt:/tmp$ g++ -fsanitize=address -g leak.cpp -o leak\nsloretz@nxt:/tmp$ ./noleak \nsloretz@nxt:/tmp$ echo $?\n0\nsloretz@nxt:/tmp$ ./leak\n\n=================================================================\n==27044==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 12345 byte(s) in 1 object(s) allocated from:\n    #0 0x7fa8a6e016b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\n    #1 0x4006fe in main /tmp/leak.cpp:3\n    #2 0x7fa8a69be82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\nSUMMARY: AddressSanitizer: 12345 byte(s) leaked in 1 allocation(s).\nsloretz@nxt:/tmp$ echo $?\n23\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-20T21:57:20.029033+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-03-20T22:04:39.095302+00:00", "type": "pullrequest_comment", "id": 59393038}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59393385.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59393385"}}, "parent": {"id": 59393038, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59393038.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59393038"}}, "depth": 6}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2018-03-20T22:02:31.593061+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-21T23:05:37.545552+00:00", "type": "pullrequest_comment", "id": 59393385}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392839.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392839"}}, "parent": {"id": 59391572, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59391572.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59391572"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "Here's a short example\n\n\n/tmp/leak.cpp\n\n```c++\nint main(int argc, char **argv)\n{\n  char * obviousLeak = new char[12345];\n  return 0;\n}\n```\n\nBuild and run using address sanitizer in gcc\n\n```\nsloretz@nxt:/tmp$ g++ -fsanitize=address -g leak.cpp \nsloretz@nxt:/tmp$ ./a.out \n\n=================================================================\n==26968==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 12345 byte(s) in 1 object(s) allocated from:\n    #0 0x7fdc2c8e46b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\n    #1 0x4006fe in main /tmp/leak.cpp:3\n    #2 0x7fdc2c4a182f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\nSUMMARY: AddressSanitizer: 12345 byte(s) leaked in 1 allocation(s).\n```\n", "markup": "markdown", "html": "<p>Here's a short example</p>\n<p>/tmp/leak.cpp</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">obviousLeak</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"p\">[</span><span class=\"mi\">12345</span><span class=\"p\">];</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Build and run using address sanitizer in gcc</p>\n<div class=\"codehilite\"><pre><span></span>sloretz@nxt:/tmp$ g++ -fsanitize=address -g leak.cpp \nsloretz@nxt:/tmp$ ./a.out \n\n=================================================================\n==26968==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 12345 byte(s) in 1 object(s) allocated from:\n    #0 0x7fdc2c8e46b2 in operator new[](unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x996b2)\n    #1 0x4006fe in main /tmp/leak.cpp:3\n    #2 0x7fdc2c4a182f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n\nSUMMARY: AddressSanitizer: 12345 byte(s) leaked in 1 allocation(s).\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-20T21:53:54.674792+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-03-20T21:53:54.678789+00:00", "type": "pullrequest_comment", "id": 59392839}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59391843.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59391843"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "Having a mechanism to test for memory leaks is a great idea, and would be extremely valuable.\n\nChecking *all* tests for memory leaks as a mandatory part of CI does seem like overkill, especially since many of the tests are obviously going to be leak-free simply due to their simplicity, and in my experience comprehensive memory checks tend to add a considerable amount of runtime overhead.\n\nHaving a specific category of `memory` tests (to go along with `integration`, `performance`, `regression`) would be my preference, even if it adds more work. Those tests could focus on trying to stress out any of our classes that are responsible in some way for memory management (`CompositeData` being a good example of this). So I like option (c) that's being done in this PR.\n\nWe could certainly use `ign-cmake` to facilitate this. I can think of three ways to do that:\n\n1. Add a new cmake function like `ign_build_memory_tests(~)` which is analogous to `ign_build_tests(~)`\n\n2. Add an optional `MEMORY` argument to `ign_build_tests(~)` which will run the executable through valgrind instead of simply running the executable.\n\n3. Make it so that `ign_build_tests(TYPE MEMORY ...)` will have special behavior and create tests that run through valgrind instead of using gtest.\n\nAny one of these options should make it so that `make test` will run the memory tests, without any involvement from gtest. I think (3) would be the most elegant, but I'm certainly open to alternatives.", "markup": "markdown", "html": "<p>Having a mechanism to test for memory leaks is a great idea, and would be extremely valuable.</p>\n<p>Checking <em>all</em> tests for memory leaks as a mandatory part of CI does seem like overkill, especially since many of the tests are obviously going to be leak-free simply due to their simplicity, and in my experience comprehensive memory checks tend to add a considerable amount of runtime overhead.</p>\n<p>Having a specific category of <code>memory</code> tests (to go along with <code>integration</code>, <code>performance</code>, <code>regression</code>) would be my preference, even if it adds more work. Those tests could focus on trying to stress out any of our classes that are responsible in some way for memory management (<code>CompositeData</code> being a good example of this). So I like option (c) that's being done in this PR.</p>\n<p>We could certainly use <code>ign-cmake</code> to facilitate this. I can think of three ways to do that:</p>\n<ol>\n<li>\n<p>Add a new cmake function like <code>ign_build_memory_tests(~)</code> which is analogous to <code>ign_build_tests(~)</code></p>\n</li>\n<li>\n<p>Add an optional <code>MEMORY</code> argument to <code>ign_build_tests(~)</code> which will run the executable through valgrind instead of simply running the executable.</p>\n</li>\n<li>\n<p>Make it so that <code>ign_build_tests(TYPE MEMORY ...)</code> will have special behavior and create tests that run through valgrind instead of using gtest.</p>\n</li>\n</ol>\n<p>Any one of these options should make it so that <code>make test</code> will run the memory tests, without any involvement from gtest. I think (3) would be the most elegant, but I'm certainly open to alternatives.</p>", "type": "rendered"}, "created_on": "2018-03-20T21:39:20.346134+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-20T21:39:20.349394+00:00", "type": "pullrequest_comment", "id": 59391843}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59392824.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59392824"}}, "parent": {"id": 59391843, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59391843.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59391843"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "All of those options work for me, and three seems just fine. ", "markup": "markdown", "html": "<p>All of those options work for me, and three seems just fine. </p>", "type": "rendered"}, "created_on": "2018-03-20T21:53:39.449774+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-03-20T21:53:39.453896+00:00", "type": "pullrequest_comment", "id": 59392824}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59393208.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59393208"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "Just a quick note that this was added as an optional set of tests for gazebo:\n\n* https://bitbucket.org/osrf/gazebo/pull-requests/2075/fix-use-of-not-initialized-static/diff#chg-cmake/GazeboTestUtils.cmake", "markup": "markdown", "html": "<p>Just a quick note that this was added as an optional set of tests for gazebo:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/osrf/gazebo/pull-requests/2075/fix-use-of-not-initialized-static/diff#chg-cmake/GazeboTestUtils.cmake\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/gazebo/pull-requests/2075/fix-use-of-not-initialized-static/diff#chg-cmake/GazeboTestUtils.cmake</a></li>\n</ul>", "type": "rendered"}, "created_on": "2018-03-20T22:00:01.942936+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-20T22:00:01.946559+00:00", "type": "pullrequest_comment", "id": 59393208}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59393250.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59393250"}}, "parent": {"id": 59393208, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14/comments/59393208.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14/_/diff#comment-59393208"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-physics/pullrequests/14.json"}, "html": {"href": "#!/ignitionrobotics/ign-physics/pull-requests/14"}}, "title": "[proposal] valgrind"}, "content": {"raw": "I mean all the tests can be run with valgrind if you pass `-DGAZEBO_RUN_VALGRIND_TESTS` to cmake", "markup": "markdown", "html": "<p>I mean all the tests can be run with valgrind if you pass <code>-DGAZEBO_RUN_VALGRIND_TESTS</code> to cmake</p>", "type": "rendered"}, "created_on": "2018-03-20T22:00:34.501127+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-20T22:00:34.505073+00:00", "type": "pullrequest_comment", "id": 59393250}], "page": 1, "size": 15}