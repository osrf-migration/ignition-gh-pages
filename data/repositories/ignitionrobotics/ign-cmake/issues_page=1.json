{"pagelen": 100, "values": [{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/1/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/1/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/1/add-tests-using-externalproject_add"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/1/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Add tests using ExternalProject_Add", "component": null, "votes": 0, "watches": 1, "content": {"raw": "https://cmake.org/cmake/help/v3.0/module/ExternalProject.html\r\n\r\nThere is an example test here:\r\n\r\n* https://bitbucket.org/scpeters/ign-cmake/commits/e59950f36b14b73536ed22fdd3440b7566fef551", "markup": "markdown", "html": "<p><a href=\"https://cmake.org/cmake/help/v3.0/module/ExternalProject.html\" rel=\"nofollow\" class=\"ap-connect-link\">https://cmake.org/cmake/help/v3.0/module/ExternalProject.html</a></p>\n<p>There is an example test here:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/scpeters/ign-cmake/commits/e59950f36b14b73536ed22fdd3440b7566fef551\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/scpeters/ign-cmake/commits/e59950f36b14b73536ed22fdd3440b7566fef551</a></li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-10-09T18:48:49.159142+00:00", "milestone": null, "updated_on": "2017-11-06T18:08:17.787237+00:00", "type": "issue", "id": 1}, {"priority": "blocker", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/2/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/2/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/2/support-for-version-suffixes-prerelease"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/2/vote"}}, "reporter": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "title": "Support for version suffixes: ~prerelease ~alpha ~beta", "component": null, "votes": 0, "watches": 1, "content": {"raw": "With the current state it is impossible to define a version suffix to the declared version. If you try to just add the version in `ign_configure_project(....)` call but cmake does not expect an string (just numeric values) in the diferent `VERSION` clauses that will consume the information from the previous call.\r\n\r\nWhat I think that we need to change: at least the version used in CPack so we get a different tarball name than the stable version (I made an [ugly hack in msgs](#!/ignitionrobotics/ign-msgs/compare/prepare_1_0_0_version%0Ddefault#diff) today but could serve as an example). \r\n\r\nSpeaking about the rest of places using the version (like the cmake module) I think that most of our developers and users would expect the ~pre, ~alpha or ~beta version to behave  in the same way that the stable version.\r\n\r\nThe fine tunning versioning can be done downstream in debian metadata. I'm afraid that I won't be able to implement it during this week, sorry @mxgrey.", "markup": "markdown", "html": "<p>With the current state it is impossible to define a version suffix to the declared version. If you try to just add the version in <code>ign_configure_project(....)</code> call but cmake does not expect an string (just numeric values) in the diferent <code>VERSION</code> clauses that will consume the information from the previous call.</p>\n<p>What I think that we need to change: at least the version used in CPack so we get a different tarball name than the stable version (I made an <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-msgs/compare/prepare_1_0_0_version%0Ddefault#diff\" rel=\"nofollow\">ugly hack in msgs</a> today but could serve as an example). </p>\n<p>Speaking about the rest of places using the version (like the cmake module) I think that most of our developers and users would expect the ~pre, ~alpha or ~beta version to behave  in the same way that the stable version.</p>\n<p>The fine tunning versioning can be done downstream in debian metadata. I'm afraid that I won't be able to implement it during this week, sorry @mxgrey.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-10-09T23:03:16.524728+00:00", "milestone": null, "updated_on": "2017-11-27T20:56:18.162779+00:00", "type": "issue", "id": 2}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/3/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/3/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/3/clarify-desired-location-of-copyright"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/3/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Clarify desired location of copyright notices in cmake modules", "component": null, "votes": 0, "watches": 2, "content": {"raw": "In my haste to merge pull request #1, there were some comments that didn't get fully resolved:\r\n\r\n* [variable for enabling / disabling testing](#!/ignitionrobotics/ign-cmake/pull-requests/1/first-version-of-ignition-cmake/activity#comment-45963691)\r\n\r\n* [location of copyright notice in a module](#!/ignitionrobotics/ign-cmake/pull-requests/1/first-version-of-ignition-cmake/activity#comment-46077191)\r\n\r\n@mxgrey can you take one more look at these comment threads?", "markup": "markdown", "html": "<p>In my haste to merge <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/1/first-version-of-ignition-cmake\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1</a>, there were some comments that didn't get fully resolved:</p>\n<ul>\n<li>\n<p><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/pull-requests/1/first-version-of-ignition-cmake/activity#comment-45963691\" rel=\"nofollow\">variable for enabling / disabling testing</a></p>\n</li>\n<li>\n<p><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/pull-requests/1/first-version-of-ignition-cmake/activity#comment-46077191\" rel=\"nofollow\">location of copyright notice in a module</a></p>\n</li>\n</ul>\n<p>@mxgrey can you take one more look at these comment threads?</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2017-10-10T23:28:37.664061+00:00", "milestone": null, "updated_on": "2017-11-06T18:13:09.641306+00:00", "type": "issue", "id": 3}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/4/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/4/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/4/find-one-of-multiple-packages"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/4/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Find one of multiple packages", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Proposal\r\n\r\n```CMake\r\n# find ignition-math3, or ignition-math4\r\n# copy all variables prefixed with the found project name into variables prefixed with ${OUTPUT_VAR}\r\nign_find_package(\r\n    OUTPUT_VAR\r\n        some-math-version\r\n    ONE_OF\r\n        ignition-math4\r\n        ignition-math3\r\n    REQUIRED)\r\n\r\n # ...\r\n\r\ntarget_link_libraries(my_lib ${some-math-version_LIBRARIES})\r\n```\r\n\r\nDeveloping on the default branch of ignition projects has one minor annoyance that occurs fairly frequently. The major version being bumped on one branch breaks the build of every downstream project. If the upstream project doesn't have a release then downstream must choose between everything-from-source builds being broken, or CI being broken. To get around this some projects have been finding either ignition-math3 or ignition-math4.", "markup": "markdown", "html": "<p>Proposal</p>\n<div class=\"codehilite language-CMake\"><pre><span></span><span class=\"c\"># find ignition-math3, or ignition-math4</span>\n<span class=\"c\"># copy all variables prefixed with the found project name into variables prefixed with ${OUTPUT_VAR}</span>\n<span class=\"nb\">ign_find_package</span><span class=\"p\">(</span>\n    <span class=\"s\">OUTPUT_VAR</span>\n        <span class=\"s\">some-math-version</span>\n    <span class=\"s\">ONE_OF</span>\n        <span class=\"s\">ignition-math4</span>\n        <span class=\"s\">ignition-math3</span>\n    <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n\n <span class=\"c\"># ...</span>\n\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span><span class=\"s\">my_lib</span> <span class=\"o\">${</span><span class=\"nv\">some-math-version_LIBRARIES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Developing on the default branch of ignition projects has one minor annoyance that occurs fairly frequently. The major version being bumped on one branch breaks the build of every downstream project. If the upstream project doesn't have a release then downstream must choose between everything-from-source builds being broken, or CI being broken. To get around this some projects have been finding either ignition-math3 or ignition-math4.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-10-20T21:23:53.829125+00:00", "milestone": null, "updated_on": "2017-10-20T22:23:13.058120+00:00", "type": "issue", "id": 4}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/5/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/5/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/5/cmake-error-find_package"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/5/vote"}}, "reporter": {"display_name": "Katawan", "uuid": "{b93daa35-37d9-47ea-adda-0c4f0d7c7ad3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb93daa35-37d9-47ea-adda-0c4f0d7c7ad3%7D"}, "html": {"href": "https://bitbucket.org/%7Bb93daa35-37d9-47ea-adda-0c4f0d7c7ad3%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/06acf631cfa4ad0843a29266bc5e6637d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsK-0.png"}}, "nickname": "Katawann", "type": "user", "account_id": "5a0116bc3a27e31b1cd19fda"}, "title": "CMake Error (find_package)", "component": null, "votes": 0, "watches": 1, "content": {"raw": "**Issue:**\r\n\r\nI would like to install Ignition Math from the source. I followed the instruction given by  [Gazebo](http://gazebosim.org/tutorials?tut=install_dependencies_from_source#BuildandinstallIgnitionMathfromsource). But at the point 4, when I try to configure CMake, it can not find the package of ignition (using find_package) and I can not find this file anywhere.\r\n\r\nIf you have any suggestions !\r\n\r\n**Errors:**\r\n\r\nCMake Error at CMakeLists.txt:7 (find_package):\r\n  By not providing \"Findignition-cmake0.cmake\" in CMAKE_MODULE_PATH this\r\n  project has asked CMake to find a package configuration file provided by\r\n  \"ignition-cmake0\", but CMake did not find one.\r\n\r\n  Could not find a package configuration file provided by \"ignition-cmake0\"\r\n  with any of the following names:\r\n\r\n    ignition-cmake0Config.cmake\r\n    ignition-cmake0-config.cmake\r\n\r\n  Add the installation prefix of \"ignition-cmake0\" to CMAKE_PREFIX_PATH or\r\n  set \"ignition-cmake0_DIR\" to a directory containing one of the above files.\r\n  If \"ignition-cmake0\" provides a separate development package or SDK, be\r\n  sure it has been installed.\r\n\r\n\r\n-- Configuring incomplete, errors occurred!", "markup": "markdown", "html": "<p><strong>Issue:</strong></p>\n<p>I would like to install Ignition Math from the source. I followed the instruction given by  <a data-is-external-link=\"true\" href=\"http://gazebosim.org/tutorials?tut=install_dependencies_from_source#BuildandinstallIgnitionMathfromsource\" rel=\"nofollow\">Gazebo</a>. But at the point 4, when I try to configure CMake, it can not find the package of ignition (using find_package) and I can not find this file anywhere.</p>\n<p>If you have any suggestions !</p>\n<p><strong>Errors:</strong></p>\n<p>CMake Error at CMakeLists.txt:7 (find_package):\n  By not providing \"Findignition-cmake0.cmake\" in CMAKE_MODULE_PATH this\n  project has asked CMake to find a package configuration file provided by\n  \"ignition-cmake0\", but CMake did not find one.</p>\n<p>Could not find a package configuration file provided by \"ignition-cmake0\"\n  with any of the following names:</p>\n<div class=\"codehilite\"><pre><span></span>ignition-cmake0Config.cmake\nignition-cmake0-config.cmake\n</pre></div>\n\n\n<p>Add the installation prefix of \"ignition-cmake0\" to CMAKE_PREFIX_PATH or\n  set \"ignition-cmake0_DIR\" to a directory containing one of the above files.\n  If \"ignition-cmake0\" provides a separate development package or SDK, be\n  sure it has been installed.</p>\n<p>-- Configuring incomplete, errors occurred!</p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": null, "edited_on": null, "created_on": "2017-11-07T02:43:16.219555+00:00", "milestone": null, "updated_on": "2017-11-07T04:33:26.249676+00:00", "type": "issue", "id": 5}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/6/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/6/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/6/cmake-error-c-14-support-for-the-library"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/6/vote"}}, "reporter": {"display_name": "Katawan", "uuid": "{b93daa35-37d9-47ea-adda-0c4f0d7c7ad3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb93daa35-37d9-47ea-adda-0c4f0d7c7ad3%7D"}, "html": {"href": "https://bitbucket.org/%7Bb93daa35-37d9-47ea-adda-0c4f0d7c7ad3%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/06acf631cfa4ad0843a29266bc5e6637d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsK-0.png"}}, "nickname": "Katawann", "type": "user", "account_id": "5a0116bc3a27e31b1cd19fda"}, "title": "CMake Error - C++14 support for the library", "component": null, "votes": 0, "watches": 1, "content": {"raw": "**Issue:**\r\n\r\nI would like to install Ignition Math from the source. I followed the instruction given by [Gazebo](http://gazebosim.org/tutorials?tut=install_from_source). After correcting an CMake error about find_package by installing ignition-cmake, I am faced with a new issue when I configure CMake with the command:\r\n\r\n    cmake ..\r\n\r\nI let you know if I find the way to fix this problem\r\n\r\n**Error:**\r\n\r\nCMake Error at /usr/local/lib/cmake/ignition-cmake0/cmake0/IgnUtils.cmake:898 (target_compile_features):\r\n  The compiler feature \"cxx_variable_templates\" is not known to CXX compiler\r\n\r\n  \"GNU\"\r\n\r\n  version 4.9.4.\r\nCall Stack (most recent call first):\r\n  src/CMakeLists.txt:10 (ign_set_project_public_cxx_standard)", "markup": "markdown", "html": "<p><strong>Issue:</strong></p>\n<p>I would like to install Ignition Math from the source. I followed the instruction given by <a data-is-external-link=\"true\" href=\"http://gazebosim.org/tutorials?tut=install_from_source\" rel=\"nofollow\">Gazebo</a>. After correcting an CMake error about find_package by installing ignition-cmake, I am faced with a new issue when I configure CMake with the command:</p>\n<div class=\"codehilite\"><pre><span></span>cmake ..\n</pre></div>\n\n\n<p>I let you know if I find the way to fix this problem</p>\n<p><strong>Error:</strong></p>\n<p>CMake Error at /usr/local/lib/cmake/ignition-cmake0/cmake0/IgnUtils.cmake:898 (target_compile_features):\n  The compiler feature \"cxx_variable_templates\" is not known to CXX compiler</p>\n<p>\"GNU\"</p>\n<p>version 4.9.4.\nCall Stack (most recent call first):\n  src/CMakeLists.txt:10 (ign_set_project_public_cxx_standard)</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-11-07T05:22:08.647977+00:00", "milestone": null, "updated_on": "2017-11-07T07:34:51.276468+00:00", "type": "issue", "id": 6}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/7/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/7/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/7/the-top-level-cmakeliststxt-file-for-a"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/7/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "The top-level CMakeLists.txt file for a project must contain a literal direct call to the project() command", "component": null, "votes": 0, "watches": 1, "content": {"raw": "While compiling `ign-cmake` on Windows, I noticed that the default `CMAKE_INSTALL_PREFIX` was `C:/Program Files/Project` instead of the usual `C:/Program Files/ignition-cmake0`. Apparently this is due to a CMake requirement about the project command: \r\n\r\n> The top-level CMakeLists.txt file for a project must contain a literal, direct call to the project() command; loading one through the include() command is not sufficient. If no such call exists CMake will implicitly add one to the top that enables the default languages (C and CXX). \r\n\r\nSee https://cmake.org/cmake/help/v3.5/command/project.html . \r\n\r\nThe default `CMAKE_INSTALL_PREFIX` issue in Windows is not a big problem, but it would be interesting to understand if this initial implicit call to `project(Project LANGUAGES CXX C)` is creating any other problem. For example the problem for which a workaround was added in #!/ignitionrobotics/ign-cmake/commits/189c956decb09f1f58a40cccd1ec861e3f161590?at=default could be related to this.", "markup": "markdown", "html": "<p>While compiling <code>ign-cmake</code> on Windows, I noticed that the default <code>CMAKE_INSTALL_PREFIX</code> was <code>C:/Program Files/Project</code> instead of the usual <code>C:/Program Files/ignition-cmake0</code>. Apparently this is due to a CMake requirement about the project command: </p>\n<blockquote>\n<p>The top-level CMakeLists.txt file for a project must contain a literal, direct call to the project() command; loading one through the include() command is not sufficient. If no such call exists CMake will implicitly add one to the top that enables the default languages (C and CXX). </p>\n</blockquote>\n<p>See <a href=\"https://cmake.org/cmake/help/v3.5/command/project.html\" rel=\"nofollow\" class=\"ap-connect-link\">https://cmake.org/cmake/help/v3.5/command/project.html</a> . </p>\n<p>The default <code>CMAKE_INSTALL_PREFIX</code> issue in Windows is not a big problem, but it would be interesting to understand if this initial implicit call to <code>project(Project LANGUAGES CXX C)</code> is creating any other problem. For example the problem for which a workaround was added in <a href=\"#!/ignitionrobotics/ign-cmake/commits/189c956decb09f1f58a40cccd1ec861e3f161590?at=default\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-cmake/commits/189c956decb09f1f58a40cccd1ec861e3f161590?at=default</a> could be related to this.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-11-22T22:00:58.501801+00:00", "milestone": null, "updated_on": "2017-12-03T02:26:53.382391+00:00", "type": "issue", "id": 7}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/8/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/8.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/8/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/8/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/8/pkg-config-requires-expects-a-comma"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/8/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "pkg-config Requires expects a comma separated list", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The pkg-config file ignition-cmake generates for for ignition-common uses spaces to separate the entries in `Requires`. `man pkg-config` says `Requires` and `Requires.private` are \"a comma-separated list of packages\".\r\n\r\n```\r\nprefix=/workspace/ws_ign/install_isolated/ign_common\r\nlibdir=${prefix}/lib\r\nincludedir=${prefix}/include/ignition/common0\r\n\r\nName: Ignition common\r\nDescription: A set of common classes for robot applications\r\nVersion: 0.5.0~pre1\r\nRequires: ignition-math4 uuid gts libswscale libavdevice >= 56.4.100 libavformat libavcodec libavutil\r\nRequires.private: tinyxml2\r\nLibs: -L${libdir} -lignition-common0 \r\nLibs.private: -ldl\r\nCFlags: -I${includedir} \r\n```", "markup": "markdown", "html": "<p>The pkg-config file ignition-cmake generates for for ignition-common uses spaces to separate the entries in <code>Requires</code>. <code>man pkg-config</code> says <code>Requires</code> and <code>Requires.private</code> are \"a comma-separated list of packages\".</p>\n<div class=\"codehilite\"><pre><span></span>prefix=/workspace/ws_ign/install_isolated/ign_common\nlibdir=<span class=\"cp\">${</span><span class=\"n\">prefix</span><span class=\"cp\">}</span>/lib\nincludedir=<span class=\"cp\">${</span><span class=\"n\">prefix</span><span class=\"cp\">}</span>/include/ignition/common0\n\nName: Ignition common\nDescription: A set of common classes for robot applications\nVersion: 0.5.0~pre1\nRequires: ignition-math4 uuid gts libswscale libavdevice &gt;= 56.4.100 libavformat libavcodec libavutil\nRequires.private: tinyxml2\nLibs: -L<span class=\"cp\">${</span><span class=\"n\">libdir</span><span class=\"cp\">}</span> -lignition-common0 \nLibs.private: -ldl\nCFlags: -I<span class=\"cp\">${</span><span class=\"n\">includedir</span><span class=\"cp\">}</span> \n</pre></div>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": null, "edited_on": null, "created_on": "2017-12-01T22:10:18.587348+00:00", "milestone": null, "updated_on": "2017-12-01T23:02:17.474135+00:00", "type": "issue", "id": 8}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/9/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/9.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/9/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/9/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/9/findignprotobuf-could-be-more-specific"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/9/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "FindIgnProtobuf could be more specific when libprotoc-dev is missing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "While cleaning up a docker image based on 16.04 I had installed `libprotobuf-dev` and `protobuf-compiler` but accidentally removed `libprotoc-dev`. \r\n\r\nThe output at generate time is\r\n\r\n```\r\n-- Found Protobuf: /usr/lib/x86_64-linux-gnu/libprotobuf.so (Required is at least version \"2.3.0\") \r\n-- Looking for Protobuf - found\r\n```\r\n\r\nbut the output at build time is \r\n\r\n```\r\n-- Build files have been written to: /workspace/ws_ign/build_isolated/ign_msgs\r\n==> '. /workspace/ws_ign/build_isolated/ign_msgs/cmake__build.sh && /usr/bin/make -j8 -l8' in '/workspace/ws_ign/build_isolated/ign_msgs'\r\nsrc/CMakeFiles/ign_msgs_gen.dir/build.make:120: *** target pattern contains no '%'.  Stop.\r\nCMakeFiles/Makefile2:1186: recipe for target 'src/CMakeFiles/ign_msgs_gen.dir/all' failed\r\n```\r\n\r\nLine 120 in build.make is `src/ign_msgs_gen: protobuf::libprotoc-NOTFOUND`\r\n\r\nI'd like the the generate step to error with \"libprotoc not found\". How could that be accomplished? Does it warrant it's own find module? Or would it fit better as a `COMPONENT` of `FindIgnProtobuf`?", "markup": "markdown", "html": "<p>While cleaning up a docker image based on 16.04 I had installed <code>libprotobuf-dev</code> and <code>protobuf-compiler</code> but accidentally removed <code>libprotoc-dev</code>. </p>\n<p>The output at generate time is</p>\n<div class=\"codehilite\"><pre><span></span>-- Found Protobuf: /usr/lib/x86_64-linux-gnu/libprotobuf.so (Required is at least version &quot;2.3.0&quot;) \n-- Looking for Protobuf - found\n</pre></div>\n\n\n<p>but the output at build time is </p>\n<div class=\"codehilite\"><pre><span></span>-- Build files have been written to: /workspace/ws_ign/build_isolated/ign_msgs\n==&gt; &#39;. /workspace/ws_ign/build_isolated/ign_msgs/cmake__build.sh &amp;&amp; /usr/bin/make -j8 -l8&#39; in &#39;/workspace/ws_ign/build_isolated/ign_msgs&#39;\nsrc/CMakeFiles/ign_msgs_gen.dir/build.make:120: *** target pattern contains no &#39;%&#39;.  Stop.\nCMakeFiles/Makefile2:1186: recipe for target &#39;src/CMakeFiles/ign_msgs_gen.dir/all&#39; failed\n</pre></div>\n\n\n<p>Line 120 in build.make is <code>src/ign_msgs_gen: protobuf::libprotoc-NOTFOUND</code></p>\n<p>I'd like the the generate step to error with \"libprotoc not found\". How could that be accomplished? Does it warrant it's own find module? Or would it fit better as a <code>COMPONENT</code> of <code>FindIgnProtobuf</code>?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-12-06T16:47:27.751277+00:00", "milestone": null, "updated_on": "2018-06-04T04:37:44.111610+00:00", "type": "issue", "id": 9}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/10/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/10.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/10/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/10/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/10/deprecation-warning-on-windows"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/10/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Deprecation warning on Windows", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Windows doesn't seem to like the `IGN_DEPRECATED` define.\r\n\r\nOn ign-math, using it like this:\r\n\r\n~~~\r\n       public: void Translate(const Vector3<T> &_t)\r\n      IGN_DEPRECATED(4)\r\n      {\r\n        this->SetTranslation(_t);\r\n      }\r\n~~~\r\n\r\nResulted on this error (there are 3 instances using deprecate):\r\n\r\n~~~\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(186): error C2143: syntax error: missing ';' before 'function-style cast'\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(887): note: see reference to class template instantiation 'ignition::math::Matrix4<T>' being compiled\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(187): error C2059: syntax error: ''\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(187): error C2334: unexpected token(s) preceding '{'; skipping apparent function body\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(206): error C2143: syntax error: missing ';' before 'function-style cast'\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(207): error C2059: syntax error: ''\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(207): error C2334: unexpected token(s) preceding '{'; skipping apparent function body\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(403): error C2143: syntax error: missing ';' before 'function-style cast'\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(404): error C2059: syntax error: ''\r\nD:\\Jenkins\\workspace\\ignition_math-ci-pr_any-windows7-amd64\\workspace\\ign-math\\include\\ignition/math/Matrix4.hh(404): error C2334: unexpected token(s) preceding '{'; skipping apparent function body\r\nNMAKE : fatal error U1077: 'C:\\PROGRA~2\\MIB055~1\\2017\\COMMUN~1\\VC\\Tools\\MSVC\\1411~1.255\\bin\\Hostx86\\x64\\cl.exe' : return code '0x2'\r\n~~~\r\n\r\nSee [this](#!/ignitionrobotics/ign-math/pull-requests/222/matrix4-translate-matrix4-settranslation/diff#comment-52204573) ign-math PR for more context.", "markup": "markdown", "html": "<p>Windows doesn't seem to like the <code>IGN_DEPRECATED</code> define.</p>\n<p>On ign-math, using it like this:</p>\n<div class=\"codehilite\"><pre><span></span>       public: void Translate(const Vector3&lt;T&gt; &amp;_t)\n      IGN_DEPRECATED(4)\n      {\n        this-&gt;SetTranslation(_t);\n      }\n</pre></div>\n\n\n<p>Resulted on this error (there are 3 instances using deprecate):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">186</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2143</span><span class=\"o\">:</span> <span class=\"nt\">syntax</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"nt\">missing</span> <span class=\"s1\">&#39;;&#39;</span> <span class=\"nt\">before</span> <span class=\"s1\">&#39;function-style cast&#39;</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">887</span><span class=\"o\">):</span> <span class=\"nt\">note</span><span class=\"o\">:</span> <span class=\"nt\">see</span> <span class=\"nt\">reference</span> <span class=\"nt\">to</span> <span class=\"nt\">class</span> <span class=\"nt\">template</span> <span class=\"nt\">instantiation</span> <span class=\"s1\">&#39;ignition::math::Matrix4&lt;T&gt;&#39;</span> <span class=\"nt\">being</span> <span class=\"nt\">compiled</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">187</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2059</span><span class=\"o\">:</span> <span class=\"nt\">syntax</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">187</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2334</span><span class=\"o\">:</span> <span class=\"nt\">unexpected</span> <span class=\"nt\">token</span><span class=\"o\">(</span><span class=\"nt\">s</span><span class=\"o\">)</span> <span class=\"nt\">preceding</span> <span class=\"s1\">&#39;{&#39;</span><span class=\"o\">;</span> <span class=\"nt\">skipping</span> <span class=\"nt\">apparent</span> <span class=\"nt\">function</span> <span class=\"nt\">body</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">206</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2143</span><span class=\"o\">:</span> <span class=\"nt\">syntax</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"nt\">missing</span> <span class=\"s1\">&#39;;&#39;</span> <span class=\"nt\">before</span> <span class=\"s1\">&#39;function-style cast&#39;</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">207</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2059</span><span class=\"o\">:</span> <span class=\"nt\">syntax</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">207</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2334</span><span class=\"o\">:</span> <span class=\"nt\">unexpected</span> <span class=\"nt\">token</span><span class=\"o\">(</span><span class=\"nt\">s</span><span class=\"o\">)</span> <span class=\"nt\">preceding</span> <span class=\"s1\">&#39;{&#39;</span><span class=\"o\">;</span> <span class=\"nt\">skipping</span> <span class=\"nt\">apparent</span> <span class=\"nt\">function</span> <span class=\"nt\">body</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">403</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2143</span><span class=\"o\">:</span> <span class=\"nt\">syntax</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"nt\">missing</span> <span class=\"s1\">&#39;;&#39;</span> <span class=\"nt\">before</span> <span class=\"s1\">&#39;function-style cast&#39;</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">404</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2059</span><span class=\"o\">:</span> <span class=\"nt\">syntax</span> <span class=\"nt\">error</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span>\n<span class=\"nt\">D</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"nt\">Jenkins</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ignition_math-ci-pr_any-windows7-amd64</span><span class=\"err\">\\</span><span class=\"nt\">workspace</span><span class=\"err\">\\</span><span class=\"nt\">ign-math</span><span class=\"err\">\\</span><span class=\"nt\">include</span><span class=\"err\">\\</span><span class=\"nt\">ignition</span><span class=\"o\">/</span><span class=\"nt\">math</span><span class=\"o\">/</span><span class=\"nt\">Matrix4</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"o\">(</span><span class=\"nt\">404</span><span class=\"o\">):</span> <span class=\"nt\">error</span> <span class=\"nt\">C2334</span><span class=\"o\">:</span> <span class=\"nt\">unexpected</span> <span class=\"nt\">token</span><span class=\"o\">(</span><span class=\"nt\">s</span><span class=\"o\">)</span> <span class=\"nt\">preceding</span> <span class=\"s1\">&#39;{&#39;</span><span class=\"o\">;</span> <span class=\"nt\">skipping</span> <span class=\"nt\">apparent</span> <span class=\"nt\">function</span> <span class=\"nt\">body</span>\n<span class=\"nt\">NMAKE</span> <span class=\"o\">:</span> <span class=\"nt\">fatal</span> <span class=\"nt\">error</span> <span class=\"nt\">U1077</span><span class=\"o\">:</span> <span class=\"s1\">&#39;C:\\PROGRA~2\\MIB055~1\\2017\\COMMUN~1\\VC\\Tools\\MSVC\\1411~1.255\\bin\\Hostx86\\x64\\cl.exe&#39;</span> <span class=\"o\">:</span> <span class=\"nt\">return</span> <span class=\"nt\">code</span> <span class=\"s1\">&#39;0x2&#39;</span>\n</pre></div>\n\n\n<p>See <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/pull-requests/222/matrix4-translate-matrix4-settranslation/diff#comment-52204573\" rel=\"nofollow\">this</a> ign-math PR for more context.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-12-19T01:52:52.234815+00:00", "milestone": null, "updated_on": "2017-12-19T18:04:48.945645+00:00", "type": "issue", "id": 10}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/11/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/11.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/11/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/11/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/11/informing-tests-of-their-own-directory"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/11/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Informing tests of their own directory location", "component": null, "votes": 1, "watches": 2, "content": {"raw": "We frequently need to provide tests with the full path of their own build directory. This may be necessary for a test so that it can run a helper program or find a plugin library at run time.\r\n\r\nHistorically, we have solved this by generating a `test_config.h` file at configuration time, and providing it with a macro named something like `IGN_CONFIG_PATH`. However, this cannot work for multi-configuration generator types, such as the Visual Studio generators. The reason is the header gets created at configuration time, but a multi-configuration generator cannot know what directory a binary will be built in until generation time (which comes after configuration time).\r\n\r\nTo make `ign-common` plugins testable in Visual Studio, I came up with [a gross solution](#!/ignitionrobotics/ign-common/src/ea50a7739b7d431ad1b444487f8afe68bf88a893/test/util/CMakeLists.txt?at=default&fileviewer=file-view-default) where we create a custom command that injects text into a file. Custom commands in cmake are able to use [generator expresisons](https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html), so the path can be identified and supplied at generation time. I was never satisfied with this solution, but I couldn't think of a better one at the time.\r\n\r\nI recently came up with something that might be a little nicer: Instead of generating a header, we can use `target_compile_definitions(~)` to provide the tests with this path information. `target_compile_definitions(~)` is able to handle generator expressions, so we don't need to do weird things with configuring headers at generation time using `add_custom_command(~)`.\r\n\r\nTo do this, we could simply add the following line into the loop inside of `ign_build_tests(~)`:\r\n\r\n```\r\ntarget_compile_definitions(${BINARY_NAME} PRIVATE IGN_BINARY_PATH=\"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\r\n```\r\n\r\nAt that point, each test can know what its own directory path is by invoking the macro `IGN_BINARY_PATH`.\r\n\r\nIf certain specific tests need to know the paths of other targets, that can be handled on a case-by-case basis by doing:\r\n\r\n```\r\ntarget_compile_definitions(<specific_test_target_name> PRIVATE IGN_PATH_TO_OTHER_THING=\"$<TARGET_FILE_DIR:${OTHER_THING}>\")\r\n```\r\n\r\nas long as we ensure that the name `IGN_PATH_TO_OTHER_THING` does not collide with any other compile definitions.\r\n\r\nI think this would be the most robust and elegant way to ensure that our tests work regardless of what type of generator is used to configure and build them.\r\n\r\nThe one downside (that I can think of) is that the definitions (nay, the very existence) of these macros would be hard for developers to be aware of unless they're using a pretty good IDE (e.g. Qt Creator).\r\n\r\nIf anyone else likes this idea, I can move forward on it. I'd be able to use `ign-common` as a good example for usage.", "markup": "markdown", "html": "<p>We frequently need to provide tests with the full path of their own build directory. This may be necessary for a test so that it can run a helper program or find a plugin library at run time.</p>\n<p>Historically, we have solved this by generating a <code>test_config.h</code> file at configuration time, and providing it with a macro named something like <code>IGN_CONFIG_PATH</code>. However, this cannot work for multi-configuration generator types, such as the Visual Studio generators. The reason is the header gets created at configuration time, but a multi-configuration generator cannot know what directory a binary will be built in until generation time (which comes after configuration time).</p>\n<p>To make <code>ign-common</code> plugins testable in Visual Studio, I came up with <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/src/ea50a7739b7d431ad1b444487f8afe68bf88a893/test/util/CMakeLists.txt?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">a gross solution</a> where we create a custom command that injects text into a file. Custom commands in cmake are able to use <a data-is-external-link=\"true\" href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html\" rel=\"nofollow\">generator expresisons</a>, so the path can be identified and supplied at generation time. I was never satisfied with this solution, but I couldn't think of a better one at the time.</p>\n<p>I recently came up with something that might be a little nicer: Instead of generating a header, we can use <code>target_compile_definitions(~)</code> to provide the tests with this path information. <code>target_compile_definitions(~)</code> is able to handle generator expressions, so we don't need to do weird things with configuring headers at generation time using <code>add_custom_command(~)</code>.</p>\n<p>To do this, we could simply add the following line into the loop inside of <code>ign_build_tests(~)</code>:</p>\n<div class=\"codehilite\"><pre><span></span>target_compile_definitions(<span class=\"cp\">${</span><span class=\"n\">BINARY_NAME</span><span class=\"cp\">}</span> PRIVATE IGN_BINARY_PATH=&quot;$<span class=\"nt\">&lt;TARGET</span><span class=\"err\">_FILE_DIR:${BINARY_NAME}</span><span class=\"nt\">&gt;</span>&quot;)\n</pre></div>\n\n\n<p>At that point, each test can know what its own directory path is by invoking the macro <code>IGN_BINARY_PATH</code>.</p>\n<p>If certain specific tests need to know the paths of other targets, that can be handled on a case-by-case basis by doing:</p>\n<div class=\"codehilite\"><pre><span></span>target_compile_definitions(<span class=\"nt\">&lt;specific</span><span class=\"err\">_test_target_name</span><span class=\"nt\">&gt;</span> PRIVATE IGN_PATH_TO_OTHER_THING=&quot;$<span class=\"nt\">&lt;TARGET</span><span class=\"err\">_FILE_DIR:${OTHER_THING}</span><span class=\"nt\">&gt;</span>&quot;)\n</pre></div>\n\n\n<p>as long as we ensure that the name <code>IGN_PATH_TO_OTHER_THING</code> does not collide with any other compile definitions.</p>\n<p>I think this would be the most robust and elegant way to ensure that our tests work regardless of what type of generator is used to configure and build them.</p>\n<p>The one downside (that I can think of) is that the definitions (nay, the very existence) of these macros would be hard for developers to be aware of unless they're using a pretty good IDE (e.g. Qt Creator).</p>\n<p>If anyone else likes this idea, I can move forward on it. I'd be able to use <code>ign-common</code> as a good example for usage.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2017-12-28T22:50:07.347023+00:00", "milestone": null, "updated_on": "2018-01-22T21:14:01.020190+00:00", "type": "issue", "id": 11}, {"priority": "major", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/12/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/12.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/12/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/12/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/12/release-040"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/12/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Release 0.4.0", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We have merged support for ign-transport on windows and need to make a release in order to move forward with ign-transport.\r\n\r\nIt looks like there are a few more pull requests needed for ign-fuel-tools:\r\n\r\n* ~~pull request #33~~\r\n* ~~pull request #35~~\r\n* ~~pull request #36~~\r\n\r\nShould we wait for ign-fuel-tools support in this release?", "markup": "markdown", "html": "<p>We have merged support for ign-transport on windows and need to make a release in order to move forward with ign-transport.</p>\n<p>It looks like there are a few more pull requests needed for ign-fuel-tools:</p>\n<ul>\n<li><del><a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/33/add-findyamlcmake\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #33</a></del></li>\n<li><del><a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/35/add-findjsoncppcmake\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #35</a></del></li>\n<li><del><a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/36/add-findcurlcmake\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #36</a></del></li>\n</ul>\n<p>Should we wait for ign-fuel-tools support in this release?</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-01-11T19:32:11.029460+00:00", "milestone": null, "updated_on": "2018-01-13T01:36:30.963107+00:00", "type": "issue", "id": 12}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/13/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/13/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/13/we-should-explicitly-disable-compiler"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/13/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "We should explicitly disable compiler extensions", "component": null, "votes": 0, "watches": 1, "content": {"raw": "It turns out that the compiler flags `-std=c++14` and `-std=gnu++14` do not behave well together in a single compilation call. In most cases the issue won't be noticed, but when numeric literals show up, a [bug is triggered](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77948).\r\n\r\nWe get the `-std=gnu++14` flag automatically from cmake when we request C++14 features from `target_compile_features(~)`. We can explicitly disable this behavior by setting `CMAKE_CXX_EXTENSIONS` to `off` (by default, it is set to `on`). Turning extensions off will force cmake to use `-std=c++14` instead of `-std=gnu++14`.", "markup": "markdown", "html": "<p>It turns out that the compiler flags <code>-std=c++14</code> and <code>-std=gnu++14</code> do not behave well together in a single compilation call. In most cases the issue won't be noticed, but when numeric literals show up, a <a data-is-external-link=\"true\" href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77948\" rel=\"nofollow\">bug is triggered</a>.</p>\n<p>We get the <code>-std=gnu++14</code> flag automatically from cmake when we request C++14 features from <code>target_compile_features(~)</code>. We can explicitly disable this behavior by setting <code>CMAKE_CXX_EXTENSIONS</code> to <code>off</code> (by default, it is set to <code>on</code>). Turning extensions off will force cmake to use <code>-std=c++14</code> instead of <code>-std=gnu++14</code>.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-01-19T20:27:47.631090+00:00", "milestone": null, "updated_on": "2018-05-01T08:45:05.531388+00:00", "type": "issue", "id": 13}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/14/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/14.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/14/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/14/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/14/proposal-add-a-debug-postfix-onto-debug"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/14/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Proposal: Add a debug postfix onto Debug versions of libraries", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Adding a debug postfix (such as `d`) onto versions of libraries that were built in debug mode is helpful for installing release and debug versions of the same library side-by-side.", "markup": "markdown", "html": "<p>Adding a debug postfix (such as <code>d</code>) onto versions of libraries that were built in debug mode is helpful for installing release and debug versions of the same library side-by-side.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-01-22T21:01:36.649132+00:00", "milestone": null, "updated_on": "2018-01-22T21:01:36.649132+00:00", "type": "issue", "id": 14}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/15/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15/configcmake-_libraries-should-contain"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/15/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Stumbled on some super useful cmake documentation while trying to respond to [ros/console_bridge#52](https://github.com/ros/console_bridge/issues/52).\r\n \r\n* https://cmake.org/cmake/help/v3.0/manual/cmake-packages.7.html#creating-packages\r\n* https://cmake.org/cmake/help/v3.5/manual/cmake-developer.7.html#find-modules\r\n\r\nTakeaways after reading:\r\n\r\n* CMake recommends that project variables (`Xxx_INCLUDE_DIRS`, `Xxx_LIBRARIES`) should only be provided by find modules or `<project>-config.cmake` files that existed before the modern target name approach and are trying to be backwards compatible. Future ignition projects don't need to (and shouldn't) set them at all.\r\n* If ignition-cmake provides \"standard variables\", code we control should not use them. Other ignition projects and Tutorials/examples should use target names.\r\n    * Do `target_link_libraries(ignition-common1 PUBLIC ignition-math4::ignition-math4)`\r\n    * Don't do `target_link_libraries(ignition-common1 PUBLIC ${ignition-math4_LIBRARIES}`\r\n* The variables are quirky. `<project>_LIBRARIES` should contain absolute paths to any libraries,  but ignition-cmake is currently setting them to the imported target name instead.", "markup": "markdown", "html": "<p>Stumbled on some super useful cmake documentation while trying to respond to <a data-is-external-link=\"true\" href=\"https://github.com/ros/console_bridge/issues/52\" rel=\"nofollow\">ros/console_bridge#52</a>.</p>\n<ul>\n<li><a href=\"https://cmake.org/cmake/help/v3.0/manual/cmake-packages.7.html#creating-packages\" rel=\"nofollow\" class=\"ap-connect-link\">https://cmake.org/cmake/help/v3.0/manual/cmake-packages.7.html#creating-packages</a></li>\n<li><a href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-developer.7.html#find-modules\" rel=\"nofollow\" class=\"ap-connect-link\">https://cmake.org/cmake/help/v3.5/manual/cmake-developer.7.html#find-modules</a></li>\n</ul>\n<p>Takeaways after reading:</p>\n<ul>\n<li>CMake recommends that project variables (<code>Xxx_INCLUDE_DIRS</code>, <code>Xxx_LIBRARIES</code>) should only be provided by find modules or <code>&lt;project&gt;-config.cmake</code> files that existed before the modern target name approach and are trying to be backwards compatible. Future ignition projects don't need to (and shouldn't) set them at all.</li>\n<li>If ignition-cmake provides \"standard variables\", code we control should not use them. Other ignition projects and Tutorials/examples should use target names.<ul>\n<li>Do <code>target_link_libraries(ignition-common1 PUBLIC ignition-math4::ignition-math4)</code></li>\n<li>Don't do <code>target_link_libraries(ignition-common1 PUBLIC ${ignition-math4_LIBRARIES}</code></li>\n</ul>\n</li>\n<li>The variables are quirky. <code>&lt;project&gt;_LIBRARIES</code> should contain absolute paths to any libraries,  but ignition-cmake is currently setting them to the imported target name instead.</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": null, "edited_on": null, "created_on": "2018-01-25T16:33:00.665956+00:00", "milestone": null, "updated_on": "2018-02-02T22:29:17.871572+00:00", "type": "issue", "id": 15}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/16/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/16.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/16/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/16/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/16/find_package-freeimage-fails-on-a-project"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/16/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "find_package(FreeImage) fails on a project without CXX support enabled using the FindFreeImage.cmake installed by ignition-cmake", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If you have a cmake project without CXX support enabled (for example if you have a C project), `find_package(FreeImage)` will fail with an error similar to the following:\r\n\r\n~~~\r\n-- FreeImage.pc not found, we will search for FreeImage_INCLUDE_DIRS and FreeImage_LIBRARIES\r\nCMake Error at /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/FindFreeImage.cmake:46 (try_run):\r\n  Unknown extension \".cc\" for file\r\n\r\n    /home/user/something-superbuild/build/CMakeTmp/test_freeimage.cc\r\n\r\n  try_compile() works only for enabled languages.  Currently these are:\r\n\r\n    C NONE\r\n\r\n  See project() command to enable other languages.\r\nCall Stack (most recent call first):\r\n  /usr/share/cmake-3.5/Modules/CMakeFindDependencyMacro.cmake:65 (find_package)\r\n  /usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-config.cmake:109 (find_dependency)\r\n  /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:203 (find_package)\r\n  cmake/BuildGazeboYARPPlugins.cmake:11 (find_package)\r\n  build/install/share/YCM/modules/FindOrBuildPackage.cmake:231 (include)\r\n  CMakeLists.txt:70 (find_or_build_package)\r\n\r\n\r\n-- FreeImage test failed to compile - This may indicate a build system bug\r\nCMake Error at /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:203 (find_package):\r\n  Found package configuration file:\r\n\r\n    /usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-config.cmake\r\n\r\n  but it set ignition-common1_FOUND to FALSE so package \"ignition-common1\" is\r\n  considered to be NOT FOUND.  Reason given by package:\r\n\r\n  ignition-common1 could not be found because dependency FreeImage could not\r\n  be found.\r\n\r\nCall Stack (most recent call first):\r\n  cmake/BuildGazeboYARPPlugins.cmake:11 (find_package)\r\n  build/install/share/YCM/modules/FindOrBuildPackage.cmake:231 (include)\r\n  CMakeLists.txt:70 (find_or_build_package)\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"/home/user/something-superbuild/build/CMakeFiles/CMakeOutput.log\".\r\nSee also \"/home/user/something-superbuild/build/CMakeFiles/CMakeError.log\".\r\n~~~", "markup": "markdown", "html": "<p>If you have a cmake project without CXX support enabled (for example if you have a C project), <code>find_package(FreeImage)</code> will fail with an error similar to the following:</p>\n<div class=\"codehilite\"><pre><span></span>-- FreeImage.pc not found, we will search for FreeImage_INCLUDE_DIRS and FreeImage_LIBRARIES\nCMake Error at /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/FindFreeImage.cmake:46 (try_run):\n  Unknown extension &quot;.cc&quot; for file\n\n    /home/user/something-superbuild/build/CMakeTmp/test_freeimage.cc\n\n  try_compile() works only for enabled languages.  Currently these are:\n\n    C NONE\n\n  See project() command to enable other languages.\nCall Stack (most recent call first):\n  /usr/share/cmake-3.5/Modules/CMakeFindDependencyMacro.cmake:65 (find_package)\n  /usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-config.cmake:109 (find_dependency)\n  /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:203 (find_package)\n  cmake/BuildGazeboYARPPlugins.cmake:11 (find_package)\n  build/install/share/YCM/modules/FindOrBuildPackage.cmake:231 (include)\n  CMakeLists.txt:70 (find_or_build_package)\n\n\n-- FreeImage test failed to compile - This may indicate a build system bug\nCMake Error at /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:203 (find_package):\n  Found package configuration file:\n\n    /usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-config.cmake\n\n  but it set ignition-common1_FOUND to FALSE so package &quot;ignition-common1&quot; is\n  considered to be NOT FOUND.  Reason given by package:\n\n  ignition-common1 could not be found because dependency FreeImage could not\n  be found.\n\nCall Stack (most recent call first):\n  cmake/BuildGazeboYARPPlugins.cmake:11 (find_package)\n  build/install/share/YCM/modules/FindOrBuildPackage.cmake:231 (include)\n  CMakeLists.txt:70 (find_or_build_package)\n\n\n-- Configuring incomplete, errors occurred!\nSee also &quot;/home/user/something-superbuild/build/CMakeFiles/CMakeOutput.log&quot;.\nSee also &quot;/home/user/something-superbuild/build/CMakeFiles/CMakeError.log&quot;.\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-01-31T18:04:14.458943+00:00", "milestone": null, "updated_on": "2018-02-02T22:37:52.248030+00:00", "type": "issue", "id": 16}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/17/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/17.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/17/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/17/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/17/cmake-failures-with-clang-in-unsupported"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/17/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Cmake failures with clang in unsupported OS X 10.10 (yosemite)", "component": null, "votes": 0, "watches": 1, "content": {"raw": "This is for informational purposes only; we do not support this version of OS X.\r\n\r\nThe default clang compiler on osx 10.10 does not support the cxx11 compiler feature `cxx_thread_local`. So if you try to configure a project with the line `ign_set_project_public_cxx_standard(11)`, it will fail to configure.\r\n\r\n~~~\r\n$ clang --version\r\nApple LLVM version 7.0.2 (clang-700.1.81)\r\nTarget: x86_64-apple-darwin14.5.0\r\nThread model: posix\r\n~~~\r\n\r\n~~~\r\nCMake Error at /Users/scpeters/ws/ignition/devel/lib/cmake/ignition-cmake0/cmake0/IgnUtils.cmake:941 (target_compile_features):\r\n  target_compile_features The compiler feature \"cxx_thread_local\" is not\r\n  known to CXX compiler\r\n\r\n  \"AppleClang\"\r\n\r\n  version 7.0.2.7000181.\r\nCall Stack (most recent call first):\r\n  src/CMakeLists.txt:10 (ign_set_project_public_cxx_standard)\r\n~~~", "markup": "markdown", "html": "<p>This is for informational purposes only; we do not support this version of OS X.</p>\n<p>The default clang compiler on osx 10.10 does not support the cxx11 compiler feature <code>cxx_thread_local</code>. So if you try to configure a project with the line <code>ign_set_project_public_cxx_standard(11)</code>, it will fail to configure.</p>\n<div class=\"codehilite\"><pre><span></span>$ clang --version\nApple LLVM version <span class=\"m\">7</span>.0.2 <span class=\"o\">(</span>clang-700.1.81<span class=\"o\">)</span>\nTarget: x86_64-apple-darwin14.5.0\nThread model: posix\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>CMake Error at /Users/scpeters/ws/ignition/devel/lib/cmake/ignition-cmake0/cmake0/IgnUtils.cmake:941 (target_compile_features):\n  target_compile_features The compiler feature &quot;cxx_thread_local&quot; is not\n  known to CXX compiler\n\n  &quot;AppleClang&quot;\n\n  version 7.0.2.7000181.\nCall Stack (most recent call first):\n  src/CMakeLists.txt:10 (ign_set_project_public_cxx_standard)\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": null, "edited_on": null, "created_on": "2018-02-02T00:26:21.829037+00:00", "milestone": null, "updated_on": "2018-02-02T00:27:37.986531+00:00", "type": "issue", "id": 17}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/18/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/18.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/18/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/18/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/18/proposal-adding-c-utilities-to-ign-cmake"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/18/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Proposal: Adding C++ utilities to ign-cmake", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Apologies in advance for the wall-of-text.\r\n\r\nThe original motivation for creating `ign-cmake` was to systematically ensure consistent build behavior across all the ignition projects, in a way that is maintainable and scalable.\r\n\r\nEven though the `ign-cmake` package is still in development, it's had some very tangible benefits: we now have four projects (`ign-math`, `ign-common`, `ign-msgs`, and `ign-transport`) with robust build systems across all of our supported platforms and consistent package behavior across all of the projects. If we ever decide to change our packaging behavior or if we ever need to fix a build system bug, we can take care of it in `ign-cmake`, and all the ignition projects will benefit the next time they configure. Future and upcoming projects will experience these benefits as well.\r\n\r\nHowever, we want to have consistency across all the ignition projects in more ways than just their build system and packaging. The most obvious example is the PIMPL pattern, which is a design pattern that we aim to use across all the ignition projects to achieve maximum flexibility in our development cycles without needing to be concerned about breaking ABI.\r\n\r\nThe forcing function that prompted me to make this proposal was in a recent `ign-transport` pull request, we found ourselves repeatedly writing boilerplate move and copy constructors, plus move and copy assignment operators for just about every darn interface class (here's a sampling from that one pull request: [1](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Batch.hhT44) [2](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Descriptor.hhT109) [3](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Log.hhT48) [4](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/MsgIter.hhT45) [5](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/MsgIter.hhT49) [6](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/MsgIter.hhT57) [7](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT85) [8](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT89) [9](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT152) [10](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT156) [11](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT198) [12](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT202) [13](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT242) [14](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT246) [15](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Recorder.hhT57) [16](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT52) [17](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT56) [18](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT61) [19](#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT66)).\r\n\r\nThe worst part is, even with all that effort in manually creating all those constructors and assignment operators, some of the classes in that pull request *still* don't have proper copy and move semantics, simply because we have not yet noticed that their copy/move constructors/operators are missing.\r\n\r\nThat's when I remembered some [design utilities](http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html) promoted by Scott Meyers which makes the PIMPL pattern so very much more bearable. Here's a tl;dr of that article:\r\n\r\nInstead of using a plain `std::unique_ptr<Implementation>` to contain the implementation object, you can have a `impl_ptr<Implementation>` which takes care of creating the copy and move constructors for your interface class. To make that more concrete, your class definition would look like this:\r\n\r\n```\r\nclass MyClass\r\n{\r\n  public: /* Interface functions go here */\r\n\r\n  private: class Implementation;\r\n  private: ImplPtr<Implementation> dataPtr;\r\n};\r\n```\r\n\r\nThen in the source file, your constructor would look like this:\r\n\r\n```\r\nMyClass::MyClass( /* constructor args */ )\r\n  : dataPtr(MakeImpl<Implementation>(/* constructor args */))\r\n{\r\n  // Do nothing\r\n}\r\n```\r\n\r\nThis will allow `MyClass` to automatically create a copy constructor, move constructor, copy operator, and move operator, and all you have to do is replace `std::unique_ptr` with `ImplPtr` and `new Implementation` with `MakeImpl<Implementation>`. Note that we can also have a `UniqueImplPtr` which will allow moving but not copying, for classes that are not copyable. The catch, of course, is you need to have access to the header that defines `ImplPtr` and `MakeImpl`.\r\n\r\nSince it's a single header file, the brute force approach would be to write the header and then drop it into each project. That's a viable solution if we're confident that we'll never ever have to make any changes to the implementation, but that's a very risky assumption to make.\r\n\r\nIdeally, we would want the `ImplPtr` to be available in every project from a single source. We already have a project which is a required dependency of every ignition project: `ign-cmake`. If we were to consider the goal of `ign-cmake` to be achieving consistent, maintainable, scalable development (not just build+packaging behavior) across all the ignition projects, then it would make sense to have it provide a small set of C++ utilities that could be used across all projects to keep behavior and development consistent between them.\r\n\r\nI can think of three utilities which would make sense to share across all projects right away: (1) the pimpl class mentioned here, (2) the warning suppression system which is currently in `ign-common`, and (3) the Console utility currently in `ign-common`. These are things that all project would benefit from:\r\n\r\n1. Anything that can make PIMPL easier to stomach is a good thing.\r\n\r\n2. We're repeatedly dealing with the same compiler warnings across every project. This would give us a clean way to handle those consistently everywhere.\r\n\r\n3. Having the `Console` class and its error/warning macros as base utilities would allow us to have consistent status, warning, and error messaging behavior across all the libraries, instead of having some print proper messages while others print plain, unformatted messages.\r\n\r\nWe could also consider the `Filesystem` from `ign-common`, but I don't think that's as basic of a utility (and it will probably be replaced by the C++17 filesystem soon anyway).\r\n\r\n### Why not just use ign-common?\r\n\r\nRight now, `ign-common` would be more aptly named `ign-miscellaneous`. Most of its content is not common to all projects, and it would be unreasonable to have all projects depend on it, even after it's been split into components.\r\n\r\n`ign-cmake` is already a required dependency. Putting these utilities into `ign-cmake` will make them accessible to all projects right away, without introducing any new dependencies.\r\n\r\n### Then could we really call this project ign-cmake anymore?\r\n\r\nMaybe not.\r\n\r\nI would propose that we add these utilities to `ign-cmake` as a library called `ignition-utilities` (or maybe `ignition-utils`, or some variation on that). When each project calls `find_package(ignition-cmake1)` it will import a target for the `ignition-utilities` library, and `ign-cmake` can automatically link each project library against the utilities target. Consumer projects wouldn't have to change *anything* in their build scripts.\r\n\r\nThen, when we're approaching the hypothetical release of `ignition-cmake1`, we can decide whether we want to keep using the name `ignition-cmake`. Maybe by then, `ign-common` will be rid of its miscellaneous components, and we can have `ign-cmake` take over the name `ign-common`. Otherwise, we could consider renaming `ign-cmake` to something like `ign-utilities`, `ign-utils`, `ign-root`, `ign-base`, or any other suggestions that people have. Or we could just keep the name as `ign-cmake` and accept the slight misnomer of the project.", "markup": "markdown", "html": "<p>Apologies in advance for the wall-of-text.</p>\n<p>The original motivation for creating <code>ign-cmake</code> was to systematically ensure consistent build behavior across all the ignition projects, in a way that is maintainable and scalable.</p>\n<p>Even though the <code>ign-cmake</code> package is still in development, it's had some very tangible benefits: we now have four projects (<code>ign-math</code>, <code>ign-common</code>, <code>ign-msgs</code>, and <code>ign-transport</code>) with robust build systems across all of our supported platforms and consistent package behavior across all of the projects. If we ever decide to change our packaging behavior or if we ever need to fix a build system bug, we can take care of it in <code>ign-cmake</code>, and all the ignition projects will benefit the next time they configure. Future and upcoming projects will experience these benefits as well.</p>\n<p>However, we want to have consistency across all the ignition projects in more ways than just their build system and packaging. The most obvious example is the PIMPL pattern, which is a design pattern that we aim to use across all the ignition projects to achieve maximum flexibility in our development cycles without needing to be concerned about breaking ABI.</p>\n<p>The forcing function that prompted me to make this proposal was in a recent <code>ign-transport</code> pull request, we found ourselves repeatedly writing boilerplate move and copy constructors, plus move and copy assignment operators for just about every darn interface class (here's a sampling from that one pull request: <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Batch.hhT44\" rel=\"nofollow\">1</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Descriptor.hhT109\" rel=\"nofollow\">2</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Log.hhT48\" rel=\"nofollow\">3</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/MsgIter.hhT45\" rel=\"nofollow\">4</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/MsgIter.hhT49\" rel=\"nofollow\">5</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/MsgIter.hhT57\" rel=\"nofollow\">6</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT85\" rel=\"nofollow\">7</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT89\" rel=\"nofollow\">8</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT152\" rel=\"nofollow\">9</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT156\" rel=\"nofollow\">10</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT198\" rel=\"nofollow\">11</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT202\" rel=\"nofollow\">12</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT242\" rel=\"nofollow\">13</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/QueryOptions.hhT246\" rel=\"nofollow\">14</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/Recorder.hhT57\" rel=\"nofollow\">15</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT52\" rel=\"nofollow\">16</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT56\" rel=\"nofollow\">17</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT61\" rel=\"nofollow\">18</a> <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-transport/pull-requests/252/wip-ignition-tools-record-playback/diff#Llog/include/ignition/transport/log/SqlStatement.hhT66\" rel=\"nofollow\">19</a>).</p>\n<p>The worst part is, even with all that effort in manually creating all those constructors and assignment operators, some of the classes in that pull request <em>still</em> don't have proper copy and move semantics, simply because we have not yet noticed that their copy/move constructors/operators are missing.</p>\n<p>That's when I remembered some <a data-is-external-link=\"true\" href=\"http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html\" rel=\"nofollow\">design utilities</a> promoted by Scott Meyers which makes the PIMPL pattern so very much more bearable. Here's a tl;dr of that article:</p>\n<p>Instead of using a plain <code>std::unique_ptr&lt;Implementation&gt;</code> to contain the implementation object, you can have a <code>impl_ptr&lt;Implementation&gt;</code> which takes care of creating the copy and move constructors for your interface class. To make that more concrete, your class definition would look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">MyClass</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"cm\">/* Interface functions go here */</span>\n\n  <span class=\"kr\">private</span><span class=\"o\">:</span> <span class=\"kr\">class</span> <span class=\"nx\">Implementation</span><span class=\"p\">;</span>\n  <span class=\"kr\">private</span><span class=\"o\">:</span> <span class=\"nx\">ImplPtr</span><span class=\"o\">&lt;</span><span class=\"nx\">Implementation</span><span class=\"o\">&gt;</span> <span class=\"nx\">dataPtr</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>Then in the source file, your constructor would look like this:</p>\n<div class=\"codehilite\"><pre><span></span>MyClass::MyClass( /* constructor args */ )\n  : dataPtr(MakeImpl&lt;Implementation&gt;(/* constructor args */))\n{\n  // Do nothing\n}\n</pre></div>\n\n\n<p>This will allow <code>MyClass</code> to automatically create a copy constructor, move constructor, copy operator, and move operator, and all you have to do is replace <code>std::unique_ptr</code> with <code>ImplPtr</code> and <code>new Implementation</code> with <code>MakeImpl&lt;Implementation&gt;</code>. Note that we can also have a <code>UniqueImplPtr</code> which will allow moving but not copying, for classes that are not copyable. The catch, of course, is you need to have access to the header that defines <code>ImplPtr</code> and <code>MakeImpl</code>.</p>\n<p>Since it's a single header file, the brute force approach would be to write the header and then drop it into each project. That's a viable solution if we're confident that we'll never ever have to make any changes to the implementation, but that's a very risky assumption to make.</p>\n<p>Ideally, we would want the <code>ImplPtr</code> to be available in every project from a single source. We already have a project which is a required dependency of every ignition project: <code>ign-cmake</code>. If we were to consider the goal of <code>ign-cmake</code> to be achieving consistent, maintainable, scalable development (not just build+packaging behavior) across all the ignition projects, then it would make sense to have it provide a small set of C++ utilities that could be used across all projects to keep behavior and development consistent between them.</p>\n<p>I can think of three utilities which would make sense to share across all projects right away: (1) the pimpl class mentioned here, (2) the warning suppression system which is currently in <code>ign-common</code>, and (3) the Console utility currently in <code>ign-common</code>. These are things that all project would benefit from:</p>\n<ol>\n<li>\n<p>Anything that can make PIMPL easier to stomach is a good thing.</p>\n</li>\n<li>\n<p>We're repeatedly dealing with the same compiler warnings across every project. This would give us a clean way to handle those consistently everywhere.</p>\n</li>\n<li>\n<p>Having the <code>Console</code> class and its error/warning macros as base utilities would allow us to have consistent status, warning, and error messaging behavior across all the libraries, instead of having some print proper messages while others print plain, unformatted messages.</p>\n</li>\n</ol>\n<p>We could also consider the <code>Filesystem</code> from <code>ign-common</code>, but I don't think that's as basic of a utility (and it will probably be replaced by the C++17 filesystem soon anyway).</p>\n<h3 id=\"markdown-header-why-not-just-use-ign-common\">Why not just use ign-common?</h3>\n<p>Right now, <code>ign-common</code> would be more aptly named <code>ign-miscellaneous</code>. Most of its content is not common to all projects, and it would be unreasonable to have all projects depend on it, even after it's been split into components.</p>\n<p><code>ign-cmake</code> is already a required dependency. Putting these utilities into <code>ign-cmake</code> will make them accessible to all projects right away, without introducing any new dependencies.</p>\n<h3 id=\"markdown-header-then-could-we-really-call-this-project-ign-cmake-anymore\">Then could we really call this project ign-cmake anymore?</h3>\n<p>Maybe not.</p>\n<p>I would propose that we add these utilities to <code>ign-cmake</code> as a library called <code>ignition-utilities</code> (or maybe <code>ignition-utils</code>, or some variation on that). When each project calls <code>find_package(ignition-cmake1)</code> it will import a target for the <code>ignition-utilities</code> library, and <code>ign-cmake</code> can automatically link each project library against the utilities target. Consumer projects wouldn't have to change <em>anything</em> in their build scripts.</p>\n<p>Then, when we're approaching the hypothetical release of <code>ignition-cmake1</code>, we can decide whether we want to keep using the name <code>ignition-cmake</code>. Maybe by then, <code>ign-common</code> will be rid of its miscellaneous components, and we can have <code>ign-cmake</code> take over the name <code>ign-common</code>. Otherwise, we could consider renaming <code>ign-cmake</code> to something like <code>ign-utilities</code>, <code>ign-utils</code>, <code>ign-root</code>, <code>ign-base</code>, or any other suggestions that people have. Or we could just keep the name as <code>ign-cmake</code> and accept the slight misnomer of the project.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-02-02T23:58:46.576951+00:00", "milestone": null, "updated_on": "2018-02-03T16:04:46.634673+00:00", "type": "issue", "id": 18}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/19/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/19.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/19/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/19/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/19/findjsoncppcmake-cannot-find-ljsoncpp_lib"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/19/vote"}}, "reporter": {"display_name": "Tim Rakowski", "uuid": "{568e53a4-2b97-42ea-929e-038af8b7825e}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B568e53a4-2b97-42ea-929e-038af8b7825e%7D"}, "html": {"href": "https://bitbucket.org/%7B568e53a4-2b97-42ea-929e-038af8b7825e%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/83d3799cfee56e3c3195419ca9fd5d06d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTR-2.png"}}, "nickname": "Tim Rakowski", "type": "user", "account_id": "557058:34f593f6-84fc-4797-8028-c8e3412b0993"}, "title": "FindJSONCPP.cmake: cannot find -ljsoncpp_lib", "component": null, "votes": 0, "watches": 1, "content": {"raw": "```\r\n-- Checking for module 'jsoncpp'\r\n--   Found jsoncpp, version 1.8.4\r\n-- Found JSONCPP: TRUE  \r\n-- Looking for JSONCPP - found\r\n...\r\n[ 82%] Linking CXX shared library libignition-fuel_tools1.so\r\n/usr/bin/ld: cannot find -ljsoncpp_lib\r\n```\r\n\r\nWhen [`find_package(jsoncpp CONFIG QUIET)`](#!/ignitionrobotics/ign-cmake/src/4424b4f0f258941f4ad29db2faaae2dc4f896825/cmake/FindJSONCPP.cmake?at=default&fileviewer=file-view-default#FindJSONCPP.cmake-34) fails and [`ign_pkg_check_modules(JSONCPP jsoncpp)`](#!/ignitionrobotics/ign-cmake/src/4424b4f0f258941f4ad29db2faaae2dc4f896825/cmake/FindJSONCPP.cmake?at=default&fileviewer=file-view-default#FindJSONCPP.cmake-41) succeeds, `JSONCPP::JSONCPP` contains the desired information but `JSONCPP_TARGET` is still set to `jsoncpp_lib` ([line 35](#!/ignitionrobotics/ign-cmake/src/4424b4f0f258941f4ad29db2faaae2dc4f896825/cmake/FindJSONCPP.cmake?at=default&fileviewer=file-view-default#FindJSONCPP.cmake-35)).\r\n\r\nI'm not sure if line 35 should be changed to\r\n```\r\nset(JSONCPP_TARGET JSONCPP::JSONCPP)\r\n```\r\nor if this should be done somewhere else.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>-- Checking for module &#39;jsoncpp&#39;\n--   Found jsoncpp, version 1.8.4\n-- Found JSONCPP: TRUE  \n-- Looking for JSONCPP - found\n...\n[ 82%] Linking CXX shared library libignition-fuel_tools1.so\n/usr/bin/ld: cannot find -ljsoncpp_lib\n</pre></div>\n\n\n<p>When <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/src/4424b4f0f258941f4ad29db2faaae2dc4f896825/cmake/FindJSONCPP.cmake?at=default&amp;fileviewer=file-view-default#FindJSONCPP.cmake-34\" rel=\"nofollow\"><code>find_package(jsoncpp CONFIG QUIET)</code></a> fails and <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/src/4424b4f0f258941f4ad29db2faaae2dc4f896825/cmake/FindJSONCPP.cmake?at=default&amp;fileviewer=file-view-default#FindJSONCPP.cmake-41\" rel=\"nofollow\"><code>ign_pkg_check_modules(JSONCPP jsoncpp)</code></a> succeeds, <code>JSONCPP::JSONCPP</code> contains the desired information but <code>JSONCPP_TARGET</code> is still set to <code>jsoncpp_lib</code> (<a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/src/4424b4f0f258941f4ad29db2faaae2dc4f896825/cmake/FindJSONCPP.cmake?at=default&amp;fileviewer=file-view-default#FindJSONCPP.cmake-35\" rel=\"nofollow\">line 35</a>).</p>\n<p>I'm not sure if line 35 should be changed to</p>\n<div class=\"codehilite\"><pre><span></span>set(JSONCPP_TARGET JSONCPP::JSONCPP)\n</pre></div>\n\n\n<p>or if this should be done somewhere else.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-02-24T14:39:05.408901+00:00", "milestone": null, "updated_on": "2018-02-25T09:44:27.135736+00:00", "type": "issue", "id": 19}, {"priority": "minor", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/20/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/20.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/20/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/20/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/20/allowing-find-modules-to-output-varying"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/20/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Allowing find-modules to output varying target names might be fragile", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I need to test this to confirm, but it just occurred to me that there may be some fragility in the way the imported targets that get produced by our find-modules will vary based on how the target was made.\r\n\r\nWhen we create the imported target ourselves, we have a rough pattern of naming it `PACKAGE::PACKAGE`, but when the imported target is made by a package's config-file, it might have some arbitrary name that was chosen by the developer of the package.\r\n\r\nIn most cases this doesn't seem to be an inherent issue (although it can be a bit of a confusing inconvenience at times, like in [this case](#!/ignitionrobotics/ign-cmake/issues/19/findjsoncppcmake-cannot-find-ljsoncpp_lib)), but I suspect this means that if a dependency ever gets reinstalled such that the name of the imported target that would get created by the find-module will come out differently (e.g. the dependency didn't used to provide a config-file, but now it does), then the config-files of all the packages that directly depend on the reinstalled package will need to be reconfigured and reinstalled in order for their config-files to work correctly.\r\n\r\nI'll try to test this as soon as I get the chance. I wanted to post this issue right away to make sure I don't forget.\r\n\r\nI think the solution would be that all find-modules which allow a config-file to be used should always create an imported target with the same name as the one that would be generated by the config-file.\r\n\r\nTo make the transition painless for the find-modules that are already providing multiple possible imported target names, we can still create an imported target with our custom name, and just have it link to the target whose name is determined by the dependency's config-file.", "markup": "markdown", "html": "<p>I need to test this to confirm, but it just occurred to me that there may be some fragility in the way the imported targets that get produced by our find-modules will vary based on how the target was made.</p>\n<p>When we create the imported target ourselves, we have a rough pattern of naming it <code>PACKAGE::PACKAGE</code>, but when the imported target is made by a package's config-file, it might have some arbitrary name that was chosen by the developer of the package.</p>\n<p>In most cases this doesn't seem to be an inherent issue (although it can be a bit of a confusing inconvenience at times, like in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/issues/19/findjsoncppcmake-cannot-find-ljsoncpp_lib\" rel=\"nofollow\">this case</a>), but I suspect this means that if a dependency ever gets reinstalled such that the name of the imported target that would get created by the find-module will come out differently (e.g. the dependency didn't used to provide a config-file, but now it does), then the config-files of all the packages that directly depend on the reinstalled package will need to be reconfigured and reinstalled in order for their config-files to work correctly.</p>\n<p>I'll try to test this as soon as I get the chance. I wanted to post this issue right away to make sure I don't forget.</p>\n<p>I think the solution would be that all find-modules which allow a config-file to be used should always create an imported target with the same name as the one that would be generated by the config-file.</p>\n<p>To make the transition painless for the find-modules that are already providing multiple possible imported target names, we can still create an imported target with our custom name, and just have it link to the target whose name is determined by the dependency's config-file.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-02-25T02:30:28.520546+00:00", "milestone": null, "updated_on": "2018-02-25T02:30:28.520546+00:00", "type": "issue", "id": 20}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/21/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/21.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/21/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/21/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/21/installation-directory-is-architecture"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/21/vote"}}, "reporter": {"display_name": "Rich Mattes", "uuid": "{1ef6f3dd-b8db-412b-94e9-e430e7aafd23}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1ef6f3dd-b8db-412b-94e9-e430e7aafd23%7D"}, "html": {"href": "https://bitbucket.org/%7B1ef6f3dd-b8db-412b-94e9-e430e7aafd23%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d431baafeedf5d8921cb50a3c9902e16d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRM-0.png"}}, "nickname": "richmattes", "type": "user", "account_id": "557058:a38935e3-9a08-40d9-917a-ff19973e58df"}, "title": "Installation directory is architecture dependent", "component": null, "votes": 0, "watches": 1, "content": {"raw": "ignition-cmake's CMake modules are being installed to IGN_LIB_INSTALL_DIR, but the scripts themselves don't appear to have any architecture dependent features.\r\n\r\nI recommend shifting the installation directory to /usr/share/ignition-cmake0 to support the creation of architecture independent packages downstream.", "markup": "markdown", "html": "<p>ignition-cmake's CMake modules are being installed to IGN_LIB_INSTALL_DIR, but the scripts themselves don't appear to have any architecture dependent features.</p>\n<p>I recommend shifting the installation directory to /usr/share/ignition-cmake0 to support the creation of architecture independent packages downstream.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-02-25T19:15:57.728100+00:00", "milestone": null, "updated_on": "2018-05-01T08:44:17.188670+00:00", "type": "issue", "id": 21}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/22/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/22.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/22/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/22/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/22/tutorial-documentation-doesnt-parse-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/22/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Tutorial documentation doesn't parse `///` and `\\`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "*  `//////////////////////////////////////////////////` inside a code block is ignored.\r\n* `\\brief` is extracted from the code block and rendered before the code snippet. Probably because is a Doxygen reserved word.\r\n\r\nHere's the result of generating documentation for this tutorial:\r\n\r\n```\r\n#!python\r\n\r\n\r\n # Test\r\n\r\n Here's a code snippet:\r\n\r\n ```{.cpp}\r\n //////////////////////////////////////////////////\r\n /// \\brief Provide an \"echo\" service.\r\n bool srvEcho(const ignition::msgs::StringMsg &_req,\r\n   ignition::msgs::StringMsg &_rep)\r\n {\r\n   // Set the response's content.\r\n   _rep.set_data(_req.data());\r\n\r\n   // The response succeed.\r\n   return true;\r\n }\r\n ```\r\n```\r\n\r\nAnd this is how it looks:\r\n\r\n![code_snippet_1.png](data/bitbucket.org/repo/Gg8npGe/images/2511738915-code_snippet_1.png)\r\n\r\nHere's the result of generating documentation for this tutorial:\r\n\r\n```\r\n#!python\r\n\r\n\r\n # Test\r\n\r\n The same tutorial without the separator and doxygen tag:\r\n\r\n ```{.cpp}\r\n bool srvEcho(const ignition::msgs::StringMsg &_req,\r\n   ignition::msgs::StringMsg &_rep)\r\n {\r\n   // Set the response's content.\r\n   _rep.set_data(_req.data());\r\n\r\n   // The response succeed.\r\n   return true;\r\n }\r\n ```\r\n```\r\n\r\n![code_snippet_2.png](data/bitbucket.org/repo/Gg8npGe/images/176048270-code_snippet_2.png)", "markup": "markdown", "html": "<ul>\n<li><code>//////////////////////////////////////////////////</code> inside a code block is ignored.</li>\n<li><code>\\brief</code> is extracted from the code block and rendered before the code snippet. Probably because is a Doxygen reserved word.</li>\n</ul>\n<p>Here's the result of generating documentation for this tutorial:</p>\n<div class=\"codehilite language-python\"><pre><span></span> <span class=\"c1\"># Test</span>\n\n <span class=\"n\">Here</span><span class=\"s1\">&#39;s a code snippet:</span>\n\n <span class=\"sb\">``</span><span class=\"err\">`</span><span class=\"p\">{</span><span class=\"o\">.</span><span class=\"n\">cpp</span><span class=\"p\">}</span>\n <span class=\"o\">//////////////////////////////////////////////////</span>\n <span class=\"o\">///</span> \\<span class=\"n\">brief</span> <span class=\"n\">Provide</span> <span class=\"n\">an</span> <span class=\"s2\">&quot;echo&quot;</span> <span class=\"n\">service</span><span class=\"o\">.</span>\n <span class=\"nb\">bool</span> <span class=\"n\">srvEcho</span><span class=\"p\">(</span><span class=\"n\">const</span> <span class=\"n\">ignition</span><span class=\"p\">::</span><span class=\"n\">msgs</span><span class=\"p\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_req</span><span class=\"p\">,</span>\n   <span class=\"n\">ignition</span><span class=\"p\">::</span><span class=\"n\">msgs</span><span class=\"p\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">)</span>\n <span class=\"p\">{</span>\n   <span class=\"o\">//</span> <span class=\"n\">Set</span> <span class=\"n\">the</span> <span class=\"n\">response</span><span class=\"s1\">&#39;s content.</span>\n   <span class=\"n\">_rep</span><span class=\"o\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"n\">_req</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">());</span>\n\n   <span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"n\">response</span> <span class=\"n\">succeed</span><span class=\"o\">.</span>\n   <span class=\"k\">return</span> <span class=\"n\">true</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"sb\">``</span><span class=\"err\">`</span>\n</pre></div>\n\n\n<p>And this is how it looks:</p>\n<p><img alt=\"code_snippet_1.png\" src=\"data/bitbucket.org/repo/Gg8npGe/images/2511738915-code_snippet_1.png\" /></p>\n<p>Here's the result of generating documentation for this tutorial:</p>\n<div class=\"codehilite language-python\"><pre><span></span> <span class=\"c1\"># Test</span>\n\n <span class=\"n\">The</span> <span class=\"n\">same</span> <span class=\"n\">tutorial</span> <span class=\"n\">without</span> <span class=\"n\">the</span> <span class=\"n\">separator</span> <span class=\"ow\">and</span> <span class=\"n\">doxygen</span> <span class=\"n\">tag</span><span class=\"p\">:</span>\n\n <span class=\"sb\">``</span><span class=\"err\">`</span><span class=\"p\">{</span><span class=\"o\">.</span><span class=\"n\">cpp</span><span class=\"p\">}</span>\n <span class=\"nb\">bool</span> <span class=\"n\">srvEcho</span><span class=\"p\">(</span><span class=\"n\">const</span> <span class=\"n\">ignition</span><span class=\"p\">::</span><span class=\"n\">msgs</span><span class=\"p\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_req</span><span class=\"p\">,</span>\n   <span class=\"n\">ignition</span><span class=\"p\">::</span><span class=\"n\">msgs</span><span class=\"p\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_rep</span><span class=\"p\">)</span>\n <span class=\"p\">{</span>\n   <span class=\"o\">//</span> <span class=\"n\">Set</span> <span class=\"n\">the</span> <span class=\"n\">response</span><span class=\"s1\">&#39;s content.</span>\n   <span class=\"n\">_rep</span><span class=\"o\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"n\">_req</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">());</span>\n\n   <span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"n\">response</span> <span class=\"n\">succeed</span><span class=\"o\">.</span>\n   <span class=\"k\">return</span> <span class=\"n\">true</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"sb\">``</span><span class=\"err\">`</span>\n</pre></div>\n\n\n<p><img alt=\"code_snippet_2.png\" src=\"data/bitbucket.org/repo/Gg8npGe/images/176048270-code_snippet_2.png\" /></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-09T17:44:39.147177+00:00", "milestone": null, "updated_on": "2018-03-10T10:33:08.531364+00:00", "type": "issue", "id": 22}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/23/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/23.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/23/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/23/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/23/tables-dont-have-borders-when-generating"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/23/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Tables don't have borders when generating documentation", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Here's an example of Markdown that contains a table:\r\n\r\n\r\n```\r\n#!python\r\n\r\n# Tables\r\n\r\nHere's a table:\r\n\r\n| Tables        | Are           | Cool  |\r\n| ------------- |:-------------:| -----:|\r\n| col 3 is      | right-aligned | $1600 |\r\n| col 2 is      | centered      |   $12 |\r\n| zebra stripes | are neat      |    $1 |\r\n\r\n```\r\n\r\nThis is how it's rendered after running `make doc`:\r\n\r\n![tables.png](data/bitbucket.org/repo/Gg8npGe/images/4084868605-tables.png)\r\n\r\nAnd this how is suppose to look:\r\n\r\n![table_borders.png](data/bitbucket.org/repo/Gg8npGe/images/43047715-table_borders.png)", "markup": "markdown", "html": "<p>Here's an example of Markdown that contains a table:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Tables</span>\n\n<span class=\"n\">Here</span><span class=\"s1\">&#39;s a table:</span>\n\n<span class=\"o\">|</span> <span class=\"n\">Tables</span>        <span class=\"o\">|</span> <span class=\"n\">Are</span>           <span class=\"o\">|</span> <span class=\"n\">Cool</span>  <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"o\">-------------</span> <span class=\"o\">|</span><span class=\"p\">:</span><span class=\"o\">-------------</span><span class=\"p\">:</span><span class=\"o\">|</span> <span class=\"o\">-----</span><span class=\"p\">:</span><span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">col</span> <span class=\"mi\">3</span> <span class=\"ow\">is</span>      <span class=\"o\">|</span> <span class=\"n\">right</span><span class=\"o\">-</span><span class=\"n\">aligned</span> <span class=\"o\">|</span> <span class=\"err\">$</span><span class=\"mi\">1600</span> <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">col</span> <span class=\"mi\">2</span> <span class=\"ow\">is</span>      <span class=\"o\">|</span> <span class=\"n\">centered</span>      <span class=\"o\">|</span>   <span class=\"err\">$</span><span class=\"mi\">12</span> <span class=\"o\">|</span>\n<span class=\"o\">|</span> <span class=\"n\">zebra</span> <span class=\"n\">stripes</span> <span class=\"o\">|</span> <span class=\"n\">are</span> <span class=\"n\">neat</span>      <span class=\"o\">|</span>    <span class=\"err\">$</span><span class=\"mi\">1</span> <span class=\"o\">|</span>\n</pre></div>\n\n\n<p>This is how it's rendered after running <code>make doc</code>:</p>\n<p><img alt=\"tables.png\" src=\"data/bitbucket.org/repo/Gg8npGe/images/4084868605-tables.png\" /></p>\n<p>And this how is suppose to look:</p>\n<p><img alt=\"table_borders.png\" src=\"data/bitbucket.org/repo/Gg8npGe/images/43047715-table_borders.png\" /></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-09T17:51:02.169416+00:00", "milestone": null, "updated_on": "2018-03-09T17:51:50.221527+00:00", "type": "issue", "id": 23}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/24/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/24.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/24/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/24/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/24/unordered-list-not-rendered-when"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/24/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Unordered list not rendered when generating documentation", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Example of markdown:\r\n\r\n\r\n```\r\n#!python\r\n\r\n# A test\r\n\r\nThis is a an unordered list:\r\n\r\n- Item\r\n+ Item\r\n* Item\r\n```\r\n\r\nAnd this is the current output:\r\n\r\n![md_list.png](data/bitbucket.org/repo/Gg8npGe/images/280738831-md_list.png)", "markup": "markdown", "html": "<p>Example of markdown:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># A test</span>\n\n<span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">a</span> <span class=\"n\">an</span> <span class=\"n\">unordered</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n\n<span class=\"o\">-</span> <span class=\"n\">Item</span>\n<span class=\"o\">+</span> <span class=\"n\">Item</span>\n<span class=\"o\">*</span> <span class=\"n\">Item</span>\n</pre></div>\n\n\n<p>And this is the current output:</p>\n<p><img alt=\"md_list.png\" src=\"data/bitbucket.org/repo/Gg8npGe/images/280738831-md_list.png\" /></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-15T14:23:08.130595+00:00", "milestone": null, "updated_on": "2018-03-15T14:23:08.130595+00:00", "type": "issue", "id": 24}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/25/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/25.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/25/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/25/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/25/branch-coverage-causing-make-coverage-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/25/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "branch coverage causing `make  coverage` to hang sometimes", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Since branch coverage was merged in pull request #46 and released in version 0.5.0, I've noticed at least one instance of `make coverage` hanging in a bitbucket pipeline:\r\n\r\n* #!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin/diff\r\n* [pipeline timed out after 120 minutes](#!/ignitionrobotics/ign-common/addon/pipelines/home#!/results/580), so I reduced the timeout to 10 minutes in #!/ignitionrobotics/ign-common/commits/c0643d62603ddb835ccb5c24f301a0fe20150a01", "markup": "markdown", "html": "<p>Since branch coverage was merged in <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/46/add-branch-coverage\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #46</a> and released in version 0.5.0, I've noticed at least one instance of <code>make coverage</code> hanging in a bitbucket pipeline:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-common/pull-requests/59/expanding-the-functionality-of-the-plugin/diff</a></li>\n<li><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/addon/pipelines/home#!/results/580\" rel=\"nofollow\">pipeline timed out after 120 minutes</a>, so I reduced the timeout to 10 minutes in <a href=\"#!/ignitionrobotics/ign-common/commits/c0643d62603ddb835ccb5c24f301a0fe20150a01\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-common/commits/c0643d62603ddb835ccb5c24f301a0fe20150a01</a></li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "closed", "version": null, "edited_on": null, "created_on": "2018-03-23T04:34:55.633378+00:00", "milestone": null, "updated_on": "2018-03-30T22:55:11.797512+00:00", "type": "issue", "id": 25}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/26/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/26.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/26/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/26/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/26/ign-cmake-online-documentation-empty"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/26/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "ign-cmake online documentation empty", "component": null, "votes": 0, "watches": 1, "content": {"raw": "See the documentation here:\r\n\r\nhttps://ignitionrobotics.org/libs/cmake\r\n\r\nAnd how on the main page it says \"unreleased\":\r\n\r\nhttps://ignitionrobotics.org/home", "markup": "markdown", "html": "<p>See the documentation here:</p>\n<p><a href=\"https://ignitionrobotics.org/libs/cmake\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs/cmake</a></p>\n<p>And how on the main page it says \"unreleased\":</p>\n<p><a href=\"https://ignitionrobotics.org/home\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/home</a></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-26T11:23:06.341738+00:00", "milestone": null, "updated_on": "2018-03-26T11:23:06.341738+00:00", "type": "issue", "id": 26}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/27/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/27.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/27/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/27/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/27/consider-providing-the-code-check-scripts"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/27/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Consider providing the code check scripts through ign-cmake", "component": null, "votes": 0, "watches": 1, "content": {"raw": "As we add components, the code checking scripts will need to be made aware of the component source directories, as seen in [this commit](#!/ignitionrobotics/ign-common/commits/2ae604f2b4feb1f5ba1d157e230a11b7eaf83d06?at=mv_before_Components).\r\n\r\nWe could consider using ign-cmake to generate these scripts at configure time to avoid the need to maintain these scripts independently for each project.\r\n\r\nThe only catch (that I can think of) is that the build would need to be configured for a project (but compiling would not be necessary) before the code checking can be performed. That shouldn't be an issue for our CI systems, so I don't think it's much of a cost.", "markup": "markdown", "html": "<p>As we add components, the code checking scripts will need to be made aware of the component source directories, as seen in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/commits/2ae604f2b4feb1f5ba1d157e230a11b7eaf83d06?at=mv_before_Components\" rel=\"nofollow\">this commit</a>.</p>\n<p>We could consider using ign-cmake to generate these scripts at configure time to avoid the need to maintain these scripts independently for each project.</p>\n<p>The only catch (that I can think of) is that the build would need to be configured for a project (but compiling would not be necessary) before the code checking can be performed. That shouldn't be an issue for our CI systems, so I don't think it's much of a cost.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-03-27T17:03:46.954880+00:00", "milestone": null, "updated_on": "2018-05-01T08:43:05.258960+00:00", "type": "issue", "id": 27}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/28/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/28.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/28/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/28/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/28/branch-coverage-results-hard-to-interpret"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/28/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Branch coverage results hard to interpret", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Our test coverage is harder to interpret since we merged branch coverage support in pull request #46. Previously, line of code would be marked green (covered) or red (uncovered). Now there are many lines marked yellow, and it is not clear to me why that is the case. Some of the yellow lines (like [ignition/math/Filter.hh:92](https://codecov.io/bb/ignitionrobotics/ign-math/src/default/include/ignition/math/Filter.hh#L92) or [ign-math/src/SignalStat.cc:67](https://codecov.io/bb/ignitionrobotics/ign-math/src/default/src/SignalStats.cc#L67)) don't appear to have any branching at all.\r\n\r\nDoes anyone else know how to interpret these?", "markup": "markdown", "html": "<p>Our test coverage is harder to interpret since we merged branch coverage support in <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/46/add-branch-coverage\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #46</a>. Previously, line of code would be marked green (covered) or red (uncovered). Now there are many lines marked yellow, and it is not clear to me why that is the case. Some of the yellow lines (like <a data-is-external-link=\"true\" href=\"https://codecov.io/bb/ignitionrobotics/ign-math/src/default/include/ignition/math/Filter.hh#L92\" rel=\"nofollow\">ignition/math/Filter.hh:92</a> or <a data-is-external-link=\"true\" href=\"https://codecov.io/bb/ignitionrobotics/ign-math/src/default/src/SignalStats.cc#L67\" rel=\"nofollow\">ign-math/src/SignalStat.cc:67</a>) don't appear to have any branching at all.</p>\n<p>Does anyone else know how to interpret these?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-30T23:45:55.429993+00:00", "milestone": null, "updated_on": "2018-04-13T23:27:25.049420+00:00", "type": "issue", "id": 28}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/29/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/29.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/29/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/29/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/29/ign_install_executable-fails-to-find"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/29/vote"}}, "reporter": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "title": "ign_install_executable fails to find manpage", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The `ign_install_executable` calls the `manpage` macro. However, this macro is not defined unless the `IgnRonn2Man.cmake` file is included. Including `IgnRonn2Man` results in another error:\r\n\r\n```\r\nignition-cmake1/cmake1/IgnRonn2Man.cmake:57 (ADD_DEPENDENCIES):\r\n  Cannot add target-level dependencies to non-existent target \"man\".\r\n```", "markup": "markdown", "html": "<p>The <code>ign_install_executable</code> calls the <code>manpage</code> macro. However, this macro is not defined unless the <code>IgnRonn2Man.cmake</code> file is included. Including <code>IgnRonn2Man</code> results in another error:</p>\n<div class=\"codehilite\"><pre><span></span>ignition-cmake1/cmake1/IgnRonn2Man.cmake:57 (ADD_DEPENDENCIES):\n  Cannot add target-level dependencies to non-existent target &quot;man&quot;.\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-02T16:22:48.936218+00:00", "milestone": null, "updated_on": "2018-04-05T17:12:56.104115+00:00", "type": "issue", "id": 29}, {"priority": "major", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/30/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/30.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/30/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/30/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/30/make-function-macro-for-doc-cmakeliststxt"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/30/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Make function/macro for doc/CMakeLists.txt code", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Many ignition packages are now using the doxygen functionality from ign-cmake, but they have nearly identical cmake code in `doc/CMakeLists.txt`:\r\n\r\n* #!/ignitionrobotics/ign-math/src/104b1ae0d17dea43bff72eee79c8698626f89c0a/doc/CMakeLists.txt?at=default&fileviewer=file-view-default\r\n* #!/ignitionrobotics/ign-common/src/55c0c5209513aeeaf43c70aca32f6bf16efaf2a0/doc/CMakeLists.txt?at=doc&fileviewer=file-view-default\r\n* #!/ignitionrobotics/ign-msgs/src/72741887db2de2d9f2c7211bce54e40c43fefdb4/doc/CMakeLists.txt?at=default&fileviewer=file-view-default\r\n* #!/ignitionrobotics/ign-transport/src/9d967a0612b73a821c9822abdabf32607f1b7a26/doc/CMakeLists.txt?at=default&fileviewer=file-view-default \r\n\r\nThe only difference I can see are in setting the `IGNITION_DOXYGEN_TAGFILES` variable.\r\n\r\n~~~\r\n# from ign-msgs:\r\nset(IGNITION_DOXYGEN_TAGFILES\r\n  \"\\\"${IGNITION-MATH_DOXYGEN_TAGFILE} = ${IGNITION-MATH_API_URL}\\\"\")\r\n~~~\r\n\r\n~~~\r\n# from ign-transport\r\nset(IGNITION_DOXYGEN_TAGFILES\r\n  \"\\\"${IGNITION-MSGS_DOXYGEN_TAGFILE} = ${IGNITION-MSGS_API_URL}\\\"\")\r\n~~~\r\n\r\nWe could make `IGNITION_DOXYGEN_TAGFILES` an input parameter.", "markup": "markdown", "html": "<p>Many ignition packages are now using the doxygen functionality from ign-cmake, but they have nearly identical cmake code in <code>doc/CMakeLists.txt</code>:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-math/src/104b1ae0d17dea43bff72eee79c8698626f89c0a/doc/CMakeLists.txt?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/src/104b1ae0d17dea43bff72eee79c8698626f89c0a/doc/CMakeLists.txt?at=default&amp;fileviewer=file-view-default</a></li>\n<li><a href=\"#!/ignitionrobotics/ign-common/src/55c0c5209513aeeaf43c70aca32f6bf16efaf2a0/doc/CMakeLists.txt?at=doc&amp;fileviewer=file-view-default\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-common/src/55c0c5209513aeeaf43c70aca32f6bf16efaf2a0/doc/CMakeLists.txt?at=doc&amp;fileviewer=file-view-default</a></li>\n<li><a href=\"#!/ignitionrobotics/ign-msgs/src/72741887db2de2d9f2c7211bce54e40c43fefdb4/doc/CMakeLists.txt?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/src/72741887db2de2d9f2c7211bce54e40c43fefdb4/doc/CMakeLists.txt?at=default&amp;fileviewer=file-view-default</a></li>\n<li><a href=\"#!/ignitionrobotics/ign-transport/src/9d967a0612b73a821c9822abdabf32607f1b7a26/doc/CMakeLists.txt?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-transport/src/9d967a0612b73a821c9822abdabf32607f1b7a26/doc/CMakeLists.txt?at=default&amp;fileviewer=file-view-default</a> </li>\n</ul>\n<p>The only difference I can see are in setting the <code>IGNITION_DOXYGEN_TAGFILES</code> variable.</p>\n<div class=\"codehilite\"><pre><span></span># from ign-msgs:\nset(IGNITION_DOXYGEN_TAGFILES\n  &quot;\\&quot;<span class=\"cp\">${</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MATH_DOXYGEN_TAGFILE</span><span class=\"cp\">}</span> = <span class=\"cp\">${</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MATH_API_URL</span><span class=\"cp\">}</span>\\&quot;&quot;)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span># from ign-transport\nset(IGNITION_DOXYGEN_TAGFILES\n  &quot;\\&quot;<span class=\"cp\">${</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MSGS_DOXYGEN_TAGFILE</span><span class=\"cp\">}</span> = <span class=\"cp\">${</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MSGS_API_URL</span><span class=\"cp\">}</span>\\&quot;&quot;)\n</pre></div>\n\n\n<p>We could make <code>IGNITION_DOXYGEN_TAGFILES</code> an input parameter.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-04-06T18:32:03.131826+00:00", "milestone": null, "updated_on": "2018-05-03T18:05:52.259810+00:00", "type": "issue", "id": 30}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/31/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/31.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/31/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/31/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/31/generate-junit-xml-from-make-codecheck"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/31/vote"}}, "reporter": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "title": "Generate junit xml from `make codecheck`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "`make codecheck` could always generate junit xml, or we could make a new target that generates only junit xml.", "markup": "markdown", "html": "<p><code>make codecheck</code> could always generate junit xml, or we could make a new target that generates only junit xml.</p>", "type": "rendered"}, "assignee": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-13T14:46:42.541864+00:00", "milestone": null, "updated_on": "2018-09-01T06:57:01.842802+00:00", "type": "issue", "id": 31}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/32/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/32.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/32/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/32/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/32/problems-with-destdir-path-to-install-make"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/32/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Problems with `DESTDIR=/path/to/install make install`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Initially noted in pull request #61:\r\n\r\n* #!/ignitionrobotics/ign-cmake/pull-requests/61/install-cmake-files-to-share-instead-of/diff#comment-61329769\r\n\r\nFrom @\\_jrivero_:  I've notice that when installing the files using DESTDIR (i.e. `DESTDIR=/tmp/foo make install`) there are some `$HOME` paths that end up being installed there, but the problem is also present in `default`\r\n\r\nReply from @mxgrey: \r\n\r\nTo elaborate on Jose's comment, it seems that trying to use `make DESTDIR=/dest/dir install` has some rather problematic behavior. Apparently `DESTDIR=/dest/dir` will prefix the install paths (including `CMAKE_INSTALL_PREFIX`) with `/dest/dir`. So if `CMAKE_INSTALL_PREFIX` was `/usr/local`, then `make DESTDIR=/dest/dir install` will have the installed files go to `/dest/dir/usr/local`.\r\n\r\nThis is problematic because the example projects (which are set to be installed to `/path/to/build/folder/install`) will inadvertently get installed to `/dest/dir/path/to/build/folder/install`, which is **outside** of the build directory.\r\n\r\nWe need a way of removing the build and installation of the example projects from the build and installation of `all` (preferably by tying those to `make test` instead), or else we won't be able to correctly support `make DESTDIR=<path> install`.", "markup": "markdown", "html": "<p>Initially noted in <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/61/install-cmake-files-to-share-instead-of\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #61</a>:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/61/install-cmake-files-to-share-instead-of/diff#comment-61329769\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-cmake/pull-requests/61/install-cmake-files-to-share-instead-of/diff#comment-61329769</a></li>\n</ul>\n<p>From @_jrivero_:  I've notice that when installing the files using DESTDIR (i.e. <code>DESTDIR=/tmp/foo make install</code>) there are some <code>$HOME</code> paths that end up being installed there, but the problem is also present in <code>default</code></p>\n<p>Reply from @mxgrey: </p>\n<p>To elaborate on Jose's comment, it seems that trying to use <code>make DESTDIR=/dest/dir install</code> has some rather problematic behavior. Apparently <code>DESTDIR=/dest/dir</code> will prefix the install paths (including <code>CMAKE_INSTALL_PREFIX</code>) with <code>/dest/dir</code>. So if <code>CMAKE_INSTALL_PREFIX</code> was <code>/usr/local</code>, then <code>make DESTDIR=/dest/dir install</code> will have the installed files go to <code>/dest/dir/usr/local</code>.</p>\n<p>This is problematic because the example projects (which are set to be installed to <code>/path/to/build/folder/install</code>) will inadvertently get installed to <code>/dest/dir/path/to/build/folder/install</code>, which is <strong>outside</strong> of the build directory.</p>\n<p>We need a way of removing the build and installation of the example projects from the build and installation of <code>all</code> (preferably by tying those to <code>make test</code> instead), or else we won't be able to correctly support <code>make DESTDIR=&lt;path&gt; install</code>.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-13T21:07:35.776819+00:00", "milestone": null, "updated_on": "2018-07-25T16:29:11.204440+00:00", "type": "issue", "id": 32}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/33/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/33.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/33/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/33/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/33/helper-functions-macros-need-improvement"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/33/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Helper functions/macros need improvement for projects using qt", "component": null, "votes": 0, "watches": 1, "content": {"raw": "There are some very nice helper functions and macros for getting the names of source and test files for creating libraries, but they seems to not be that helpful for projects that use qt and need to use the `moc` compiler on the header files, for example ignition-gui:\r\n\r\n#!/ignitionrobotics/ign-gui/src/30af57b7bf3/include/ignition/gui/CMakeLists.txt\r\n\r\nThis currently works by creating the core library in the `include/ignition/gui/CMakeLists.txt` so that it can invoke the `moc` compiler on the qt header files. The source files from `src` are declared with `PARENT_SCOPE` so they can be added to the library from the include folder.\r\n\r\nIt currently works, but it seems like there's room for improvement.", "markup": "markdown", "html": "<p>There are some very nice helper functions and macros for getting the names of source and test files for creating libraries, but they seems to not be that helpful for projects that use qt and need to use the <code>moc</code> compiler on the header files, for example ignition-gui:</p>\n<p><a href=\"#!/ignitionrobotics/ign-gui/src/30af57b7bf3/include/ignition/gui/CMakeLists.txt\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-gui/src/30af57b7bf3/include/ignition/gui/CMakeLists.txt</a></p>\n<p>This currently works by creating the core library in the <code>include/ignition/gui/CMakeLists.txt</code> so that it can invoke the <code>moc</code> compiler on the qt header files. The source files from <code>src</code> are declared with <code>PARENT_SCOPE</code> so they can be added to the library from the include folder.</p>\n<p>It currently works, but it seems like there's room for improvement.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-18T00:24:02.940048+00:00", "milestone": null, "updated_on": "2018-04-18T00:24:02.940048+00:00", "type": "issue", "id": 33}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/34/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/34.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/34/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/34/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/34/use-mark_as_advanced-everywhere-that-we"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/34/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Use mark_as_advanced() everywhere that we call find_path() and find_library()", "component": null, "votes": 0, "watches": 1, "content": {"raw": "For more context: #!/ignitionrobotics/ign-cmake/pull-requests/68/properly-mark-internal-cmake-cache/diff#comment-62213951", "markup": "markdown", "html": "<p>For more context: <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/68/properly-mark-internal-cmake-cache/diff#comment-62213951\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-cmake/pull-requests/68/properly-mark-internal-cmake-cache/diff#comment-62213951</a></p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-20T21:41:03.917428+00:00", "milestone": null, "updated_on": "2018-04-21T17:33:54.621395+00:00", "type": "issue", "id": 34}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/35/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/35.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/35/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/35/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/35/packages-using-ign-cmake1-arent-exporting"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/35/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "packages using ign-cmake1 aren't exporting packages using ign-cmake0 in pkg-config requires", "component": null, "votes": 0, "watches": 1, "content": {"raw": "This is a variant of the bug fixed in pull request #56, for which a test was added in pull request #58. In the original, a package `core_child` that depends on `core_no_deps` wasn't exporting this dependency information in the pkg-config file. This bug is a variant in which `core01_child` uses `ign-cmake1`, while the dependency `core01_no_deps` uses `ign-cmake0`. In this case, `core01_child` is not exporting its dependency on `core01_no_deps` in the .pc file. I've made an example to illustrate this in [branch requires_01](#!/ignitionrobotics/ign-cmake/branch/requires01_test), though I'm not sure if we will merge it to default, since it requires ignition-cmake0. It is helpful though in illustrating the problem and testing fixes.", "markup": "markdown", "html": "<p>This is a variant of the bug fixed in <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/56/fix-pkgconfig-type-logic-for-core-project\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #56</a>, for which a test was added in <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/58/more-examples-install-create-core-library\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #58</a>. In the original, a package <code>core_child</code> that depends on <code>core_no_deps</code> wasn't exporting this dependency information in the pkg-config file. This bug is a variant in which <code>core01_child</code> uses <code>ign-cmake1</code>, while the dependency <code>core01_no_deps</code> uses <code>ign-cmake0</code>. In this case, <code>core01_child</code> is not exporting its dependency on <code>core01_no_deps</code> in the .pc file. I've made an example to illustrate this in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/branch/requires01_test\" rel=\"nofollow\">branch requires_01</a>, though I'm not sure if we will merge it to default, since it requires ignition-cmake0. It is helpful though in illustrating the problem and testing fixes.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-25T00:13:04.735928+00:00", "milestone": null, "updated_on": "2019-01-31T20:08:37.906411+00:00", "type": "issue", "id": 35}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/36/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/36.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/36/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/36/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/36/helpers-for-setting-up-ign-command-line"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/36/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Helpers for setting up ign command-line tests", "component": null, "votes": 0, "watches": 1, "content": {"raw": "It's tricky to get `UNIT_ign_TEST` configured and working properly on multiple platforms. We currently have a working example in `ign-transport4`, and the following pull request ports these changes to `ign-msgs1`, but it is a bit complicated and spread over quite a few files.\r\n\r\n* #!/ignitionrobotics/ign-msgs/pull-requests/62/fix-unit_ign_test-on-homebrew/diff\r\n\r\nIt would be nice if we could provide some helpers to simplify this.", "markup": "markdown", "html": "<p>It's tricky to get <code>UNIT_ign_TEST</code> configured and working properly on multiple platforms. We currently have a working example in <code>ign-transport4</code>, and the following pull request ports these changes to <code>ign-msgs1</code>, but it is a bit complicated and spread over quite a few files.</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-msgs/pull-requests/62/fix-unit_ign_test-on-homebrew/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/pull-requests/62/fix-unit_ign_test-on-homebrew/diff</a></li>\n</ul>\n<p>It would be nice if we could provide some helpers to simplify this.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-05-01T08:47:48.212793+00:00", "milestone": null, "updated_on": "2018-05-01T08:47:48.212793+00:00", "type": "issue", "id": 36}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/37/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/37.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/37/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/37/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/37/doxygen-tags-install-directory"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/37/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Doxygen tags install directory", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I just noticed that the doxygen tags are ending up in directories with duplicate `ignition` such as:\r\n\r\n`/usr/local/share/ignition/ignition-common1_1/ignition-common1.tag.xml`\r\n\r\nShould that be going to the following instead?\r\n\r\n`/usr/local/share/ignition/common1/ignition-common1.tag.xml`", "markup": "markdown", "html": "<p>I just noticed that the doxygen tags are ending up in directories with duplicate <code>ignition</code> such as:</p>\n<p><code>/usr/local/share/ignition/ignition-common1_1/ignition-common1.tag.xml</code></p>\n<p>Should that be going to the following instead?</p>\n<p><code>/usr/local/share/ignition/common1/ignition-common1.tag.xml</code></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-05-08T21:00:51.049852+00:00", "milestone": null, "updated_on": "2018-05-08T22:31:11.614282+00:00", "type": "issue", "id": 37}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/38/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/38.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/38/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/38/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/38/missing-license-information"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/38/vote"}}, "reporter": {"display_name": "Rich Mattes", "uuid": "{1ef6f3dd-b8db-412b-94e9-e430e7aafd23}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1ef6f3dd-b8db-412b-94e9-e430e7aafd23%7D"}, "html": {"href": "https://bitbucket.org/%7B1ef6f3dd-b8db-412b-94e9-e430e7aafd23%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d431baafeedf5d8921cb50a3c9902e16d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRM-0.png"}}, "nickname": "richmattes", "type": "user", "account_id": "557058:a38935e3-9a08-40d9-917a-ff19973e58df"}, "title": "Missing license information", "component": null, "votes": 0, "watches": 1, "content": {"raw": "While packaging for fedora, I noticed there's no license file in the repository.  I found Apache 2 and BSD licensed files in the source tree - please add LICENSE/COPYING files as applicable.", "markup": "markdown", "html": "<p>While packaging for fedora, I noticed there's no license file in the repository.  I found Apache 2 and BSD licensed files in the source tree - please add LICENSE/COPYING files as applicable.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-05-14T00:45:09.545968+00:00", "milestone": null, "updated_on": "2018-12-05T03:18:33.559216+00:00", "type": "issue", "id": 38}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/39/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/39.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/39/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/39/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/39/not-possible-to-generate-documentation-if"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/39/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Not possible to generate documentation if `BUILD_TYPE` is `coverage`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Steps to reproduce:\r\n\r\n* Compile your Ignition project with `-DCMAKE_BUILD_TYPE=coverage`\r\n* Run `make doc`:\r\n\r\n\r\n```\r\n#!python\r\n\r\nmake: *** No rule to make target 'doc'.  Stop.\r\n\r\n```", "markup": "markdown", "html": "<p>Steps to reproduce:</p>\n<ul>\n<li>Compile your Ignition project with <code>-DCMAKE_BUILD_TYPE=coverage</code></li>\n<li>Run <code>make doc</code>:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">make</span><span class=\"p\">:</span> <span class=\"o\">***</span> <span class=\"n\">No</span> <span class=\"n\">rule</span> <span class=\"n\">to</span> <span class=\"n\">make</span> <span class=\"n\">target</span> <span class=\"s1\">&#39;doc&#39;</span><span class=\"o\">.</span>  <span class=\"n\">Stop</span><span class=\"o\">.</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "invalid", "version": null, "edited_on": null, "created_on": "2018-06-08T22:16:03.633648+00:00", "milestone": null, "updated_on": "2018-06-08T22:18:16.853804+00:00", "type": "issue", "id": 39}, {"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/40/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/40.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/40/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/40/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/40/target-uuid-uuid-does-not-exist"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/40/vote"}}, "reporter": null, "title": "Target UUID::UUID does not exist", "component": null, "votes": 3, "watches": 9, "content": {"raw": "I have been trying to update an older ROS-Gazebo project, to gazebo 9 that is using ignition math:\r\n\r\nhttps://github.com/ethz-asl/rotors_simulator \r\n\r\nCurrently I am running Ubuntu 18.04, and Gazebo 9.1 and cmake 3.10.2.\r\n\r\nWhen I compile the code get an error from CMAKE, that looks like this:\r\n\r\n\r\n```\r\nCMake Error at /home/martin/ros_sim_drone/src/rotors_simulator/rotors_gazebo_plugins/CMakeLists.txt:26 (target_link_libraries):\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"UUID::UUID\" not found.\r\n```\r\n\r\nThe whole response looks like this:\r\n\r\n```\r\nErrors     << rotors_gazebo_plugins:check /home/martin/ros_sim_drone/logs/rotors_gazebo_plugins/build.check.002.log                                                                                        \r\nCMake Warning (dev) at /usr/share/cmake-3.10/Modules/FindBoost.cmake:911 (if):\r\n  Policy CMP0054 is not set: Only interpret if() arguments as variables or\r\n  keywords when unquoted.  Run \"cmake --help-policy CMP0054\" for policy\r\n  details.  Use the cmake_policy command to set the policy and suppress this\r\n  warning.\r\n\r\n  Quoted variables like \"chrono\" will no longer be dereferenced when the\r\n  policy is set to NEW.  Since the policy is not set the OLD behavior will be\r\n  used.\r\nCall Stack (most recent call first):\r\n  /usr/share/cmake-3.10/Modules/FindBoost.cmake:1558 (_Boost_MISSING_DEPENDENCIES)\r\n  /usr/share/OGRE/cmake/modules/FindOGRE.cmake:318 (find_package)\r\n  /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:175 (find_package)\r\n  CMakeLists.txt:20 (find_package)\r\nThis warning is for project developers.  Use -Wno-dev to suppress it.\r\n\r\nCMake Warning (dev) at CMakeLists.txt:28 (add_library):\r\n  Policy CMP0028 is not set: Double colon in target name means ALIAS or\r\n  IMPORTED target.  Run \"cmake --help-policy CMP0028\" for policy details.\r\n  Use the cmake_policy command to set the policy and suppress this warning.\r\n\r\n  Target \"rotors_gazebo_bag_plugin\" links to target \"UUID::UUID\" but the\r\n  target was not found.  Perhaps a find_package() call is missing for an\r\n  IMPORTED target, or an ALIAS target is missing?\r\nThis warning is for project developers.  Use -Wno-dev to suppress it.\r\n\r\nCMake Warning (dev) at CMakeLists.txt:28 (add_library):\r\n  Policy CMP0028 is not set: Double colon in target name means ALIAS or\r\n  IMPORTED target.  Run \"cmake --help-policy CMP0028\" for policy details.\r\n  Use the cmake_policy command to set the policy and suppress this warning.\r\n\r\n  Target \"rotors_gazebo_bag_plugin\" links to target \"UUID::UUID\" but the\r\n  target was not found.  Perhaps a find_package() call is missing for an\r\n  IMPORTED target, or an ALIAS target is missing?\r\nThis warning is for project developers.  Use -Wno-dev to suppress it.\r\n\r\nCMake Error at /home/martin/ros_sim_drone/src/rotors_simulator/rotors_gazebo_plugins/CMakeLists.txt:29 (target_link_libraries):\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"UUID::UUID\" not found.\r\n\r\n\r\nCMake Error:\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"UUID::UUID\" not found.\r\n\r\n\r\nCMake Error:\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"UUID::UUID\" not found.\r\n\r\n\r\nCMake Error at /home/martin/ros_sim_drone/src/rotors_simulator/rotors_gazebo_plugins/CMakeLists.txt:29 (target_link_libraries):\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"UUID::UUID\" not found.\r\n\r\n\r\nmake: *** [cmake_check_build_system] Error 1\r\n```\r\n\r\nMy cmake file currently look like this:\r\n\r\n\r\n```\r\ncmake_minimum_required(VERSION 2.8.3)\r\nproject(rotors_gazebo_plugins)\r\n\r\n\r\nfind_package(catkin REQUIRED COMPONENTS\r\n    cmake_modules\r\n    geometry_msgs\r\n    mav_msgs\r\n    rosbag\r\n    roscpp\r\n    gazebo_ros\r\n    rotors_comm\r\n    rotors_control\r\n    std_srvs\r\n    tf\r\n  )\r\n\r\nfind_package(Boost REQUIRED)\r\nfind_package(Eigen3 REQUIRED)\r\nfind_package(gazebo REQUIRED)\r\nfind_package(Protobuf REQUIRED)\r\n\r\nlink_directories(${GAZEBO_LIBRARY_DIRS})\r\ninclude_directories(include ${Boost_INCLUDE_DIR} ${catkin_INCLUDE_DIRS} ${Eigen3_INCLUDE_DIRS} ${GAZEBO_INCLUDE_DIRS})\r\n\r\n#message(AUTHOR_WARNING \"${GAZEBO_INCLUDE_DIRS}\")\r\n\r\nadd_library(rotors_gazebo_bag_plugin SHARED src/gazebo_bag_plugin.cpp)\r\ntarget_link_libraries(rotors_gazebo_bag_plugin ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})\r\n\r\n#message(AUTHOR_WARNING \"${GAZEBO_LIBRARIES}\")\r\n\r\ncatkin_package(\r\n  INCLUDE_DIRS include\r\n  LIBRARIES ${PROJECT_NAME} rotors_gazebo_motor_model rotors_gazebo_controller_interface\r\n  CATKIN_DEPENDS geometry_msgs mav_msgs rosbag roscpp rotors_comm rotors_control std_srvs tf\r\n  DEPENDS EIGEN3 GAZEBO\r\n)\r\n```\r\n\r\n\r\nPrinting out my ${GAZEBO_LIBRARIES} I got this result:\r\n\r\n```\r\nBulletSoftBody;BulletDynamics;BulletCollision;LinearMath;/usr/lib/x86_64-linux-gnu/libSimTKsimbody.so;/usr/lib/x86_64-linux-gnu/libSimTKmath.so;/usr/lib/x86_64-linux-gnu/libSimTKcommon.so;/usr/lib/x86_64-linux-gnu/libblas.so;/usr/lib/x86_64-linux-gnu/liblapack.so;/usr/lib/x86_64-linux-gnu/libblas.so;pthread;rt;dl;m;/usr/lib/x86_64-linux-gnu/libgazebo.so;/usr/lib/x86_64-linux-gnu/libgazebo_client.so;/usr/lib/x86_64-linux-gnu/libgazebo_gui.so;/usr/lib/x86_64-linux-gnu/libgazebo_sensors.so;/usr/lib/x86_64-linux-gnu/libgazebo_rendering.so;/usr/lib/x86_64-linux-gnu/libgazebo_physics.so;/usr/lib/x86_64-linux-gnu/libgazebo_ode.so;/usr/lib/x86_64-linux-gnu/libgazebo_transport.so;/usr/lib/x86_64-linux-gnu/libgazebo_msgs.so;/usr/lib/x86_64-linux-gnu/libgazebo_util.so;/usr/lib/x86_64-linux-gnu/libgazebo_common.so;/usr/lib/x86_64-linux-gnu/libgazebo_gimpact.so;/usr/lib/x86_64-linux-gnu/libgazebo_opcode.so;/usr/lib/x86_64-linux-gnu/libgazebo_opende_ou.so;/usr/lib/x86_64-linux-gnu/libgazebo_ccd.so;/usr/lib/x86_64-linux-gnu/libboost_thread.so;/usr/lib/x86_64-linux-gnu/libboost_signals.so;/usr/lib/x86_64-linux-gnu/libboost_system.so;/usr/lib/x86_64-linux-gnu/libboost_filesystem.so;/usr/lib/x86_64-linux-gnu/libboost_program_options.so;/usr/lib/x86_64-linux-gnu/libboost_regex.so;/usr/lib/x86_64-linux-gnu/libboost_iostreams.so;/usr/lib/x86_64-linux-gnu/libboost_date_time.so;/usr/lib/x86_64-linux-gnu/libboost_chrono.so;/usr/lib/x86_64-linux-gnu/libboost_atomic.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libprotobuf.so;-lpthread;/usr/lib/x86_64-linux-gnu/libsdformat.so;ignition-math4::ignition-math4;optimized;/usr/lib/x86_64-linux-gnu/libOgreMain.so;debug;/usr/lib/x86_64-linux-gnu/libOgreMain.so;/usr/lib/x86_64-linux-gnu/libboost_thread.so;/usr/lib/x86_64-linux-gnu/libboost_date_time.so;/usr/lib/x86_64-linux-gnu/libboost_system.so;/usr/lib/x86_64-linux-gnu/libboost_atomic.so;/usr/lib/x86_64-linux-gnu/libboost_chrono.so;/usr/lib/x86_64-linux-gnu/libboost_chrono.so;/usr/lib/x86_64-linux-gnu/libpthread.so;optimized;/usr/lib/x86_64-linux-gnu/libOgreTerrain.so;debug;/usr/lib/x86_64-linux-gnu/libOgreTerrain.so;optimized;/usr/lib/x86_64-linux-gnu/libOgrePaging.so;debug;/usr/lib/x86_64-linux-gnu/libOgrePaging.so;ignition-math4::ignition-math4;ignition-transport4::ignition-transport4;ignition-msgs1::ignition-msgs1;ignition-common1::ignition-common1;ignition-fuel_tools1::ignition-fuel_tools1\r\n```\r\n Diging a bit futher I found the following lines in gazebo-config.cmake\r\n\r\n```\r\n# Find Ignition Math\r\nfind_package(ignition-math4 REQUIRED)\r\nlist(APPEND GAZEBO_INCLUDE_DIRS ${IGNITION-MATH_INCLUDE_DIRS})\r\nlist(APPEND GAZEBO_LIBRARY_DIRS ${IGNITION-MATH_LIBRARY_DIRS})\r\nlist(APPEND GAZEBO_LIBRARIES ${IGNITION-MATH_LIBRARIES})\r\n```\r\nThis lead me to \"ignition-math4/ignition-math4-config.cmake\" where I found this line:\r\n\r\n```\r\nset(ignition-math4_LIBRARIES ignition-math4::ignition-math4)\r\n```\r\n\r\nThese libray  difinitions for ignition seems to be my current problem with my projects cmake script. I am unsure how this fix it, to get the correct library links for my project.", "markup": "markdown", "html": "<p>I have been trying to update an older ROS-Gazebo project, to gazebo 9 that is using ignition math:</p>\n<p><a href=\"https://github.com/ethz-asl/rotors_simulator\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ethz-asl/rotors_simulator</a> </p>\n<p>Currently I am running Ubuntu 18.04, and Gazebo 9.1 and cmake 3.10.2.</p>\n<p>When I compile the code get an error from CMAKE, that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>CMake Error at /home/martin/ros_sim_drone/src/rotors_simulator/rotors_gazebo_plugins/CMakeLists.txt:26 (target_link_libraries):\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target &quot;UUID::UUID&quot; not found.\n</pre></div>\n\n\n<p>The whole response looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>Errors     &lt;&lt; rotors_gazebo_plugins:check /home/martin/ros_sim_drone/logs/rotors_gazebo_plugins/build.check.002.log                                                                                        \nCMake Warning (dev) at /usr/share/cmake-3.10/Modules/FindBoost.cmake:911 (if):\n  Policy CMP0054 is not set: Only interpret if() arguments as variables or\n  keywords when unquoted.  Run &quot;cmake --help-policy CMP0054&quot; for policy\n  details.  Use the cmake_policy command to set the policy and suppress this\n  warning.\n\n  Quoted variables like &quot;chrono&quot; will no longer be dereferenced when the\n  policy is set to NEW.  Since the policy is not set the OLD behavior will be\n  used.\nCall Stack (most recent call first):\n  /usr/share/cmake-3.10/Modules/FindBoost.cmake:1558 (_Boost_MISSING_DEPENDENCIES)\n  /usr/share/OGRE/cmake/modules/FindOGRE.cmake:318 (find_package)\n  /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:175 (find_package)\n  CMakeLists.txt:20 (find_package)\nThis warning is for project developers.  Use -Wno-dev to suppress it.\n\nCMake Warning (dev) at CMakeLists.txt:28 (add_library):\n  Policy CMP0028 is not set: Double colon in target name means ALIAS or\n  IMPORTED target.  Run &quot;cmake --help-policy CMP0028&quot; for policy details.\n  Use the cmake_policy command to set the policy and suppress this warning.\n\n  Target &quot;rotors_gazebo_bag_plugin&quot; links to target &quot;UUID::UUID&quot; but the\n  target was not found.  Perhaps a find_package() call is missing for an\n  IMPORTED target, or an ALIAS target is missing?\nThis warning is for project developers.  Use -Wno-dev to suppress it.\n\nCMake Warning (dev) at CMakeLists.txt:28 (add_library):\n  Policy CMP0028 is not set: Double colon in target name means ALIAS or\n  IMPORTED target.  Run &quot;cmake --help-policy CMP0028&quot; for policy details.\n  Use the cmake_policy command to set the policy and suppress this warning.\n\n  Target &quot;rotors_gazebo_bag_plugin&quot; links to target &quot;UUID::UUID&quot; but the\n  target was not found.  Perhaps a find_package() call is missing for an\n  IMPORTED target, or an ALIAS target is missing?\nThis warning is for project developers.  Use -Wno-dev to suppress it.\n\nCMake Error at /home/martin/ros_sim_drone/src/rotors_simulator/rotors_gazebo_plugins/CMakeLists.txt:29 (target_link_libraries):\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target &quot;UUID::UUID&quot; not found.\n\n\nCMake Error:\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target &quot;UUID::UUID&quot; not found.\n\n\nCMake Error:\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target &quot;UUID::UUID&quot; not found.\n\n\nCMake Error at /home/martin/ros_sim_drone/src/rotors_simulator/rotors_gazebo_plugins/CMakeLists.txt:29 (target_link_libraries):\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target &quot;UUID::UUID&quot; not found.\n\n\nmake: *** [cmake_check_build_system] Error 1\n</pre></div>\n\n\n<p>My cmake file currently look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"s\">VERSION</span> <span class=\"s\">2.8.3</span><span class=\"p\">)</span>\n<span class=\"nb\">project</span><span class=\"p\">(</span><span class=\"s\">rotors_gazebo_plugins</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">catkin</span> <span class=\"s\">REQUIRED</span> <span class=\"s\">COMPONENTS</span>\n    <span class=\"s\">cmake_modules</span>\n    <span class=\"s\">geometry_msgs</span>\n    <span class=\"s\">mav_msgs</span>\n    <span class=\"s\">rosbag</span>\n    <span class=\"s\">roscpp</span>\n    <span class=\"s\">gazebo_ros</span>\n    <span class=\"s\">rotors_comm</span>\n    <span class=\"s\">rotors_control</span>\n    <span class=\"s\">std_srvs</span>\n    <span class=\"s\">tf</span>\n  <span class=\"p\">)</span>\n\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">Boost</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">Eigen3</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">gazebo</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">Protobuf</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n\n<span class=\"nb\">link_directories</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">GAZEBO_LIBRARY_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">include_directories</span><span class=\"p\">(</span><span class=\"s\">include</span> <span class=\"o\">${</span><span class=\"nv\">Boost_INCLUDE_DIR</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">catkin_INCLUDE_DIRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">Eigen3_INCLUDE_DIRS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">GAZEBO_INCLUDE_DIRS</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n<span class=\"c\">#message(AUTHOR_WARNING &quot;${GAZEBO_INCLUDE_DIRS}&quot;)</span>\n\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">rotors_gazebo_bag_plugin</span> <span class=\"s\">SHARED</span> <span class=\"s\">src/gazebo_bag_plugin.cpp</span><span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span><span class=\"s\">rotors_gazebo_bag_plugin</span> <span class=\"o\">${</span><span class=\"nv\">catkin_LIBRARIES</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">GAZEBO_LIBRARIES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n\n<span class=\"c\">#message(AUTHOR_WARNING &quot;${GAZEBO_LIBRARIES}&quot;)</span>\n\n<span class=\"nb\">catkin_package</span><span class=\"p\">(</span>\n  <span class=\"s\">INCLUDE_DIRS</span> <span class=\"s\">include</span>\n  <span class=\"s\">LIBRARIES</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span> <span class=\"s\">rotors_gazebo_motor_model</span> <span class=\"s\">rotors_gazebo_controller_interface</span>\n  <span class=\"s\">CATKIN_DEPENDS</span> <span class=\"s\">geometry_msgs</span> <span class=\"s\">mav_msgs</span> <span class=\"s\">rosbag</span> <span class=\"s\">roscpp</span> <span class=\"s\">rotors_comm</span> <span class=\"s\">rotors_control</span> <span class=\"s\">std_srvs</span> <span class=\"s\">tf</span>\n  <span class=\"s\">DEPENDS</span> <span class=\"s\">EIGEN3</span> <span class=\"s\">GAZEBO</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Printing out my ${GAZEBO_LIBRARIES} I got this result:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">BulletSoftBody</span><span class=\"o\">;</span><span class=\"nt\">BulletDynamics</span><span class=\"o\">;</span><span class=\"nt\">BulletCollision</span><span class=\"o\">;</span><span class=\"nt\">LinearMath</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libSimTKsimbody</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libSimTKmath</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libSimTKcommon</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libblas</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">liblapack</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libblas</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">pthread</span><span class=\"o\">;</span><span class=\"nt\">rt</span><span class=\"o\">;</span><span class=\"nt\">dl</span><span class=\"o\">;</span><span class=\"nt\">m</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_client</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_gui</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_sensors</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_rendering</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_physics</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_ode</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_transport</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_msgs</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_util</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_common</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_gimpact</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_opcode</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_opende_ou</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libgazebo_ccd</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_thread</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_signals</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_system</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_filesystem</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_program_options</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_regex</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_iostreams</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_date_time</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_chrono</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_atomic</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libpthread</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libprotobuf</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">-lpthread</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libsdformat</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">ignition-math4</span><span class=\"p\">::</span><span class=\"nd\">ignition-math4</span><span class=\"o\">;</span><span class=\"nt\">optimized</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libOgreMain</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">debug</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libOgreMain</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_thread</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_date_time</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_system</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_atomic</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_chrono</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libboost_chrono</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libpthread</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">optimized</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libOgreTerrain</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">debug</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libOgreTerrain</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">optimized</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libOgrePaging</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">debug</span><span class=\"o\">;/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">x86_64-linux-gnu</span><span class=\"o\">/</span><span class=\"nt\">libOgrePaging</span><span class=\"p\">.</span><span class=\"nc\">so</span><span class=\"o\">;</span><span class=\"nt\">ignition-math4</span><span class=\"p\">::</span><span class=\"nd\">ignition-math4</span><span class=\"o\">;</span><span class=\"nt\">ignition-transport4</span><span class=\"p\">::</span><span class=\"nd\">ignition-transport4</span><span class=\"o\">;</span><span class=\"nt\">ignition-msgs1</span><span class=\"p\">::</span><span class=\"nd\">ignition-msgs1</span><span class=\"o\">;</span><span class=\"nt\">ignition-common1</span><span class=\"p\">::</span><span class=\"nd\">ignition-common1</span><span class=\"o\">;</span><span class=\"nt\">ignition-fuel_tools1</span><span class=\"p\">::</span><span class=\"nd\">ignition-fuel_tools1</span>\n</pre></div>\n\n\n<p>Diging a bit futher I found the following lines in gazebo-config.cmake</p>\n<div class=\"codehilite\"><pre><span></span># Find Ignition Math\nfind_package(ignition-math4 REQUIRED)\nlist(APPEND GAZEBO_INCLUDE_DIRS <span class=\"cp\">${</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MATH_INCLUDE_DIRS</span><span class=\"cp\">}</span>)\nlist(APPEND GAZEBO_LIBRARY_DIRS <span class=\"cp\">${</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MATH_LIBRARY_DIRS</span><span class=\"cp\">}</span>)\nlist(APPEND GAZEBO_LIBRARIES <span class=\"cp\">${</span><span class=\"n\">IGNITION</span><span class=\"o\">-</span><span class=\"n\">MATH_LIBRARIES</span><span class=\"cp\">}</span>)\n</pre></div>\n\n\n<p>This lead me to \"ignition-math4/ignition-math4-config.cmake\" where I found this line:</p>\n<div class=\"codehilite\"><pre><span></span>set(ignition-math4_LIBRARIES ignition-math4::ignition-math4)\n</pre></div>\n\n\n<p>These libray  difinitions for ignition seems to be my current problem with my projects cmake script. I am unsure how this fix it, to get the correct library links for my project.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-06-15T09:53:38.178851+00:00", "milestone": null, "updated_on": "2019-03-21T20:51:45.017746+00:00", "type": "issue", "id": 40}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/41/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/41.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/41/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/41/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/41/ign-msgs2-cannot-find-protobuf-on-ubuntu"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/41/vote"}}, "reporter": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "title": "Ign msgs2 cannot find Protobuf on Ubuntu Xenial", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Installing Ign CMake `default`. This is the error:\r\n\r\n\r\n```\r\n#!python\r\n\r\n-- Looking for Protobuf - not found\r\n\r\n...\r\n\r\n-- BUILD ERRORS: These must be resolved before compiling.\r\n-- \tMissing: Protobuf\r\n--  END BUILD ERRORS\r\n```\r\n\r\nI believe the error has been introduced by pull request #81. If I comment the block checking for components, Protobuf is found. The problem appears to be that that protobuf targets (e.g.: `protobuf::libprotobuf`) don't exist, and then, we set `Protobuf_FOUND` to `false`.  In the old version of the code, we were creating the imported targets. Now, we're not doing it as `Protobuf_FOUND` is `false`.", "markup": "markdown", "html": "<p>Installing Ign CMake <code>default</code>. This is the error:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">--</span> <span class=\"n\">Looking</span> <span class=\"k\">for</span> <span class=\"n\">Protobuf</span> <span class=\"o\">-</span> <span class=\"ow\">not</span> <span class=\"n\">found</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"o\">--</span> <span class=\"n\">BUILD</span> <span class=\"n\">ERRORS</span><span class=\"p\">:</span> <span class=\"n\">These</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">compiling</span><span class=\"o\">.</span>\n<span class=\"o\">--</span>  <span class=\"n\">Missing</span><span class=\"p\">:</span> <span class=\"n\">Protobuf</span>\n<span class=\"o\">--</span>  <span class=\"n\">END</span> <span class=\"n\">BUILD</span> <span class=\"n\">ERRORS</span>\n</pre></div>\n\n\n<p>I believe the error has been introduced by <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/81/add-components-for-protobuf\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #81</a>. If I comment the block checking for components, Protobuf is found. The problem appears to be that that protobuf targets (e.g.: <code>protobuf::libprotobuf</code>) don't exist, and then, we set <code>Protobuf_FOUND</code> to <code>false</code>.  In the old version of the code, we were creating the imported targets. Now, we're not doing it as <code>Protobuf_FOUND</code> is <code>false</code>.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-06-15T17:39:34.851703+00:00", "milestone": null, "updated_on": "2018-06-18T16:52:07.333505+00:00", "type": "issue", "id": 41}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/42/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/42.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/42/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/42/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/42/missing-some-windows-compiler-warnings"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/42/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Missing some windows compiler warnings?", "component": null, "votes": 0, "watches": 1, "content": {"raw": "While using the `gz11` branch of ign-math, I had to update our fork of gtest to fix some windows build failures:\r\n\r\n* #!/ignitionrobotics/ign-math/pull-requests/271/gcc8-use-new-version-of-gtest-to-fix/diff\r\n\r\nToday I just noticed that the `ign-math2` and `ign-math3` branches have loads of compiler warnings related to `std::tr1` stuff in gtest, which was the cause of the failure in `gz11`:\r\n\r\n* [![Build Status](https://build.osrfoundation.org/buildStatus/icon?job=ignition_math-ci-ign-math2-windows7-amd64&build=9)](https://build.osrfoundation.org/job/ignition_math-ci-ign-math2-windows7-amd64/9/) https://build.osrfoundation.org/view/os_windows/job/ignition_math-ci-ign-math2-windows7-amd64/9/warnings43Result/\r\n* [![Build Status](https://build.osrfoundation.org/buildStatus/icon?job=ignition_math-ci-ign-math3-windows7-amd64&build=10)](https://build.osrfoundation.org/job/ignition_math-ci-ign-math3-windows7-amd64/10/) https://build.osrfoundation.org/view/os_windows/job/ignition_math-ci-ign-math3-windows7-amd64/10/warnings43Result/\r\n\r\nOddly, the `ign-math4` build does not report any warnings:\r\n\r\n* [![Build Status](https://build.osrfoundation.org/buildStatus/icon?job=ignition_math-ci-ign-math4-windows7-amd64&build=24)](https://build.osrfoundation.org/job/ignition_math-ci-ign-math4-windows7-amd64/24/) https://build.osrfoundation.org/job/ignition_math-ci-ign-math4-windows7-amd64/24/warnings43Result/\r\n\r\nThe `ign-math2` and `ign-math3` branches have slightly different versions of gtest, but `ign-math4` has the same version as `ign-math3`, so I would expect it to have the same compiler warnings. Also, I've reported this here because `ign-math4` uses `ign-cmake0`, while math2/3 have their own cmake code.\r\n\r\nAny ideas @mxgrey ?", "markup": "markdown", "html": "<p>While using the <code>gz11</code> branch of ign-math, I had to update our fork of gtest to fix some windows build failures:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-math/pull-requests/271/gcc8-use-new-version-of-gtest-to-fix/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/pull-requests/271/gcc8-use-new-version-of-gtest-to-fix/diff</a></li>\n</ul>\n<p>Today I just noticed that the <code>ign-math2</code> and <code>ign-math3</code> branches have loads of compiler warnings related to <code>std::tr1</code> stuff in gtest, which was the cause of the failure in <code>gz11</code>:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/ignition_math-ci-ign-math2-windows7-amd64/9/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=ignition_math-ci-ign-math2-windows7-amd64&amp;build=9\" /></a> <a href=\"https://build.osrfoundation.org/view/os_windows/job/ignition_math-ci-ign-math2-windows7-amd64/9/warnings43Result/\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/view/os_windows/job/ignition_math-ci-ign-math2-windows7-amd64/9/warnings43Result/</a></li>\n<li><a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/ignition_math-ci-ign-math3-windows7-amd64/10/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=ignition_math-ci-ign-math3-windows7-amd64&amp;build=10\" /></a> <a href=\"https://build.osrfoundation.org/view/os_windows/job/ignition_math-ci-ign-math3-windows7-amd64/10/warnings43Result/\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/view/os_windows/job/ignition_math-ci-ign-math3-windows7-amd64/10/warnings43Result/</a></li>\n</ul>\n<p>Oddly, the <code>ign-math4</code> build does not report any warnings:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/ignition_math-ci-ign-math4-windows7-amd64/24/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=ignition_math-ci-ign-math4-windows7-amd64&amp;build=24\" /></a> <a href=\"https://build.osrfoundation.org/job/ignition_math-ci-ign-math4-windows7-amd64/24/warnings43Result/\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/job/ignition_math-ci-ign-math4-windows7-amd64/24/warnings43Result/</a></li>\n</ul>\n<p>The <code>ign-math2</code> and <code>ign-math3</code> branches have slightly different versions of gtest, but <code>ign-math4</code> has the same version as <code>ign-math3</code>, so I would expect it to have the same compiler warnings. Also, I've reported this here because <code>ign-math4</code> uses <code>ign-cmake0</code>, while math2/3 have their own cmake code.</p>\n<p>Any ideas @mxgrey ?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-06-21T00:19:19.446615+00:00", "milestone": null, "updated_on": "2018-06-21T00:24:00.457704+00:00", "type": "issue", "id": 42}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/43/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/43.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/43/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/43/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/43/remove-detail-headers-from"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/43/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Remove detail headers from ign_auto_headers.hh", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The headers in the `detail/` subfolder are included first in the generated `ign_auto_headers.hh` file, which is causing some issues. Some would prefer to not have the detail headers included in that auto-generated file.\r\n\r\n* #!/ignitionrobotics/ign-cmake/src/default/cmake/ign_auto_headers.hh.in\r\n* #!/ignitionrobotics/ign-math/pull-requests/250/added-cylinder-class/diff#comment-65720980\r\n* #!/ignitionrobotics/ign-math/pull-requests/250/added-cylinder-class/diff#comment-69250536\r\n\r\ncc @mxgrey @carromj @nkoenig", "markup": "markdown", "html": "<p>The headers in the <code>detail/</code> subfolder are included first in the generated <code>ign_auto_headers.hh</code> file, which is causing some issues. Some would prefer to not have the detail headers included in that auto-generated file.</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-cmake/src/default/cmake/ign_auto_headers.hh.in\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-cmake/src/default/cmake/ign_auto_headers.hh.in</a></li>\n<li><a href=\"#!/ignitionrobotics/ign-math/pull-requests/250/added-cylinder-class/diff#comment-65720980\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/pull-requests/250/added-cylinder-class/diff#comment-65720980</a></li>\n<li><a href=\"#!/ignitionrobotics/ign-math/pull-requests/250/added-cylinder-class/diff#comment-69250536\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/pull-requests/250/added-cylinder-class/diff#comment-69250536</a></li>\n</ul>\n<p>cc @mxgrey @carromj @nkoenig</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-07-06T20:30:11.411528+00:00", "milestone": null, "updated_on": "2018-07-06T20:30:11.411528+00:00", "type": "issue", "id": 43}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/44/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/44.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/44/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/44/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/44/utilities-headers-in-ign-cmake-missing"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/44/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "utilities headers in ign-cmake missing from .pc file include flags", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The utilities/SuppressWarning.hh headers added in pull request #101 are not represented in any ignition pkg-config .pc files. I just noticed this while working on a test for the homebrew formula of ign-plugin, and when trying to use it's compiler flags, the utilities folder is missing from the include flags.\r\n\r\ncc @mxgrey", "markup": "markdown", "html": "<p>The utilities/SuppressWarning.hh headers added in <a href=\"#!/ignitionrobotics/ign-cmake/pull-requests/101/warning-suppression-utility\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #101</a> are not represented in any ignition pkg-config .pc files. I just noticed this while working on a test for the homebrew formula of ign-plugin, and when trying to use it's compiler flags, the utilities folder is missing from the include flags.</p>\n<p>cc @mxgrey</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-07-26T17:41:39.085179+00:00", "milestone": null, "updated_on": "2018-07-27T21:13:16.618050+00:00", "type": "issue", "id": 44}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/45/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/45.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/45/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/45/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/45/case-sensitive-filesystem-check-is-broken"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/45/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Case-sensitive filesystem check is broken, missing a script", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I was reading through other code, and I noticed that [IgnConfigureProject.cmake](#!/ignitionrobotics/ign-cmake/src/223ec712a1bc82109af13b678f2a6e60bae2553e/cmake/IgnConfigureProject.cmake#lines-210) tries to call a bash script called `case_sensitive_filesystem`, but that file is not in this repository. I'm guessing this code was copied from gazebo, which does have this file:\r\n\r\n* https://bitbucket.org/osrf/gazebo/src/default/tools/case_sensitive_filesystem\r\n\r\nThis file would need to be added to ign-cmake, installed, and the find path updated.\r\n\r\nIt is not urgent though.", "markup": "markdown", "html": "<p>I was reading through other code, and I noticed that <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/src/223ec712a1bc82109af13b678f2a6e60bae2553e/cmake/IgnConfigureProject.cmake#lines-210\" rel=\"nofollow\">IgnConfigureProject.cmake</a> tries to call a bash script called <code>case_sensitive_filesystem</code>, but that file is not in this repository. I'm guessing this code was copied from gazebo, which does have this file:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/osrf/gazebo/src/default/tools/case_sensitive_filesystem\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/gazebo/src/default/tools/case_sensitive_filesystem</a></li>\n</ul>\n<p>This file would need to be added to ign-cmake, installed, and the find path updated.</p>\n<p>It is not urgent though.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-08-28T18:42:42.755257+00:00", "milestone": null, "updated_on": "2018-08-28T18:42:42.755257+00:00", "type": "issue", "id": 45}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/46/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/46.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/46/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/46/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/46/coverage-testing-on-gz11-fails-to-exclude"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/46/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Coverage testing on gz11 fails to exclude irrelevant files", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Initially discussed here:\r\n\r\n#!/ignitionrobotics/ign-math/pull-requests/268/fix-compilation-using-gcc8-and-add-support/diff#comment-66512565\r\n\r\n\"it's not properly excluding files; it has the gtest and *_TEST.cc files in the coverage list now\"\r\n\r\n* https://codecov.io/bb/ignitionrobotics/ign-math/branch/gcc8_c%2B%2B17", "markup": "markdown", "html": "<p>Initially discussed here:</p>\n<p><a href=\"#!/ignitionrobotics/ign-math/pull-requests/268/fix-compilation-using-gcc8-and-add-support/diff#comment-66512565\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/pull-requests/268/fix-compilation-using-gcc8-and-add-support/diff#comment-66512565</a></p>\n<p>\"it's not properly excluding files; it has the gtest and *_TEST.cc files in the coverage list now\"</p>\n<ul>\n<li><a href=\"https://codecov.io/bb/ignitionrobotics/ign-math/branch/gcc8_c%2B%2B17\" rel=\"nofollow\" class=\"ap-connect-link\">https://codecov.io/bb/ignitionrobotics/ign-math/branch/gcc8_c%2B%2B17</a></li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-09-04T17:58:48.957294+00:00", "milestone": null, "updated_on": "2019-01-31T19:40:34.066939+00:00", "type": "issue", "id": 46}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/47/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/47.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/47/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/47/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/47/duplicated-imported-target-error"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/47/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Duplicated imported target error", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I was not able to reproduce it in a simple example, but when using gazebo9 as part of a CMake superbuild, I encounter several of this errors: \r\n~~~\r\n CMake Error at /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/IgnImportTarget.cmake:88 (add_library):\r\n   add_library cannot create imported target \"DL::DL\" because another target\r\n   with the same name already exists.\r\n Call Stack (most recent call first):\r\n   /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/FindDL.cmake:78 (ign_import_target)\r\n   /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package)\r\n   /usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-config.cmake:108 (find_dependency)\r\n   /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:203 (find_package)\r\n   cmake/Buildgazebo-fmi.cmake:12 (find_package)\r\n   /home/straversaro/src/robotology-superbuild/build/install/share/YCM/modules/FindOrBuildPackage.cmake:235 (include)\r\n~~~\r\n\r\nIt seems to me that the problem was solved in ignition-cmake0, but I guess it would make sense to backport the fix to ignition-cmake0 .", "markup": "markdown", "html": "<p>I was not able to reproduce it in a simple example, but when using gazebo9 as part of a CMake superbuild, I encounter several of this errors: </p>\n<div class=\"codehilite\"><pre><span></span> CMake Error at /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/IgnImportTarget.cmake:88 (add_library):\n   add_library cannot create imported target &quot;DL::DL&quot; because another target\n   with the same name already exists.\n Call Stack (most recent call first):\n   /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/FindDL.cmake:78 (ign_import_target)\n   /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package)\n   /usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-config.cmake:108 (find_dependency)\n   /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:203 (find_package)\n   cmake/Buildgazebo-fmi.cmake:12 (find_package)\n   /home/straversaro/src/robotology-superbuild/build/install/share/YCM/modules/FindOrBuildPackage.cmake:235 (include)\n</pre></div>\n\n\n<p>It seems to me that the problem was solved in ignition-cmake0, but I guess it would make sense to backport the fix to ignition-cmake0 .</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-09-20T09:46:31.014635+00:00", "milestone": null, "updated_on": "2018-09-25T04:24:27.699720+00:00", "type": "issue", "id": 47}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/48/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/48.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/48/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/48/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/48/finding-package-with-components-that-have"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/48/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "finding package with components that have a dependent relationship is tricky", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [X] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\nIf a package has components with a dependency relationship (such as ign-physics-dartsim-plugin, which depends on ignition-physics-sdf and ignition-physics-mesh), then then all the components must be listed in the `ign_find_package` call and in a proper order. The following is a workaround for this issue in ign-gazebo:\r\n\r\n* #!/ignitionrobotics/ign-gazebo/pull-requests/105/find-mesh-component-of-physics/diff\r\n\r\n# Steps to Reproduce\r\n\r\nI've demonstrated this issue with some examples committed to [branch find_component_order_working](#!/ignitionrobotics/ign-cmake/branch/find_component_order_working) and [branch find_component_order](#!/ignitionrobotics/ign-cmake/branch/find_component_order). The `find_component_order_working` branch creates a package `component_deps` that has two components: `parent` and `child`, and the `child` component links against the `parent`. There is a second package called `use_component_deps1` that makes an `ign_find_package` call for `component_deps` specifying both components `parent child`. This example builds fine:\r\n\r\n1. `hg up find_component_order_working`\r\n2. `mkdir build && cd build && cmake ..`\r\n3. `make` (successful)\r\n\r\nNow on branch [branch find_component_order](#!/ignitionrobotics/ign-cmake/branch/find_component_order), another example named `use_component_deps2 ` is added that differs from `use_component_deps1` only in the order that components are specified in the `ign_find_package` call, but it fails to build:\r\n\r\n1. `hg up find_component_order`\r\n2. `mkdir build && cd build && cmake ..`\r\n3. `make` (unsuccessful)\r\n\r\n**Expected behavior:**  \r\n\r\nI would expect the examples to build regardless of the order in which components are specified. Furthermore, I would that specifying a component would cause dependent components to be included as well (as in the ign-physics example mentioned above).\r\n\r\n**Actual behavior:**\r\n\r\n`ign_find_package` is sensitive to the order of specified components when there is a dependent relationship, and dependent components must all be listed.\r\n\r\n**Reproduces how often:** \r\n\r\n100%\r\n\r\n# Versions\r\n\r\nign-cmake1 and ign-cmake2\r\n\r\n# Additional Information", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[X] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>If a package has components with a dependency relationship (such as ign-physics-dartsim-plugin, which depends on ignition-physics-sdf and ignition-physics-mesh), then then all the components must be listed in the <code>ign_find_package</code> call and in a proper order. The following is a workaround for this issue in ign-gazebo:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/105/find-mesh-component-of-physics/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-gazebo/pull-requests/105/find-mesh-component-of-physics/diff</a></li>\n</ul>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<p>I've demonstrated this issue with some examples committed to <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/branch/find_component_order_working\" rel=\"nofollow\">branch find_component_order_working</a> and <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/branch/find_component_order\" rel=\"nofollow\">branch find_component_order</a>. The <code>find_component_order_working</code> branch creates a package <code>component_deps</code> that has two components: <code>parent</code> and <code>child</code>, and the <code>child</code> component links against the <code>parent</code>. There is a second package called <code>use_component_deps1</code> that makes an <code>ign_find_package</code> call for <code>component_deps</code> specifying both components <code>parent child</code>. This example builds fine:</p>\n<ol>\n<li><code>hg up find_component_order_working</code></li>\n<li><code>mkdir build &amp;&amp; cd build &amp;&amp; cmake ..</code></li>\n<li><code>make</code> (successful)</li>\n</ol>\n<p>Now on branch <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/branch/find_component_order\" rel=\"nofollow\">branch find_component_order</a>, another example named <code>use_component_deps2</code> is added that differs from <code>use_component_deps1</code> only in the order that components are specified in the <code>ign_find_package</code> call, but it fails to build:</p>\n<ol>\n<li><code>hg up find_component_order</code></li>\n<li><code>mkdir build &amp;&amp; cd build &amp;&amp; cmake ..</code></li>\n<li><code>make</code> (unsuccessful)</li>\n</ol>\n<p><strong>Expected behavior:</strong>  </p>\n<p>I would expect the examples to build regardless of the order in which components are specified. Furthermore, I would that specifying a component would cause dependent components to be included as well (as in the ign-physics example mentioned above).</p>\n<p><strong>Actual behavior:</strong></p>\n<p><code>ign_find_package</code> is sensitive to the order of specified components when there is a dependent relationship, and dependent components must all be listed.</p>\n<p><strong>Reproduces how often:</strong> </p>\n<p>100%</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>ign-cmake1 and ign-cmake2</p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-12-19T10:45:19.573103+00:00", "milestone": null, "updated_on": "2019-01-22T19:53:58.104690+00:00", "type": "issue", "id": 48}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/49/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/49.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/49/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/49/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/49/tinyxml2-not-found-when-required-by-two"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/49/vote"}}, "reporter": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "title": "tinyxml2 not found when required by two packages", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [ ] Put an X between the brackets on this line if you have done all of the following:\r\n    * [X] Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * [X] Checked that your issue isn't already filed.\r\n    * [X] Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\nIf `tinyxml2` is a required package for two other packages, in this case `ignition-common3::graphics` and `DART::dart-utils`, depending on the order of calls to `ign_find_package`, `tinyxml2` is reported to be not found. This a strange failure because CMake reports that it found `tinyxml2` but then subsequently reports that it's missing `TINYXML2_INCLUDE_DIRS`.\r\n\r\n\r\n# Steps to Reproduce\r\n\r\nHere are two CMakeLists.txt files that demonstrate the problem\r\n\r\n**Failing example:**\r\n\r\n\r\n```\r\n#!cmake\r\n\r\ncmake_minimum_required(VERSION 3.5.1 FATAL_ERROR)\r\nproject(test-tinyxml2 VERSION 1.0.0)\r\nfind_package(ignition-cmake2 REQUIRED)\r\n\r\nign_find_package(ignition-common3 COMPONENTS graphics)\r\n\r\nign_find_package(DART\r\n  COMPONENTS\r\n    utils\r\n  PKGCONFIG dart\r\n  PKGCONFIG_VER_COMPARISON >=)\r\n```\r\n\r\nThe result of running cmake on this:\r\n\r\n```\r\n-- The C compiler identification is GNU 8.2.0\r\n-- The CXX compiler identification is GNU 8.2.0\r\n-- Check for working C compiler: /usr/lib/ccache/cc\r\n-- Check for working C compiler: /usr/lib/ccache/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/lib/ccache/c++\r\n-- Check for working CXX compiler: /usr/lib/ccache/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Looking for ignition-common3 -- found version 3.0.0~pre4\r\n-- Searching for dependencies of ignition-common3\r\n-- Looking for dlfcn.h - found\r\n-- Looking for libdl - found\r\n-- Found DL: TRUE  \r\n-- Checking for module 'uuid'\r\n--   Found uuid, version 2.31.1\r\n-- Found UUID: TRUE  \r\n-- Searching for <ignition-common3> component [graphics]\r\n-- Looking for ignition-common3-graphics -- found version 3.0.0~pre4\r\n-- Searching for dependencies of ignition-common3-graphics\r\n-- Looking for ignition-math6 -- found version 6.0.0~pre4\r\n-- Searching for dependencies of ignition-math6\r\n-- Checking for module 'tinyxml2'\r\n--   Found tinyxml2, version 6.0.0\r\n-- Found FreeImage: TRUE (Required is at least version \"3.9\") \r\n-- Checking for module 'gts'\r\n--   Found gts, version 0.7.6\r\n-- Found GTS: TRUE  \r\n-- Looking for ignition-common3 - found\r\n\r\n-- Could NOT find TINYXML2 (missing: TINYXML2_INCLUDE_DIRS) (found version \"6.0.0\")\r\nCMake Warning at /usr/local/share/dart/cmake/dart_utilsComponent.cmake:11 (message):\r\n  Cannot retrieve dart-utils because the dependency tinyxml2 could not be\r\n  found.  This usually indicates a broken installation.\r\nCall Stack (most recent call first):\r\n  /usr/local/share/dart/cmake/DARTConfig.cmake:63 (include)\r\n  /usr/local/share/dart/cmake/DARTConfig.cmake:124 (dart_traverse_components)\r\n  /usr/local/share/dart/cmake/DARTConfig.cmake:172 (dart_package_init)\r\n  /home/addisu/ws/ign_base/devel/share/cmake/ignition-cmake2/cmake2/IgnUtils.cmake:188 (find_package)\r\n  CMakeLists.txt:7 (ign_find_package)\r\n\r\n\r\n-- Found CCD: /usr/include (found version \"2.0\") \r\n-- Found FCL: /usr/include (found version \"0.5.0\") \r\n-- Found ASSIMP: /usr/include (found version \"4.1.0\") \r\n-- Found DART: /usr/local/include  found components:  utils dart \r\n-- Looking for DART - found\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: \r\n```\r\n\r\n**Working example: (`ignition-common3` comes after `DART`)**\r\n\r\n```\r\n#!cmake\r\n\r\ncmake_minimum_required(VERSION 3.5.1 FATAL_ERROR)\r\nproject(test-tinyxml2 VERSION 1.0.0)\r\nfind_package(ignition-cmake2 REQUIRED)\r\n\r\nign_find_package(DART\r\n  COMPONENTS\r\n    utils\r\n  PKGCONFIG dart\r\n  PKGCONFIG_VER_COMPARISON >=)\r\n\r\nign_find_package(ignition-common3 COMPONENTS graphics)\r\n```\r\n\r\nThe result of running cmake on this:\r\n```\r\n-- The C compiler identification is GNU 8.2.0\r\n-- The CXX compiler identification is GNU 8.2.0\r\n-- Check for working C compiler: /usr/lib/ccache/cc\r\n-- Check for working C compiler: /usr/lib/ccache/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/lib/ccache/c++\r\n-- Check for working CXX compiler: /usr/lib/ccache/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Found TINYXML2: /usr/include (found version \"6.0.0\") \r\n-- Found CCD: /usr/include (found version \"2.0\") \r\n-- Found FCL: /usr/include (found version \"0.5.0\") \r\n-- Found ASSIMP: /usr/include (found version \"4.1.0\") \r\n-- Found DART: /usr/local/include  found components:  utils dart \r\n-- Looking for DART - found\r\n\r\n-- Looking for ignition-common3 -- found version 3.0.0~pre4\r\n-- Searching for dependencies of ignition-common3\r\n-- Looking for dlfcn.h - found\r\n-- Looking for libdl - found\r\n-- Found DL: TRUE  \r\n-- Checking for module 'uuid'\r\n--   Found uuid, version 2.31.1\r\n-- Found UUID: TRUE  \r\n-- Searching for <ignition-common3> component [graphics]\r\n-- Looking for ignition-common3-graphics -- found version 3.0.0~pre4\r\n-- Searching for dependencies of ignition-common3-graphics\r\n-- Looking for ignition-math6 -- found version 6.0.0~pre4\r\n-- Searching for dependencies of ignition-math6\r\n-- Checking for module 'tinyxml2'\r\n--   Found tinyxml2, version 6.0.0\r\n-- Found FreeImage: TRUE (Required is at least version \"3.9\") \r\n-- Checking for module 'gts'\r\n--   Found gts, version 0.7.6\r\n-- Found GTS: TRUE  \r\n-- Looking for ignition-common3 - found\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: \r\n```\r\n\r\n**Expected behavior:**  \r\n\r\n`tinyxml2` should be found in regardless of the order of calls to `ign_find_package`\r\n\r\n**Actual behavior:**\r\n\r\nThe order of calls to `ign_find_package` matters.\r\n\r\n**Reproduces how often:** \r\n\r\n100% of the time\r\n\r\n# Versions\r\n\r\n* `ignition-common3` (`gz11` branch)\r\n* DART v6.7.2\r\n* `ignition-cmake2` (`gz11` branch)", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[ ] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>[X] Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>[X] Checked that your issue isn't already filed.</li>\n<li>[X] Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>If <code>tinyxml2</code> is a required package for two other packages, in this case <code>ignition-common3::graphics</code> and <code>DART::dart-utils</code>, depending on the order of calls to <code>ign_find_package</code>, <code>tinyxml2</code> is reported to be not found. This a strange failure because CMake reports that it found <code>tinyxml2</code> but then subsequently reports that it's missing <code>TINYXML2_INCLUDE_DIRS</code>.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<p>Here are two CMakeLists.txt files that demonstrate the problem</p>\n<p><strong>Failing example:</strong></p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"s\">VERSION</span> <span class=\"s\">3.5.1</span> <span class=\"s\">FATAL_ERROR</span><span class=\"p\">)</span>\n<span class=\"nb\">project</span><span class=\"p\">(</span><span class=\"s\">test-tinyxml2</span> <span class=\"s\">VERSION</span> <span class=\"s\">1.0.0</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-cmake2</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n\n<span class=\"nb\">ign_find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-common3</span> <span class=\"s\">COMPONENTS</span> <span class=\"s\">graphics</span><span class=\"p\">)</span>\n\n<span class=\"nb\">ign_find_package</span><span class=\"p\">(</span><span class=\"s\">DART</span>\n  <span class=\"s\">COMPONENTS</span>\n    <span class=\"s\">utils</span>\n  <span class=\"s\">PKGCONFIG</span> <span class=\"s\">dart</span>\n  <span class=\"s\">PKGCONFIG_VER_COMPARISON</span> <span class=\"s\">&gt;=</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The result of running cmake on this:</p>\n<div class=\"codehilite\"><pre><span></span>-- The C compiler identification is GNU 8.2.0\n-- The CXX compiler identification is GNU 8.2.0\n-- Check for working C compiler: /usr/lib/ccache/cc\n-- Check for working C compiler: /usr/lib/ccache/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/lib/ccache/c++\n-- Check for working CXX compiler: /usr/lib/ccache/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Looking for ignition-common3 -- found version 3.0.0~pre4\n-- Searching for dependencies of ignition-common3\n-- Looking for dlfcn.h - found\n-- Looking for libdl - found\n-- Found DL: TRUE  \n-- Checking for module &#39;uuid&#39;\n--   Found uuid, version 2.31.1\n-- Found UUID: TRUE  \n-- Searching for &lt;ignition-common3&gt; component [graphics]\n-- Looking for ignition-common3-graphics -- found version 3.0.0~pre4\n-- Searching for dependencies of ignition-common3-graphics\n-- Looking for ignition-math6 -- found version 6.0.0~pre4\n-- Searching for dependencies of ignition-math6\n-- Checking for module &#39;tinyxml2&#39;\n--   Found tinyxml2, version 6.0.0\n-- Found FreeImage: TRUE (Required is at least version &quot;3.9&quot;) \n-- Checking for module &#39;gts&#39;\n--   Found gts, version 0.7.6\n-- Found GTS: TRUE  \n-- Looking for ignition-common3 - found\n\n-- Could NOT find TINYXML2 (missing: TINYXML2_INCLUDE_DIRS) (found version &quot;6.0.0&quot;)\nCMake Warning at /usr/local/share/dart/cmake/dart_utilsComponent.cmake:11 (message):\n  Cannot retrieve dart-utils because the dependency tinyxml2 could not be\n  found.  This usually indicates a broken installation.\nCall Stack (most recent call first):\n  /usr/local/share/dart/cmake/DARTConfig.cmake:63 (include)\n  /usr/local/share/dart/cmake/DARTConfig.cmake:124 (dart_traverse_components)\n  /usr/local/share/dart/cmake/DARTConfig.cmake:172 (dart_package_init)\n  /home/addisu/ws/ign_base/devel/share/cmake/ignition-cmake2/cmake2/IgnUtils.cmake:188 (find_package)\n  CMakeLists.txt:7 (ign_find_package)\n\n\n-- Found CCD: /usr/include (found version &quot;2.0&quot;) \n-- Found FCL: /usr/include (found version &quot;0.5.0&quot;) \n-- Found ASSIMP: /usr/include (found version &quot;4.1.0&quot;) \n-- Found DART: /usr/local/include  found components:  utils dart \n-- Looking for DART - found\n\n-- Configuring done\n-- Generating done\n-- Build files have been written to: \n</pre></div>\n\n\n<p><strong>Working example: (<code>ignition-common3</code> comes after <code>DART</code>)</strong></p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"s\">VERSION</span> <span class=\"s\">3.5.1</span> <span class=\"s\">FATAL_ERROR</span><span class=\"p\">)</span>\n<span class=\"nb\">project</span><span class=\"p\">(</span><span class=\"s\">test-tinyxml2</span> <span class=\"s\">VERSION</span> <span class=\"s\">1.0.0</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-cmake2</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n\n<span class=\"nb\">ign_find_package</span><span class=\"p\">(</span><span class=\"s\">DART</span>\n  <span class=\"s\">COMPONENTS</span>\n    <span class=\"s\">utils</span>\n  <span class=\"s\">PKGCONFIG</span> <span class=\"s\">dart</span>\n  <span class=\"s\">PKGCONFIG_VER_COMPARISON</span> <span class=\"s\">&gt;=</span><span class=\"p\">)</span>\n\n<span class=\"nb\">ign_find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-common3</span> <span class=\"s\">COMPONENTS</span> <span class=\"s\">graphics</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The result of running cmake on this:</p>\n<div class=\"codehilite\"><pre><span></span>-- The C compiler identification is GNU 8.2.0\n-- The CXX compiler identification is GNU 8.2.0\n-- Check for working C compiler: /usr/lib/ccache/cc\n-- Check for working C compiler: /usr/lib/ccache/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/lib/ccache/c++\n-- Check for working CXX compiler: /usr/lib/ccache/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Found TINYXML2: /usr/include (found version &quot;6.0.0&quot;) \n-- Found CCD: /usr/include (found version &quot;2.0&quot;) \n-- Found FCL: /usr/include (found version &quot;0.5.0&quot;) \n-- Found ASSIMP: /usr/include (found version &quot;4.1.0&quot;) \n-- Found DART: /usr/local/include  found components:  utils dart \n-- Looking for DART - found\n\n-- Looking for ignition-common3 -- found version 3.0.0~pre4\n-- Searching for dependencies of ignition-common3\n-- Looking for dlfcn.h - found\n-- Looking for libdl - found\n-- Found DL: TRUE  \n-- Checking for module &#39;uuid&#39;\n--   Found uuid, version 2.31.1\n-- Found UUID: TRUE  \n-- Searching for &lt;ignition-common3&gt; component [graphics]\n-- Looking for ignition-common3-graphics -- found version 3.0.0~pre4\n-- Searching for dependencies of ignition-common3-graphics\n-- Looking for ignition-math6 -- found version 6.0.0~pre4\n-- Searching for dependencies of ignition-math6\n-- Checking for module &#39;tinyxml2&#39;\n--   Found tinyxml2, version 6.0.0\n-- Found FreeImage: TRUE (Required is at least version &quot;3.9&quot;) \n-- Checking for module &#39;gts&#39;\n--   Found gts, version 0.7.6\n-- Found GTS: TRUE  \n-- Looking for ignition-common3 - found\n\n-- Configuring done\n-- Generating done\n-- Build files have been written to: \n</pre></div>\n\n\n<p><strong>Expected behavior:</strong>  </p>\n<p><code>tinyxml2</code> should be found in regardless of the order of calls to <code>ign_find_package</code></p>\n<p><strong>Actual behavior:</strong></p>\n<p>The order of calls to <code>ign_find_package</code> matters.</p>\n<p><strong>Reproduces how often:</strong> </p>\n<p>100% of the time</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<ul>\n<li><code>ignition-common3</code> (<code>gz11</code> branch)</li>\n<li>DART v6.7.2</li>\n<li><code>ignition-cmake2</code> (<code>gz11</code> branch)</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-01-22T17:49:52.284439+00:00", "milestone": null, "updated_on": "2019-01-31T19:40:05.032954+00:00", "type": "issue", "id": 49}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/50/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/50.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/50/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/50/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/50/make-6-cmakefiles-codecheck-error-1"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/50/vote"}}, "reporter": null, "title": "make[6]: *** [CMakeFiles/codecheck] Error 1", "component": null, "votes": 0, "watches": null, "content": {"raw": "~~~\r\n[  4%] Performing codecheck step for 'core_no_deps_Release'\r\ncd ....../ign-cmake/build/examples && /usr/local/bin/cmake --build ....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build --target codecheck\r\nmake[3]: Entering directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nmake[4]: Entering directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nmake[5]: Entering directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nmake[6]: Entering directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nmake[6]: Leaving directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nmake[6]: Entering directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nCMakeFiles/codecheck.dir/build.make:57: recipe for target 'CMakeFiles/codecheck' failed\r\nmake[6]: *** [CMakeFiles/codecheck] Error 1\r\nmake[6]: Leaving directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nCMakeFiles/Makefile2:776: recipe for target 'CMakeFiles/codecheck.dir/all' failed\r\nmake[5]: *** [CMakeFiles/codecheck.dir/all] Error 2\r\nmake[5]: Leaving directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nCMakeFiles/Makefile2:783: recipe for target 'CMakeFiles/codecheck.dir/rule' failed\r\nmake[4]: *** [CMakeFiles/codecheck.dir/rule] Error 2\r\nmake[4]: Leaving directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nMakefile:483: recipe for target 'codecheck' failed\r\nmake[3]: *** [codecheck] Error 2\r\nmake[3]: Leaving directory '....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build'\r\nexamples/CMakeFiles/core_no_deps_Release.dir/build.make:128: recipe for target 'examples/core_no_deps_Release-prefix/src/core_no_deps_Release-stamp/core_no_deps_Release-codecheck' failed\r\nmake[2]: *** [examples/core_no_deps_Release-prefix/src/core_no_deps_Release-stamp/core_no_deps_Release-codecheck] Error 2\r\nmake[2]: Leaving directory '....../ign-cmake/build'\r\nCMakeFiles/Makefile2:1880: recipe for target 'examples/CMakeFiles/core_no_deps_Release.dir/all' failed\r\nmake[1]: *** [examples/CMakeFiles/core_no_deps_Release.dir/all] Error 2\r\nmake[1]: Leaving directory '....../ign-cmake/build'\r\nMakefile:165: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n~~~", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>[  4%] Performing codecheck step for &#39;core_no_deps_Release&#39;\ncd ....../ign-cmake/build/examples &amp;&amp; /usr/local/bin/cmake --build ....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build --target codecheck\nmake[3]: Entering directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nmake[4]: Entering directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nmake[5]: Entering directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nmake[6]: Entering directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nmake[6]: Leaving directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nmake[6]: Entering directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nCMakeFiles/codecheck.dir/build.make:57: recipe for target &#39;CMakeFiles/codecheck&#39; failed\nmake[6]: *** [CMakeFiles/codecheck] Error 1\nmake[6]: Leaving directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nCMakeFiles/Makefile2:776: recipe for target &#39;CMakeFiles/codecheck.dir/all&#39; failed\nmake[5]: *** [CMakeFiles/codecheck.dir/all] Error 2\nmake[5]: Leaving directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nCMakeFiles/Makefile2:783: recipe for target &#39;CMakeFiles/codecheck.dir/rule&#39; failed\nmake[4]: *** [CMakeFiles/codecheck.dir/rule] Error 2\nmake[4]: Leaving directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nMakefile:483: recipe for target &#39;codecheck&#39; failed\nmake[3]: *** [codecheck] Error 2\nmake[3]: Leaving directory &#39;....../ign-cmake/build/examples/core_no_deps_Release-prefix/src/core_no_deps_Release-build&#39;\nexamples/CMakeFiles/core_no_deps_Release.dir/build.make:128: recipe for target &#39;examples/core_no_deps_Release-prefix/src/core_no_deps_Release-stamp/core_no_deps_Release-codecheck&#39; failed\nmake[2]: *** [examples/core_no_deps_Release-prefix/src/core_no_deps_Release-stamp/core_no_deps_Release-codecheck] Error 2\nmake[2]: Leaving directory &#39;....../ign-cmake/build&#39;\nCMakeFiles/Makefile2:1880: recipe for target &#39;examples/CMakeFiles/core_no_deps_Release.dir/all&#39; failed\nmake[1]: *** [examples/CMakeFiles/core_no_deps_Release.dir/all] Error 2\nmake[1]: Leaving directory &#39;....../ign-cmake/build&#39;\nMakefile:165: recipe for target &#39;all&#39; failed\nmake: *** [all] Error 2\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "closed", "version": null, "edited_on": null, "created_on": "2019-01-27T11:01:27.073268+00:00", "milestone": null, "updated_on": "2019-02-07T05:22:09.721508+00:00", "type": "issue", "id": 50}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/51/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/51.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/51/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/51/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/51/ign-cmake-gz11-testing-still-fails-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/51/vote"}}, "reporter": {"display_name": "Pei JIA", "uuid": "{18260a78-aa91-4162-bcbb-4faf42e302fb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B18260a78-aa91-4162-bcbb-4faf42e302fb%7D"}, "html": {"href": "https://bitbucket.org/%7B18260a78-aa91-4162-bcbb-4faf42e302fb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/df5d59ece7861fc9ec3aa8eeac85b8f2d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPJ-6.png"}}, "nickname": "jiapei100", "type": "user", "account_id": "557058:0da63616-bdf0-4ee7-99c3-8aa2b48a02bd"}, "title": "ign-cmake gz11 TESTING still fails to build...", "component": null, "votes": 0, "watches": 1, "content": {"raw": "```console\r\n[ 34%] Performing test step for 'component_deps_Release'\r\ncd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build && /usr/local/bin/cmake -E copy ....../ign-cmake/build/examples/component_deps_Release_pass.xml ....../ign-cmake/build/examples/test_results/component_deps_Release.xml\r\ncd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build && /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-test\r\n[ 34%] Completed 'component_deps_Release'\r\ncd ....../ign-cmake/build/examples && /usr/local/bin/cmake -E make_directory ....../ign-cmake/build/examples/CMakeFiles\r\ncd ....../ign-cmake/build/examples && /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/CMakeFiles/component_deps_Release-complete\r\ncd ....../ign-cmake/build/examples && /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-done\r\nmake[2]: Leaving directory '....../ign-cmake/build'\r\n[ 34%] Built target component_deps_Release\r\nmake[1]: Leaving directory '....../ign-cmake/build'\r\nMakefile:165: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```", "markup": "markdown", "html": "<div class=\"codehilite language-console\"><pre><span></span><span class=\"go\">[ 34%] Performing test step for &#39;component_deps_Release&#39;</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build &amp;&amp; /usr/local/bin/cmake -E copy ....../ign-cmake/build/examples/component_deps_Release_pass.xml ....../ign-cmake/build/examples/test_results/component_deps_Release.xml</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build &amp;&amp; /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-test</span>\n<span class=\"go\">[ 34%] Completed &#39;component_deps_Release&#39;</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples &amp;&amp; /usr/local/bin/cmake -E make_directory ....../ign-cmake/build/examples/CMakeFiles</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples &amp;&amp; /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/CMakeFiles/component_deps_Release-complete</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples &amp;&amp; /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-done</span>\n<span class=\"go\">make[2]: Leaving directory &#39;....../ign-cmake/build&#39;</span>\n<span class=\"go\">[ 34%] Built target component_deps_Release</span>\n<span class=\"go\">make[1]: Leaving directory &#39;....../ign-cmake/build&#39;</span>\n<span class=\"go\">Makefile:165: recipe for target &#39;all&#39; failed</span>\n<span class=\"go\">make: *** [all] Error 2</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-02-08T03:12:41.725283+00:00", "milestone": null, "updated_on": "2019-02-08T06:35:24.211240+00:00", "type": "issue", "id": 51}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/52/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/52.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/52/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/52/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/52/ign-cmake-gz11-build_testing-still-fails"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/52/vote"}}, "reporter": {"display_name": "Pei JIA", "uuid": "{18260a78-aa91-4162-bcbb-4faf42e302fb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B18260a78-aa91-4162-bcbb-4faf42e302fb%7D"}, "html": {"href": "https://bitbucket.org/%7B18260a78-aa91-4162-bcbb-4faf42e302fb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/df5d59ece7861fc9ec3aa8eeac85b8f2d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPJ-6.png"}}, "nickname": "jiapei100", "type": "user", "account_id": "557058:0da63616-bdf0-4ee7-99c3-8aa2b48a02bd"}, "title": "ign-cmake gz11 BUILD_TESTING still fails to build...", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Bug Report Template\r\nCopy, paste, and then fill-out this template in the description field to submit a bug report.\r\n\r\n# Prerequisites\r\n\r\n* [X] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\n```console\r\n[ 34%] Performing test step for 'component_deps_Release'\r\ncd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build && /usr/local/bin/cmake -E copy ....../ign-cmake/build/examples/component_deps_Release_pass.xml ....../ign-cmake/build/examples/test_results/component_deps_Release.xml\r\ncd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build && /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-test\r\n[ 34%] Completed 'component_deps_Release'\r\ncd ....../ign-cmake/build/examples && /usr/local/bin/cmake -E make_directory ....../ign-cmake/build/examples/CMakeFiles\r\ncd ....../ign-cmake/build/examples && /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/CMakeFiles/component_deps_Release-complete\r\ncd ....../ign-cmake/build/examples && /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-done\r\nmake[2]: Leaving directory '....../ign-cmake/build'\r\n[ 34%] Built target component_deps_Release\r\nmake[1]: Leaving directory '....../ign-cmake/build'\r\nMakefile:165: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```\r\n\r\n# Steps to Reproduce\r\n\r\n1. checkout **gz11** branch, and try to **compile/build** it, with **BUILD_TESTING** turned **ON**.\r\n2. make\r\n3. got the above **ERROR** message.\r\n\r\n**Expected behavior:**  \r\n\r\nBuild through\r\n\r\n**Actual behavior:**\r\n\r\nFailed with the above **ERROR** messages.\r\n\r\n**Reproduces how often:** \r\n\r\nAlways\r\n\r\n# Versions\r\n\r\n```console\r\n\u279c  ~ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.1 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n\u279c  ~ gcc --version\r\ngcc (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0\r\nCopyright (C) 2017 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\n# Additional Information\r\n\r\nI've already enabled **-std=c++17**\r\n\r\n\r\nCheers\r\nPei", "markup": "markdown", "html": "<p>Bug Report Template\nCopy, paste, and then fill-out this template in the description field to submit a bug report.</p>\n<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[X] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<div class=\"codehilite language-console\"><pre><span></span><span class=\"go\">[ 34%] Performing test step for &#39;component_deps_Release&#39;</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build &amp;&amp; /usr/local/bin/cmake -E copy ....../ign-cmake/build/examples/component_deps_Release_pass.xml ....../ign-cmake/build/examples/test_results/component_deps_Release.xml</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-build &amp;&amp; /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-test</span>\n<span class=\"go\">[ 34%] Completed &#39;component_deps_Release&#39;</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples &amp;&amp; /usr/local/bin/cmake -E make_directory ....../ign-cmake/build/examples/CMakeFiles</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples &amp;&amp; /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/CMakeFiles/component_deps_Release-complete</span>\n<span class=\"go\">cd ....../ign-cmake/build/examples &amp;&amp; /usr/local/bin/cmake -E touch ....../ign-cmake/build/examples/component_deps_Release-prefix/src/component_deps_Release-stamp/component_deps_Release-done</span>\n<span class=\"go\">make[2]: Leaving directory &#39;....../ign-cmake/build&#39;</span>\n<span class=\"go\">[ 34%] Built target component_deps_Release</span>\n<span class=\"go\">make[1]: Leaving directory &#39;....../ign-cmake/build&#39;</span>\n<span class=\"go\">Makefile:165: recipe for target &#39;all&#39; failed</span>\n<span class=\"go\">make: *** [all] Error 2</span>\n</pre></div>\n\n\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ol>\n<li>checkout <strong>gz11</strong> branch, and try to <strong>compile/build</strong> it, with <strong>BUILD_TESTING</strong> turned <strong>ON</strong>.</li>\n<li>make</li>\n<li>got the above <strong>ERROR</strong> message.</li>\n</ol>\n<p><strong>Expected behavior:</strong>  </p>\n<p>Build through</p>\n<p><strong>Actual behavior:</strong></p>\n<p>Failed with the above <strong>ERROR</strong> messages.</p>\n<p><strong>Reproduces how often:</strong> </p>\n<p>Always</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<div class=\"codehilite language-console\"><pre><span></span><span class=\"go\">\u279c  ~ lsb_release -a</span>\n<span class=\"go\">No LSB modules are available.</span>\n<span class=\"go\">Distributor ID: Ubuntu</span>\n<span class=\"go\">Description:    Ubuntu 18.04.1 LTS</span>\n<span class=\"go\">Release:        18.04</span>\n<span class=\"go\">Codename:       bionic</span>\n<span class=\"go\">\u279c  ~ gcc --version</span>\n<span class=\"go\">gcc (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0</span>\n<span class=\"go\">Copyright (C) 2017 Free Software Foundation, Inc.</span>\n<span class=\"go\">This is free software; see the source for copying conditions.  There is NO</span>\n<span class=\"go\">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>\n</pre></div>\n\n\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>I've already enabled <strong>-std=c++17</strong></p>\n<p>Cheers\nPei</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-02-08T06:33:12.736827+00:00", "milestone": null, "updated_on": "2019-02-08T06:46:39.022193+00:00", "type": "issue", "id": 52}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/53/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/53.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/53/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/53/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/53/cmake-config-does-not-seem-correct-when"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/53/vote"}}, "reporter": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "title": "Cmake config does not seem correct when using components without a core library", "component": null, "votes": 0, "watches": 2, "content": {"raw": "# Summary\r\n\r\nThe [ign-tools](#!/ignitionrobotics/ign-tools/pull-requests/9) library will have a `launch` component, and there is no main/core library. The problem I've encountered occurs when a downstream library tries to use the `launch` component.\r\n\r\nI would expect a downstream CMakeLists.txt file to look like:\r\n\r\n```\r\nign_find_package(ignition-tools REQUIRED COMPONENTS launch)\r\n...\r\ntarget_link_libraries(mylib PRIVATE  ignition-tools::launch)\r\n```\r\n\r\nInstead, I have to write:\r\n\r\n```\r\nign_find_package(ignition-tools-launch REQUIRED) \r\n...\r\ntarget_link_libraries(mylib PRIVATE  ignition-tools::ignition-tools-launch)\r\n```\r\n\r\nThe above alternative works, but seems to different from the normal pattern. \r\n\r\n# Additional context\r\n\r\nYou can find a working example of the problem [here](#!/ignitionrobotics/ign-plugins/pull-requests/3)", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>The <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-tools/pull-requests/9\" rel=\"nofollow\">ign-tools</a> library will have a <code>launch</code> component, and there is no main/core library. The problem I've encountered occurs when a downstream library tries to use the <code>launch</code> component.</p>\n<p>I would expect a downstream CMakeLists.txt file to look like:</p>\n<div class=\"codehilite\"><pre><span></span>ign_find_package(ignition-tools REQUIRED COMPONENTS launch)\n...\ntarget_link_libraries(mylib PRIVATE  ignition-tools::launch)\n</pre></div>\n\n\n<p>Instead, I have to write:</p>\n<div class=\"codehilite\"><pre><span></span>ign_find_package(ignition-tools-launch REQUIRED) \n...\ntarget_link_libraries(mylib PRIVATE  ignition-tools::ignition-tools-launch)\n</pre></div>\n\n\n<p>The above alternative works, but seems to different from the normal pattern. </p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>You can find a working example of the problem <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-plugins/pull-requests/3\" rel=\"nofollow\">here</a></p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-02-15T17:33:35.711508+00:00", "milestone": null, "updated_on": "2019-02-19T15:17:59.346311+00:00", "type": "issue", "id": 53}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/54/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/54.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/54/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/54/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/54/support-images-on-tutorials-generated-with"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/54/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Support images on tutorials generated with `make doc`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nWhen running `make doc`, markdown tutorials under the `tutorials` folder are turned into HTML under the `doxygen/html` folder. It would be nice to also copy images from that directory so that they can be uploaded together with the generated HTML to the same server.\r\n\r\n# Motivation\r\n\r\nUsing images in tutorials is very important.\r\n\r\n# Describe alternatives you've considered\r\n\r\nIt's already possible to use HTML directly in tutorials and pass full URLs that point to other sites. However, this means that the generated documentation is not self-contained.", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>When running <code>make doc</code>, markdown tutorials under the <code>tutorials</code> folder are turned into HTML under the <code>doxygen/html</code> folder. It would be nice to also copy images from that directory so that they can be uploaded together with the generated HTML to the same server.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>Using images in tutorials is very important.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>It's already possible to use HTML directly in tutorials and pass full URLs that point to other sites. However, this means that the generated documentation is not self-contained.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-03-19T02:03:16.947581+00:00", "milestone": null, "updated_on": "2019-03-19T02:03:16.947581+00:00", "type": "issue", "id": 54}, {"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/55/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/55.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/55/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/55/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/55/failing-to-build-target-does-not-exist"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/55/vote"}}, "reporter": {"display_name": "Tarun Uday", "uuid": "{235f5089-e68c-420d-9ee3-c635fc236da2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B235f5089-e68c-420d-9ee3-c635fc236da2%7D"}, "html": {"href": "https://bitbucket.org/%7B235f5089-e68c-420d-9ee3-c635fc236da2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/TU-2.png"}}, "nickname": "tarun.uday", "type": "user", "account_id": "5c93b6f0b44a492c649cfff0"}, "title": "Failing to build Target / does not exist", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Hi,\r\n\r\nI have a issue similar to [#40](#!/ignitionrobotics/ign-cmake/issues/40/target-uuid-uuid-does-not-exist):\r\n\r\nI'm running Ubuntu Bionic (18.04), ROS Melodic, Gazebo 9, CMake (3.10.x). Msot of my debug workflow has been centered on the Issue#40 comments\r\n\r\n```\r\n#!bash\r\nCMake Error:\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:protobuf::libprotobuf,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"protobuf::libprotobuf\" not found.\r\n\r\n\r\nCMake Error:\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:ignition-math4::ignition-math4,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"ignition-math4::ignition-math4\" not found.\r\n```\r\n`locate FindUUID` gives me 2 instances:\r\n\r\n```\r\n#!bash\r\n/opt/ros/melodic/share/cmake_modules/cmake/Modules/FindUUID.cmake\r\n/usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/FindUUID.cmake\r\n```\r\n\r\nAdding a message after `ign_pkg_check_modules(UUID uuid)` in the second one, shows the message. \r\nBut, if I rename the second one to FindIgnUUID.cmake, and catkin_make, I get the error:\r\n```\r\n#!bash\r\nCMake Error at /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package):\r\n  By not providing \"FindUUID.cmake\" in CMAKE_MODULE_PATH this project has\r\n  asked CMake to find a package configuration file provided by \"UUID\", but\r\n  CMake did not find one.\r\n\r\n  Could not find a package configuration file provided by \"UUID\" with any of\r\n  the following names:\r\n\r\n    UUIDConfig.cmake\r\n    uuid-config.cmake\r\n\r\n  Add the installation prefix of \"UUID\" to CMAKE_PREFIX_PATH or set\r\n  \"UUID_DIR\" to a directory containing one of the above files.  If \"UUID\"\r\n  provides a separate development package or SDK, be sure it has been\r\n  installed.\r\nCall Stack (most recent call first):\r\n  /usr/lib/x86_64-linux-gnu/cmake/ignition-transport4/ignition-transport4-config.cmake:109 (find_dependency)\r\n  /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:191 (find_package)\r\n  original/vgazebo_plugins/CMakeLists.txt:35 (find_package)\r\n```\r\n\r\nI noticed that the error was coming from `/usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-targets.cmake` at line 65 that says:\r\n```\r\n#!bash\r\nset_target_properties(ignition-common1::ignition-common1 PROPERTIES\r\n  INTERFACE_INCLUDE_DIRECTORIES \"${_IMPORT_PREFIX}/include/ignition/common1;\\$<TARGET_PROPERTY:ignition-math4::ignition-math4,INTERFACE_INCLUDE_DIRECTORIES>;\\$<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>; [...] \"\r\n  INTERFACE_LINK_LIBRARIES \"[...]\"\r\n)\r\n```\r\n\r\nI rearranged it to see if that was the only issue:\r\n```\r\n#!bash\r\nset_target_properties(ignition-common1::ignition-common1 PROPERTIES\r\n  INTERFACE_INCLUDE_DIRECTORIES \"${_IMPORT_PREFIX}/include/ignition/common1;\\$<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>; [...] \\$<TARGET_PROPERTY:ignition-math4::ignition-math4,INTERFACE_INCLUDE_DIRECTORIES> \"\r\n  INTERFACE_LINK_LIBRARIES \"[...]\"\r\n)\r\n```\r\nand now I get:\r\n```\r\n#!bash\r\nCMake Error:\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:protobuf::libprotobuf,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"protobuf::libprotobuf\" not found.\r\n\r\n\r\nCMake Error:\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"UUID::UUID\" not found.\r\n```\r\n\r\nSo rearranging that list of `INTERFACE_INCLUDE_DIRECTORIES` gets me the same error but with whatever is the first TARGET_PROPERTY. At this point, I try @mxgrey 's workaround, and add `ign_import_target(UUID)` to my package's `CMakeLists.txt`, which gives me the error:\r\n\r\n```\r\n#!bash\r\nCMake Error at /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/IgnImportTarget.cmake:88 (add_library):\r\n  add_library cannot create imported target \"UUID::UUID\" because another\r\n    target with the same name already exists.\r\n    Call Stack (most recent call first):\r\n      original/vgazebo_plugins/CMakeLists.txt:36 (ign_import_target)\r\n\r\n```\r\n\r\nAs mentioned in #40, removing `${GAZEBO_LIBRARIES}` from `target_link_libraries` solves the problem but obviously isn't a workaround. I notice that [this person](https://github.com/jacknlliu/development-issues/issues/31) had the exact issue, and that was over a year ago, before the Issue#40 thread existed. \r\n\r\nAny directions or tips would be helpful.", "markup": "markdown", "html": "<p>Hi,</p>\n<p>I have a issue similar to <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/issues/40/target-uuid-uuid-does-not-exist\" rel=\"nofollow\">#40</a>:</p>\n<p>I'm running Ubuntu Bionic (18.04), ROS Melodic, Gazebo 9, CMake (3.10.x). Msot of my debug workflow has been centered on the Issue<a href=\"#!/ignitionrobotics/ign-cmake/issues/40/target-uuid-uuid-does-not-exist\" rel=\"nofollow\" title=\"Target UUID::UUID does not exist\" class=\"ap-connect-link\">#40</a> comments</p>\n<div class=\"codehilite language-bash\"><pre><span></span>CMake Error:\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:protobuf::libprotobuf,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target <span class=\"s2\">&quot;protobuf::libprotobuf&quot;</span> not found.\n\n\nCMake Error:\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:ignition-math4::ignition-math4,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target <span class=\"s2\">&quot;ignition-math4::ignition-math4&quot;</span> not found.\n</pre></div>\n\n\n<p><code>locate FindUUID</code> gives me 2 instances:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>/opt/ros/melodic/share/cmake_modules/cmake/Modules/FindUUID.cmake\n/usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/FindUUID.cmake\n</pre></div>\n\n\n<p>Adding a message after <code>ign_pkg_check_modules(UUID uuid)</code> in the second one, shows the message. \nBut, if I rename the second one to FindIgnUUID.cmake, and catkin_make, I get the error:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>CMake Error at /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 <span class=\"o\">(</span>find_package<span class=\"o\">)</span>:\n  By not providing <span class=\"s2\">&quot;FindUUID.cmake&quot;</span> in CMAKE_MODULE_PATH this project has\n  asked CMake to find a package configuration file provided by <span class=\"s2\">&quot;UUID&quot;</span>, but\n  CMake did not find one.\n\n  Could not find a package configuration file provided by <span class=\"s2\">&quot;UUID&quot;</span> with any of\n  the following names:\n\n    UUIDConfig.cmake\n    uuid-config.cmake\n\n  Add the installation prefix of <span class=\"s2\">&quot;UUID&quot;</span> to CMAKE_PREFIX_PATH or <span class=\"nb\">set</span>\n  <span class=\"s2\">&quot;UUID_DIR&quot;</span> to a directory containing one of the above files.  If <span class=\"s2\">&quot;UUID&quot;</span>\n  provides a separate development package or SDK, be sure it has been\n  installed.\nCall Stack <span class=\"o\">(</span>most recent call first<span class=\"o\">)</span>:\n  /usr/lib/x86_64-linux-gnu/cmake/ignition-transport4/ignition-transport4-config.cmake:109 <span class=\"o\">(</span>find_dependency<span class=\"o\">)</span>\n  /usr/lib/x86_64-linux-gnu/cmake/gazebo/gazebo-config.cmake:191 <span class=\"o\">(</span>find_package<span class=\"o\">)</span>\n  original/vgazebo_plugins/CMakeLists.txt:35 <span class=\"o\">(</span>find_package<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I noticed that the error was coming from <code>/usr/lib/x86_64-linux-gnu/cmake/ignition-common1/ignition-common1-targets.cmake</code> at line 65 that says:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>set_target_properties<span class=\"o\">(</span>ignition-common1::ignition-common1 PROPERTIES\n  INTERFACE_INCLUDE_DIRECTORIES <span class=\"s2\">&quot;</span><span class=\"si\">${</span><span class=\"nv\">_IMPORT_PREFIX</span><span class=\"si\">}</span><span class=\"s2\">/include/ignition/common1;\\$&lt;TARGET_PROPERTY:ignition-math4::ignition-math4,INTERFACE_INCLUDE_DIRECTORIES&gt;;\\$&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;; [...] &quot;</span>\n  INTERFACE_LINK_LIBRARIES <span class=\"s2\">&quot;[...]&quot;</span>\n<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I rearranged it to see if that was the only issue:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>set_target_properties<span class=\"o\">(</span>ignition-common1::ignition-common1 PROPERTIES\n  INTERFACE_INCLUDE_DIRECTORIES <span class=\"s2\">&quot;</span><span class=\"si\">${</span><span class=\"nv\">_IMPORT_PREFIX</span><span class=\"si\">}</span><span class=\"s2\">/include/ignition/common1;\\$&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;; [...] \\$&lt;TARGET_PROPERTY:ignition-math4::ignition-math4,INTERFACE_INCLUDE_DIRECTORIES&gt; &quot;</span>\n  INTERFACE_LINK_LIBRARIES <span class=\"s2\">&quot;[...]&quot;</span>\n<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and now I get:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>CMake Error:\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:protobuf::libprotobuf,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target <span class=\"s2\">&quot;protobuf::libprotobuf&quot;</span> not found.\n\n\nCMake Error:\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:UUID::UUID,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target <span class=\"s2\">&quot;UUID::UUID&quot;</span> not found.\n</pre></div>\n\n\n<p>So rearranging that list of <code>INTERFACE_INCLUDE_DIRECTORIES</code> gets me the same error but with whatever is the first TARGET_PROPERTY. At this point, I try @mxgrey 's workaround, and add <code>ign_import_target(UUID)</code> to my package's <code>CMakeLists.txt</code>, which gives me the error:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>CMake Error at /usr/lib/x86_64-linux-gnu/cmake/ignition-cmake0/cmake0/IgnImportTarget.cmake:88 <span class=\"o\">(</span>add_library<span class=\"o\">)</span>:\n  add_library cannot create imported target <span class=\"s2\">&quot;UUID::UUID&quot;</span> because another\n    target with the same name already exists.\n    Call Stack <span class=\"o\">(</span>most recent call first<span class=\"o\">)</span>:\n      original/vgazebo_plugins/CMakeLists.txt:36 <span class=\"o\">(</span>ign_import_target<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>As mentioned in <a href=\"#!/ignitionrobotics/ign-cmake/issues/40/target-uuid-uuid-does-not-exist\" rel=\"nofollow\" title=\"Target UUID::UUID does not exist\" class=\"ap-connect-link\">#40</a>, removing <code>${GAZEBO_LIBRARIES}</code> from <code>target_link_libraries</code> solves the problem but obviously isn't a workaround. I notice that <a data-is-external-link=\"true\" href=\"https://github.com/jacknlliu/development-issues/issues/31\" rel=\"nofollow\">this person</a> had the exact issue, and that was over a year ago, before the Issue<a href=\"#!/ignitionrobotics/ign-cmake/issues/40/target-uuid-uuid-does-not-exist\" rel=\"nofollow\" title=\"Target UUID::UUID does not exist\" class=\"ap-connect-link\">#40</a> thread existed. </p>\n<p>Any directions or tips would be helpful.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-03-21T21:16:39.312876+00:00", "milestone": null, "updated_on": "2019-03-29T04:10:39.882387+00:00", "type": "issue", "id": 55}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/56/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/56.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/56/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/56/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/56/gazebo9-ign-cmake0-findogrecmake-should"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/56/vote"}}, "reporter": {"display_name": "Sean Yen", "uuid": "{9f25a1e7-e37c-4707-a084-64e8be6f3785}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9f25a1e7-e37c-4707-a084-64e8be6f3785%7D"}, "html": {"href": "https://bitbucket.org/%7B9f25a1e7-e37c-4707-a084-64e8be6f3785%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/43d814e31d04558e27441fa34acea489d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSY-3.png"}}, "nickname": "seanyen-msft", "type": "user", "account_id": "5bee878f5416561374c46bd9"}, "title": "[Gazebo9][ign-cmake0] FindOgre.cmake should define OGRE variable names more consistently with OgreConfig.cmake", "component": null, "votes": 0, "watches": 1, "content": {"raw": "This issue was originally reported https://github.com/ms-iot/ROSOnWindows/issues/48.\r\n\r\nAfter some investigation, I found the OGRE variables defined in FindOgre.cmake seems not to be using the same naming convention to OgreConfig.cmake and one mitigation is proposed here: https://bitbucket.org/osrf/gazebo/pull-requests/3090\r\n\r\nReferences:\r\n- OgreConfig.cmake.in in Ogre side: https://github.com/OGRECave/ogre/blob/v1.10.12/CMake/Templates/OGREConfig.cmake.in#L54\r\n- FindOgre.cmake in ign-cmake side:\r\n#!/ignitionrobotics/ign-cmake/src/f3afe342debe0558f6f5e41154002b07d2897d05/cmake/FindOGRE.cmake#lines-70", "markup": "markdown", "html": "<p>This issue was originally reported <a href=\"https://github.com/ms-iot/ROSOnWindows/issues/48\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ms-iot/ROSOnWindows/issues/48</a>.</p>\n<p>After some investigation, I found the OGRE variables defined in FindOgre.cmake seems not to be using the same naming convention to OgreConfig.cmake and one mitigation is proposed here: <a href=\"https://bitbucket.org/osrf/gazebo/pull-requests/3090\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/gazebo/pull-requests/3090</a></p>\n<p>References:\n- OgreConfig.cmake.in in Ogre side: <a href=\"https://github.com/OGRECave/ogre/blob/v1.10.12/CMake/Templates/OGREConfig.cmake.in#L54\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/OGRECave/ogre/blob/v1.10.12/CMake/Templates/OGREConfig.cmake.in#L54</a>\n- FindOgre.cmake in ign-cmake side:\n<a href=\"#!/ignitionrobotics/ign-cmake/src/f3afe342debe0558f6f5e41154002b07d2897d05/cmake/FindOGRE.cmake#lines-70\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-cmake/src/f3afe342debe0558f6f5e41154002b07d2897d05/cmake/FindOGRE.cmake#lines-70</a></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-03-25T18:06:39.480322+00:00", "milestone": null, "updated_on": "2019-03-26T03:20:16.825013+00:00", "type": "issue", "id": 56}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/57/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/57.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/57/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/57/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/57/ign-cmake2-use-pkg_check_modules"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/57/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "ign-cmake2: use pkg_check_modules IMPORTED_TARGET option", "component": null, "votes": 0, "watches": 1, "content": {"raw": "There is a TODO in the [IgnPkgConfig.cmake](#!/ignitionrobotics/ign-cmake/src/ignition-cmake2_2.0.0/cmake/IgnPkgConfig.cmake#IgnPkgConfig.cmake-111:115) file that proposes to use the `IMPORTED_TARGET` feature of `pkg_check_modules` when we are using cmake 3.6+. We are now requiring cmake 3.10.2 as of ign-cmake2 2.0.0, so we could make this change now.", "markup": "markdown", "html": "<p>There is a TODO in the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/src/ignition-cmake2_2.0.0/cmake/IgnPkgConfig.cmake#IgnPkgConfig.cmake-111:115\" rel=\"nofollow\">IgnPkgConfig.cmake</a> file that proposes to use the <code>IMPORTED_TARGET</code> feature of <code>pkg_check_modules</code> when we are using cmake 3.6+. We are now requiring cmake 3.10.2 as of ign-cmake2 2.0.0, so we could make this change now.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-03-25T20:15:18.706332+00:00", "milestone": null, "updated_on": "2019-03-25T20:15:18.706332+00:00", "type": "issue", "id": 57}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/58/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/58.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/58/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/58/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/58/provide-check_test_ranpy-script"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/58/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Provide check_test_ran.py script", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently the ignition packages all have their own check_test_ran.py script, and they have diverged somewhat, with some packages showing tests that fail to run as `Results.test_ran` instead of giving the name of the failing test. This was originally fixed in [gazebo pull request 413](https://bitbucket.org/osrf/gazebo/pull-requests/413/display-name-of-tests-that-dont-run-in/diff) but not propagated. We should consider installing a fixed version of the `check_test_ran.py` script from ign-cmake.\r\n\r\nI am patching some individual scripts now as needed:\r\n\r\n* #!/ignitionrobotics/ign-sensors/pull-requests/50/show-name-for-tests-that-failed-to-run/diff", "markup": "markdown", "html": "<p>Currently the ignition packages all have their own check_test_ran.py script, and they have diverged somewhat, with some packages showing tests that fail to run as <code>Results.test_ran</code> instead of giving the name of the failing test. This was originally fixed in <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/pull-requests/413/display-name-of-tests-that-dont-run-in/diff\" rel=\"nofollow\">gazebo pull request 413</a> but not propagated. We should consider installing a fixed version of the <code>check_test_ran.py</code> script from ign-cmake.</p>\n<p>I am patching some individual scripts now as needed:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-sensors/pull-requests/50/show-name-for-tests-that-failed-to-run/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-sensors/pull-requests/50/show-name-for-tests-that-failed-to-run/diff</a></li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-03-27T18:45:49.467320+00:00", "milestone": null, "updated_on": "2019-03-27T18:45:49.467320+00:00", "type": "issue", "id": 58}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/59/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/59.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/59/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/59/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/59/finddlcmake-is-not-working-when-cross"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/59/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "FindDL.cmake is not working when  cross-compiling to WebAssembly via Emscripten", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When cross-compiling using Emscripten ( https://emscripten.org/ ) `find_package(DL REQUIRED)` should always be successful, as the functions usually contained in the `dlfcn.h` header are already linked without the need of linking any additional library (such as `dl` in Linux). \r\n\r\nHowever, instead the `FindDL.cmake` script currently provided in ignition-cmake fails, for two reasons: \r\n\r\n* It searches for a `dl` library in any non-Windows system, while it should observe the [`CMAKE_DL_LIBS` standard CMake variable](https://cmake.org/cmake/help/latest/variable/CMAKE_DL_LIBS.html) and only search for a library if `CMAKE_DL_LIBS` is non-empty.\r\n\r\n* For some reason, the script fails to find the `dlfcn.h` system header provided by emscripten\r\n\r\nThe solution for the first problem is trivial, but I am not sure what is the reason behind the second problem.", "markup": "markdown", "html": "<p>When cross-compiling using Emscripten ( <a href=\"https://emscripten.org/\" rel=\"nofollow\" class=\"ap-connect-link\">https://emscripten.org/</a> ) <code>find_package(DL REQUIRED)</code> should always be successful, as the functions usually contained in the <code>dlfcn.h</code> header are already linked without the need of linking any additional library (such as <code>dl</code> in Linux). </p>\n<p>However, instead the <code>FindDL.cmake</code> script currently provided in ignition-cmake fails, for two reasons: </p>\n<ul>\n<li>\n<p>It searches for a <code>dl</code> library in any non-Windows system, while it should observe the <a data-is-external-link=\"true\" href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_DL_LIBS.html\" rel=\"nofollow\"><code>CMAKE_DL_LIBS</code> standard CMake variable</a> and only search for a library if <code>CMAKE_DL_LIBS</code> is non-empty.</p>\n</li>\n<li>\n<p>For some reason, the script fails to find the <code>dlfcn.h</code> system header provided by emscripten</p>\n</li>\n</ul>\n<p>The solution for the first problem is trivial, but I am not sure what is the reason behind the second problem.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-04-22T20:19:05.885823+00:00", "milestone": null, "updated_on": "2019-04-22T20:21:52.157520+00:00", "type": "issue", "id": 59}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/60/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/60.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/60/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/60/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/60/error-evaluating-generator-expression"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/60/vote"}}, "reporter": {"display_name": "Alex Biddulph", "uuid": "{7233770a-f9aa-4483-a5ac-99792cc8a1c7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7233770a-f9aa-4483-a5ac-99792cc8a1c7%7D"}, "html": {"href": "https://bitbucket.org/%7B7233770a-f9aa-4483-a5ac-99792cc8a1c7%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6c9212fd2965b7f87428c6e7a3742e27d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAB-6.png"}}, "nickname": "Bidski", "type": "user", "account_id": "557058:3c43686a-61ba-4e59-a463-54b7b753f6b0"}, "title": "Error evaluating generator expression: $<TARGET_PROPERTY:protobuf::libprotobuf,INTERFACE_INCLUDE_DIRECTORIES> Target \"protobuf::libprotobuf\" not found.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I am having a very similar issue to Issue[#55](#!/ignitionrobotics/ign-cmake/issues/55/failing-to-build-target-does-not-exist).\r\n\r\nI am building a program using cmake \\(not using catkin\\) that depends on ignition-transport4. When creating my library and listing `${IGNITION-TRANSPORT_LIBRARIES}` as target link libraries I get\r\n\r\n```\r\nCMake Error:\r\n  Error evaluating generator expression:\r\n\r\n    $<TARGET_PROPERTY:protobuf::libprotobuf,INTERFACE_INCLUDE_DIRECTORIES>\r\n\r\n  Target \"protobuf::libprotobuf\" not found.\r\n```\r\n\r\nappearing about 10 times while cmake is creating the build files.\r\n\r\nI have tried adding\r\n\r\n```\r\nfind_package(ignition-math4 REQUIRED)\r\nfind_package(ignition-cmake0 REQUIRED)\r\nfind_package(IgnProtobuf REQUIRED)\r\n```\r\n\r\nboth before and after my call to `find_package(ignition-transport4 REQUIRED)` but to no avail.\r\n\r\nMy guess is that the rest of my program also has a dependency on protobuf \\(included at the top-level directory\\) and that this is somehow clashing with `FindIgnProtobuf.cmake` in a strange way. Unfortunately, I can't figure out how to test this theory properly.\r\n\r\nHow can I resolve this?", "markup": "markdown", "html": "<p>I am having a very similar issue to Issue<a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/issues/55/failing-to-build-target-does-not-exist\" rel=\"nofollow\">#55</a>.</p>\n<p>I am building a program using cmake (not using catkin) that depends on ignition-transport4. When creating my library and listing <code>${IGNITION-TRANSPORT_LIBRARIES}</code> as target link libraries I get</p>\n<div class=\"codehilite\"><pre><span></span>CMake Error:\n  Error evaluating generator expression:\n\n    $&lt;TARGET_PROPERTY:protobuf::libprotobuf,INTERFACE_INCLUDE_DIRECTORIES&gt;\n\n  Target &quot;protobuf::libprotobuf&quot; not found.\n</pre></div>\n\n\n<p>appearing about 10 times while cmake is creating the build files.</p>\n<p>I have tried adding</p>\n<div class=\"codehilite\"><pre><span></span>find_package(ignition-math4 REQUIRED)\nfind_package(ignition-cmake0 REQUIRED)\nfind_package(IgnProtobuf REQUIRED)\n</pre></div>\n\n\n<p>both before and after my call to <code>find_package(ignition-transport4 REQUIRED)</code> but to no avail.</p>\n<p>My guess is that the rest of my program also has a dependency on protobuf (included at the top-level directory) and that this is somehow clashing with <code>FindIgnProtobuf.cmake</code> in a strange way. Unfortunately, I can't figure out how to test this theory properly.</p>\n<p>How can I resolve this?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-06-13T09:41:48.635167+00:00", "milestone": null, "updated_on": "2019-07-14T02:50:21.064780+00:00", "type": "issue", "id": 60}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/61/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/61.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/61/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/61/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/61/ignition_cmake_version_major-changes-after"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/61/vote"}}, "reporter": {"display_name": "Brian Marchi", "uuid": "{9f5fd161-7ec9-482b-8aeb-cadf55822196}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9f5fd161-7ec9-482b-8aeb-cadf55822196%7D"}, "html": {"href": "https://bitbucket.org/%7B9f5fd161-7ec9-482b-8aeb-cadf55822196%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fb746a0b0e811e5b44ff336b6eceef98d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsBM-6.png"}}, "nickname": "BEMarchi", "type": "user", "account_id": "5c7ff8ef007e34313a3e587b"}, "title": "IGNITION_CMAKE_VERSION_MAJOR changes after finding packages that use newer version of ign-cmake", "component": null, "votes": 0, "watches": 1, "content": {"raw": "## **Prerequisites**\r\n\r\n\\* \\[X\\] Put an X between the brackets on this line if you have done all of the following:  \r\n\\* Checked the QA board for common solutions: http://answers.gazebosim.org  \r\n\\* Checked that your issue isn't already filed.  \r\n\\* Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n## **Description**\r\n\r\nWhen trying to use a package that links against cmake2 and another one that links against cmake1, I get the following:\r\n\r\n```\r\nCMake Error at CMakeLists.txt:13 (add_library):\r\nTarget example links to target ignition-cmake1::utilities; but the\r\ntarget was not found. Perhaps a find_package() call is missing for an\r\nIMPORTED target, or an ALIAS target is missing?\r\n```\r\n\r\n---\r\n\r\n## **Steps to Reproduce**\r\n\r\n1\\. Clone ign-cmake1  \r\n2\\. Clone ign-cmake2  \r\n3\\. Clone ign-common3  \r\n4\\. Clone ign-math6  \r\n5\\. Clone ign-msgs2 branch #!/ignitionrobotics/ign-msgs/pull-requests/138/use-math6  \r\n6\\. Clone ign-transport5  \r\n7\\. Create a project with a CMakeLists.txt like this:\r\n\r\n```\r\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\r\nproject(example_project LANGUAGES C CXX VERSION 3.0.0)\r\nfind_package(ignition-common3 REQUIRED COMPONENTS graphics)\r\nfind_package(ignition-math6 REQUIRED)\r\nfind_package(ignition-msgs2 REQUIRED)\r\nfind_package(ignition-transport5 REQUIRED COMPONENTS log)\r\n\r\nadd_library(example\r\n  example.cc)\r\ntarget_link_libraries(example\r\n    ignition-common3::ignition-common3\r\n    ignition-transport5::core\r\n    ignition-transport5::log\r\n    ignition-msgs2::ignition-msgs2)\r\ninstall(TARGETS example\r\nRUNTIME DESTINATION bin\r\nLIBRARY DESTINATION lib\r\nARCHIVE DESTINATION lib)\r\n```\r\n\r\n\u200c\r\n\r\n8\\. Create an empty **example.cc** file living in the same dir as the above **CMakeLists.txt**\r\n\r\n9\\. **Build** and **install** all projects\r\n\r\n## **Expected behavior:**\r\n\r\nLibrary example should build normally\r\n\r\n## **Actual behavior:**\r\n\r\nLibrary example doesn\u2019t build\r\n\r\n## **Reproduces how often:**\r\n\r\nAlways\r\n\r\n## **Versions**\r\n\r\nign-cmake2, ign-cmake1, ign-transport5, ign-msgs2 branch msgs2\\_use\\_math6, ign-common3.  \r\nOS: Ubuntu 18.04", "markup": "markdown", "html": "<h2 id=\"markdown-header-prerequisites\"><strong>Prerequisites</strong></h2>\n<p>* [X] Put an X between the brackets on this line if you have done all of the following:<br />\n* Checked the QA board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a><br />\n* Checked that your issue isn't already filed.<br />\n* Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></p>\n<h2 id=\"markdown-header-description\"><strong>Description</strong></h2>\n<p>When trying to use a package that links against cmake2 and another one that links against cmake1, I get the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">CMake</span> <span class=\"nt\">Error</span> <span class=\"nt\">at</span> <span class=\"nt\">CMakeLists</span><span class=\"p\">.</span><span class=\"nc\">txt</span><span class=\"p\">:</span><span class=\"nd\">13</span> <span class=\"o\">(</span><span class=\"nt\">add_library</span><span class=\"o\">):</span>\n<span class=\"nt\">Target</span> <span class=\"nt\">example</span> <span class=\"nt\">links</span> <span class=\"nt\">to</span> <span class=\"nt\">target</span> <span class=\"nt\">ignition-cmake1</span><span class=\"p\">::</span><span class=\"nd\">utilities</span><span class=\"o\">;</span> <span class=\"nt\">but</span> <span class=\"nt\">the</span>\n<span class=\"nt\">target</span> <span class=\"nt\">was</span> <span class=\"nt\">not</span> <span class=\"nt\">found</span><span class=\"o\">.</span> <span class=\"nt\">Perhaps</span> <span class=\"nt\">a</span> <span class=\"nt\">find_package</span><span class=\"o\">()</span> <span class=\"nt\">call</span> <span class=\"nt\">is</span> <span class=\"nt\">missing</span> <span class=\"nt\">for</span> <span class=\"nt\">an</span>\n<span class=\"nt\">IMPORTED</span> <span class=\"nt\">target</span><span class=\"o\">,</span> <span class=\"nt\">or</span> <span class=\"nt\">an</span> <span class=\"nt\">ALIAS</span> <span class=\"nt\">target</span> <span class=\"nt\">is</span> <span class=\"nt\">missing</span><span class=\"o\">?</span>\n</pre></div>\n\n\n<hr />\n<h2 id=\"markdown-header-steps-to-reproduce\"><strong>Steps to Reproduce</strong></h2>\n<p>1. Clone ign-cmake1<br />\n2. Clone ign-cmake2<br />\n3. Clone ign-common3<br />\n4. Clone ign-math6<br />\n5. Clone ign-msgs2 branch <a href=\"#!/ignitionrobotics/ign-msgs/pull-requests/138/use-math6\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/pull-requests/138/use-math6</a><br />\n6. Clone ign-transport5<br />\n7. Create a project with a CMakeLists.txt like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"s\">VERSION</span> <span class=\"s\">3.5</span> <span class=\"s\">FATAL_ERROR</span><span class=\"p\">)</span>\n<span class=\"nb\">project</span><span class=\"p\">(</span><span class=\"s\">example_project</span> <span class=\"s\">LANGUAGES</span> <span class=\"s\">C</span> <span class=\"s\">CXX</span> <span class=\"s\">VERSION</span> <span class=\"s\">3.0.0</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-common3</span> <span class=\"s\">REQUIRED</span> <span class=\"s\">COMPONENTS</span> <span class=\"s\">graphics</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-math6</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-msgs2</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-transport5</span> <span class=\"s\">REQUIRED</span> <span class=\"s\">COMPONENTS</span> <span class=\"s\">log</span><span class=\"p\">)</span>\n\n<span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"s\">example</span>\n  <span class=\"s\">example.cc</span><span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span><span class=\"s\">example</span>\n    <span class=\"s\">ignition-common3::ignition-common3</span>\n    <span class=\"s\">ignition-transport5::core</span>\n    <span class=\"s\">ignition-transport5::log</span>\n    <span class=\"s\">ignition-msgs2::ignition-msgs2</span><span class=\"p\">)</span>\n<span class=\"nb\">install</span><span class=\"p\">(</span><span class=\"s\">TARGETS</span> <span class=\"s\">example</span>\n<span class=\"s\">RUNTIME</span> <span class=\"s\">DESTINATION</span> <span class=\"s\">bin</span>\n<span class=\"s\">LIBRARY</span> <span class=\"s\">DESTINATION</span> <span class=\"s\">lib</span>\n<span class=\"s\">ARCHIVE</span> <span class=\"s\">DESTINATION</span> <span class=\"s\">lib</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<p>8. Create an empty <strong>example.cc</strong> file living in the same dir as the above <strong>CMakeLists.txt</strong></p>\n<p>9. <strong>Build</strong> and <strong>install</strong> all projects</p>\n<h2 id=\"markdown-header-expected-behavior\"><strong>Expected behavior:</strong></h2>\n<p>Library example should build normally</p>\n<h2 id=\"markdown-header-actual-behavior\"><strong>Actual behavior:</strong></h2>\n<p>Library example doesn\u2019t build</p>\n<h2 id=\"markdown-header-reproduces-how-often\"><strong>Reproduces how often:</strong></h2>\n<p>Always</p>\n<h2 id=\"markdown-header-versions\"><strong>Versions</strong></h2>\n<p>ign-cmake2, ign-cmake1, ign-transport5, ign-msgs2 branch msgs2_use_math6, ign-common3.<br />\nOS: Ubuntu 18.04</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-07-04T15:44:51.309215+00:00", "milestone": null, "updated_on": "2019-07-11T21:01:45.011392+00:00", "type": "issue", "id": 61}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/62/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/62.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/62/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/62/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/62/compilation-failing-when-performing"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/62/vote"}}, "reporter": {"display_name": "Jo\u00e3o Andr\u00e9", "uuid": "{dac47269-c26c-4a4f-8c51-673d2bb1f16e}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdac47269-c26c-4a4f-8c51-673d2bb1f16e%7D"}, "html": {"href": "https://bitbucket.org/%7Bdac47269-c26c-4a4f-8c51-673d2bb1f16e%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a4aa312c9abc52b72636e9151f2d0e92d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJA-1.png"}}, "nickname": "joaocandre", "type": "user", "account_id": "5c8f8ad247a4d62d37cdd45a"}, "title": "Compilation failing when performing codecheck", "component": null, "votes": 1, "watches": 1, "content": {"raw": "I\u2019m trying to compile \u2018ignition-cmake\u2019 and compilation failing with\r\n\r\n```\r\n[ 15%] Performing codecheck step for 'core_no_deps_Debug'\r\nScanning dependencies of target codecheck\r\nmake[6]: *** [CMakeFiles/codecheck.dir/build.make:59: CMakeFiles/codecheck] Error 1\r\nmake[5]: *** [CMakeFiles/Makefile2:142: CMakeFiles/codecheck.dir/all] Error 2\r\nmake[4]: *** [CMakeFiles/Makefile2:149: CMakeFiles/codecheck.dir/rule] Error 2\r\nmake[3]: *** [Makefile:201: codecheck] Error 2\r\nmake[2]: *** [examples/CMakeFiles/core_no_deps_Debug.dir/build.make:124: examples/core_no_deps_Debug-prefix/src/core_no_deps_Debug-stamp/core_no_deps_Debug-codecheck] Error 2\r\nmake[1]: *** [CMakeFiles/Makefile2:1232: examples/CMakeFiles/core_no_deps_Debug.dir/all] Error 2\r\nmake: *** [Makefile:141: all] Error 2\r\n==> ERROR: A failure occurred in build().\r\n    Aborting...\r\n```\r\n\r\nThe output does not give me any information as to what exactly is failing? \r\n\r\nI\u2019m building this on Archlinux though the AUR\u2019s PKGBUILD file \\([archlinux.org/cgit/aur.git/tree/PKGBUILD?h=ignition-cmake](http://archlinux.org/cgit/aur.git/tree/PKGBUILD?h=ignition-cmake)\\).", "markup": "markdown", "html": "<p>I\u2019m trying to compile \u2018ignition-cmake\u2019 and compilation failing with</p>\n<div class=\"codehilite\"><pre><span></span>[ 15%] Performing codecheck step for &#39;core_no_deps_Debug&#39;\nScanning dependencies of target codecheck\nmake[6]: *** [CMakeFiles/codecheck.dir/build.make:59: CMakeFiles/codecheck] Error 1\nmake[5]: *** [CMakeFiles/Makefile2:142: CMakeFiles/codecheck.dir/all] Error 2\nmake[4]: *** [CMakeFiles/Makefile2:149: CMakeFiles/codecheck.dir/rule] Error 2\nmake[3]: *** [Makefile:201: codecheck] Error 2\nmake[2]: *** [examples/CMakeFiles/core_no_deps_Debug.dir/build.make:124: examples/core_no_deps_Debug-prefix/src/core_no_deps_Debug-stamp/core_no_deps_Debug-codecheck] Error 2\nmake[1]: *** [CMakeFiles/Makefile2:1232: examples/CMakeFiles/core_no_deps_Debug.dir/all] Error 2\nmake: *** [Makefile:141: all] Error 2\n==&gt; ERROR: A failure occurred in build().\n    Aborting...\n</pre></div>\n\n\n<p>The output does not give me any information as to what exactly is failing? </p>\n<p>I\u2019m building this on Archlinux though the AUR\u2019s PKGBUILD file (<a data-is-external-link=\"true\" href=\"http://archlinux.org/cgit/aur.git/tree/PKGBUILD?h=ignition-cmake\" rel=\"nofollow\">archlinux.org/cgit/aur.git/tree/PKGBUILD?h=ignition-cmake</a>).</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-07-08T15:15:55.230110+00:00", "milestone": null, "updated_on": "2019-10-18T07:52:14.221440+00:00", "type": "issue", "id": 62}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/63/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/63.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/63/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/63/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/63/provide-and-document-option-to-explicitly"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/63/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{47ac260c-4129-4447-b7e9-00a63a2478d6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B47ac260c-4129-4447-b7e9-00a63a2478d6%7D"}, "html": {"href": "https://bitbucket.org/%7B47ac260c-4129-4447-b7e9-00a63a2478d6%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b43075d6860b6cc554b6aa88ef28b638d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsST-5.png"}}, "nickname": "Silvio Traversaro", "type": "user", "account_id": "5a8c66ead324b531c3d3cf7f"}, "title": "Provide and document option to explicitly disable configuration/compilation/installation of library components", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nSupport for dividing ignition libraries in \u201ccomponents\u201d was added in [#!/ignitionrobotics/ign-cmake/pull-requests/2/creating-project-components-ready-for/diff](#!/ignitionrobotics/ign-cmake/pull-requests/2/creating-project-components-ready-for/diff) . However,  at the moment all the components for which the dependencies are installed in the system are always  configured, compiled and installed. It may be handy to have  CMake variables to disable configuration of selected components. \r\n\r\n# Motivation\r\n\r\nI am currently working in adding ports for the ignition libraries in vcpkg, see [https://github.com/microsoft/vcpkg/pull/7781](https://github.com/microsoft/vcpkg/pull/7781) and.  [https://github.com/j-rivero/vcpkg\\_ignition/issues/2](https://github.com/j-rivero/vcpkg_ignition/issues/2) . Vcpkg has support for optionally compiling part of libraries, that is called \u201cfeature packages\u201d, see [https://github.com/microsoft/vcpkg/blob/master/docs/specifications/feature-packages.md](https://github.com/microsoft/vcpkg/blob/master/docs/specifications/feature-packages.md) and [https://devblogs.microsoft.com/cppblog/vcpkg-introducing-installation-options-with-feature-packages/](https://devblogs.microsoft.com/cppblog/vcpkg-introducing-installation-options-with-feature-packages/) . \r\n\r\nPackages features map quite naturally to ign-cmake\u2019s components, but the problem is that at the moment all the components for which the required dependencies are installed are configured. This is a problem for two reason:\r\n\r\n* A user need to spend time compiling some components that he/she did not requested\r\n* The actual components compiled depend  on the state of the packages installed, making the port build not reproducible, unless all the components dependencies are listed as port\u2019s required dependency.\r\n\r\n# Describe alternatives you\u2019ve considered \r\n\r\nIn theory, one could control the environment to make sure that only the dependencies for the desired components are installed. However, this is not always possible, especially in vcpkg.  An alternative option is to always install all the components, but it would be nice to support ignition\u2019s libraries molecularity also at the vcpkg level.", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>Support for dividing ignition libraries in \u201ccomponents\u201d was added in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/pull-requests/2/creating-project-components-ready-for/diff\" rel=\"nofollow\">#!/ignitionrobotics/ign-cmake/pull-requests/2/creating-project-components-ready-for/diff</a> . However,  at the moment all the components for which the dependencies are installed in the system are always  configured, compiled and installed. It may be handy to have  CMake variables to disable configuration of selected components. </p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>I am currently working in adding ports for the ignition libraries in vcpkg, see <a data-is-external-link=\"true\" href=\"https://github.com/microsoft/vcpkg/pull/7781\" rel=\"nofollow\">https://github.com/microsoft/vcpkg/pull/7781</a> and.  <a data-is-external-link=\"true\" href=\"https://github.com/j-rivero/vcpkg_ignition/issues/2\" rel=\"nofollow\">https://github.com/j-rivero/vcpkg_ignition/issues/2</a> . Vcpkg has support for optionally compiling part of libraries, that is called \u201cfeature packages\u201d, see <a data-is-external-link=\"true\" href=\"https://github.com/microsoft/vcpkg/blob/master/docs/specifications/feature-packages.md\" rel=\"nofollow\">https://github.com/microsoft/vcpkg/blob/master/docs/specifications/feature-packages.md</a> and <a data-is-external-link=\"true\" href=\"https://devblogs.microsoft.com/cppblog/vcpkg-introducing-installation-options-with-feature-packages/\" rel=\"nofollow\">https://devblogs.microsoft.com/cppblog/vcpkg-introducing-installation-options-with-feature-packages/</a> . </p>\n<p>Packages features map quite naturally to ign-cmake\u2019s components, but the problem is that at the moment all the components for which the required dependencies are installed are configured. This is a problem for two reason:</p>\n<ul>\n<li>A user need to spend time compiling some components that he/she did not requested</li>\n<li>The actual components compiled depend  on the state of the packages installed, making the port build not reproducible, unless all the components dependencies are listed as port\u2019s required dependency.</li>\n</ul>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you\u2019ve considered</h1>\n<p>In theory, one could control the environment to make sure that only the dependencies for the desired components are installed. However, this is not always possible, especially in vcpkg.  An alternative option is to always install all the components, but it would be nice to support ignition\u2019s libraries molecularity also at the vcpkg level.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-08-21T08:30:36.528512+00:00", "milestone": null, "updated_on": "2020-03-14T17:48:30.708551+00:00", "type": "issue", "id": 63}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/64/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/64.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/64/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/64/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/64/support-for-work-without-pkg-config-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/64/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Support for work without pkg-config for FindUUID", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nAdd code to permit to FindUUID to work even without `pkg-config` installed in the system.\r\n\r\n# Motivation\r\n\r\nAt the moment the FindUUID CMake scripts assume that `pkg-config` is installed in the system to work. This is a reasonable assumption, as FindUUID is supposed to work only on \\*nix systems. However, unfortunately the vcpkg continuous integration on Linux does not have/require pkg-config installed, and so the stock FindUUID fails on that machine, see [https://github.com/microsoft/vcpkg/pull/8044#issuecomment-529515227](https://github.com/microsoft/vcpkg/pull/8044#issuecomment-529515227) . For this reason, it may be convient to support this case.\r\n\r\n# Describe alternatives you've considered\r\n\r\nLeave the patch just in the vcpkg port: as in almost all other cases `pkg-config` will be installed, it make sense that the burden of maintenance of this case remains on the vcpkg side.\r\n\r\n# Additional context\r\n\r\nThe patch is already available in vcpkg at [https://github.com/microsoft/vcpkg/pull/8044/files#diff-d3ef7f499fd629bfd6d5029bf3847dea](https://github.com/microsoft/vcpkg/pull/8044/files#diff-d3ef7f499fd629bfd6d5029bf3847dea) , but I am not sure if it is of general interest, so I will open a PR only if there is interest.", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>Add code to permit to FindUUID to work even without <code>pkg-config</code> installed in the system.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>At the moment the FindUUID CMake scripts assume that <code>pkg-config</code> is installed in the system to work. This is a reasonable assumption, as FindUUID is supposed to work only on *nix systems. However, unfortunately the vcpkg continuous integration on Linux does not have/require pkg-config installed, and so the stock FindUUID fails on that machine, see <a data-is-external-link=\"true\" href=\"https://github.com/microsoft/vcpkg/pull/8044#issuecomment-529515227\" rel=\"nofollow\">https://github.com/microsoft/vcpkg/pull/8044#issuecomment-529515227</a> . For this reason, it may be convient to support this case.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>Leave the patch just in the vcpkg port: as in almost all other cases <code>pkg-config</code> will be installed, it make sense that the burden of maintenance of this case remains on the vcpkg side.</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>The patch is already available in vcpkg at <a data-is-external-link=\"true\" href=\"https://github.com/microsoft/vcpkg/pull/8044/files#diff-d3ef7f499fd629bfd6d5029bf3847dea\" rel=\"nofollow\">https://github.com/microsoft/vcpkg/pull/8044/files#diff-d3ef7f499fd629bfd6d5029bf3847dea</a> , but I am not sure if it is of general interest, so I will open a PR only if there is interest.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-09-09T20:39:59.740994+00:00", "milestone": null, "updated_on": "2020-02-12T19:01:04.687784+00:00", "type": "issue", "id": 64}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/65/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/65.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/65/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/65/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/65/ignimporttarget-does-not-work-correctly"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/65/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "IgnImportTarget does not work correctly with <project>_LIBRARIES variables that contains link-time keyworks", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* \\[x\\] Put an X between the brackets on this line if you have done all of the following:\r\n\r\n    * Checked the Q&A board for common solutions: [http://answers.gazebosim.org](http://answers.gazebosim.org)\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: [https://ignitionrobotics.org/libs](https://ignitionrobotics.org/libs)\r\n    \r\n\r\n# Description\r\n\r\nIf a variable `<project>_LIBRARIES` contains a link-type keyword such as `optimized` or `debug` \\(such as \\`optimized;C:/vcpkg/installed/x64-windows/lib/libcurl.lib;debug;C:/vcpkg/installed/x64-windows/debug/lib/libcurl-d.lib\\`, see [https://cmake.org/cmake/help/latest/command/target\\_link\\_libraries.html#overview](https://cmake.org/cmake/help/latest/command/target_link_libraries.html#overview)\\), the `ign_import_target` CMake function does not work correctly. \r\n\r\n# Steps to Reproduce\r\n\r\n1. Install curl via vcpkg \\(that install curl both in Release and in Debug\\) \r\n2. Configure a CMake project with the following code: \r\n\r\n```\r\nfind_package(CURL REQUIRED)\r\nign_import_target(curl\r\n  LIB_VAR CURL_LIBRARIES\r\n  INCLUDE_VAR CURL_INCLUDE_DIRS)\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nThe `curl::curl` is correctly created without any error.\r\n\r\n**Actual behavior:**\r\n\r\n```\r\n-- Found CURL: optimized;C:/vsts/_work/1/s/installed/arm64-windows/lib/libcurl.lib;debug;C:/vsts/_work/1/s/installed/arm64-windows/debug/lib/libcurl-d.lib (found version \"7.65.2-DEV\")  \r\nCMake Error at C:/vsts/_work/1/s/installed/arm64-windows/share/ignition-cmake0/cmake0/IgnImportTarget.cmake:172 (set_target_properties):\r\n  Property INTERFACE_LINK_LIBRARIES may not contain link-type keyword\r\n  \"debug\".  The INTERFACE_LINK_LIBRARIES property may contain\r\n  configuration-sensitive generator-expressions which may be used to specify\r\n  per-configuration rules.\r\nCall Stack (most recent call first):\r\n  C:/vsts/_work/1/s/installed/arm64-windows/share/ignition-cmake0/cmake0/IgnImportTarget.cmake:100 (_ign_sort_libraries)\r\n  C:/vsts/_work/1/s/installed/arm64-windows/share/ignition-cmake0/cmake0/FindIgnCURL.cmake:52 (ign_import_target)\r\n  C:/vsts/_work/1/s/scripts/buildsystems/vcpkg.cmake:256 (_find_package)\r\n  C:/vsts/_work/1/s/installed/arm64-windows/share/ignition-cmake0/cmake0/IgnUtils.cmake:146 (find_package)\r\n  CMakeLists.txt:31 (ign_find_package)\r\n\r\n\r\nCMake Error at C:/vsts/_work/1/s/installed/arm64-windows/share/ignition-cmake0/cmake0/IgnImportTarget.cmake:106 (set_target_properties):\r\n  Property INTERFACE_LINK_LIBRARIES may not contain link-type keyword\r\n  \"optimized\".  The INTERFACE_LINK_LIBRARIES property may contain\r\n  configuration-sensitive generator-expressions which may be used to specify\r\n  per-configuration rules.\r\nCall Stack (most recent call first):\r\n  C:/vsts/_work/1/s/installed/arm64-windows/share/ignition-cmake0/cmake0/FindIgnCURL.cmake:52 (ign_import_target)\r\n  C:/vsts/_work/1/s/scripts/buildsystems/vcpkg.cmake:256 (_find_package)\r\n  C:/vsts/_work/1/s/installed/arm64-windows/share/ignition-cmake0/cmake0/IgnUtils.cmake:146 (find_package)\r\n  CMakeLists.txt:31 (ign_find_package)\r\n\r\n\r\n-- Looking for IgnCURL - found\r\n```\r\n\r\n**Reproduces how often:**\r\n\r\nAll the time. \r\n\r\n# Versions\r\n\r\nignition-cmake0 0.6.1 \r\n\r\n# Additional Information\r\n\r\nProblem emerged in [https://github.com/microsoft/vcpkg/pull/8136#issuecomment-530560128](https://github.com/microsoft/vcpkg/pull/8136#issuecomment-530560128) .", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>\n<p>[x] Put an X between the brackets on this line if you have done all of the following:</p>\n<ul>\n<li>Checked the Q&amp;A board for common solutions: <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org\" rel=\"nofollow\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a data-is-external-link=\"true\" href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>If a variable <code>&lt;project&gt;_LIBRARIES</code> contains a link-type keyword such as <code>optimized</code> or <code>debug</code> (such as `optimized;C:/vcpkg/installed/x64-windows/lib/libcurl.lib;debug;C:/vcpkg/installed/x64-windows/debug/lib/libcurl-d.lib`, see <a data-is-external-link=\"true\" href=\"https://cmake.org/cmake/help/latest/command/target_link_libraries.html#overview\" rel=\"nofollow\">https://cmake.org/cmake/help/latest/command/target_link_libraries.html#overview</a>), the <code>ign_import_target</code> CMake function does not work correctly. </p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ol>\n<li>Install curl via vcpkg (that install curl both in Release and in Debug) </li>\n<li>Configure a CMake project with the following code: </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>find_package(CURL REQUIRED)\nign_import_target(curl\n  LIB_VAR CURL_LIBRARIES\n  INCLUDE_VAR CURL_INCLUDE_DIRS)\n</pre></div>\n\n\n<p><strong>Expected behavior:</strong></p>\n<p>The <code>curl::curl</code> is correctly created without any error.</p>\n<p><strong>Actual behavior:</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">--</span> <span class=\"nt\">Found</span> <span class=\"nt\">CURL</span><span class=\"o\">:</span> <span class=\"nt\">optimized</span><span class=\"o\">;</span><span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">libcurl</span><span class=\"p\">.</span><span class=\"nc\">lib</span><span class=\"o\">;</span><span class=\"nt\">debug</span><span class=\"o\">;</span><span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">debug</span><span class=\"o\">/</span><span class=\"nt\">lib</span><span class=\"o\">/</span><span class=\"nt\">libcurl-d</span><span class=\"p\">.</span><span class=\"nc\">lib</span> <span class=\"o\">(</span><span class=\"nt\">found</span> <span class=\"nt\">version</span> <span class=\"s2\">&quot;7.65.2-DEV&quot;</span><span class=\"o\">)</span>  \n<span class=\"nt\">CMake</span> <span class=\"nt\">Error</span> <span class=\"nt\">at</span> <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">share</span><span class=\"o\">/</span><span class=\"nt\">ignition-cmake0</span><span class=\"o\">/</span><span class=\"nt\">cmake0</span><span class=\"o\">/</span><span class=\"nt\">IgnImportTarget</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">172</span> <span class=\"o\">(</span><span class=\"nt\">set_target_properties</span><span class=\"o\">):</span>\n  <span class=\"nt\">Property</span> <span class=\"nt\">INTERFACE_LINK_LIBRARIES</span> <span class=\"nt\">may</span> <span class=\"nt\">not</span> <span class=\"nt\">contain</span> <span class=\"nt\">link-type</span> <span class=\"nt\">keyword</span>\n  <span class=\"s2\">&quot;debug&quot;</span><span class=\"o\">.</span>  <span class=\"nt\">The</span> <span class=\"nt\">INTERFACE_LINK_LIBRARIES</span> <span class=\"nt\">property</span> <span class=\"nt\">may</span> <span class=\"nt\">contain</span>\n  <span class=\"nt\">configuration-sensitive</span> <span class=\"nt\">generator-expressions</span> <span class=\"nt\">which</span> <span class=\"nt\">may</span> <span class=\"nt\">be</span> <span class=\"nt\">used</span> <span class=\"nt\">to</span> <span class=\"nt\">specify</span>\n  <span class=\"nt\">per-configuration</span> <span class=\"nt\">rules</span><span class=\"o\">.</span>\n<span class=\"nt\">Call</span> <span class=\"nt\">Stack</span> <span class=\"o\">(</span><span class=\"nt\">most</span> <span class=\"nt\">recent</span> <span class=\"nt\">call</span> <span class=\"nt\">first</span><span class=\"o\">):</span>\n  <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">share</span><span class=\"o\">/</span><span class=\"nt\">ignition-cmake0</span><span class=\"o\">/</span><span class=\"nt\">cmake0</span><span class=\"o\">/</span><span class=\"nt\">IgnImportTarget</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">100</span> <span class=\"o\">(</span><span class=\"nt\">_ign_sort_libraries</span><span class=\"o\">)</span>\n  <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">share</span><span class=\"o\">/</span><span class=\"nt\">ignition-cmake0</span><span class=\"o\">/</span><span class=\"nt\">cmake0</span><span class=\"o\">/</span><span class=\"nt\">FindIgnCURL</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">52</span> <span class=\"o\">(</span><span class=\"nt\">ign_import_target</span><span class=\"o\">)</span>\n  <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">scripts</span><span class=\"o\">/</span><span class=\"nt\">buildsystems</span><span class=\"o\">/</span><span class=\"nt\">vcpkg</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">256</span> <span class=\"o\">(</span><span class=\"nt\">_find_package</span><span class=\"o\">)</span>\n  <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">share</span><span class=\"o\">/</span><span class=\"nt\">ignition-cmake0</span><span class=\"o\">/</span><span class=\"nt\">cmake0</span><span class=\"o\">/</span><span class=\"nt\">IgnUtils</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">146</span> <span class=\"o\">(</span><span class=\"nt\">find_package</span><span class=\"o\">)</span>\n  <span class=\"nt\">CMakeLists</span><span class=\"p\">.</span><span class=\"nc\">txt</span><span class=\"p\">:</span><span class=\"nd\">31</span> <span class=\"o\">(</span><span class=\"nt\">ign_find_package</span><span class=\"o\">)</span>\n\n\n<span class=\"nt\">CMake</span> <span class=\"nt\">Error</span> <span class=\"nt\">at</span> <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">share</span><span class=\"o\">/</span><span class=\"nt\">ignition-cmake0</span><span class=\"o\">/</span><span class=\"nt\">cmake0</span><span class=\"o\">/</span><span class=\"nt\">IgnImportTarget</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">106</span> <span class=\"o\">(</span><span class=\"nt\">set_target_properties</span><span class=\"o\">):</span>\n  <span class=\"nt\">Property</span> <span class=\"nt\">INTERFACE_LINK_LIBRARIES</span> <span class=\"nt\">may</span> <span class=\"nt\">not</span> <span class=\"nt\">contain</span> <span class=\"nt\">link-type</span> <span class=\"nt\">keyword</span>\n  <span class=\"s2\">&quot;optimized&quot;</span><span class=\"o\">.</span>  <span class=\"nt\">The</span> <span class=\"nt\">INTERFACE_LINK_LIBRARIES</span> <span class=\"nt\">property</span> <span class=\"nt\">may</span> <span class=\"nt\">contain</span>\n  <span class=\"nt\">configuration-sensitive</span> <span class=\"nt\">generator-expressions</span> <span class=\"nt\">which</span> <span class=\"nt\">may</span> <span class=\"nt\">be</span> <span class=\"nt\">used</span> <span class=\"nt\">to</span> <span class=\"nt\">specify</span>\n  <span class=\"nt\">per-configuration</span> <span class=\"nt\">rules</span><span class=\"o\">.</span>\n<span class=\"nt\">Call</span> <span class=\"nt\">Stack</span> <span class=\"o\">(</span><span class=\"nt\">most</span> <span class=\"nt\">recent</span> <span class=\"nt\">call</span> <span class=\"nt\">first</span><span class=\"o\">):</span>\n  <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">share</span><span class=\"o\">/</span><span class=\"nt\">ignition-cmake0</span><span class=\"o\">/</span><span class=\"nt\">cmake0</span><span class=\"o\">/</span><span class=\"nt\">FindIgnCURL</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">52</span> <span class=\"o\">(</span><span class=\"nt\">ign_import_target</span><span class=\"o\">)</span>\n  <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">scripts</span><span class=\"o\">/</span><span class=\"nt\">buildsystems</span><span class=\"o\">/</span><span class=\"nt\">vcpkg</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">256</span> <span class=\"o\">(</span><span class=\"nt\">_find_package</span><span class=\"o\">)</span>\n  <span class=\"nt\">C</span><span class=\"o\">:/</span><span class=\"nt\">vsts</span><span class=\"o\">/</span><span class=\"nt\">_work</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">s</span><span class=\"o\">/</span><span class=\"nt\">installed</span><span class=\"o\">/</span><span class=\"nt\">arm64-windows</span><span class=\"o\">/</span><span class=\"nt\">share</span><span class=\"o\">/</span><span class=\"nt\">ignition-cmake0</span><span class=\"o\">/</span><span class=\"nt\">cmake0</span><span class=\"o\">/</span><span class=\"nt\">IgnUtils</span><span class=\"p\">.</span><span class=\"nc\">cmake</span><span class=\"p\">:</span><span class=\"nd\">146</span> <span class=\"o\">(</span><span class=\"nt\">find_package</span><span class=\"o\">)</span>\n  <span class=\"nt\">CMakeLists</span><span class=\"p\">.</span><span class=\"nc\">txt</span><span class=\"p\">:</span><span class=\"nd\">31</span> <span class=\"o\">(</span><span class=\"nt\">ign_find_package</span><span class=\"o\">)</span>\n\n\n<span class=\"nt\">--</span> <span class=\"nt\">Looking</span> <span class=\"nt\">for</span> <span class=\"nt\">IgnCURL</span> <span class=\"nt\">-</span> <span class=\"nt\">found</span>\n</pre></div>\n\n\n<p><strong>Reproduces how often:</strong></p>\n<p>All the time. </p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>ignition-cmake0 0.6.1 </p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>Problem emerged in <a data-is-external-link=\"true\" href=\"https://github.com/microsoft/vcpkg/pull/8136#issuecomment-530560128\" rel=\"nofollow\">https://github.com/microsoft/vcpkg/pull/8136#issuecomment-530560128</a> .</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-09-14T13:27:23.235890+00:00", "milestone": null, "updated_on": "2019-09-14T13:27:23.235890+00:00", "type": "issue", "id": 65}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/66/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/66.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/66/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/66/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/66/codecheck-step-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/66/vote"}}, "reporter": null, "title": "codecheck step for 'core_no_deps_RelWithDebInfo' Error 2", "component": null, "votes": 0, "watches": null, "content": {"raw": "Trying to build branch **default**, my environment:\r\n\r\n```console\r\nlongervision-GT72-6QE% lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 19.04\r\nRelease:\t19.04\r\nCodename:\tdisco\r\nlongervision-GT72-6QE% gcc --version\r\ngcc (Ubuntu 8.3.0-6ubuntu1) 8.3.0\r\nCopyright (C) 2018 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\nAnd, I obtained the following **ERROR** message if I enable **BUILD_TESTING**\r\n\r\n```\r\n#!cmake\r\n\r\n\r\n[ 40%] Performing codecheck step for 'core_no_deps_RelWithDebInfo'\r\ncd ....../IgnitionRobotics/libs/ign-cmake/build/examples && make -C ....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build codecheck\r\nmake[3]: Entering directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[4]: Entering directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[5]: Entering directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[6]: Entering directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[6]: Leaving directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[6]: Entering directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[6]: *** [CMakeFiles/codecheck.dir/build.make:59: CMakeFiles/codecheck] Error 1\r\nmake[6]: Leaving directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[5]: *** [CMakeFiles/Makefile2:142: CMakeFiles/codecheck.dir/all] Error 2\r\nmake[5]: Leaving directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[4]: *** [CMakeFiles/Makefile2:149: CMakeFiles/codecheck.dir/rule] Error 2\r\nmake[4]: Leaving directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[3]: *** [Makefile:223: codecheck] Error 2\r\nmake[3]: Leaving directory '....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build'\r\nmake[2]: *** [examples/CMakeFiles/core_no_deps_RelWithDebInfo.dir/build.make:129: examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-stamp/core_no_deps_RelWithDebInfo-codecheck] Error 2\r\nmake[2]: Leaving directory '....../IgnitionRobotics/libs/ign-cmake/build'\r\nmake[1]: *** [CMakeFiles/Makefile2:1517: examples/CMakeFiles/core_no_deps_RelWithDebInfo.dir/all] Error 2\r\nmake[1]: Leaving directory '....../IgnitionRobotics/libs/ign-cmake/build'\r\nmake: *** [Makefile:166: all] Error 2\r\n\r\n```\r\n\r\n\r\nAny suggestions please?", "markup": "markdown", "html": "<p>Trying to build branch <strong>default</strong>, my environment:</p>\n<div class=\"codehilite language-console\"><pre><span></span><span class=\"go\">longervision-GT72-6QE% lsb_release -a</span>\n<span class=\"go\">No LSB modules are available.</span>\n<span class=\"go\">Distributor ID: Ubuntu</span>\n<span class=\"go\">Description:    Ubuntu 19.04</span>\n<span class=\"go\">Release:    19.04</span>\n<span class=\"go\">Codename:   disco</span>\n<span class=\"go\">longervision-GT72-6QE% gcc --version</span>\n<span class=\"go\">gcc (Ubuntu 8.3.0-6ubuntu1) 8.3.0</span>\n<span class=\"go\">Copyright (C) 2018 Free Software Foundation, Inc.</span>\n<span class=\"go\">This is free software; see the source for copying conditions.  There is NO</span>\n<span class=\"go\">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>\n</pre></div>\n\n\n<p>And, I obtained the following <strong>ERROR</strong> message if I enable <strong>BUILD_TESTING</strong></p>\n<div class=\"codehilite language-cmake\"><pre><span></span><span class=\"err\">[</span> <span class=\"err\">40%]</span> <span class=\"err\">Performing</span> <span class=\"err\">codecheck</span> <span class=\"err\">step</span> <span class=\"err\">for</span> <span class=\"err\">&#39;core_no_deps_RelWithDebInfo&#39;</span>\n<span class=\"err\">cd</span> <span class=\"err\">....../IgnitionRobotics/libs/ign-cmake/build/examples</span> <span class=\"err\">&amp;&amp;</span> <span class=\"err\">make</span> <span class=\"err\">-C</span> <span class=\"err\">....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build</span> <span class=\"err\">codecheck</span>\n<span class=\"err\">make[3]:</span> <span class=\"err\">Entering</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[4]:</span> <span class=\"err\">Entering</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[5]:</span> <span class=\"err\">Entering</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[6]:</span> <span class=\"err\">Entering</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[6]:</span> <span class=\"err\">Leaving</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[6]:</span> <span class=\"err\">Entering</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[6]:</span> <span class=\"err\">***</span> <span class=\"err\">[CMakeFiles/codecheck.dir/build.make:59:</span> <span class=\"err\">CMakeFiles/codecheck]</span> <span class=\"err\">Error</span> <span class=\"err\">1</span>\n<span class=\"err\">make[6]:</span> <span class=\"err\">Leaving</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[5]:</span> <span class=\"err\">***</span> <span class=\"err\">[CMakeFiles/Makefile2:142:</span> <span class=\"err\">CMakeFiles/codecheck.dir/all]</span> <span class=\"err\">Error</span> <span class=\"err\">2</span>\n<span class=\"err\">make[5]:</span> <span class=\"err\">Leaving</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[4]:</span> <span class=\"err\">***</span> <span class=\"err\">[CMakeFiles/Makefile2:149:</span> <span class=\"err\">CMakeFiles/codecheck.dir/rule]</span> <span class=\"err\">Error</span> <span class=\"err\">2</span>\n<span class=\"err\">make[4]:</span> <span class=\"err\">Leaving</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[3]:</span> <span class=\"err\">***</span> <span class=\"err\">[Makefile:223:</span> <span class=\"err\">codecheck]</span> <span class=\"err\">Error</span> <span class=\"err\">2</span>\n<span class=\"err\">make[3]:</span> <span class=\"err\">Leaving</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build/examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-build&#39;</span>\n<span class=\"err\">make[2]:</span> <span class=\"err\">***</span> <span class=\"err\">[examples/CMakeFiles/core_no_deps_RelWithDebInfo.dir/build.make:129:</span> <span class=\"err\">examples/core_no_deps_RelWithDebInfo-prefix/src/core_no_deps_RelWithDebInfo-stamp/core_no_deps_RelWithDebInfo-codecheck]</span> <span class=\"err\">Error</span> <span class=\"err\">2</span>\n<span class=\"err\">make[2]:</span> <span class=\"err\">Leaving</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build&#39;</span>\n<span class=\"err\">make[1]:</span> <span class=\"err\">***</span> <span class=\"err\">[CMakeFiles/Makefile2:1517:</span> <span class=\"err\">examples/CMakeFiles/core_no_deps_RelWithDebInfo.dir/all]</span> <span class=\"err\">Error</span> <span class=\"err\">2</span>\n<span class=\"err\">make[1]:</span> <span class=\"err\">Leaving</span> <span class=\"err\">directory</span> <span class=\"err\">&#39;....../IgnitionRobotics/libs/ign-cmake/build&#39;</span>\n<span class=\"err\">make:</span> <span class=\"err\">***</span> <span class=\"err\">[Makefile:166:</span> <span class=\"err\">all]</span> <span class=\"err\">Error</span> <span class=\"err\">2</span>\n</pre></div>\n\n\n<p>Any suggestions please?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-09-23T21:35:17.766641+00:00", "milestone": null, "updated_on": "2019-10-18T07:42:34.872646+00:00", "type": "issue", "id": 66}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/67/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/67.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/67/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/67/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/67/ignition-cmake0-unset-blank-cache"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/67/vote"}}, "reporter": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "title": "ignition-cmake0: unset blank cache variables", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Could I ask for backporting commit [#!/ignitionrobotics/ign-cmake/commits/e8913dfc6e0ae0c8e510f51d571335a90755e0c0](#!/ignitionrobotics/ign-cmake/commits/e8913dfc6e0ae0c8e510f51d571335a90755e0c0) to ignition-cmake0? It would hopefully fix issue [https://bitbucket.org/osrf/gazebo/issues/2650/catkin-build-cannot-find-tinyxml2-tinyxml2](https://bitbucket.org/osrf/gazebo/issues/2650/catkin-build-cannot-find-tinyxml2-tinyxml2) in Gazebo 9.", "markup": "markdown", "html": "<p>Could I ask for backporting commit <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/commits/e8913dfc6e0ae0c8e510f51d571335a90755e0c0\" rel=\"nofollow\">#!/ignitionrobotics/ign-cmake/commits/e8913dfc6e0ae0c8e510f51d571335a90755e0c0</a> to ignition-cmake0? It would hopefully fix issue <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/issues/2650/catkin-build-cannot-find-tinyxml2-tinyxml2\" rel=\"nofollow\">https://bitbucket.org/osrf/gazebo/issues/2650/catkin-build-cannot-find-tinyxml2-tinyxml2</a> in Gazebo 9.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-10-11T15:13:57.506886+00:00", "milestone": null, "updated_on": "2019-11-12T08:23:10.111573+00:00", "type": "issue", "id": 67}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/68/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/68.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/68/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/68/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/68/packagexml-for-easy-integration-with"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/68/vote"}}, "reporter": {"display_name": "Kunal Tyagi", "uuid": "{549058f2-c154-4c9c-a8ac-be524224888a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B549058f2-c154-4c9c-a8ac-be524224888a%7D"}, "html": {"href": "https://bitbucket.org/%7B549058f2-c154-4c9c-a8ac-be524224888a%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:9066091b-9d3b-4f74-a7fe-d994c559b147/d36dc15c-fc09-4288-8b57-d6b17b9f6036/128"}}, "nickname": "kunaltyagi", "type": "user", "account_id": "557058:9066091b-9d3b-4f74-a7fe-d994c559b147"}, "title": "package.xml for easy integration with catkin/ament", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Hi\r\n\r\nI noticed that none of ignition's repositories (and gazebo) have a package.xml which makes creating a from source setup a bit of a nuisance. Is there a rationale behind this (except that \r\nROS and ignition are independent)?\r\n \r\n I've created `package.xml` for my own use for gazebo, ign-math, ign-cmake, ign-tools, ign-msgs, ign-transport and meta-package ignition (following the traditional layout in ROS). If you're interested, I can upstream them.", "markup": "markdown", "html": "<p>Hi</p>\n<p>I noticed that none of ignition's repositories (and gazebo) have a package.xml which makes creating a from source setup a bit of a nuisance. Is there a rationale behind this (except that \nROS and ignition are independent)?</p>\n<p>I've created <code>package.xml</code> for my own use for gazebo, ign-math, ign-cmake, ign-tools, ign-msgs, ign-transport and meta-package ignition (following the traditional layout in ROS). If you're interested, I can upstream them.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-12-02T06:04:53.087070+00:00", "milestone": null, "updated_on": "2019-12-02T17:57:38.527188+00:00", "type": "issue", "id": 68}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/69/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/69.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/69/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/69/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/69/convenience-cmake-for-ignition-metapackage"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/69/vote"}}, "reporter": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "title": "Convenience CMake for Ignition Metapackage", "component": null, "votes": 1, "watches": 2, "content": {"raw": "Based off of discussion over on [ros\\_ign github](https://github.com/osrf/ros_ign/pull/60/files/72ee1834ed72e873afa0782d5bd05c5845dd832f#r360498028), it may make sense to create some CMake logic that would allow a one-shot configuration of multiple ignition packages.\r\n\r\nWe could replace logic like this:\r\n\r\n```\r\n  find_package(ignition-gazebo3 REQUIRED)\r\n  set(IGN_GAZEBO_VER ${ignition-gazebo3_VERSION_MAJOR})\r\n\ufffc\r\n\ufffc  find_package(ignition-transport8 REQUIRED)\r\n\ufffc  set(IGN_TRANSPORT_VER ${ignition-transport8_VERSION_MAJOR})\r\n\ufffc\r\n\ufffc  find_package(ignition-msgs5 REQUIRED)\r\n\ufffc  set(IGN_MSGS_VER ${ignition-msgs5_VERSION_MAJOR})\r\n```\r\n\r\nWith something like\r\n\r\n```\r\nfind_package(ignition-citadel REQUIRED COMPONENTS gazebo transport msgs)\r\n```\r\n\r\nWhich would bring in the required packages and populate the necessary versions for downstream use.", "markup": "markdown", "html": "<p>Based off of discussion over on <a data-is-external-link=\"true\" href=\"https://github.com/osrf/ros_ign/pull/60/files/72ee1834ed72e873afa0782d5bd05c5845dd832f#r360498028\" rel=\"nofollow\">ros_ign github</a>, it may make sense to create some CMake logic that would allow a one-shot configuration of multiple ignition packages.</p>\n<p>We could replace logic like this:</p>\n<div class=\"codehilite\"><pre><span></span>  find_package(ignition-gazebo3 REQUIRED)\n  set(IGN_GAZEBO_VER <span class=\"cp\">${</span><span class=\"n\">ignition</span><span class=\"o\">-</span><span class=\"n\">gazebo3_VERSION_MAJOR</span><span class=\"cp\">}</span>)\n\ufffc\n\ufffc  find_package(ignition-transport8 REQUIRED)\n\ufffc  set(IGN_TRANSPORT_VER <span class=\"cp\">${</span><span class=\"n\">ignition</span><span class=\"o\">-</span><span class=\"n\">transport8_VERSION_MAJOR</span><span class=\"cp\">}</span>)\n\ufffc\n\ufffc  find_package(ignition-msgs5 REQUIRED)\n\ufffc  set(IGN_MSGS_VER <span class=\"cp\">${</span><span class=\"n\">ignition</span><span class=\"o\">-</span><span class=\"n\">msgs5_VERSION_MAJOR</span><span class=\"cp\">}</span>)\n</pre></div>\n\n\n<p>With something like</p>\n<div class=\"codehilite\"><pre><span></span>find_package(ignition-citadel REQUIRED COMPONENTS gazebo transport msgs)\n</pre></div>\n\n\n<p>Which would bring in the required packages and populate the necessary versions for downstream use.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-12-20T20:35:50.451271+00:00", "milestone": null, "updated_on": "2020-02-12T19:04:39.811695+00:00", "type": "issue", "id": 69}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/70/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/70.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/70/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/70/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/70/findtinyxml2cmake-ignores-upstream"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/70/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "FindTINYXML2.cmake ignores upstream installed tinyxml2Config.cmake", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Since [https://github.com/leethomason/tinyxml2/pull/557](https://github.com/leethomason/tinyxml2/pull/557), tinyxml2 exports its own CMake config file under the CMake package name `tinyxml2` . However, ignition-cmake\u2019s `FindTINYXML2.cmake` CMake scripts ignore this file, and always search for the package using pkg-config or manual search. To correctly find the debug and release version of the library in system without pkg-config, it would be convenient if `FindTINYXML2.cmake` looked for the `tinyxml2` CMake package as the first step, and populated appropriatly the variable and the imported targets that it exports.", "markup": "markdown", "html": "<p>Since <a data-is-external-link=\"true\" href=\"https://github.com/leethomason/tinyxml2/pull/557\" rel=\"nofollow\">https://github.com/leethomason/tinyxml2/pull/557</a>, tinyxml2 exports its own CMake config file under the CMake package name <code>tinyxml2</code> . However, ignition-cmake\u2019s <code>FindTINYXML2.cmake</code> CMake scripts ignore this file, and always search for the package using pkg-config or manual search. To correctly find the debug and release version of the library in system without pkg-config, it would be convenient if <code>FindTINYXML2.cmake</code> looked for the <code>tinyxml2</code> CMake package as the first step, and populated appropriatly the variable and the imported targets that it exports.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-02-12T19:13:52.643794+00:00", "milestone": null, "updated_on": "2020-02-12T19:13:52.643794+00:00", "type": "issue", "id": 70}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/71/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/71.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/71/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/71/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/71/-"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/71/vote"}}, "reporter": {"display_name": "ban", "uuid": "{ff8e083f-3ade-4a9f-b2a8-52337bfacac4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bff8e083f-3ade-4a9f-b2a8-52337bfacac4%7D"}, "html": {"href": "https://bitbucket.org/%7Bff8e083f-3ade-4a9f-b2a8-52337bfacac4%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/13204681388cc2d94b159c945c27c662d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsB-5.png"}}, "nickname": "ban", "type": "user", "account_id": "5e540858e7724a0e7263c75b"}, "title": "-", "component": null, "votes": 0, "watches": 1, "content": {"raw": "-", "markup": "markdown", "html": "<p>-</p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": null, "edited_on": null, "created_on": "2020-02-24T17:41:04.817240+00:00", "milestone": null, "updated_on": "2020-02-29T04:53:18.082565+00:00", "type": "issue", "id": 71}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/72/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/72.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/72/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/72/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/72/private-dependencies-of-core-library"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/72/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Private dependencies of core library treated as public in pkg-config files", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nDependencies of a core library that are marked as `PRIVATE` in the `ign_find_package` and `target_link_libraries` calls are not being marked as Requires.private in the generated pkg-config `.pc` files; instead they are included as public `Requires` dependencies. By contrast, dependencies of components marked as `PRIVATE_FOR` in `ign_find_package` and `PRIVATE` in `target_link_libraries` are properly included in the generated `.pc` files.\r\n\r\n# Motivation\r\n\r\nIt's useful to be able to mark dependencies as `PRIVATE` if they aren't exposed in the public API. For example, [ign-fuel-tools uses CURL as a private dependency](#!/ignitionrobotics/ign-fuel-tools/src/b877d88b24f37bea4e439831a5bd53959426716c/CMakeLists.txt#lines-33), but it is being exported as a public dependency, which has been causing a problem on macOS since homebrew recently disabled a `libcurl.pc` file (for complicated reasons), which is causing some bottle builds to fail:\r\n\r\n* https://github.com/osrf/homebrew-simulation/pull/995#issuecomment-610276166\r\n\r\nign-fuel-tools shouldn't even need to find that `libcurl.pc` file, but I guess that has exposed this issue, which we didn't realize.\r\n\r\nI've also created an example test in 14919c9d80de4548f6fa639c02b8827c704e74d4 that illustrates the problem.\r\n\r\n# Describe alternatives you've considered\r\n\r\nI think it's a bug we should fix.\r\n\r\n# Additional context", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>Dependencies of a core library that are marked as <code>PRIVATE</code> in the <code>ign_find_package</code> and <code>target_link_libraries</code> calls are not being marked as Requires.private in the generated pkg-config <code>.pc</code> files; instead they are included as public <code>Requires</code> dependencies. By contrast, dependencies of components marked as <code>PRIVATE_FOR</code> in <code>ign_find_package</code> and <code>PRIVATE</code> in <code>target_link_libraries</code> are properly included in the generated <code>.pc</code> files.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>It's useful to be able to mark dependencies as <code>PRIVATE</code> if they aren't exposed in the public API. For example, <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-fuel-tools/src/b877d88b24f37bea4e439831a5bd53959426716c/CMakeLists.txt#lines-33\" rel=\"nofollow\">ign-fuel-tools uses CURL as a private dependency</a>, but it is being exported as a public dependency, which has been causing a problem on macOS since homebrew recently disabled a <code>libcurl.pc</code> file (for complicated reasons), which is causing some bottle builds to fail:</p>\n<ul>\n<li><a href=\"https://github.com/osrf/homebrew-simulation/pull/995#issuecomment-610276166\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/osrf/homebrew-simulation/pull/995#issuecomment-610276166</a></li>\n</ul>\n<p>ign-fuel-tools shouldn't even need to find that <code>libcurl.pc</code> file, but I guess that has exposed this issue, which we didn't realize.</p>\n<p>I've also created an example test in <a href=\"#!/ignitionrobotics/ign-cmake/commits/14919c9d80de4548f6fa639c02b8827c704e74d4\" rel=\"nofollow\" class=\"ap-connect-link\">14919c9d80de4548f6fa639c02b8827c704e74d4</a> that illustrates the problem.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>I think it's a bug we should fix.</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-04-08T05:57:48.235162+00:00", "milestone": null, "updated_on": "2020-04-08T19:55:29.411832+00:00", "type": "issue", "id": 72}], "page": 1, "size": 72}