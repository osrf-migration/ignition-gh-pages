{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/72/comments/63549017.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/72/_/diff#comment-63549017"}}, "parent": {"id": 63542316, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/72/comments/63542316.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/72/_/diff#comment-63542316"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 72, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/72.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/72"}}, "title": "Add find module for eigen3"}, "content": {"raw": "`ign_find_package()` has no problem with using external config-files and find-modules. We have had two motives for providing our own find-modules for every dependency so far:\n\n1. Having imported targets for every dependency is extremely valuable, for both us as developers *and* for end-users of the libraries. It ensures that all dependencies and configuration settings (like compiler flags) are automatically inherited by the consumer, from the start to the end of the dependency tree. However, since imported targets are a relatively new feature of cmake, many of our dependencies don't provide them. And even when it comes to dependencies that do provide them (e.g. protobuf 3, Eigen 3.3.4), we want to be able to support older versions that don't provide them (e.g. protobuf 2, Eigen 3.2.92), so for those old versions, we still need some find-module logic to create the imported targets in case they don't exist. If we ever have a dependency that provides an imported target for every version of itself that we want to support, then we wouldn't need our own find-module for it.\n\n2. Writing our own find-modules allows us to encode pkgconfig information for each dependency so that `ign_find_package()` can help us automatically generate pkgconfig files for each library and each component. This is something that no cmake config-file (to my knowledge) provides. `ign_find_package()` provides a `PKGCONFIG` argument which allows the dependent project to specify the pkgconfig information; that way, `ign_find_package()` can simply use the external config-file with no issues. However, even in that scenario, we'll probably find it easier to make a find-module that's just a very light wrapper for `find_package(... CONFIG)` and then put the pkgconfig information into our custom find-module; that way, dependent projects don't need to worry about what pkgconfig information to provide.\n\nEdit: Minor terminology correction", "markup": "markdown", "html": "<p><code>ign_find_package()</code> has no problem with using external config-files and find-modules. We have had two motives for providing our own find-modules for every dependency so far:</p>\n<ol>\n<li>\n<p>Having imported targets for every dependency is extremely valuable, for both us as developers <em>and</em> for end-users of the libraries. It ensures that all dependencies and configuration settings (like compiler flags) are automatically inherited by the consumer, from the start to the end of the dependency tree. However, since imported targets are a relatively new feature of cmake, many of our dependencies don't provide them. And even when it comes to dependencies that do provide them (e.g. protobuf 3, Eigen 3.3.4), we want to be able to support older versions that don't provide them (e.g. protobuf 2, Eigen 3.2.92), so for those old versions, we still need some find-module logic to create the imported targets in case they don't exist. If we ever have a dependency that provides an imported target for every version of itself that we want to support, then we wouldn't need our own find-module for it.</p>\n</li>\n<li>\n<p>Writing our own find-modules allows us to encode pkgconfig information for each dependency so that <code>ign_find_package()</code> can help us automatically generate pkgconfig files for each library and each component. This is something that no cmake config-file (to my knowledge) provides. <code>ign_find_package()</code> provides a <code>PKGCONFIG</code> argument which allows the dependent project to specify the pkgconfig information; that way, <code>ign_find_package()</code> can simply use the external config-file with no issues. However, even in that scenario, we'll probably find it easier to make a find-module that's just a very light wrapper for <code>find_package(... CONFIG)</code> and then put the pkgconfig information into our custom find-module; that way, dependent projects don't need to worry about what pkgconfig information to provide.</p>\n</li>\n</ol>\n<p>Edit: Minor terminology correction</p>", "type": "rendered"}, "created_on": "2018-05-07T16:51:20.778444+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-05-07T17:00:10.520185+00:00", "type": "pullrequest_comment", "id": 63549017}