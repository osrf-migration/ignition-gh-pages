{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/12/comments/49896176.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/diff/ignitionrobotics/ign-cmake:189c956decb0..dccbae051758?path=cmake%2FIgnSetCompilerFlags.cmake"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/12/_/diff#comment-49896176"}}, "parent": {"id": 49833011, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/12/comments/49833011.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/12/_/diff#comment-49833011"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/12.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/12"}}, "title": "Finalize settings for Windows"}, "content": {"raw": "You're exactly right, and this is something I've been deliberating for the past week. The concerns you've raised are pretty compelling: Users are generally going to hope that release settings across different libraries are compatible with each other without needing to do any manual configuration, and they'll be confused when the builds appear to work, only to crash when they actually get run. I think that's a compelling enough reason for me to backpedal on this design choice and just accept the default cmake flags. We could do something like what protobuf does, and provide an option to switch to the static runtime when `BUILD_SHARED_LIBS` is set to off, while still respecting the debug vs non-debug settings.\n\nThe reason I originally decided to use `/MDd` as a default at all times was because I thought it would be helpful to always use the debug version of the runtime. I figured that would make it easier to identify and debug undefined behavior during CI and while running tests/experiments. Perhaps it's sufficient to only use `/MDd` for debug builds, and switch over to a debug build when things are not behaving as expected.\n\nThe next question would be whether our CI should build the ignition libraries in `Debug` or `RelWithDebInfo` mode. I've already precompiled `RelWithDebInfo` `/MDd` versions of most of our third-party Windows dependencies, but I have to admit that it wasn't very easy since it goes against conventional settings. I suspect that using the debug runtime in our CI might help to catch undefined behavior, but I don't know for certain if that's true.", "markup": "markdown", "html": "<p>You're exactly right, and this is something I've been deliberating for the past week. The concerns you've raised are pretty compelling: Users are generally going to hope that release settings across different libraries are compatible with each other without needing to do any manual configuration, and they'll be confused when the builds appear to work, only to crash when they actually get run. I think that's a compelling enough reason for me to backpedal on this design choice and just accept the default cmake flags. We could do something like what protobuf does, and provide an option to switch to the static runtime when <code>BUILD_SHARED_LIBS</code> is set to off, while still respecting the debug vs non-debug settings.</p>\n<p>The reason I originally decided to use <code>/MDd</code> as a default at all times was because I thought it would be helpful to always use the debug version of the runtime. I figured that would make it easier to identify and debug undefined behavior during CI and while running tests/experiments. Perhaps it's sufficient to only use <code>/MDd</code> for debug builds, and switch over to a debug build when things are not behaving as expected.</p>\n<p>The next question would be whether our CI should build the ignition libraries in <code>Debug</code> or <code>RelWithDebInfo</code> mode. I've already precompiled <code>RelWithDebInfo</code> <code>/MDd</code> versions of most of our third-party Windows dependencies, but I have to admit that it wasn't very easy since it goes against conventional settings. I suspect that using the debug runtime in our CI might help to catch undefined behavior, but I don't know for certain if that's true.</p>", "type": "rendered"}, "created_on": "2017-11-17T18:59:09.954653+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "cmake/IgnSetCompilerFlags.cmake"}, "updated_on": "2017-11-17T19:00:51.717233+00:00", "type": "pullrequest_comment", "id": 49896176}