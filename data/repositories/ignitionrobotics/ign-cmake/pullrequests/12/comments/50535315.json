{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/12/comments/50535315.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/diff/ignitionrobotics/ign-cmake:189c956decb0..dccbae051758?path=cmake%2FIgnUtils.cmake"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/12/_/diff#comment-50535315"}}, "parent": {"id": 50281447, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/12/comments/50281447.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/12/_/diff#comment-50281447"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/12.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/12"}}, "title": "Finalize settings for Windows"}, "content": {"raw": "Right, my intention here was just to make a \"nicer looking\" `STATIC_DEFINE` variable. Although there's a bit of a problem, since ${PROJECT_NAME_NO_VERSION_UPPER}` contains a dash `-` instead of an underscore. `generate_export_header` is smart enough to convert the dash into an underscore, but `target_compile_definitions` is not so smart, so that's not ideal.\n\nI investigated the exact behavior of `generate_export_header` (because the cmake documentation does not really dive into the details), and the results are somewhat unintuitive (at least to me):\n\n- If you compile with `BUILD_SHARED_LIBS` set to ON, then the visibility macros will be generated as expected, and a compile definition `<library>_EXPORTS` will be added privately for your library\n- If you compile with `BUILD_SHARED_LIBS` set to OFF, then the visibility macros will all be left blank, and no compile definitions will be set\n\nSo the export header itself is actually generated differently depending on whether the target library is shared or static. It doesn't seem like this will cause any problems for us, because installing either version of the export header should work just fine when it gets used by dependent libraries.\n\nThe only thing we'd need to watch out for is if we ever decide to build both a static and a shared version of the library within one run of the build system, in which case we'd need to ensure that we only generate the headers on the shared target, and then add the `STATIC_DEFINE` compile definition for the static target.\n\nIn any case, you're correct: the `target_compile_definitions` call should be removed here.", "markup": "markdown", "html": "<p>Right, my intention here was just to make a \"nicer looking\" <code>STATIC_DEFINE</code> variable. Although there's a bit of a problem, since ${PROJECT_NAME_NO_VERSION_UPPER}<code>contains a dash</code>-<code>instead of an underscore.</code>generate_export_header<code>is smart enough to convert the dash into an underscore, but</code>target_compile_definitions` is not so smart, so that's not ideal.</p>\n<p>I investigated the exact behavior of <code>generate_export_header</code> (because the cmake documentation does not really dive into the details), and the results are somewhat unintuitive (at least to me):</p>\n<ul>\n<li>If you compile with <code>BUILD_SHARED_LIBS</code> set to ON, then the visibility macros will be generated as expected, and a compile definition <code>&lt;library&gt;_EXPORTS</code> will be added privately for your library</li>\n<li>If you compile with <code>BUILD_SHARED_LIBS</code> set to OFF, then the visibility macros will all be left blank, and no compile definitions will be set</li>\n</ul>\n<p>So the export header itself is actually generated differently depending on whether the target library is shared or static. It doesn't seem like this will cause any problems for us, because installing either version of the export header should work just fine when it gets used by dependent libraries.</p>\n<p>The only thing we'd need to watch out for is if we ever decide to build both a static and a shared version of the library within one run of the build system, in which case we'd need to ensure that we only generate the headers on the shared target, and then add the <code>STATIC_DEFINE</code> compile definition for the static target.</p>\n<p>In any case, you're correct: the <code>target_compile_definitions</code> call should be removed here.</p>", "type": "rendered"}, "created_on": "2017-11-27T20:54:59.258196+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "cmake/IgnUtils.cmake"}, "updated_on": "2017-11-27T20:54:59.261467+00:00", "type": "pullrequest_comment", "id": 50535315}