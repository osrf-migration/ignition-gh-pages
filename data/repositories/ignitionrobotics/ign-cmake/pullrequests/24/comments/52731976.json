{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/24/comments/52731976.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/24/_/diff#comment-52731976"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 24, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/24.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/24"}}, "title": "Add FindOGRE.cmake"}, "content": {"raw": "This is generally looking good. There are just a few issues related to imported targets and relocatable packages.\n\n* There are a bunch of places where variables like `ogre_ldflags` and `ogre_libraries` are being set. We actually do **not** want to use variables of this nature. The goal of each of our `FindXXX.cmake` modules should be to produce one or more imported target(s). The macro `ign_pkg_check_modules_quiet(~)` will automatically take care of creating an imported target. For example, `ign_pkg_check_modules_quiet(OGRE \"OGRE >= ${full_version}\")` will create an imported target named `OGRE::OGRE`. That imported target will contain all the properties that were extracted from `pkg-config`. In your `ign-rendering` cmake script, you can call `target_link_libraries(${PROJECT_LIBRARY_TARGET_NAME} PRIVATE OGRE::OGRE)`, and it will link your project's target to the imported target; it will add the imported target's include directories to your target's private include directories; and it will add the imported target's interface compiler flags to your target's private compiler flags. You do not need to do anything at all with the individual variables like `ogre_ldflags`, `ogre_cflags`, `ogre_include_dirs`, etc, so those can just be removed from this `FindOGRE.cmake` script entirely.\n\n* `OGRE_INCLUDE_DIRS` does not need to exist anymore because of the reasons that I described in the previous bullet point. We should no longer be using `include_directories(~)` or even `target_include_directories(~)` for our dependencies.\n\n* It may be useful to keep `OGRE_LIBRARIES`, but it should no longer contain a list of library paths. Instead, each time you call `ign_pkg_check_modules_quiet(<ogre-package> ... )`, you should append the imported target name to `OGRE_LIBRARIES`, like `set(OGRE_LIBRARIES ${OGRE_LIBRARIES} <ogre-package>::<ogre-package>)` (obviously replace `<ogre-package>` with the actual package name, such as `OGRE`, `OGRE-RTShaderSystem`, `OGRE-Terrain`, etc. Be sure to remember the `::` and repeat the package name). This way, `OGRE_LIBRARIES` will be a list of imported targets, so when you call `target_link_libraries(${PROJECT_LIBRARY_TARGET_NAME} PRIVATE ${OGRE_LIBRARIES})` in the `ign-rendering` cmake scripts, you will actually be linking your target to a list of imported targets, and your target will inherit all the interface properties that those targets specify.\n\n* Do not set `OGRE_LIBRARIES` as a cache variable. This is unnecessary, and adds noise to the cache. Variables that are set in a find-module will remain visible after the find-module exits.", "markup": "markdown", "html": "<p>This is generally looking good. There are just a few issues related to imported targets and relocatable packages.</p>\n<ul>\n<li>\n<p>There are a bunch of places where variables like <code>ogre_ldflags</code> and <code>ogre_libraries</code> are being set. We actually do <strong>not</strong> want to use variables of this nature. The goal of each of our <code>FindXXX.cmake</code> modules should be to produce one or more imported target(s). The macro <code>ign_pkg_check_modules_quiet(~)</code> will automatically take care of creating an imported target. For example, <code>ign_pkg_check_modules_quiet(OGRE \"OGRE &gt;= ${full_version}\")</code> will create an imported target named <code>OGRE::OGRE</code>. That imported target will contain all the properties that were extracted from <code>pkg-config</code>. In your <code>ign-rendering</code> cmake script, you can call <code>target_link_libraries(${PROJECT_LIBRARY_TARGET_NAME} PRIVATE OGRE::OGRE)</code>, and it will link your project's target to the imported target; it will add the imported target's include directories to your target's private include directories; and it will add the imported target's interface compiler flags to your target's private compiler flags. You do not need to do anything at all with the individual variables like <code>ogre_ldflags</code>, <code>ogre_cflags</code>, <code>ogre_include_dirs</code>, etc, so those can just be removed from this <code>FindOGRE.cmake</code> script entirely.</p>\n</li>\n<li>\n<p><code>OGRE_INCLUDE_DIRS</code> does not need to exist anymore because of the reasons that I described in the previous bullet point. We should no longer be using <code>include_directories(~)</code> or even <code>target_include_directories(~)</code> for our dependencies.</p>\n</li>\n<li>\n<p>It may be useful to keep <code>OGRE_LIBRARIES</code>, but it should no longer contain a list of library paths. Instead, each time you call <code>ign_pkg_check_modules_quiet(&lt;ogre-package&gt; ... )</code>, you should append the imported target name to <code>OGRE_LIBRARIES</code>, like <code>set(OGRE_LIBRARIES ${OGRE_LIBRARIES} &lt;ogre-package&gt;::&lt;ogre-package&gt;)</code> (obviously replace <code>&lt;ogre-package&gt;</code> with the actual package name, such as <code>OGRE</code>, <code>OGRE-RTShaderSystem</code>, <code>OGRE-Terrain</code>, etc. Be sure to remember the <code>::</code> and repeat the package name). This way, <code>OGRE_LIBRARIES</code> will be a list of imported targets, so when you call <code>target_link_libraries(${PROJECT_LIBRARY_TARGET_NAME} PRIVATE ${OGRE_LIBRARIES})</code> in the <code>ign-rendering</code> cmake scripts, you will actually be linking your target to a list of imported targets, and your target will inherit all the interface properties that those targets specify.</p>\n</li>\n<li>\n<p>Do not set <code>OGRE_LIBRARIES</code> as a cache variable. This is unnecessary, and adds noise to the cache. Variables that are set in a find-module will remain visible after the find-module exits.</p>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2017-12-29T02:37:25.446535+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-29T02:37:25.449344+00:00", "type": "pullrequest_comment", "id": 52731976}