{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/24/comments/52860891.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/24/_/diff#comment-52860891"}}, "parent": {"id": 52859420, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/24/comments/52859420.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/24/_/diff#comment-52859420"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 24, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/24.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/24"}}, "title": "Add FindOGRE.cmake"}, "content": {"raw": "Any variables that you set inside of `FindOGRE.cmake` will also be set in the scope of any `CMakeLists.txt` file that calls `find_package(OGRE)`, or in our case `ign_find_package(OGRE)`. It doesn't seem to be well documented by cmake, but find-modules (as well as config-files) use \"dynamic scoping\" for their variables, similar to the [`include`](https://cmake.org/cmake/help/v3.5/command/include.html) command. So any variables that you read or write in a find-module will be read or written in the scope of the caller.\n\nThere are only three hypothetical advantages to setting it as a cache variable:\n\n1. The variable can persist between invocations of `cmake`\n\n2. The variable can be used in a scope which is a parent of the `CMakeLists.txt` file that calls `find_package(OGRE)`\n\n3. Users can override the value of the variable\n\nThese three hypothetical advantages are actually disadvantages for us, for the following (respective) reasons:\n\n1. It's much safer to re-find dependencies in between invocations of `cmake`. Sometimes if you reinstall a package or anything else changes in your build environment, cmake can get confused if it tries to work off of some cached package variables, forcing you to clear the `CMakeCache.txt` for no obvious reason. Also, the time required to re-find dependencies is usually negligible anyway.\n\n2. We **always** want to call `ign_find_package( ... )` from the highest-level scope, so this should never be useful.\n\n3. There should be no reason for a user to ever want to override the value of the variable, and allowing them to will most likely cause far more harm than benefit, unless there's a very specific reason to.", "markup": "markdown", "html": "<p>Any variables that you set inside of <code>FindOGRE.cmake</code> will also be set in the scope of any <code>CMakeLists.txt</code> file that calls <code>find_package(OGRE)</code>, or in our case <code>ign_find_package(OGRE)</code>. It doesn't seem to be well documented by cmake, but find-modules (as well as config-files) use \"dynamic scoping\" for their variables, similar to the <a data-is-external-link=\"true\" href=\"https://cmake.org/cmake/help/v3.5/command/include.html\" rel=\"nofollow\"><code>include</code></a> command. So any variables that you read or write in a find-module will be read or written in the scope of the caller.</p>\n<p>There are only three hypothetical advantages to setting it as a cache variable:</p>\n<ol>\n<li>\n<p>The variable can persist between invocations of <code>cmake</code></p>\n</li>\n<li>\n<p>The variable can be used in a scope which is a parent of the <code>CMakeLists.txt</code> file that calls <code>find_package(OGRE)</code></p>\n</li>\n<li>\n<p>Users can override the value of the variable</p>\n</li>\n</ol>\n<p>These three hypothetical advantages are actually disadvantages for us, for the following (respective) reasons:</p>\n<ol>\n<li>\n<p>It's much safer to re-find dependencies in between invocations of <code>cmake</code>. Sometimes if you reinstall a package or anything else changes in your build environment, cmake can get confused if it tries to work off of some cached package variables, forcing you to clear the <code>CMakeCache.txt</code> for no obvious reason. Also, the time required to re-find dependencies is usually negligible anyway.</p>\n</li>\n<li>\n<p>We <strong>always</strong> want to call <code>ign_find_package( ... )</code> from the highest-level scope, so this should never be useful.</p>\n</li>\n<li>\n<p>There should be no reason for a user to ever want to override the value of the variable, and allowing them to will most likely cause far more harm than benefit, unless there's a very specific reason to.</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2018-01-03T05:58:55.759379+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-03T06:04:44.538529+00:00", "type": "pullrequest_comment", "id": 52860891}