{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/1/comments/45954378.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/diff/ignitionrobotics/ign-cmake:0ae12d850f58..d8ed439c5f00?path=cmake%2FIgnUtils.cmake"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/1/_/diff#comment-45954378"}}, "parent": {"id": 45923336, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/1/comments/45923336.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/1/_/diff#comment-45923336"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/1"}}, "title": "First version of ignition-cmake"}, "content": {"raw": "That may very well be the case.\n\nThe reason I made this function is because when I investigated what was being produced in the exported target file, I did not see the include directories of its dependencies in the interface include directories section. I was perhaps working on the wrong assumption that the field should get populated by its dependencies. Perhaps the interface include directories of its dependencies are implicitly transferred to its dependents by the fact that its dependencies are listed as interface libraries? If that's the case, we should be able to remove this function and never have to use it. I'll run some experiments to see if that works.", "markup": "markdown", "html": "<p>That may very well be the case.</p>\n<p>The reason I made this function is because when I investigated what was being produced in the exported target file, I did not see the include directories of its dependencies in the interface include directories section. I was perhaps working on the wrong assumption that the field should get populated by its dependencies. Perhaps the interface include directories of its dependencies are implicitly transferred to its dependents by the fact that its dependencies are listed as interface libraries? If that's the case, we should be able to remove this function and never have to use it. I'll run some experiments to see if that works.</p>", "type": "rendered"}, "created_on": "2017-09-27T16:25:33.063943+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "cmake/IgnUtils.cmake"}, "updated_on": "2017-09-27T16:25:33.068330+00:00", "type": "pullrequest_comment", "id": 45954378}