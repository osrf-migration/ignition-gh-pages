{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/2/comments/56610330.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/diff/ignitionrobotics/ign-cmake:8b9561e16e58..1c4476528de6?path=MIGRATION.md"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/2/_/diff#comment-56610330"}}, "parent": {"id": 56606169, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/2/comments/56606169.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/2/_/diff#comment-56606169"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/pullrequests/2.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/pull-requests/2"}}, "title": "Creating project components [Ready For Review]"}, "content": {"raw": "I'd say it depends a little bit on the purpose of the library.\n\nIf it's an internal library for testing purposes, like gtest, then it should be handled outside the scope of `ign-cmake`, using an ordinary `add_library(~)` command.\n\nIf it's a library that we intend to ship and install as part of the project, then it should be added as a component library.\n\nIf we have a use case where we want to compile multiple libraries to be part of the \"core\" of a project but we want to keep them as separate libraries for some reason, we can revisit this macro. I think doing that could create a great deal of confusion, though, if only because it's hard to imagine what kind of naming convention we could even use for those libraries, e.g. `libignition-transport1-core1` and `libignition-transport1-core2`?\n\nSo for now, I'd recommend we stick to the design of having one core library and arbitrarily many component libraries. This seems to be a popular pattern among modular library projects.", "markup": "markdown", "html": "<p>I'd say it depends a little bit on the purpose of the library.</p>\n<p>If it's an internal library for testing purposes, like gtest, then it should be handled outside the scope of <code>ign-cmake</code>, using an ordinary <code>add_library(~)</code> command.</p>\n<p>If it's a library that we intend to ship and install as part of the project, then it should be added as a component library.</p>\n<p>If we have a use case where we want to compile multiple libraries to be part of the \"core\" of a project but we want to keep them as separate libraries for some reason, we can revisit this macro. I think doing that could create a great deal of confusion, though, if only because it's hard to imagine what kind of naming convention we could even use for those libraries, e.g. <code>libignition-transport1-core1</code> and <code>libignition-transport1-core2</code>?</p>\n<p>So for now, I'd recommend we stick to the design of having one core library and arbitrarily many component libraries. This seems to be a popular pattern among modular library projects.</p>", "type": "rendered"}, "created_on": "2018-02-19T00:55:58.924974+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "MIGRATION.md"}, "updated_on": "2018-02-19T00:56:33.268913+00:00", "type": "pullrequest_comment", "id": 56610330}