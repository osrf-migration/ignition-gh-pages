{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/7/comments/41384433.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/7#comment-41384433"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/7.json"}}, "type": "issue", "id": 7, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "The top-level CMakeLists.txt file for a project must contain a literal direct call to the project() command"}, "content": {"raw": "Thanks for reporting this! That's a rather vexing requirement for the `project(~)` command since `ign_configure_project(~)` (which we use to call `project(~)`) is a macro.\n\nIn C/C++, calling a preprocessor macro would be equivalent to a literal, direct call to whatever code the macro expands to, but I've seen a good amount of evidence that this is not the case in the cmake scripting language, so I think it's fair to assume that we're violating this rule. Their doc refers to using the `include(~)` command to call `project(~)`, but that's not quite the same as what we're doing. Still, we're probably violating the requirement.\n\nI suppose in the worst-case scenario we'll just have to pull the call to `project(~)` out of `ign_configure_project(~)` and call it before `ign_configure_project(~)` in each ignition project. It's disappointing, but it's not really a big deal.", "markup": "markdown", "html": "<p>Thanks for reporting this! That's a rather vexing requirement for the <code>project(~)</code> command since <code>ign_configure_project(~)</code> (which we use to call <code>project(~)</code>) is a macro.</p>\n<p>In C/C++, calling a preprocessor macro would be equivalent to a literal, direct call to whatever code the macro expands to, but I've seen a good amount of evidence that this is not the case in the cmake scripting language, so I think it's fair to assume that we're violating this rule. Their doc refers to using the <code>include(~)</code> command to call <code>project(~)</code>, but that's not quite the same as what we're doing. Still, we're probably violating the requirement.</p>\n<p>I suppose in the worst-case scenario we'll just have to pull the call to <code>project(~)</code> out of <code>ign_configure_project(~)</code> and call it before <code>ign_configure_project(~)</code> in each ignition project. It's disappointing, but it's not really a big deal.</p>", "type": "rendered"}, "created_on": "2017-11-22T22:23:39.664484+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 41384433}