{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/11/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/11.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/11/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/11/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/11/informing-tests-of-their-own-directory"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/11/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Informing tests of their own directory location", "component": null, "votes": 1, "watches": 2, "content": {"raw": "We frequently need to provide tests with the full path of their own build directory. This may be necessary for a test so that it can run a helper program or find a plugin library at run time.\r\n\r\nHistorically, we have solved this by generating a `test_config.h` file at configuration time, and providing it with a macro named something like `IGN_CONFIG_PATH`. However, this cannot work for multi-configuration generator types, such as the Visual Studio generators. The reason is the header gets created at configuration time, but a multi-configuration generator cannot know what directory a binary will be built in until generation time (which comes after configuration time).\r\n\r\nTo make `ign-common` plugins testable in Visual Studio, I came up with [a gross solution](#!/ignitionrobotics/ign-common/src/ea50a7739b7d431ad1b444487f8afe68bf88a893/test/util/CMakeLists.txt?at=default&fileviewer=file-view-default) where we create a custom command that injects text into a file. Custom commands in cmake are able to use [generator expresisons](https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html), so the path can be identified and supplied at generation time. I was never satisfied with this solution, but I couldn't think of a better one at the time.\r\n\r\nI recently came up with something that might be a little nicer: Instead of generating a header, we can use `target_compile_definitions(~)` to provide the tests with this path information. `target_compile_definitions(~)` is able to handle generator expressions, so we don't need to do weird things with configuring headers at generation time using `add_custom_command(~)`.\r\n\r\nTo do this, we could simply add the following line into the loop inside of `ign_build_tests(~)`:\r\n\r\n```\r\ntarget_compile_definitions(${BINARY_NAME} PRIVATE IGN_BINARY_PATH=\"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\r\n```\r\n\r\nAt that point, each test can know what its own directory path is by invoking the macro `IGN_BINARY_PATH`.\r\n\r\nIf certain specific tests need to know the paths of other targets, that can be handled on a case-by-case basis by doing:\r\n\r\n```\r\ntarget_compile_definitions(<specific_test_target_name> PRIVATE IGN_PATH_TO_OTHER_THING=\"$<TARGET_FILE_DIR:${OTHER_THING}>\")\r\n```\r\n\r\nas long as we ensure that the name `IGN_PATH_TO_OTHER_THING` does not collide with any other compile definitions.\r\n\r\nI think this would be the most robust and elegant way to ensure that our tests work regardless of what type of generator is used to configure and build them.\r\n\r\nThe one downside (that I can think of) is that the definitions (nay, the very existence) of these macros would be hard for developers to be aware of unless they're using a pretty good IDE (e.g. Qt Creator).\r\n\r\nIf anyone else likes this idea, I can move forward on it. I'd be able to use `ign-common` as a good example for usage.", "markup": "markdown", "html": "<p>We frequently need to provide tests with the full path of their own build directory. This may be necessary for a test so that it can run a helper program or find a plugin library at run time.</p>\n<p>Historically, we have solved this by generating a <code>test_config.h</code> file at configuration time, and providing it with a macro named something like <code>IGN_CONFIG_PATH</code>. However, this cannot work for multi-configuration generator types, such as the Visual Studio generators. The reason is the header gets created at configuration time, but a multi-configuration generator cannot know what directory a binary will be built in until generation time (which comes after configuration time).</p>\n<p>To make <code>ign-common</code> plugins testable in Visual Studio, I came up with <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/src/ea50a7739b7d431ad1b444487f8afe68bf88a893/test/util/CMakeLists.txt?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">a gross solution</a> where we create a custom command that injects text into a file. Custom commands in cmake are able to use <a data-is-external-link=\"true\" href=\"https://cmake.org/cmake/help/v3.5/manual/cmake-generator-expressions.7.html\" rel=\"nofollow\">generator expresisons</a>, so the path can be identified and supplied at generation time. I was never satisfied with this solution, but I couldn't think of a better one at the time.</p>\n<p>I recently came up with something that might be a little nicer: Instead of generating a header, we can use <code>target_compile_definitions(~)</code> to provide the tests with this path information. <code>target_compile_definitions(~)</code> is able to handle generator expressions, so we don't need to do weird things with configuring headers at generation time using <code>add_custom_command(~)</code>.</p>\n<p>To do this, we could simply add the following line into the loop inside of <code>ign_build_tests(~)</code>:</p>\n<div class=\"codehilite\"><pre><span></span>target_compile_definitions(<span class=\"cp\">${</span><span class=\"n\">BINARY_NAME</span><span class=\"cp\">}</span> PRIVATE IGN_BINARY_PATH=&quot;$<span class=\"nt\">&lt;TARGET</span><span class=\"err\">_FILE_DIR:${BINARY_NAME}</span><span class=\"nt\">&gt;</span>&quot;)\n</pre></div>\n\n\n<p>At that point, each test can know what its own directory path is by invoking the macro <code>IGN_BINARY_PATH</code>.</p>\n<p>If certain specific tests need to know the paths of other targets, that can be handled on a case-by-case basis by doing:</p>\n<div class=\"codehilite\"><pre><span></span>target_compile_definitions(<span class=\"nt\">&lt;specific</span><span class=\"err\">_test_target_name</span><span class=\"nt\">&gt;</span> PRIVATE IGN_PATH_TO_OTHER_THING=&quot;$<span class=\"nt\">&lt;TARGET</span><span class=\"err\">_FILE_DIR:${OTHER_THING}</span><span class=\"nt\">&gt;</span>&quot;)\n</pre></div>\n\n\n<p>as long as we ensure that the name <code>IGN_PATH_TO_OTHER_THING</code> does not collide with any other compile definitions.</p>\n<p>I think this would be the most robust and elegant way to ensure that our tests work regardless of what type of generator is used to configure and build them.</p>\n<p>The one downside (that I can think of) is that the definitions (nay, the very existence) of these macros would be hard for developers to be aware of unless they're using a pretty good IDE (e.g. Qt Creator).</p>\n<p>If anyone else likes this idea, I can move forward on it. I'd be able to use <code>ign-common</code> as a good example for usage.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2017-12-28T22:50:07.347023+00:00", "milestone": null, "updated_on": "2018-01-22T21:14:01.020190+00:00", "type": "issue", "id": 11}