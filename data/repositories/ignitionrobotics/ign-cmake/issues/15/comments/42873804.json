{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42873804.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42873804"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "> the same functionality can be realized using an IMPORTED targets that links all the physical library targets of a package.\n\nI've recently been thinking about doing exactly this for our upcoming [components system](#!/ignitionrobotics/ign-cmake/pull-requests/2). We could produce an `IMPORTED` target called something like `ignition-<project><num>::all` that `INTERFACE` links against all the components that were requested by the user.\n\nThat being said, it's a bit tangential to the central motivation of filling the variable with the imported target name, which is to rigidly enforce that users link against the target instead of the physical library. I genuinely believe this will save both us and the user a great deal of trouble with getting their build systems set up, and the disadvantage to doing so is minimal.\n\n> I guess this was a planned inconvenience.\n\nYes, for better or worse, this was a planned inconvenience. There have been concerns about situations where multiple versions of an ignition project may be needed within one consumer project. One example that comes to mind would be a consumer project which creates different versions of a plugin, where each plugin version needs to link against a different version of an ignition project. Having unversioned imported targets would not allow this to work.\n\nOne idea that we're floating at the moment is to create an unversioned `IMPORTED` target which links against whichever `IMPORTED` target was being requested when the unversioned target was created. I imagine the `-config.cmake` file would look something like this:\n\n```\nif(NOT TARGET ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@)\n  add_library(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ IMPORTED)\n  target_link_libraries(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ INTERFACE @PROJECT_EXPORT_NAME@::@PROJECT_EXPORT_NAME@)\nendif()\n```\n\nOfficially, we would say that the contents of the unversioned target are undefined when `find_package(~)` is called on multiple versions of the package, but in practice it would just be an interface target that points at whichever version was searched for first. If that sounds good to you, I can create a PR for it.", "markup": "markdown", "html": "<blockquote>\n<p>the same functionality can be realized using an IMPORTED targets that links all the physical library targets of a package.</p>\n</blockquote>\n<p>I've recently been thinking about doing exactly this for our upcoming <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/pull-requests/2\" rel=\"nofollow\">components system</a>. We could produce an <code>IMPORTED</code> target called something like <code>ignition-&lt;project&gt;&lt;num&gt;::all</code> that <code>INTERFACE</code> links against all the components that were requested by the user.</p>\n<p>That being said, it's a bit tangential to the central motivation of filling the variable with the imported target name, which is to rigidly enforce that users link against the target instead of the physical library. I genuinely believe this will save both us and the user a great deal of trouble with getting their build systems set up, and the disadvantage to doing so is minimal.</p>\n<blockquote>\n<p>I guess this was a planned inconvenience.</p>\n</blockquote>\n<p>Yes, for better or worse, this was a planned inconvenience. There have been concerns about situations where multiple versions of an ignition project may be needed within one consumer project. One example that comes to mind would be a consumer project which creates different versions of a plugin, where each plugin version needs to link against a different version of an ignition project. Having unversioned imported targets would not allow this to work.</p>\n<p>One idea that we're floating at the moment is to create an unversioned <code>IMPORTED</code> target which links against whichever <code>IMPORTED</code> target was being requested when the unversioned target was created. I imagine the <code>-config.cmake</code> file would look something like this:</p>\n<div class=\"codehilite\"><pre><span></span>if(NOT TARGET ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@)\n  add_library(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ IMPORTED)\n  target_link_libraries(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ INTERFACE @PROJECT_EXPORT_NAME@::@PROJECT_EXPORT_NAME@)\nendif()\n</pre></div>\n\n\n<p>Officially, we would say that the contents of the unversioned target are undefined when <code>find_package(~)</code> is called on multiple versions of the package, but in practice it would just be an interface target that points at whichever version was searched for first. If that sounds good to you, I can create a PR for it.</p>", "type": "rendered"}, "created_on": "2018-01-25T23:20:45.663358+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-25T23:21:31.339099+00:00", "type": "issue_comment", "id": 42873804}