{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42891199.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42891199"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Correct me if I'm wrong, but I don't believe `find_dependency(~)` accomplishes anything for the private dependencies of an imported target. I believe the private fields of a target do not get exported anyway, so for `foo` to call `find_dependency(~)` on `ignition-math3` when it doesn't expose any `ignition-math3` types in its headers would indicate an error (or the very at least, an abuse of cmake) in `foo`'s config-file.\n\nThat being said, the point still stands, because you could have a situation where\n\n1. `foo` publicly depends on `ignition-math3` and therefore correctly calls `find_dependency(ignition-math3)`\n\n2. `bar` depends on `foo` and uses `ignition-math3` out of necessity\n\n3. `baz` is created within the same cmake project, does not depend on `foo` or `bar`, and instead wants to link against `ignition-math4`\n\nIn this scenario, we would legitimately get `find_package(~)` calls to multiple versions of `ignition-math`, which puts the unversioned variables in an undefined state.", "markup": "markdown", "html": "<p>Correct me if I'm wrong, but I don't believe <code>find_dependency(~)</code> accomplishes anything for the private dependencies of an imported target. I believe the private fields of a target do not get exported anyway, so for <code>foo</code> to call <code>find_dependency(~)</code> on <code>ignition-math3</code> when it doesn't expose any <code>ignition-math3</code> types in its headers would indicate an error (or the very at least, an abuse of cmake) in <code>foo</code>'s config-file.</p>\n<p>That being said, the point still stands, because you could have a situation where</p>\n<ol>\n<li>\n<p><code>foo</code> publicly depends on <code>ignition-math3</code> and therefore correctly calls <code>find_dependency(ignition-math3)</code></p>\n</li>\n<li>\n<p><code>bar</code> depends on <code>foo</code> and uses <code>ignition-math3</code> out of necessity</p>\n</li>\n<li>\n<p><code>baz</code> is created within the same cmake project, does not depend on <code>foo</code> or <code>bar</code>, and instead wants to link against <code>ignition-math4</code></p>\n</li>\n</ol>\n<p>In this scenario, we would legitimately get <code>find_package(~)</code> calls to multiple versions of <code>ignition-math</code>, which puts the unversioned variables in an undefined state.</p>", "type": "rendered"}, "created_on": "2018-01-26T19:23:44.824227+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 42891199}