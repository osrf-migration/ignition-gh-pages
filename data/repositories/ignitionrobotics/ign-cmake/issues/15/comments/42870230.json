{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42870230.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42870230"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Yep, I knew about this convention when putting together `ign-cmake`, but I came to the conclusion that putting the target inside of the `Xxx_LIBRARIES` variable instead of the library path was preferable over strictly following the convention (it might be worth noting that `ign-math` and `ign-common` were already doing this before `ign-cmake` came along, so this method wasn't my own invention, but I liked it once I saw it in action).\n\nThe way I see it, there are two categories of users who will be impacted by our current approach:\n\n1. Users who don't know any better and will simply call `link_libraries(${Xxx_LIBRARIES})` or `target_link_libraries(<tgt> <specifier> ${Xxx_LIBRARIES})` without understanding the nature of targets vs library paths. These users will automatically benefit from cmake's target linking system without any effort or concern.\n\n2. Users who are doing some kind of custom configuring which requires the `Xxx_LIBRARIES` variable to be a full path to the library rather than a target name. Our current approach will violate the assumptions of their build system and possibly break their configuration.\n\nI think the vast majority of cases will fall under category (1), especially since there are very many cmake users who haven't transitioned to the more modern way of using cmake. The old variable approach is terribly fragile, and it requires end-users to explicitly link every interface dependency library of each ignition project, and explicitly add any compiler options that are needed. We eliminate all of that effort and concern in one fell swoop by imposing the target on the user instead of giving them the library path. This will be especially valuable as the dependency graph of the ignition projects grows.\n\nCases that fall under (2) should be very rare, although not entirely dismissible, as seen in this [sdformat PR](https://bitbucket.org/osrf/sdformat/pull-requests/401). I think any configurations which require the `Xxx_LIBRARIES` variable to contain a full library path are doing something very fragile, just as in the case of sdformat, and we should not favor supporting those use cases. Breaking the configuration should hopefully prompt the user to reconsider their approach to configuring and work out a more robust solution, probably one that leverages targets instead of paths.\n\nIn short, a user whose unusual configuration would be broken by our approach should have the competence to rework their configuration to use targets instead of paths, while a novice or inexperienced user who doesn't know any better would benefit tremendously from our current approach.\n\nIn my view, the utilitarian argument strongly favors disregarding cmake's recommended conventions on this. That being said, I'm very open to counterpoints, especially since we are defying official recommendations here.", "markup": "markdown", "html": "<p>Yep, I knew about this convention when putting together <code>ign-cmake</code>, but I came to the conclusion that putting the target inside of the <code>Xxx_LIBRARIES</code> variable instead of the library path was preferable over strictly following the convention (it might be worth noting that <code>ign-math</code> and <code>ign-common</code> were already doing this before <code>ign-cmake</code> came along, so this method wasn't my own invention, but I liked it once I saw it in action).</p>\n<p>The way I see it, there are two categories of users who will be impacted by our current approach:</p>\n<ol>\n<li>\n<p>Users who don't know any better and will simply call <code>link_libraries(${Xxx_LIBRARIES})</code> or <code>target_link_libraries(&lt;tgt&gt; &lt;specifier&gt; ${Xxx_LIBRARIES})</code> without understanding the nature of targets vs library paths. These users will automatically benefit from cmake's target linking system without any effort or concern.</p>\n</li>\n<li>\n<p>Users who are doing some kind of custom configuring which requires the <code>Xxx_LIBRARIES</code> variable to be a full path to the library rather than a target name. Our current approach will violate the assumptions of their build system and possibly break their configuration.</p>\n</li>\n</ol>\n<p>I think the vast majority of cases will fall under category (1), especially since there are very many cmake users who haven't transitioned to the more modern way of using cmake. The old variable approach is terribly fragile, and it requires end-users to explicitly link every interface dependency library of each ignition project, and explicitly add any compiler options that are needed. We eliminate all of that effort and concern in one fell swoop by imposing the target on the user instead of giving them the library path. This will be especially valuable as the dependency graph of the ignition projects grows.</p>\n<p>Cases that fall under (2) should be very rare, although not entirely dismissible, as seen in this <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/401\" rel=\"nofollow\">sdformat PR</a>. I think any configurations which require the <code>Xxx_LIBRARIES</code> variable to contain a full library path are doing something very fragile, just as in the case of sdformat, and we should not favor supporting those use cases. Breaking the configuration should hopefully prompt the user to reconsider their approach to configuring and work out a more robust solution, probably one that leverages targets instead of paths.</p>\n<p>In short, a user whose unusual configuration would be broken by our approach should have the competence to rework their configuration to use targets instead of paths, while a novice or inexperienced user who doesn't know any better would benefit tremendously from our current approach.</p>\n<p>In my view, the utilitarian argument strongly favors disregarding cmake's recommended conventions on this. That being said, I'm very open to counterpoints, especially since we are defying official recommendations here.</p>", "type": "rendered"}, "created_on": "2018-01-25T18:52:10.941247+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-25T19:37:47.674135+00:00", "type": "issue_comment", "id": 42870230}