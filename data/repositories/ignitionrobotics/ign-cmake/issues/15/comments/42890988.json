{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42890988.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42890988"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": ">after we fix this, \n\nIt makes sense to me that the variables continue to contain targets instead of a full path since that's what they always have contained, so I think the issue as it's written can be closed as `wontfix`.\n\n>we could update the ign-math examples so that some link directly to ignition-math4::ignition-math4 and others to IGNITION-MATH_LIBRARIES with some comments saying that either can be used\n\nI wouldn't recommend the unversioned one to users. Since the ignition major versions are side-by-side installable it opens the possibility of user builds breaking without the user changing anything.\n\n``` \ncmake_minimum_required(VERSION 3.5.1 FATAL_ERROR)\n\nfind_package(foo)\nfind_package(ignition-math3)\n\nadd_executable(bar)\ntarget_link_libraries(bar foo::foo ${IGNITION-MATH_LIBRARES})\n```\n\nUnknown to the user the third party target `foo::foo` depends on `ignition-math3`.  `foo` doesn't expose `ignition-math3` types in its headers, so they update to `ignition-math4` believing correctly that it won't break ABI. After `foo` releases the user's code breaks. Foo's `<project>-config.cmake` called `find_dependency(ignition-math4)` which set the content of the variable `IGNITION-MATH_LIBRARIES`. `find_package(ignition-math3)` saw that variable was already set and didn't change it.\n\nThis particular situation could be fixed by making the `<project>-config.cmake` for both ignition-math3 and ignition-math4 always set the variable when they're found. However, that's broken if the find_package() calls above are switched.", "markup": "markdown", "html": "<blockquote>\n<p>after we fix this, </p>\n</blockquote>\n<p>It makes sense to me that the variables continue to contain targets instead of a full path since that's what they always have contained, so I think the issue as it's written can be closed as <code>wontfix</code>.</p>\n<blockquote>\n<p>we could update the ign-math examples so that some link directly to ignition-math4::ignition-math4 and others to IGNITION-MATH_LIBRARIES with some comments saying that either can be used</p>\n</blockquote>\n<p>I wouldn't recommend the unversioned one to users. Since the ignition major versions are side-by-side installable it opens the possibility of user builds breaking without the user changing anything.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"s\">VERSION</span> <span class=\"s\">3.5.1</span> <span class=\"s\">FATAL_ERROR</span><span class=\"p\">)</span>\n\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">foo</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-math3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">add_executable</span><span class=\"p\">(</span><span class=\"s\">bar</span><span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span><span class=\"s\">bar</span> <span class=\"s\">foo::foo</span> <span class=\"o\">${</span><span class=\"nv\">IGNITION-MATH_LIBRARES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Unknown to the user the third party target <code>foo::foo</code> depends on <code>ignition-math3</code>.  <code>foo</code> doesn't expose <code>ignition-math3</code> types in its headers, so they update to <code>ignition-math4</code> believing correctly that it won't break ABI. After <code>foo</code> releases the user's code breaks. Foo's <code>&lt;project&gt;-config.cmake</code> called <code>find_dependency(ignition-math4)</code> which set the content of the variable <code>IGNITION-MATH_LIBRARIES</code>. <code>find_package(ignition-math3)</code> saw that variable was already set and didn't change it.</p>\n<p>This particular situation could be fixed by making the <code>&lt;project&gt;-config.cmake</code> for both ignition-math3 and ignition-math4 always set the variable when they're found. However, that's broken if the find_package() calls above are switched.</p>", "type": "rendered"}, "created_on": "2018-01-26T19:05:57.122053+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-01-26T19:06:17.838990+00:00", "type": "issue_comment", "id": 42890988}