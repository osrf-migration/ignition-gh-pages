{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42870230.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42870230"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Yep, I knew about this convention when putting together `ign-cmake`, but I came to the conclusion that putting the target inside of the `Xxx_LIBRARIES` variable instead of the library path was preferable over strictly following the convention (it might be worth noting that `ign-math` and `ign-common` were already doing this before `ign-cmake` came along, so this method wasn't my own invention, but I liked it once I saw it in action).\n\nThe way I see it, there are two categories of users who will be impacted by our current approach:\n\n1. Users who don't know any better and will simply call `link_libraries(${Xxx_LIBRARIES})` or `target_link_libraries(<tgt> <specifier> ${Xxx_LIBRARIES})` without understanding the nature of targets vs library paths. These users will automatically benefit from cmake's target linking system without any effort or concern.\n\n2. Users who are doing some kind of custom configuring which requires the `Xxx_LIBRARIES` variable to be a full path to the library rather than a target name. Our current approach will violate the assumptions of their build system and possibly break their configuration.\n\nI think the vast majority of cases will fall under category (1), especially since there are very many cmake users who haven't transitioned to the more modern way of using cmake. The old variable approach is terribly fragile, and it requires end-users to explicitly link every interface dependency library of each ignition project, and explicitly add any compiler options that are needed. We eliminate all of that effort and concern in one fell swoop by imposing the target on the user instead of giving them the library path. This will be especially valuable as the dependency graph of the ignition projects grows.\n\nCases that fall under (2) should be very rare, although not entirely dismissible, as seen in this [sdformat PR](https://bitbucket.org/osrf/sdformat/pull-requests/401). I think any configurations which require the `Xxx_LIBRARIES` variable to contain a full library path are doing something very fragile, just as in the case of sdformat, and we should not favor supporting those use cases. Breaking the configuration should hopefully prompt the user to reconsider their approach to configuring and work out a more robust solution, probably one that leverages targets instead of paths.\n\nIn short, a user whose unusual configuration would be broken by our approach should have the competence to rework their configuration to use targets instead of paths, while a novice or inexperienced user who doesn't know any better would benefit tremendously from our current approach.\n\nIn my view, the utilitarian argument strongly favors disregarding cmake's recommended conventions on this. That being said, I'm very open to counterpoints, especially since we are defying official recommendations here.", "markup": "markdown", "html": "<p>Yep, I knew about this convention when putting together <code>ign-cmake</code>, but I came to the conclusion that putting the target inside of the <code>Xxx_LIBRARIES</code> variable instead of the library path was preferable over strictly following the convention (it might be worth noting that <code>ign-math</code> and <code>ign-common</code> were already doing this before <code>ign-cmake</code> came along, so this method wasn't my own invention, but I liked it once I saw it in action).</p>\n<p>The way I see it, there are two categories of users who will be impacted by our current approach:</p>\n<ol>\n<li>\n<p>Users who don't know any better and will simply call <code>link_libraries(${Xxx_LIBRARIES})</code> or <code>target_link_libraries(&lt;tgt&gt; &lt;specifier&gt; ${Xxx_LIBRARIES})</code> without understanding the nature of targets vs library paths. These users will automatically benefit from cmake's target linking system without any effort or concern.</p>\n</li>\n<li>\n<p>Users who are doing some kind of custom configuring which requires the <code>Xxx_LIBRARIES</code> variable to be a full path to the library rather than a target name. Our current approach will violate the assumptions of their build system and possibly break their configuration.</p>\n</li>\n</ol>\n<p>I think the vast majority of cases will fall under category (1), especially since there are very many cmake users who haven't transitioned to the more modern way of using cmake. The old variable approach is terribly fragile, and it requires end-users to explicitly link every interface dependency library of each ignition project, and explicitly add any compiler options that are needed. We eliminate all of that effort and concern in one fell swoop by imposing the target on the user instead of giving them the library path. This will be especially valuable as the dependency graph of the ignition projects grows.</p>\n<p>Cases that fall under (2) should be very rare, although not entirely dismissible, as seen in this <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/401\" rel=\"nofollow\">sdformat PR</a>. I think any configurations which require the <code>Xxx_LIBRARIES</code> variable to contain a full library path are doing something very fragile, just as in the case of sdformat, and we should not favor supporting those use cases. Breaking the configuration should hopefully prompt the user to reconsider their approach to configuring and work out a more robust solution, probably one that leverages targets instead of paths.</p>\n<p>In short, a user whose unusual configuration would be broken by our approach should have the competence to rework their configuration to use targets instead of paths, while a novice or inexperienced user who doesn't know any better would benefit tremendously from our current approach.</p>\n<p>In my view, the utilitarian argument strongly favors disregarding cmake's recommended conventions on this. That being said, I'm very open to counterpoints, especially since we are defying official recommendations here.</p>", "type": "rendered"}, "created_on": "2018-01-25T18:52:10.941247+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-25T19:37:47.674135+00:00", "type": "issue_comment", "id": 42870230}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42870662.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42870662"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Our [ign-math examples](#!/ignitionrobotics/ign-math/src/5bf0933cc7325f6ccb149676a857bb725b163d35/examples/CMakeLists.txt?at=default&fileviewer=file-view-default) are still using the variable instead of the target. I assume it's not controversial to update the examples to link to targets instead of the questionable variable?", "markup": "markdown", "html": "<p>Our <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/5bf0933cc7325f6ccb149676a857bb725b163d35/examples/CMakeLists.txt?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">ign-math examples</a> are still using the variable instead of the target. I assume it's not controversial to update the examples to link to targets instead of the questionable variable?</p>", "type": "rendered"}, "created_on": "2018-01-25T19:20:15.242632+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 42870662}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42870726.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42870726"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Yeah, the examples should absolutely be updated to use the target, regardless of the outcome of this discussion. We want to set a good example for the end users.", "markup": "markdown", "html": "<p>Yeah, the examples should absolutely be updated to use the target, regardless of the outcome of this discussion. We want to set a good example for the end users.</p>", "type": "rendered"}, "created_on": "2018-01-25T19:24:12.021645+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 42870726}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42870874.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42870874"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "#!/ignitionrobotics/ign-math/pull-requests/229/examples-link-to-targets-instead-of-old/diff", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-math/pull-requests/229/examples-link-to-targets-instead-of-old/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/pull-requests/229/examples-link-to-targets-instead-of-old/diff</a></p>", "type": "rendered"}, "created_on": "2018-01-25T19:31:32.723962+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 42870874}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42873547.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42873547"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "I was going to \"defend\" the use of `Xxx_LIBRARIES` variables filled with names of imported targets due to the fact that they \ndecouple the downstream libraries build systems from the specific details on how the code of  a package is organized in physical targets. \nHowever, I just realized that the same functionality can be realized using an `IMPORTED` targets that links all the physical library targets of a package.\n\nOne thing that I am not super fan of in #!/ignitionrobotics/ign-math/pull-requests/229/examples-link-to-targets-instead-of-old/diff is that now a \nbump in the required ign-math major version requires changing the names of linked targets for all the `target_link_libraries` calls, but I guess this was a planned inconvenience.", "markup": "markdown", "html": "<p>I was going to \"defend\" the use of <code>Xxx_LIBRARIES</code> variables filled with names of imported targets due to the fact that they \ndecouple the downstream libraries build systems from the specific details on how the code of  a package is organized in physical targets. \nHowever, I just realized that the same functionality can be realized using an <code>IMPORTED</code> targets that links all the physical library targets of a package.</p>\n<p>One thing that I am not super fan of in <a href=\"#!/ignitionrobotics/ign-math/pull-requests/229/examples-link-to-targets-instead-of-old/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/pull-requests/229/examples-link-to-targets-instead-of-old/diff</a> is that now a \nbump in the required ign-math major version requires changing the names of linked targets for all the <code>target_link_libraries</code> calls, but I guess this was a planned inconvenience.</p>", "type": "rendered"}, "created_on": "2018-01-25T22:51:27.796877+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": null, "type": "issue_comment", "id": 42873547}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42873804.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42873804"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "> the same functionality can be realized using an IMPORTED targets that links all the physical library targets of a package.\n\nI've recently been thinking about doing exactly this for our upcoming [components system](#!/ignitionrobotics/ign-cmake/pull-requests/2). We could produce an `IMPORTED` target called something like `ignition-<project><num>::all` that `INTERFACE` links against all the components that were requested by the user.\n\nThat being said, it's a bit tangential to the central motivation of filling the variable with the imported target name, which is to rigidly enforce that users link against the target instead of the physical library. I genuinely believe this will save both us and the user a great deal of trouble with getting their build systems set up, and the disadvantage to doing so is minimal.\n\n> I guess this was a planned inconvenience.\n\nYes, for better or worse, this was a planned inconvenience. There have been concerns about situations where multiple versions of an ignition project may be needed within one consumer project. One example that comes to mind would be a consumer project which creates different versions of a plugin, where each plugin version needs to link against a different version of an ignition project. Having unversioned imported targets would not allow this to work.\n\nOne idea that we're floating at the moment is to create an unversioned `IMPORTED` target which links against whichever `IMPORTED` target was being requested when the unversioned target was created. I imagine the `-config.cmake` file would look something like this:\n\n```\nif(NOT TARGET ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@)\n  add_library(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ IMPORTED)\n  target_link_libraries(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ INTERFACE @PROJECT_EXPORT_NAME@::@PROJECT_EXPORT_NAME@)\nendif()\n```\n\nOfficially, we would say that the contents of the unversioned target are undefined when `find_package(~)` is called on multiple versions of the package, but in practice it would just be an interface target that points at whichever version was searched for first. If that sounds good to you, I can create a PR for it.", "markup": "markdown", "html": "<blockquote>\n<p>the same functionality can be realized using an IMPORTED targets that links all the physical library targets of a package.</p>\n</blockquote>\n<p>I've recently been thinking about doing exactly this for our upcoming <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/pull-requests/2\" rel=\"nofollow\">components system</a>. We could produce an <code>IMPORTED</code> target called something like <code>ignition-&lt;project&gt;&lt;num&gt;::all</code> that <code>INTERFACE</code> links against all the components that were requested by the user.</p>\n<p>That being said, it's a bit tangential to the central motivation of filling the variable with the imported target name, which is to rigidly enforce that users link against the target instead of the physical library. I genuinely believe this will save both us and the user a great deal of trouble with getting their build systems set up, and the disadvantage to doing so is minimal.</p>\n<blockquote>\n<p>I guess this was a planned inconvenience.</p>\n</blockquote>\n<p>Yes, for better or worse, this was a planned inconvenience. There have been concerns about situations where multiple versions of an ignition project may be needed within one consumer project. One example that comes to mind would be a consumer project which creates different versions of a plugin, where each plugin version needs to link against a different version of an ignition project. Having unversioned imported targets would not allow this to work.</p>\n<p>One idea that we're floating at the moment is to create an unversioned <code>IMPORTED</code> target which links against whichever <code>IMPORTED</code> target was being requested when the unversioned target was created. I imagine the <code>-config.cmake</code> file would look something like this:</p>\n<div class=\"codehilite\"><pre><span></span>if(NOT TARGET ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@)\n  add_library(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ IMPORTED)\n  target_link_libraries(ignition-@IGN_DESIGNATION@::ignition-@IGN_DESIGNATION@ INTERFACE @PROJECT_EXPORT_NAME@::@PROJECT_EXPORT_NAME@)\nendif()\n</pre></div>\n\n\n<p>Officially, we would say that the contents of the unversioned target are undefined when <code>find_package(~)</code> is called on multiple versions of the package, but in practice it would just be an interface target that points at whichever version was searched for first. If that sounds good to you, I can create a PR for it.</p>", "type": "rendered"}, "created_on": "2018-01-25T23:20:45.663358+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-25T23:21:31.339099+00:00", "type": "issue_comment", "id": 42873804}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42874121.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42874121"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "> I guess this was a planned inconvenience.\n\nActually we had talked about it before when I realized we would have to change lots of gazebo cmake variables when updating ignition versions, but I forgot when i made that recent ign-math pull request. I think the `IMPORTED` target could be a nice way to keep this functionality, but I'm starting to feel out of my cmake depth.\n\nThanks for mentioning that @traversaro.", "markup": "markdown", "html": "<blockquote>\n<p>I guess this was a planned inconvenience.</p>\n</blockquote>\n<p>Actually we had talked about it before when I realized we would have to change lots of gazebo cmake variables when updating ignition versions, but I forgot when i made that recent ign-math pull request. I think the <code>IMPORTED</code> target could be a nice way to keep this functionality, but I'm starting to feel out of my cmake depth.</p>\n<p>Thanks for mentioning that @traversaro.</p>", "type": "rendered"}, "created_on": "2018-01-25T23:58:29.013563+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 42874121}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42878779.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42878779"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "> That being said, it's a bit tangential to the central motivation of filling the variable with the imported target name, which is to rigidly enforce that users link against the target instead of the physical library. I genuinely believe this will save both us and the user a great deal of trouble with getting their build systems set up, and the disadvantage to doing so is minimal.\n\nYes, I was just mentioning this because it was the original motivation of having the `Xxx_LIBRARIES` list filled with the target instead of \"naked\" libraries. \nI am totally in support of having imported targets in the  `Xxx_LIBRARIES` (I was actually the one that did that in the first place in ign-math : ) ). \n\n>  If that sounds good to you, I can create a PR for it.\n\nThat seems great from the point of view of the use of the library in downstream projects.", "markup": "markdown", "html": "<blockquote>\n<p>That being said, it's a bit tangential to the central motivation of filling the variable with the imported target name, which is to rigidly enforce that users link against the target instead of the physical library. I genuinely believe this will save both us and the user a great deal of trouble with getting their build systems set up, and the disadvantage to doing so is minimal.</p>\n</blockquote>\n<p>Yes, I was just mentioning this because it was the original motivation of having the <code>Xxx_LIBRARIES</code> list filled with the target instead of \"naked\" libraries. \nI am totally in support of having imported targets in the  <code>Xxx_LIBRARIES</code> (I was actually the one that did that in the first place in ign-math : ) ). </p>\n<blockquote>\n<p>If that sounds good to you, I can create a PR for it.</p>\n</blockquote>\n<p>That seems great from the point of view of the use of the library in downstream projects.</p>", "type": "rendered"}, "created_on": "2018-01-26T08:32:14.683903+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": null, "type": "issue_comment", "id": 42878779}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42890506.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42890506"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "after we fix this, we could update the ign-math examples so that some link directly to `ignition-math4::ignition-math4` and others to `IGNITION-MATH_LIBRARIES` with some comments saying that either can be used", "markup": "markdown", "html": "<p>after we fix this, we could update the ign-math examples so that some link directly to <code>ignition-math4::ignition-math4</code> and others to <code>IGNITION-MATH_LIBRARIES</code> with some comments saying that either can be used</p>", "type": "rendered"}, "created_on": "2018-01-26T18:32:04.197156+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 42890506}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42890988.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42890988"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": ">after we fix this, \n\nIt makes sense to me that the variables continue to contain targets instead of a full path since that's what they always have contained, so I think the issue as it's written can be closed as `wontfix`.\n\n>we could update the ign-math examples so that some link directly to ignition-math4::ignition-math4 and others to IGNITION-MATH_LIBRARIES with some comments saying that either can be used\n\nI wouldn't recommend the unversioned one to users. Since the ignition major versions are side-by-side installable it opens the possibility of user builds breaking without the user changing anything.\n\n``` \ncmake_minimum_required(VERSION 3.5.1 FATAL_ERROR)\n\nfind_package(foo)\nfind_package(ignition-math3)\n\nadd_executable(bar)\ntarget_link_libraries(bar foo::foo ${IGNITION-MATH_LIBRARES})\n```\n\nUnknown to the user the third party target `foo::foo` depends on `ignition-math3`.  `foo` doesn't expose `ignition-math3` types in its headers, so they update to `ignition-math4` believing correctly that it won't break ABI. After `foo` releases the user's code breaks. Foo's `<project>-config.cmake` called `find_dependency(ignition-math4)` which set the content of the variable `IGNITION-MATH_LIBRARIES`. `find_package(ignition-math3)` saw that variable was already set and didn't change it.\n\nThis particular situation could be fixed by making the `<project>-config.cmake` for both ignition-math3 and ignition-math4 always set the variable when they're found. However, that's broken if the find_package() calls above are switched.", "markup": "markdown", "html": "<blockquote>\n<p>after we fix this, </p>\n</blockquote>\n<p>It makes sense to me that the variables continue to contain targets instead of a full path since that's what they always have contained, so I think the issue as it's written can be closed as <code>wontfix</code>.</p>\n<blockquote>\n<p>we could update the ign-math examples so that some link directly to ignition-math4::ignition-math4 and others to IGNITION-MATH_LIBRARIES with some comments saying that either can be used</p>\n</blockquote>\n<p>I wouldn't recommend the unversioned one to users. Since the ignition major versions are side-by-side installable it opens the possibility of user builds breaking without the user changing anything.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"s\">VERSION</span> <span class=\"s\">3.5.1</span> <span class=\"s\">FATAL_ERROR</span><span class=\"p\">)</span>\n\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">foo</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">ignition-math3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">add_executable</span><span class=\"p\">(</span><span class=\"s\">bar</span><span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span><span class=\"s\">bar</span> <span class=\"s\">foo::foo</span> <span class=\"o\">${</span><span class=\"nv\">IGNITION-MATH_LIBRARES</span><span class=\"o\">}</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Unknown to the user the third party target <code>foo::foo</code> depends on <code>ignition-math3</code>.  <code>foo</code> doesn't expose <code>ignition-math3</code> types in its headers, so they update to <code>ignition-math4</code> believing correctly that it won't break ABI. After <code>foo</code> releases the user's code breaks. Foo's <code>&lt;project&gt;-config.cmake</code> called <code>find_dependency(ignition-math4)</code> which set the content of the variable <code>IGNITION-MATH_LIBRARIES</code>. <code>find_package(ignition-math3)</code> saw that variable was already set and didn't change it.</p>\n<p>This particular situation could be fixed by making the <code>&lt;project&gt;-config.cmake</code> for both ignition-math3 and ignition-math4 always set the variable when they're found. However, that's broken if the find_package() calls above are switched.</p>", "type": "rendered"}, "created_on": "2018-01-26T19:05:57.122053+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2018-01-26T19:06:17.838990+00:00", "type": "issue_comment", "id": 42890988}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42891199.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42891199"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Correct me if I'm wrong, but I don't believe `find_dependency(~)` accomplishes anything for the private dependencies of an imported target. I believe the private fields of a target do not get exported anyway, so for `foo` to call `find_dependency(~)` on `ignition-math3` when it doesn't expose any `ignition-math3` types in its headers would indicate an error (or the very at least, an abuse of cmake) in `foo`'s config-file.\n\nThat being said, the point still stands, because you could have a situation where\n\n1. `foo` publicly depends on `ignition-math3` and therefore correctly calls `find_dependency(ignition-math3)`\n\n2. `bar` depends on `foo` and uses `ignition-math3` out of necessity\n\n3. `baz` is created within the same cmake project, does not depend on `foo` or `bar`, and instead wants to link against `ignition-math4`\n\nIn this scenario, we would legitimately get `find_package(~)` calls to multiple versions of `ignition-math`, which puts the unversioned variables in an undefined state.", "markup": "markdown", "html": "<p>Correct me if I'm wrong, but I don't believe <code>find_dependency(~)</code> accomplishes anything for the private dependencies of an imported target. I believe the private fields of a target do not get exported anyway, so for <code>foo</code> to call <code>find_dependency(~)</code> on <code>ignition-math3</code> when it doesn't expose any <code>ignition-math3</code> types in its headers would indicate an error (or the very at least, an abuse of cmake) in <code>foo</code>'s config-file.</p>\n<p>That being said, the point still stands, because you could have a situation where</p>\n<ol>\n<li>\n<p><code>foo</code> publicly depends on <code>ignition-math3</code> and therefore correctly calls <code>find_dependency(ignition-math3)</code></p>\n</li>\n<li>\n<p><code>bar</code> depends on <code>foo</code> and uses <code>ignition-math3</code> out of necessity</p>\n</li>\n<li>\n<p><code>baz</code> is created within the same cmake project, does not depend on <code>foo</code> or <code>bar</code>, and instead wants to link against <code>ignition-math4</code></p>\n</li>\n</ol>\n<p>In this scenario, we would legitimately get <code>find_package(~)</code> calls to multiple versions of <code>ignition-math</code>, which puts the unversioned variables in an undefined state.</p>", "type": "rendered"}, "created_on": "2018-01-26T19:23:44.824227+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 42891199}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42891221.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42891221"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Although to revise my last comment, I suppose it's plausible that someone might want to call `find_dependency(~)` on a private dependency to make sure that the dependency is available on the system where the project is being configured, so the build script can quit early if the configuration isn't valid.", "markup": "markdown", "html": "<p>Although to revise my last comment, I suppose it's plausible that someone might want to call <code>find_dependency(~)</code> on a private dependency to make sure that the dependency is available on the system where the project is being configured, so the build script can quit early if the configuration isn't valid.</p>", "type": "rendered"}, "created_on": "2018-01-26T19:25:24.112185+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 42891221}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42894021.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42894021"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "I just realized an issue that might make the unversioned target a little more vexing.\n\nLet's suppose we had `ign-common1` link to the unversioned target `ignition-math::ignition-math` which is secretly meant to be `ignition-math4::ignition-math4`. If a user does the following:\n\n```\nfind_package(ignition-math5) # the target ignition-math::ignition-math now refers to ignition-math5\nfind_package(ignition-common1) # the target ignition-math::ignition-math still refers to ignition-math5, even though ignition-common1 links to it expecting ignition-math4\n\nadd_executable(foo)\ntarget_link_libraries(foo ignition-math5::ignition-math5)\n\nadd_executable(bar)\ntarget_link_libraries(bar ignition-common1::ignition-common1)\n```\n\nThen even though the user is correctly using the versioned target names, their `bar` executable is going to link against `ignition-math5` even though `ignition-common1` depends on `ignition-math4`, and they will get a linking error. In this simple case, it could be fixed by switching lines 1 and 2, so that the versionless target `ignition-math::ignition-math` gets set to `ignition-math4`, but in more complex cases there might be no solution.\n\nSo in short, **any** libraries that expect to be consumed by other projects **must not** use the versionless targets, or else there is a risk of causing irrecoverable issues for their consumers.", "markup": "markdown", "html": "<p>I just realized an issue that might make the unversioned target a little more vexing.</p>\n<p>Let's suppose we had <code>ign-common1</code> link to the unversioned target <code>ignition-math::ignition-math</code> which is secretly meant to be <code>ignition-math4::ignition-math4</code>. If a user does the following:</p>\n<div class=\"codehilite\"><pre><span></span>find_package(ignition-math5) # the target ignition-math::ignition-math now refers to ignition-math5\nfind_package(ignition-common1) # the target ignition-math::ignition-math still refers to ignition-math5, even though ignition-common1 links to it expecting ignition-math4\n\nadd_executable(foo)\ntarget_link_libraries(foo ignition-math5::ignition-math5)\n\nadd_executable(bar)\ntarget_link_libraries(bar ignition-common1::ignition-common1)\n</pre></div>\n\n\n<p>Then even though the user is correctly using the versioned target names, their <code>bar</code> executable is going to link against <code>ignition-math5</code> even though <code>ignition-common1</code> depends on <code>ignition-math4</code>, and they will get a linking error. In this simple case, it could be fixed by switching lines 1 and 2, so that the versionless target <code>ignition-math::ignition-math</code> gets set to <code>ignition-math4</code>, but in more complex cases there might be no solution.</p>\n<p>So in short, <strong>any</strong> libraries that expect to be consumed by other projects <strong>must not</strong> use the versionless targets, or else there is a risk of causing irrecoverable issues for their consumers.</p>", "type": "rendered"}, "created_on": "2018-01-27T00:57:37.355521+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-27T01:02:12.638783+00:00", "type": "issue_comment", "id": 42894021}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42894048.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42894048"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "`ign-common` sets a variable indicating the desired ign-math version, then uses that variable when linking to targets:\n\n* #!/ignitionrobotics/ign-common/src/1fec1f9c5969567b54d2d0234d429035a1b47888/CMakeLists.txt?at=default&fileviewer=file-view-default#CMakeLists.txt-48:50\n* #!/ignitionrobotics/ign-common/src/1fec1f9c5969567b54d2d0234d429035a1b47888/src/CMakeLists.txt?at=default&fileviewer=file-view-default#CMakeLists.txt-77:78\n\nign-msgs, on the other hand, is using the versioned variable `ignition-math4_LIBRARIES`\n\n* #!/ignitionrobotics/ign-msgs/src/43530325244f3254c79867112767b25bef81b058/src/CMakeLists.txt?at=default&fileviewer=file-view-default#CMakeLists.txt-191", "markup": "markdown", "html": "<p><code>ign-common</code> sets a variable indicating the desired ign-math version, then uses that variable when linking to targets:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-common/src/1fec1f9c5969567b54d2d0234d429035a1b47888/CMakeLists.txt?at=default&amp;fileviewer=file-view-default#CMakeLists.txt-48:50\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-common/src/1fec1f9c5969567b54d2d0234d429035a1b47888/CMakeLists.txt?at=default&amp;fileviewer=file-view-default#CMakeLists.txt-48:50</a></li>\n<li><a href=\"#!/ignitionrobotics/ign-common/src/1fec1f9c5969567b54d2d0234d429035a1b47888/src/CMakeLists.txt?at=default&amp;fileviewer=file-view-default#CMakeLists.txt-77:78\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-common/src/1fec1f9c5969567b54d2d0234d429035a1b47888/src/CMakeLists.txt?at=default&amp;fileviewer=file-view-default#CMakeLists.txt-77:78</a></li>\n</ul>\n<p>ign-msgs, on the other hand, is using the versioned variable <code>ignition-math4_LIBRARIES</code></p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-msgs/src/43530325244f3254c79867112767b25bef81b058/src/CMakeLists.txt?at=default&amp;fileviewer=file-view-default#CMakeLists.txt-191\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/src/43530325244f3254c79867112767b25bef81b058/src/CMakeLists.txt?at=default&amp;fileviewer=file-view-default#CMakeLists.txt-191</a></li>\n</ul>", "type": "rendered"}, "created_on": "2018-01-27T01:04:51.761177+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 42894048}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42894062.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42894062"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "Ultimately both are using versioned targets, so there's currently no issue. My concern is the hypothetical where we decide to switch over to using simply `ignition-math::ignition-math` because of the incentive that we don't need to adjust that variable when incrementing which version of ign-math we use.\n\nBut that's something we can easily control. We can simply choose to keep using the variable. What concerns me more is that unsuspecting consumers of our libraries might not be aware of the potential (though admittedly unlikely) pitfalls of the unversioned target name.\n\nI'm not saying this should be considered a dealbreaker, but it may be worth thinking about.", "markup": "markdown", "html": "<p>Ultimately both are using versioned targets, so there's currently no issue. My concern is the hypothetical where we decide to switch over to using simply <code>ignition-math::ignition-math</code> because of the incentive that we don't need to adjust that variable when incrementing which version of ign-math we use.</p>\n<p>But that's something we can easily control. We can simply choose to keep using the variable. What concerns me more is that unsuspecting consumers of our libraries might not be aware of the potential (though admittedly unlikely) pitfalls of the unversioned target name.</p>\n<p>I'm not saying this should be considered a dealbreaker, but it may be worth thinking about.</p>", "type": "rendered"}, "created_on": "2018-01-27T01:08:44.750848+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 42894062}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42894111.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42894111"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "I'm starting to think we should only offer the unversioned variable if users want convenience and not add in an unversioned target. Otherwise, we could end up harming the consumers of our consumers without anyone downstream of us being able to make sense of why their configuration is messed up.\n\nWe could still do a versioned catch-all target like @traversaro suggested: e.g. `ignition-common1::all` to get all the exported library targets of `ignition-common1`. However, I think that's most relevant for the upcoming components feature, because until then we're only going to have one exported target per package anyhow.\n\nIf anyone still thinks that we should provide a versionless target, I'm happy to listen to counterpoints.", "markup": "markdown", "html": "<p>I'm starting to think we should only offer the unversioned variable if users want convenience and not add in an unversioned target. Otherwise, we could end up harming the consumers of our consumers without anyone downstream of us being able to make sense of why their configuration is messed up.</p>\n<p>We could still do a versioned catch-all target like @traversaro suggested: e.g. <code>ignition-common1::all</code> to get all the exported library targets of <code>ignition-common1</code>. However, I think that's most relevant for the upcoming components feature, because until then we're only going to have one exported target per package anyhow.</p>\n<p>If anyone still thinks that we should provide a versionless target, I'm happy to listen to counterpoints.</p>", "type": "rendered"}, "created_on": "2018-01-27T01:22:19.307305+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-27T01:23:41.313523+00:00", "type": "issue_comment", "id": 42894111}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42896099.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42896099"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "After the observations of @sloretz and @mxgrey , I now fully agree that an unversioned target is undesirable and dangerous.  \nI also fully agree with @mxgrey comment on introducing a catch-all target only when it will be useful.", "markup": "markdown", "html": "<p>After the observations of @sloretz and @mxgrey , I now fully agree that an unversioned target is undesirable and dangerous.<br />\nI also fully agree with @mxgrey comment on introducing a catch-all target only when it will be useful.</p>", "type": "rendered"}, "created_on": "2018-01-27T09:26:24.979135+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": "2018-01-27T10:09:10.117547+00:00", "type": "issue_comment", "id": 42896099}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/42935799.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-42935799"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "I've created a [related PR](#!/ignitionrobotics/ign-cmake/pull-requests/43) that builds off of the `Components` branch. All feedback on it is welcome and appreciated.", "markup": "markdown", "html": "<p>I've created a <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/pull-requests/43\" rel=\"nofollow\">related PR</a> that builds off of the <code>Components</code> branch. All feedback on it is welcome and appreciated.</p>", "type": "rendered"}, "created_on": "2018-01-30T00:01:30.541181+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 42935799}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15/comments/43047419.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/15#comment-43047419"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/15.json"}}, "type": "issue", "id": 15, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "title": "<Project>-config.cmake <project>_LIBRARIES should contain absolute paths"}, "content": {"raw": "We intentionally put targets in the `<project>_LIBRARIES` variable, even though it defies recommended cmake convention.", "markup": "markdown", "html": "<p>We intentionally put targets in the <code>&lt;project&gt;_LIBRARIES</code> variable, even though it defies recommended cmake convention.</p>", "type": "rendered"}, "created_on": "2018-02-02T22:29:17.891428+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 43047419}], "page": 1, "size": 19}