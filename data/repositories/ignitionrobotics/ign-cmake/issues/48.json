{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/48/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/48.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/48/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/48/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/48/finding-package-with-components-that-have"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/48/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "finding package with components that have a dependent relationship is tricky", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [X] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\nIf a package has components with a dependency relationship (such as ign-physics-dartsim-plugin, which depends on ignition-physics-sdf and ignition-physics-mesh), then then all the components must be listed in the `ign_find_package` call and in a proper order. The following is a workaround for this issue in ign-gazebo:\r\n\r\n* #!/ignitionrobotics/ign-gazebo/pull-requests/105/find-mesh-component-of-physics/diff\r\n\r\n# Steps to Reproduce\r\n\r\nI've demonstrated this issue with some examples committed to [branch find_component_order_working](#!/ignitionrobotics/ign-cmake/branch/find_component_order_working) and [branch find_component_order](#!/ignitionrobotics/ign-cmake/branch/find_component_order). The `find_component_order_working` branch creates a package `component_deps` that has two components: `parent` and `child`, and the `child` component links against the `parent`. There is a second package called `use_component_deps1` that makes an `ign_find_package` call for `component_deps` specifying both components `parent child`. This example builds fine:\r\n\r\n1. `hg up find_component_order_working`\r\n2. `mkdir build && cd build && cmake ..`\r\n3. `make` (successful)\r\n\r\nNow on branch [branch find_component_order](#!/ignitionrobotics/ign-cmake/branch/find_component_order), another example named `use_component_deps2 ` is added that differs from `use_component_deps1` only in the order that components are specified in the `ign_find_package` call, but it fails to build:\r\n\r\n1. `hg up find_component_order`\r\n2. `mkdir build && cd build && cmake ..`\r\n3. `make` (unsuccessful)\r\n\r\n**Expected behavior:**  \r\n\r\nI would expect the examples to build regardless of the order in which components are specified. Furthermore, I would that specifying a component would cause dependent components to be included as well (as in the ign-physics example mentioned above).\r\n\r\n**Actual behavior:**\r\n\r\n`ign_find_package` is sensitive to the order of specified components when there is a dependent relationship, and dependent components must all be listed.\r\n\r\n**Reproduces how often:** \r\n\r\n100%\r\n\r\n# Versions\r\n\r\nign-cmake1 and ign-cmake2\r\n\r\n# Additional Information", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[X] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>If a package has components with a dependency relationship (such as ign-physics-dartsim-plugin, which depends on ignition-physics-sdf and ignition-physics-mesh), then then all the components must be listed in the <code>ign_find_package</code> call and in a proper order. The following is a workaround for this issue in ign-gazebo:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/105/find-mesh-component-of-physics/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-gazebo/pull-requests/105/find-mesh-component-of-physics/diff</a></li>\n</ul>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<p>I've demonstrated this issue with some examples committed to <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/branch/find_component_order_working\" rel=\"nofollow\">branch find_component_order_working</a> and <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/branch/find_component_order\" rel=\"nofollow\">branch find_component_order</a>. The <code>find_component_order_working</code> branch creates a package <code>component_deps</code> that has two components: <code>parent</code> and <code>child</code>, and the <code>child</code> component links against the <code>parent</code>. There is a second package called <code>use_component_deps1</code> that makes an <code>ign_find_package</code> call for <code>component_deps</code> specifying both components <code>parent child</code>. This example builds fine:</p>\n<ol>\n<li><code>hg up find_component_order_working</code></li>\n<li><code>mkdir build &amp;&amp; cd build &amp;&amp; cmake ..</code></li>\n<li><code>make</code> (successful)</li>\n</ol>\n<p>Now on branch <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/branch/find_component_order\" rel=\"nofollow\">branch find_component_order</a>, another example named <code>use_component_deps2</code> is added that differs from <code>use_component_deps1</code> only in the order that components are specified in the <code>ign_find_package</code> call, but it fails to build:</p>\n<ol>\n<li><code>hg up find_component_order</code></li>\n<li><code>mkdir build &amp;&amp; cd build &amp;&amp; cmake ..</code></li>\n<li><code>make</code> (unsuccessful)</li>\n</ol>\n<p><strong>Expected behavior:</strong>  </p>\n<p>I would expect the examples to build regardless of the order in which components are specified. Furthermore, I would that specifying a component would cause dependent components to be included as well (as in the ign-physics example mentioned above).</p>\n<p><strong>Actual behavior:</strong></p>\n<p><code>ign_find_package</code> is sensitive to the order of specified components when there is a dependent relationship, and dependent components must all be listed.</p>\n<p><strong>Reproduces how often:</strong> </p>\n<p>100%</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>ign-cmake1 and ign-cmake2</p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-12-19T10:45:19.573103+00:00", "milestone": null, "updated_on": "2019-01-22T19:53:58.104690+00:00", "type": "issue", "id": 48}