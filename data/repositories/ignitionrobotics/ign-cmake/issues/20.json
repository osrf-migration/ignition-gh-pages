{"priority": "minor", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-cmake.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3e77bcf7-f260-4cec-a1a0-116b8e298901}ts=default"}}, "type": "repository", "name": "ign-cmake", "full_name": "ignitionrobotics/ign-cmake", "uuid": "{3e77bcf7-f260-4cec-a1a0-116b8e298901}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/20/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/20.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/20/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-cmake/issues/20/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-cmake/issues/20/allowing-find-modules-to-output-varying"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-cmake/issues/20/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Allowing find-modules to output varying target names might be fragile", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I need to test this to confirm, but it just occurred to me that there may be some fragility in the way the imported targets that get produced by our find-modules will vary based on how the target was made.\r\n\r\nWhen we create the imported target ourselves, we have a rough pattern of naming it `PACKAGE::PACKAGE`, but when the imported target is made by a package's config-file, it might have some arbitrary name that was chosen by the developer of the package.\r\n\r\nIn most cases this doesn't seem to be an inherent issue (although it can be a bit of a confusing inconvenience at times, like in [this case](#!/ignitionrobotics/ign-cmake/issues/19/findjsoncppcmake-cannot-find-ljsoncpp_lib)), but I suspect this means that if a dependency ever gets reinstalled such that the name of the imported target that would get created by the find-module will come out differently (e.g. the dependency didn't used to provide a config-file, but now it does), then the config-files of all the packages that directly depend on the reinstalled package will need to be reconfigured and reinstalled in order for their config-files to work correctly.\r\n\r\nI'll try to test this as soon as I get the chance. I wanted to post this issue right away to make sure I don't forget.\r\n\r\nI think the solution would be that all find-modules which allow a config-file to be used should always create an imported target with the same name as the one that would be generated by the config-file.\r\n\r\nTo make the transition painless for the find-modules that are already providing multiple possible imported target names, we can still create an imported target with our custom name, and just have it link to the target whose name is determined by the dependency's config-file.", "markup": "markdown", "html": "<p>I need to test this to confirm, but it just occurred to me that there may be some fragility in the way the imported targets that get produced by our find-modules will vary based on how the target was made.</p>\n<p>When we create the imported target ourselves, we have a rough pattern of naming it <code>PACKAGE::PACKAGE</code>, but when the imported target is made by a package's config-file, it might have some arbitrary name that was chosen by the developer of the package.</p>\n<p>In most cases this doesn't seem to be an inherent issue (although it can be a bit of a confusing inconvenience at times, like in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-cmake/issues/19/findjsoncppcmake-cannot-find-ljsoncpp_lib\" rel=\"nofollow\">this case</a>), but I suspect this means that if a dependency ever gets reinstalled such that the name of the imported target that would get created by the find-module will come out differently (e.g. the dependency didn't used to provide a config-file, but now it does), then the config-files of all the packages that directly depend on the reinstalled package will need to be reconfigured and reinstalled in order for their config-files to work correctly.</p>\n<p>I'll try to test this as soon as I get the chance. I wanted to post this issue right away to make sure I don't forget.</p>\n<p>I think the solution would be that all find-modules which allow a config-file to be used should always create an imported target with the same name as the one that would be generated by the config-file.</p>\n<p>To make the transition painless for the find-modules that are already providing multiple possible imported target names, we can still create an imported target with our custom name, and just have it link to the target whose name is determined by the dependency's config-file.</p>", "type": "rendered"}, "assignee": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-02-25T02:30:28.520546+00:00", "milestone": null, "updated_on": "2018-02-25T02:30:28.520546+00:00", "type": "issue", "id": 20}