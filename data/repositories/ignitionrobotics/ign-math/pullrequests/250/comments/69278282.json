{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/250/comments/69278282.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/250/_/diff#comment-69278282"}}, "parent": {"id": 69250536, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/250/comments/69250536.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/250/_/diff#comment-69250536"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 250, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/250.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/250"}}, "title": "Added cylinder class"}, "content": {"raw": "> However, I don\u2019t want to advertise the \u201cdetails/\\*\u201d files in the auto-generated header file.  \n\nI'm totally on board with that, and it makes sense to make that a \"policy\" for all ignition libraries, so I would advocate that we make a PR to `ign-cmake` to make that the standard behavior.\n\n> As far as I can tell it is a circular dependency  \n\nStrictly speaking, a \"circular dependency\" between `A.hh` and `B.hh` means that the body of `A.hh` is required to come before the body of `B.hh` and simultaneously the body of `B.hh` is required to come before the body of `A.hh` \\(where \"body\" refers to all the content of a header, ignoring its `#include` directives\\). This is logically impossible, and will always result in a compilation error. Whenever this happens, it means that there is a design error in the code, which usually needs to be solved using forward declarations \\(or sometimes fancier techniques\\).\n\nWhat we have in our situation is that the body of `A.hh` is required to come before the body of `B.hh` and simultaneously the body of `B.hh` is required to come **after** the body of `A.hh`. There is no logical contradiction here; it\u2019s just not a very common situation for headers in C/C\\+\\+, because usually the body of a header does not strictly require the body of any other header to come after it.\n\nRemember that the location of an `#include` directive within a header matters. The text from the header is effectively copy/pasted at the exact location of the `#include` directive \\(although anything blocked by an `#ifdef` will effectively be left out, which is how header guards do their thing\\). If you think carefully about how `#include` directives get expanded, you'll find that `A.hh` and `B.hh` will always do the right thing if `A.hh` includes `B.hh` at its bottom while `B.hh` includes `A.hh` at its top.\n\nThe pattern is also well-tested in DART where it\u2019s been in use for at least 3 years without any issues. It\u2019s not a common pattern, because most well-known template libraries \\(e.g. Boost, STL, Eigen\\) don\u2019t bother to split template declarations and implementations into separate files. But I think that\u2019s a big part of why those libraries feel so unapproachable to beginners: It\u2019s easy to get overwhelmed and scared away by template syntax, and it\u2019s hard to find the information that you actually care about \\(which is usually just the signature of a class or function\\).", "markup": "markdown", "html": "<blockquote>\n<p>However, I don\u2019t want to advertise the \u201cdetails/*\u201d files in the auto-generated header file.  </p>\n</blockquote>\n<p>I'm totally on board with that, and it makes sense to make that a \"policy\" for all ignition libraries, so I would advocate that we make a PR to <code>ign-cmake</code> to make that the standard behavior.</p>\n<blockquote>\n<p>As far as I can tell it is a circular dependency  </p>\n</blockquote>\n<p>Strictly speaking, a \"circular dependency\" between <code>A.hh</code> and <code>B.hh</code> means that the body of <code>A.hh</code> is required to come before the body of <code>B.hh</code> and simultaneously the body of <code>B.hh</code> is required to come before the body of <code>A.hh</code> (where \"body\" refers to all the content of a header, ignoring its <code>#include</code> directives). This is logically impossible, and will always result in a compilation error. Whenever this happens, it means that there is a design error in the code, which usually needs to be solved using forward declarations (or sometimes fancier techniques).</p>\n<p>What we have in our situation is that the body of <code>A.hh</code> is required to come before the body of <code>B.hh</code> and simultaneously the body of <code>B.hh</code> is required to come <strong>after</strong> the body of <code>A.hh</code>. There is no logical contradiction here; it\u2019s just not a very common situation for headers in C/C++, because usually the body of a header does not strictly require the body of any other header to come after it.</p>\n<p>Remember that the location of an <code>#include</code> directive within a header matters. The text from the header is effectively copy/pasted at the exact location of the <code>#include</code> directive (although anything blocked by an <code>#ifdef</code> will effectively be left out, which is how header guards do their thing). If you think carefully about how <code>#include</code> directives get expanded, you'll find that <code>A.hh</code> and <code>B.hh</code> will always do the right thing if <code>A.hh</code> includes <code>B.hh</code> at its bottom while <code>B.hh</code> includes <code>A.hh</code> at its top.</p>\n<p>The pattern is also well-tested in DART where it\u2019s been in use for at least 3 years without any issues. It\u2019s not a common pattern, because most well-known template libraries (e.g. Boost, STL, Eigen) don\u2019t bother to split template declarations and implementations into separate files. But I think that\u2019s a big part of why those libraries feel so unapproachable to beginners: It\u2019s easy to get overwhelmed and scared away by template syntax, and it\u2019s hard to find the information that you actually care about (which is usually just the signature of a class or function).</p>", "type": "rendered"}, "created_on": "2018-07-07T02:09:28.987457+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-07-07T02:09:28.996759+00:00", "type": "pullrequest_comment", "id": 69278282}