{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/250/comments/69170110.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/250/_/diff#comment-69170110"}}, "parent": {"id": 69152098, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/250/comments/69152098.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/250/_/diff#comment-69152098"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 250, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/250.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/250"}}, "title": "Added cylinder class"}, "content": {"raw": "To be exact, this isn\u2019t a circular dependency. Instead, it\u2019s a linear dependency with a strict ordering requirement.\n\nYou\u2019re absolutely right that we don\u2019t *want* users to include detail headers directly in their user code, but we can't really stop them from doing that without sabotaging them with compiler errors that can be very difficult to understand. And in this case, leaving the `#include` out of the detail header won\u2019t force a user to avoid including the detail header; it\u2019ll just *sometimes* \\(but not always\\) create cryptic compilation errors, depending on how exactly the user decided to include the detail header.\n\nBut more importantly, this strategy of including headers exactly where they\u2019re needed also helps us to avoid internal mixups within our own code. If we don\u2019t make the inclusion ordering air-tight, then we may run into situations where certain combinations or orderings of public API headers will result in unintended compilation errors for end-users, like what happened in this case with the auto-generated master header.", "markup": "markdown", "html": "<p>To be exact, this isn\u2019t a circular dependency. Instead, it\u2019s a linear dependency with a strict ordering requirement.</p>\n<p>You\u2019re absolutely right that we don\u2019t <em>want</em> users to include detail headers directly in their user code, but we can't really stop them from doing that without sabotaging them with compiler errors that can be very difficult to understand. And in this case, leaving the <code>#include</code> out of the detail header won\u2019t force a user to avoid including the detail header; it\u2019ll just <em>sometimes</em> (but not always) create cryptic compilation errors, depending on how exactly the user decided to include the detail header.</p>\n<p>But more importantly, this strategy of including headers exactly where they\u2019re needed also helps us to avoid internal mixups within our own code. If we don\u2019t make the inclusion ordering air-tight, then we may run into situations where certain combinations or orderings of public API headers will result in unintended compilation errors for end-users, like what happened in this case with the auto-generated master header.</p>", "type": "rendered"}, "created_on": "2018-07-06T02:10:32.895246+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-07-06T02:10:32.906721+00:00", "type": "pullrequest_comment", "id": 69170110}