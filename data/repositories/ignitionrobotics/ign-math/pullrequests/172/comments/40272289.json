{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/172/comments/40272289.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/172/_/diff#comment-40272289"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 172, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/172.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/172"}}, "title": "Remove box extent field"}, "content": {"raw": "Getting rid of extent sounds perfect!\n\nI got curious on how robust the new default constructor would be with the rest of the API, so I wrote a few tests:\n\n~~~\ndiff -r b7f3e15b4612 src/Box_TEST.cc\n--- a/src/Box_TEST.cc\tWed Jun 14 11:54:45 2017 -0700\n+++ b/src/Box_TEST.cc\tThu Jul 06 17:06:28 2017 -0700\n@@ -160,6 +160,31 @@\n }\n \n /////////////////////////////////////////////////\n+TEST(BoxTest, DefaultConstructor)\n+{\n+  math::Box defaultBox1, defaultBox2;\n+\n+  EXPECT_DOUBLE_EQ(defaultBox1.Size().X(), math::INF_D);\n+  EXPECT_DOUBLE_EQ(defaultBox1.Size().Y(), math::INF_D);\n+  EXPECT_DOUBLE_EQ(defaultBox1.Size().Z(), math::INF_D);\n+\n+  EXPECT_DOUBLE_EQ(defaultBox1.XLength(), math::INF_D);\n+  EXPECT_DOUBLE_EQ(defaultBox1.YLength(), math::INF_D);\n+  EXPECT_DOUBLE_EQ(defaultBox1.ZLength(), math::INF_D);\n+\n+  EXPECT_DOUBLE_EQ(defaultBox1.Center().X(), math::MAX_D);\n+  EXPECT_DOUBLE_EQ(defaultBox1.Center().Y(), math::MAX_D);\n+  EXPECT_DOUBLE_EQ(defaultBox1.Center().Z(), math::MAX_D);\n+\n+  EXPECT_FALSE(defaultBox1.Intersects(defaultBox2));\n+\n+  EXPECT_FALSE(defaultBox1.Intersects(math::Box(\n+          math::Vector3d(0, 0, 0), math::Vector3d(1, 1, 1))));\n+\n+  EXPECT_FALSE(defaultBox2.Contains(math::Vector3d::Zero));\n+}\n+\n+/////////////////////////////////////////////////\n TEST(BoxTest, Minus)\n {\n   math::Box box1(1, 2, 3, 4, 5, 6);\n~~~\n\nNothing explodes, but `Center` ends up with a result which is a bit hard to catch, one order of magnitude lower than MAX_D:\n\n~~~\n[ RUN      ] BoxTest.DefaultConstructor\n/home/louise/code/ign-math/src/Box_TEST.cc:175: Failure\nValue of: math::MAX_D\n  Actual: 1.7976931348623157e+308\nExpected: defaultBox1.Center().X()\nWhich is: 8.9884656743115785e+307\n/home/louise/code/ign-math/src/Box_TEST.cc:176: Failure\nValue of: math::MAX_D\n  Actual: 1.7976931348623157e+308\nExpected: defaultBox1.Center().Y()\nWhich is: 8.9884656743115785e+307\n/home/louise/code/ign-math/src/Box_TEST.cc:177: Failure\nValue of: math::MAX_D\n  Actual: 1.7976931348623157e+308\nExpected: defaultBox1.Center().Z()\nWhich is: 8.9884656743115785e+307\n[  FAILED  ] BoxTest.DefaultConstructor (14 ms)\n~~~\n\nNot sure if this really matters... I just thought it might be interesting to document the expected outcomes, maybe on the default constructor description.", "markup": "markdown", "html": "<p>Getting rid of extent sounds perfect!</p>\n<p>I got curious on how robust the new default constructor would be with the rest of the API, so I wrote a few tests:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r b7f3e15b4612 src/Box_TEST.cc</span>\n<span class=\"gd\">--- a/src/Box_TEST.cc   Wed Jun 14 11:54:45 2017 -0700</span>\n<span class=\"gi\">+++ b/src/Box_TEST.cc   Thu Jul 06 17:06:28 2017 -0700</span>\n<span class=\"gu\">@@ -160,6 +160,31 @@</span>\n }\n\n /////////////////////////////////////////////////\n<span class=\"gi\">+TEST(BoxTest, DefaultConstructor)</span>\n<span class=\"gi\">+{</span>\n<span class=\"gi\">+  math::Box defaultBox1, defaultBox2;</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.Size().X(), math::INF_D);</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.Size().Y(), math::INF_D);</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.Size().Z(), math::INF_D);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.XLength(), math::INF_D);</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.YLength(), math::INF_D);</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.ZLength(), math::INF_D);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.Center().X(), math::MAX_D);</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.Center().Y(), math::MAX_D);</span>\n<span class=\"gi\">+  EXPECT_DOUBLE_EQ(defaultBox1.Center().Z(), math::MAX_D);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  EXPECT_FALSE(defaultBox1.Intersects(defaultBox2));</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  EXPECT_FALSE(defaultBox1.Intersects(math::Box(</span>\n<span class=\"gi\">+          math::Vector3d(0, 0, 0), math::Vector3d(1, 1, 1))));</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  EXPECT_FALSE(defaultBox2.Contains(math::Vector3d::Zero));</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+/////////////////////////////////////////////////</span>\n TEST(BoxTest, Minus)\n {\n   math::Box box1(1, 2, 3, 4, 5, 6);\n</pre></div>\n\n\n<p>Nothing explodes, but <code>Center</code> ends up with a result which is a bit hard to catch, one order of magnitude lower than MAX_D:</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] BoxTest.DefaultConstructor\n/home/louise/code/ign-math/src/Box_TEST.cc:175: Failure\nValue of: math::MAX_D\n  Actual: 1.7976931348623157e+308\nExpected: defaultBox1.Center().X()\nWhich is: 8.9884656743115785e+307\n/home/louise/code/ign-math/src/Box_TEST.cc:176: Failure\nValue of: math::MAX_D\n  Actual: 1.7976931348623157e+308\nExpected: defaultBox1.Center().Y()\nWhich is: 8.9884656743115785e+307\n/home/louise/code/ign-math/src/Box_TEST.cc:177: Failure\nValue of: math::MAX_D\n  Actual: 1.7976931348623157e+308\nExpected: defaultBox1.Center().Z()\nWhich is: 8.9884656743115785e+307\n[  FAILED  ] BoxTest.DefaultConstructor (14 ms)\n</pre></div>\n\n\n<p>Not sure if this really matters... I just thought it might be interesting to document the expected outcomes, maybe on the default constructor description.</p>", "type": "rendered"}, "created_on": "2017-07-07T00:19:03.097914+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-07-07T00:19:03.100347+00:00", "type": "pullrequest_comment", "id": 40272289}