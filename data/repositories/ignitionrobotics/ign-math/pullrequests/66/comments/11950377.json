{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/66/comments/11950377.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/66/_/diff#comment-11950377"}}, "parent": {"id": 11891872, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/66/comments/11891872.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/66/_/diff#comment-11891872"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 66, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/66.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/66"}}, "title": "Frame_graph"}, "content": {"raw": "I had some trouble creating cycles using the current setup. I played around with the code a bit, and came up with a `FrameGraph` that stores a list of frames and a list of edges between frames. This approach allows cycles. The code is in the [frames](#!/ignitionrobotics/ign-math/branch/frames) branch. It's a bit rough right now and a departure from what was done here. Take a look and let me know what you think about this direction.\n\nSome cool things about the `frames` branch:\n\n* Dijktra's algorithm is implemented in the `FrameGraph::Path` function.\n* It's possible to initialize a FrameGraph using C++11 list initializers:\n\n```\n#!c++\n\nFrameGraph graph(\n// The list of frames\n{\n  {\"a\", Pose3d::Zero},\n  {\"b\", Pose3d::Zero},\n  {\"c\", Pose3d::Zero}\n},\n// The edges\n{\n  {\"a\", \"b\"},\n  {\"a\", \"c\"},\n  {\"c\", \"b\"}\n});\n```\n\n* It should be easy to add iterators for depth-first and bread-first searches.\n* A root node is not required.", "markup": "markdown", "html": "<p>I had some trouble creating cycles using the current setup. I played around with the code a bit, and came up with a <code>FrameGraph</code> that stores a list of frames and a list of edges between frames. This approach allows cycles. The code is in the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/branch/frames\" rel=\"nofollow\">frames</a> branch. It's a bit rough right now and a departure from what was done here. Take a look and let me know what you think about this direction.</p>\n<p>Some cool things about the <code>frames</code> branch:</p>\n<ul>\n<li>Dijktra's algorithm is implemented in the <code>FrameGraph::Path</code> function.</li>\n<li>It's possible to initialize a FrameGraph using C++11 list initializers:</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">FrameGraph</span> <span class=\"nf\">graph</span><span class=\"p\">(</span>\n<span class=\"c1\">// The list of frames</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">{</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"n\">Pose3d</span><span class=\"o\">::</span><span class=\"n\">Zero</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"n\">Pose3d</span><span class=\"o\">::</span><span class=\"n\">Zero</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s\">&quot;c&quot;</span><span class=\"p\">,</span> <span class=\"n\">Pose3d</span><span class=\"o\">::</span><span class=\"n\">Zero</span><span class=\"p\">}</span>\n<span class=\"p\">},</span>\n<span class=\"c1\">// The edges</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">{</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;b&quot;</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;c&quot;</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s\">&quot;c&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;b&quot;</span><span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</pre></div>\n\n\n<ul>\n<li>It should be easy to add iterators for depth-first and bread-first searches.</li>\n<li>A root node is not required.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-11-19T00:03:21.434541+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-11-19T00:03:21.436975+00:00", "type": "pullrequest_comment", "id": 11950377}