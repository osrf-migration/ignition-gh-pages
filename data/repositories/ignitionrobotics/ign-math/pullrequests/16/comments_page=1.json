{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/16/comments/2128178.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:68b4a1a555d6..005e7622c561?path=include%2Fignition%2Fmath%2FFilter.hh"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/16/_/diff#comment-2128178"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 16, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/16.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/16"}}, "title": "Added Filters and tests"}, "content": {"raw": "If we want to be more C++11 fancy, we could get rid of the repeated initialization list in the constructors and initialize the member variables a0 and b1 directly in the class definition. We could also use the default constructor for not having to use the empty brackets {}.\n\n```\n#!c++\n\ntemplate <class T>\n    class IGNITION_VISIBLE OnePole : public Filter<T>\n    {\n      /// \\brief Constructor.\n      public: OnePole() = default;\n\n      /// \\brief Constructor.\n      /// \\param[in] _fc Cutoff frequency.\n      /// \\param[in] _fs Sample rate.\n      public: OnePole(double _fc, double _fs)\n      {\n        this->SetFc(_fc, _fs);\n      }\n\n      // Documentation Inherited.\n      public: virtual void SetFc(double _fc, double _fs)\n      {\n        b1 = exp(-2.0 * M_PI * _fc / _fs);\n        a0 = 1.0 - b1;\n      }\n\n      /// \\brief Update the filter's output.\n      /// \\paran[in] _x Input value.\n      /// \\return The filter's current output.\n      public: inline const T& Process(const T &_x)\n      {\n        this->y0 = a0 * _x + b1 * this->y0;\n        return this->y0;\n      }\n\n      /// \\brief Input gain control.\n      protected: double a0 = 0;\n\n      /// \\brief Gain of the feedback.\n      protected: double b1 = 0;\n    };\n```", "markup": "markdown", "html": "<p>If we want to be more C++11 fancy, we could get rid of the repeated initialization list in the constructors and initialize the member variables a0 and b1 directly in the class definition. We could also use the default constructor for not having to use the empty brackets {}.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"o\">&gt;</span>\n    <span class=\"k\">class</span> <span class=\"nc\">IGNITION_VISIBLE</span> <span class=\"nl\">OnePole</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">Filter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">/// \\brief Constructor.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">OnePole</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"k\">default</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">/// \\brief Constructor.</span>\n      <span class=\"c1\">/// \\param[in] _fc Cutoff frequency.</span>\n      <span class=\"c1\">/// \\param[in] _fs Sample rate.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">OnePole</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_fc</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">_fs</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SetFc</span><span class=\"p\">(</span><span class=\"n\">_fc</span><span class=\"p\">,</span> <span class=\"n\">_fs</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// Documentation Inherited.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">SetFc</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_fc</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">_fs</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span> <span class=\"o\">*</span> <span class=\"n\">_fc</span> <span class=\"o\">/</span> <span class=\"n\">_fs</span><span class=\"p\">);</span>\n        <span class=\"n\">a0</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"n\">b1</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">/// \\brief Update the filter&#39;s output.</span>\n      <span class=\"c1\">/// \\paran[in] _x Input value.</span>\n      <span class=\"c1\">/// \\return The filter&#39;s current output.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"kr\">inline</span> <span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"n\">_x</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"n\">a0</span> <span class=\"o\">*</span> <span class=\"n\">_x</span> <span class=\"o\">+</span> <span class=\"n\">b1</span> <span class=\"o\">*</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">y0</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">y0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">/// \\brief Input gain control.</span>\n      <span class=\"k\">protected</span><span class=\"o\">:</span> <span class=\"kt\">double</span> <span class=\"n\">a0</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">/// \\brief Gain of the feedback.</span>\n      <span class=\"k\">protected</span><span class=\"o\">:</span> <span class=\"kt\">double</span> <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n</pre></div>", "type": "rendered"}, "created_on": "2014-06-12T22:16:53.148132+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 60, "from": null, "path": "include/ignition/math/Filter.hh"}, "updated_on": "2014-06-12T22:16:53.157411+00:00", "type": "pullrequest_comment", "id": 2128178}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/16/comments/2197564.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:None..None?path=include%2Fignition%2Fmath%2FFilter.hh"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/16/_/diff#comment-2197564"}}, "parent": {"id": 2128178, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/16/comments/2128178.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/16/_/diff#comment-2128178"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 16, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/16.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/16"}}, "title": "Added Filters and tests"}, "content": {"raw": "Awesome. Thanks. They have been integrated.", "markup": "markdown", "html": "<p>Awesome. Thanks. They have been integrated.</p>", "type": "rendered"}, "created_on": "2014-06-20T17:57:10.437088+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "path": "include/ignition/math/Filter.hh"}, "updated_on": "2014-06-20T17:57:10.444463+00:00", "type": "pullrequest_comment", "id": 2197564}], "page": 1, "size": 2}