{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62229865.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62229865"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249"}}, "title": "Updated the MassMatrix3::ValidMoments to use an epsilon and >="}, "content": {"raw": "Allowing positive semi-definite inertia matrices (or even slightly negative eigenvalues which this would also allow) is not just non-physical; it can also result in serious mathematical errors, analogous to dividing by zero.\n\nI haven't looked much at Drake source code, but I would guess they might be using a technique that is robust to this kind of issue; maybe they use singular value decomposition and then discard any non-physical eigenvalues. Whatever the case, I don't think we should rely on a consumer of `ign-math` to be robust to non-physical rotational inertias.\n\nIs there a specific motivation for this change? I don't see anything inherently wrong with our evaluation not matching Drake's evaluation, since the `ign-math` validity check can say \"Yes (or no), this rotational inertia matrix makes physical sense\" while Drake's can say \"Yes (or no), this rotational inertia matrix can be safely used by Drake\". Our library's \"yes\" will just be a subset of Drake's \"yes\".\n\nAlso, I don't think floating point precision would have a meaningful impact here since all of the comparisons are for inequalities. If someone is close enough to a non-physical quantity that these inequalities may fail, then they will almost certainly face numerical errors where the rotational inertia will be effectively non-physical anyway.", "markup": "markdown", "html": "<p>Allowing positive semi-definite inertia matrices (or even slightly negative eigenvalues which this would also allow) is not just non-physical; it can also result in serious mathematical errors, analogous to dividing by zero.</p>\n<p>I haven't looked much at Drake source code, but I would guess they might be using a technique that is robust to this kind of issue; maybe they use singular value decomposition and then discard any non-physical eigenvalues. Whatever the case, I don't think we should rely on a consumer of <code>ign-math</code> to be robust to non-physical rotational inertias.</p>\n<p>Is there a specific motivation for this change? I don't see anything inherently wrong with our evaluation not matching Drake's evaluation, since the <code>ign-math</code> validity check can say \"Yes (or no), this rotational inertia matrix makes physical sense\" while Drake's can say \"Yes (or no), this rotational inertia matrix can be safely used by Drake\". Our library's \"yes\" will just be a subset of Drake's \"yes\".</p>\n<p>Also, I don't think floating point precision would have a meaningful impact here since all of the comparisons are for inequalities. If someone is close enough to a non-physical quantity that these inequalities may fail, then they will almost certainly face numerical errors where the rotational inertia will be effectively non-physical anyway.</p>", "type": "rendered"}, "created_on": "2018-04-20T20:45:50.643931+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-04-20T20:46:45.000479+00:00", "type": "pullrequest_comment", "id": 62229865}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62230429.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62230429"}}, "parent": {"id": 62229865, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62229865.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62229865"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249"}}, "title": "Updated the MassMatrix3::ValidMoments to use an epsilon and >="}, "content": {"raw": "A further note, after looking more into Drake's implementation:\n\nIt seems their actual motivation for the imprecision is because they expect their rotational inertia quantity to be transformed after it has been initialized. The floating point operations of that transformation may cause the rotational inertia to go from being invalid to valid. This would be a pretty extreme edge case, but it makes sense for them to account for it because they aggressively throw exceptions for invalid rotational inertias. They are explicitly testing *necessary* conditions for their rotational inertia quantity to be valid, and they are leaving the *sufficient* condition testing for later.\n\nOur functions `Valid()` and `ValidMoments()` imply that we are testing for sufficient conditions, so I believe they should remain as they are.\n\nEdit: Note that Drake names their function [`CouldBePhysicallyValid`](https://github.com/RobotLocomotion/drake/blob/master/multibody/multibody_tree/rotational_inertia.h#L484), explicitly expressing that it may overstate the validity of the quantity.", "markup": "markdown", "html": "<p>A further note, after looking more into Drake's implementation:</p>\n<p>It seems their actual motivation for the imprecision is because they expect their rotational inertia quantity to be transformed after it has been initialized. The floating point operations of that transformation may cause the rotational inertia to go from being invalid to valid. This would be a pretty extreme edge case, but it makes sense for them to account for it because they aggressively throw exceptions for invalid rotational inertias. They are explicitly testing <em>necessary</em> conditions for their rotational inertia quantity to be valid, and they are leaving the <em>sufficient</em> condition testing for later.</p>\n<p>Our functions <code>Valid()</code> and <code>ValidMoments()</code> imply that we are testing for sufficient conditions, so I believe they should remain as they are.</p>\n<p>Edit: Note that Drake names their function <a data-is-external-link=\"true\" href=\"https://github.com/RobotLocomotion/drake/blob/master/multibody/multibody_tree/rotational_inertia.h#L484\" rel=\"nofollow\"><code>CouldBePhysicallyValid</code></a>, explicitly expressing that it may overstate the validity of the quantity.</p>", "type": "rendered"}, "created_on": "2018-04-20T20:55:41.279113+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-04-20T21:00:38.772217+00:00", "type": "pullrequest_comment", "id": 62230429}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62231590.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62231590"}}, "parent": {"id": 62229865, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62229865.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62229865"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249"}}, "title": "Updated the MassMatrix3::ValidMoments to use an epsilon and >="}, "content": {"raw": "That all makes sense. The motivation came up while working a few tests that compare SDF and ignition-math generation of inertia with those generated programmatically from Drake. The inconsistency was noticed, and here we are. I'll decline this and work around the issue on the drake side.", "markup": "markdown", "html": "<p>That all makes sense. The motivation came up while working a few tests that compare SDF and ignition-math generation of inertia with those generated programmatically from Drake. The inconsistency was noticed, and here we are. I'll decline this and work around the issue on the drake side.</p>", "type": "rendered"}, "created_on": "2018-04-20T21:19:33.768796+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-04-20T21:19:33.775816+00:00", "type": "pullrequest_comment", "id": 62231590}], "page": 1, "size": 3}