{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62230429.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62230429"}}, "parent": {"id": 62229865, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62229865.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62229865"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249"}}, "title": "Updated the MassMatrix3::ValidMoments to use an epsilon and >="}, "content": {"raw": "A further note, after looking more into Drake's implementation:\n\nIt seems their actual motivation for the imprecision is because they expect their rotational inertia quantity to be transformed after it has been initialized. The floating point operations of that transformation may cause the rotational inertia to go from being invalid to valid. This would be a pretty extreme edge case, but it makes sense for them to account for it because they aggressively throw exceptions for invalid rotational inertias. They are explicitly testing *necessary* conditions for their rotational inertia quantity to be valid, and they are leaving the *sufficient* condition testing for later.\n\nOur functions `Valid()` and `ValidMoments()` imply that we are testing for sufficient conditions, so I believe they should remain as they are.\n\nEdit: Note that Drake names their function [`CouldBePhysicallyValid`](https://github.com/RobotLocomotion/drake/blob/master/multibody/multibody_tree/rotational_inertia.h#L484), explicitly expressing that it may overstate the validity of the quantity.", "markup": "markdown", "html": "<p>A further note, after looking more into Drake's implementation:</p>\n<p>It seems their actual motivation for the imprecision is because they expect their rotational inertia quantity to be transformed after it has been initialized. The floating point operations of that transformation may cause the rotational inertia to go from being invalid to valid. This would be a pretty extreme edge case, but it makes sense for them to account for it because they aggressively throw exceptions for invalid rotational inertias. They are explicitly testing <em>necessary</em> conditions for their rotational inertia quantity to be valid, and they are leaving the <em>sufficient</em> condition testing for later.</p>\n<p>Our functions <code>Valid()</code> and <code>ValidMoments()</code> imply that we are testing for sufficient conditions, so I believe they should remain as they are.</p>\n<p>Edit: Note that Drake names their function <a data-is-external-link=\"true\" href=\"https://github.com/RobotLocomotion/drake/blob/master/multibody/multibody_tree/rotational_inertia.h#L484\" rel=\"nofollow\"><code>CouldBePhysicallyValid</code></a>, explicitly expressing that it may overstate the validity of the quantity.</p>", "type": "rendered"}, "created_on": "2018-04-20T20:55:41.279113+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-04-20T21:00:38.772217+00:00", "type": "pullrequest_comment", "id": 62230429}