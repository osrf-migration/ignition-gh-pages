{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249/comments/62229865.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249/_/diff#comment-62229865"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 249, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/249.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/249"}}, "title": "Updated the MassMatrix3::ValidMoments to use an epsilon and >="}, "content": {"raw": "Allowing positive semi-definite inertia matrices (or even slightly negative eigenvalues which this would also allow) is not just non-physical; it can also result in serious mathematical errors, analogous to dividing by zero.\n\nI haven't looked much at Drake source code, but I would guess they might be using a technique that is robust to this kind of issue; maybe they use singular value decomposition and then discard any non-physical eigenvalues. Whatever the case, I don't think we should rely on a consumer of `ign-math` to be robust to non-physical rotational inertias.\n\nIs there a specific motivation for this change? I don't see anything inherently wrong with our evaluation not matching Drake's evaluation, since the `ign-math` validity check can say \"Yes (or no), this rotational inertia matrix makes physical sense\" while Drake's can say \"Yes (or no), this rotational inertia matrix can be safely used by Drake\". Our library's \"yes\" will just be a subset of Drake's \"yes\".\n\nAlso, I don't think floating point precision would have a meaningful impact here since all of the comparisons are for inequalities. If someone is close enough to a non-physical quantity that these inequalities may fail, then they will almost certainly face numerical errors where the rotational inertia will be effectively non-physical anyway.", "markup": "markdown", "html": "<p>Allowing positive semi-definite inertia matrices (or even slightly negative eigenvalues which this would also allow) is not just non-physical; it can also result in serious mathematical errors, analogous to dividing by zero.</p>\n<p>I haven't looked much at Drake source code, but I would guess they might be using a technique that is robust to this kind of issue; maybe they use singular value decomposition and then discard any non-physical eigenvalues. Whatever the case, I don't think we should rely on a consumer of <code>ign-math</code> to be robust to non-physical rotational inertias.</p>\n<p>Is there a specific motivation for this change? I don't see anything inherently wrong with our evaluation not matching Drake's evaluation, since the <code>ign-math</code> validity check can say \"Yes (or no), this rotational inertia matrix makes physical sense\" while Drake's can say \"Yes (or no), this rotational inertia matrix can be safely used by Drake\". Our library's \"yes\" will just be a subset of Drake's \"yes\".</p>\n<p>Also, I don't think floating point precision would have a meaningful impact here since all of the comparisons are for inequalities. If someone is close enough to a non-physical quantity that these inequalities may fail, then they will almost certainly face numerical errors where the rotational inertia will be effectively non-physical anyway.</p>", "type": "rendered"}, "created_on": "2018-04-20T20:45:50.643931+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-04-20T20:46:45.000479+00:00", "type": "pullrequest_comment", "id": 62229865}