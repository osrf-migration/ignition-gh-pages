{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/80/comments/12651392.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:5c208185abe5..f326d4bb6908?path=include%2Fignition%2Fmath%2FHelpers.hh"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/80/_/diff#comment-12651392"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 80, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/80.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/80"}}, "title": "Add sort2 and sort3 helper functions"}, "content": {"raw": "For generic templated use there are some minor tweaks that would make this more robust. One is to use the \"less than\" operator rather than \"greater than\" because the STL is written to assume that types will support just equality and less than; the other operators are simulated using those. Second is to allow use of efficient swap methods provided by type T, which should not generally be assumed to have been added to the `std` namespace; that is considered a bad practice in C++, see discussion [here](http://stackoverflow.com/questions/14402990/should-you-overload-swap-in-the-std-namespace) for example. So:\n```c++\n{\n  using std::swap;\n  if (_b < _a)\n      swap(_a, _b);\n}\n```\nThat will use argument-dependent lookup to find the right swap in the namespace where T is defined, and fall back to the generic (slow) std implementation if there isn't one.", "markup": "markdown", "html": "<p>For generic templated use there are some minor tweaks that would make this more robust. One is to use the \"less than\" operator rather than \"greater than\" because the STL is written to assume that types will support just equality and less than; the other operators are simulated using those. Second is to allow use of efficient swap methods provided by type T, which should not generally be assumed to have been added to the <code>std</code> namespace; that is considered a bad practice in C++, see discussion <a data-is-external-link=\"true\" href=\"http://stackoverflow.com/questions/14402990/should-you-overload-swap-in-the-std-namespace\" rel=\"nofollow\">here</a> for example. So:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">swap</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_b</span> <span class=\"o\">&lt;</span> <span class=\"n\">_a</span><span class=\"p\">)</span>\n      <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">_a</span><span class=\"p\">,</span> <span class=\"n\">_b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>That will use argument-dependent lookup to find the right swap in the namespace where T is defined, and fall back to the generic (slow) std implementation if there isn't one.</p>", "type": "rendered"}, "created_on": "2015-12-10T17:28:11.044422+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "inline": {"to": 252, "from": null, "outdated": true, "path": "include/ignition/math/Helpers.hh"}, "updated_on": "2015-12-10T17:28:11.104827+00:00", "type": "pullrequest_comment", "id": 12651392}