{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/158/comments/36794758.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:eb2cc47e4328..826cd23c136c?path=include%2Fignition%2Fmath%2FEdge.hh"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/158/_/diff#comment-36794758"}}, "parent": {"id": 36789721, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/158/comments/36789721.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/158/_/diff#comment-36789721"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/158.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/158"}}, "title": "Graph generic"}, "content": {"raw": "The `EdgeInitializer` makes part of the magic for allowing uniform initialization with `{}`. We could make `_data` an optional argument in the `EdgeInitializer` too. However, because of how the optional parameters work on C++ we should be able to do:\n\n\n```\n#!c++\n\n// Create one edge specifying the vertices.\n{{{0, 1}}}\n// Create one edge specifying the vertices and data.\n{{{0, 1}, \"data\"}}\n// Create one edge specifying the vertices, data and weight.\n{{{0, 1}, \"data\", 2.0}}\n```\n\n\nBut this configuration wouldn't be possible:\n\n```\n#!c++\n\n// Create one edge specifying the vertices and weight.\n{{{0, 1}, 2.0}}\n```\n\n", "markup": "markdown", "html": "<p>The <code>EdgeInitializer</code> makes part of the magic for allowing uniform initialization with <code>{}</code>. We could make <code>_data</code> an optional argument in the <code>EdgeInitializer</code> too. However, because of how the optional parameters work on C++ we should be able to do:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Create one edge specifying the vertices.</span>\n<span class=\"p\">{{{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}}}</span>\n<span class=\"c1\">// Create one edge specifying the vertices and data.</span>\n<span class=\"p\">{{{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"s\">&quot;data&quot;</span><span class=\"p\">}}</span>\n<span class=\"c1\">// Create one edge specifying the vertices, data and weight.</span>\n<span class=\"p\">{{{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"s\">&quot;data&quot;</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">}}</span>\n</pre></div>\n\n\n<p>But this configuration wouldn't be possible:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Create one edge specifying the vertices and weight.</span>\n<span class=\"p\">{{{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"mf\">2.0</span><span class=\"p\">}}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-05-12T21:02:47.315043+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/math/Edge.hh"}, "updated_on": "2017-05-12T21:03:18.215905+00:00", "type": "pullrequest_comment", "id": 36794758}