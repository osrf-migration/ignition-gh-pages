{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/158/comments/36686692.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:b6a2fd410631..826cd23c136c?path=include%2Fignition%2Fmath%2FGraphAlgorithms.hh"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/158/_/diff#comment-36686692"}}, "parent": {"id": 36614280, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/158/comments/36614280.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/158/_/diff#comment-36614280"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/158.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/158"}}, "title": "Graph generic"}, "content": {"raw": "Yes, it's possible. In this example, you can populate a local graph based on `_graph` but replacing the user data with a boolean value. This can be used to store whether the vertex has been visited or not. E.g.:\n\n\n```\n#!c++\n\ntemplate<typename V, typename E, typename EdgeType>\nstd::vector<VertexId> DFS(const Graph<V, E, EdgeType> &_graph,\n                                           const VertexId &_from)\n{\n  // Create an auxiliary graph, where the data is just a boolean value that\n  // stores whether the vertex has been visited or not.\n  Graph<bool, E, EdgeType> visitorGraph;\n\n  // Copy the vertices (just the Id).\n  for (auto const &v : _graph.Vertices())\n    visitorGraph.AddVertex(\"\", false, v.first);\n\n  // Copy the edges (without data).\n  for (auto const &e : _graph.Edges())\n    visitorGraph.AddEdge(e.second.get().Vertices(), E());\n\n  std::vector<VertexId> visited;\n  std::stack<VertexId> pending({_from});\n\n  while (!pending.empty())\n  {\n    auto vId = pending.top();\n    pending.pop();\n\n    // The vertex hasn't been visited yet.\n    auto &vertex = visitorGraph.VertexFromId(vId);\n    if (!vertex.Data())\n    {\n      vertex.Data() = true;\n      visited.push_back(vId);\n    }\n\n    // Add more vertices to visit if they haven't been visited yet.\n    auto adjacents = visitorGraph.AdjacentsFrom(vId);\n    for (auto const &adj : adjacents)\n    {\n      vId = adj.first;\n      auto &vertex = visitorGraph.VertexFromId(vId);\n      if (!vertex.Data())\n        pending.push(vId);\n    }\n  }\n\n  return visited;\n}\n```\n", "markup": "markdown", "html": "<p>Yes, it's possible. In this example, you can populate a local graph based on <code>_graph</code> but replacing the user data with a boolean value. This can be used to store whether the vertex has been visited or not. E.g.:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">EdgeType</span><span class=\"o\">&gt;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">VertexId</span><span class=\"o\">&gt;</span> <span class=\"n\">DFS</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Graph</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">EdgeType</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">_graph</span><span class=\"p\">,</span>\n                                           <span class=\"k\">const</span> <span class=\"n\">VertexId</span> <span class=\"o\">&amp;</span><span class=\"n\">_from</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Create an auxiliary graph, where the data is just a boolean value that</span>\n  <span class=\"c1\">// stores whether the vertex has been visited or not.</span>\n  <span class=\"n\">Graph</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">EdgeType</span><span class=\"o\">&gt;</span> <span class=\"n\">visitorGraph</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Copy the vertices (just the Id).</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span><span class=\"nl\">v</span> <span class=\"p\">:</span> <span class=\"n\">_graph</span><span class=\"p\">.</span><span class=\"n\">Vertices</span><span class=\"p\">())</span>\n    <span class=\"n\">visitorGraph</span><span class=\"p\">.</span><span class=\"n\">AddVertex</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Copy the edges (without data).</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span><span class=\"nl\">e</span> <span class=\"p\">:</span> <span class=\"n\">_graph</span><span class=\"p\">.</span><span class=\"n\">Edges</span><span class=\"p\">())</span>\n    <span class=\"n\">visitorGraph</span><span class=\"p\">.</span><span class=\"n\">AddEdge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">().</span><span class=\"n\">Vertices</span><span class=\"p\">(),</span> <span class=\"n\">E</span><span class=\"p\">());</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">VertexId</span><span class=\"o\">&gt;</span> <span class=\"n\">visited</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">stack</span><span class=\"o\">&lt;</span><span class=\"n\">VertexId</span><span class=\"o\">&gt;</span> <span class=\"n\">pending</span><span class=\"p\">({</span><span class=\"n\">_from</span><span class=\"p\">});</span>\n\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pending</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">vId</span> <span class=\"o\">=</span> <span class=\"n\">pending</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span>\n    <span class=\"n\">pending</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// The vertex hasn&#39;t been visited yet.</span>\n    <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">vertex</span> <span class=\"o\">=</span> <span class=\"n\">visitorGraph</span><span class=\"p\">.</span><span class=\"n\">VertexFromId</span><span class=\"p\">(</span><span class=\"n\">vId</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vertex</span><span class=\"p\">.</span><span class=\"n\">Data</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">vertex</span><span class=\"p\">.</span><span class=\"n\">Data</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n      <span class=\"n\">visited</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">vId</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Add more vertices to visit if they haven&#39;t been visited yet.</span>\n    <span class=\"k\">auto</span> <span class=\"n\">adjacents</span> <span class=\"o\">=</span> <span class=\"n\">visitorGraph</span><span class=\"p\">.</span><span class=\"n\">AdjacentsFrom</span><span class=\"p\">(</span><span class=\"n\">vId</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span><span class=\"nl\">adj</span> <span class=\"p\">:</span> <span class=\"n\">adjacents</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">vId</span> <span class=\"o\">=</span> <span class=\"n\">adj</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">;</span>\n      <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">vertex</span> <span class=\"o\">=</span> <span class=\"n\">visitorGraph</span><span class=\"p\">.</span><span class=\"n\">VertexFromId</span><span class=\"p\">(</span><span class=\"n\">vId</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">vertex</span><span class=\"p\">.</span><span class=\"n\">Data</span><span class=\"p\">())</span>\n        <span class=\"n\">pending</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">vId</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">visited</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-05-11T17:32:01.679755+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/math/GraphAlgorithms.hh"}, "updated_on": "2017-05-11T17:32:01.683479+00:00", "type": "pullrequest_comment", "id": 36686692}