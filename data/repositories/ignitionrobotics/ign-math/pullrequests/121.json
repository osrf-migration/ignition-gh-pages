{"rendered": {"description": {"raw": "The inertial class has two sets of rotations that affect the moment of inertia matrix:\r\n\r\n* the `Inertial::pose` rotation\r\n* the rotation embedded in the MassMatrix\r\n\r\nThis PR adds functions for setting either of these rotations without affecting the moment of inertia in the base frame accessible from `Inertial::MOI()`.\r\n\r\n* `SetInertialRotation`: sets the pose rotation and multiplies the matrices accordingly\r\n* `SetMassMatrixRotation`: sets the rotation embedded in the MassMatrix. If an identity quaternion is passed, it will diagonalize the MassMatrix. One caveat is that all inertia matrices are symmetric with rotations of +-PI around any axis, and there are even more symmetries if there are repeated principal moments, so you aren't guaranteed to get the same rotation from `PrincipalAxesOffset` that you gave to this function (unless you diagonalize).\r\n\r\nBoth functions have tests. I also found a bug in `MassMatrix3` when calling `PrincipalAxesOffset` on a multiple of the identity matrix with a negative tolerance. I've added test coverage and fixed the bug.", "markup": "markdown", "html": "<p>The inertial class has two sets of rotations that affect the moment of inertia matrix:</p>\n<ul>\n<li>the <code>Inertial::pose</code> rotation</li>\n<li>the rotation embedded in the MassMatrix</li>\n</ul>\n<p>This PR adds functions for setting either of these rotations without affecting the moment of inertia in the base frame accessible from <code>Inertial::MOI()</code>.</p>\n<ul>\n<li><code>SetInertialRotation</code>: sets the pose rotation and multiplies the matrices accordingly</li>\n<li><code>SetMassMatrixRotation</code>: sets the rotation embedded in the MassMatrix. If an identity quaternion is passed, it will diagonalize the MassMatrix. One caveat is that all inertia matrices are symmetric with rotations of +-PI around any axis, and there are even more symmetries if there are repeated principal moments, so you aren't guaranteed to get the same rotation from <code>PrincipalAxesOffset</code> that you gave to this function (unless you diagonalize).</li>\n</ul>\n<p>Both functions have tests. I also found a bug in <code>MassMatrix3</code> when calling <code>PrincipalAxesOffset</code> on a multiple of the identity matrix with a negative tolerance. I've added test coverage and fixed the bug.</p>", "type": "rendered"}, "title": {"raw": "Set Inertial Rotations", "markup": "markdown", "html": "<p>Set Inertial Rotations</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The inertial class has two sets of rotations that affect the moment of inertia matrix:\r\n\r\n* the `Inertial::pose` rotation\r\n* the rotation embedded in the MassMatrix\r\n\r\nThis PR adds functions for setting either of these rotations without affecting the moment of inertia in the base frame accessible from `Inertial::MOI()`.\r\n\r\n* `SetInertialRotation`: sets the pose rotation and multiplies the matrices accordingly\r\n* `SetMassMatrixRotation`: sets the rotation embedded in the MassMatrix. If an identity quaternion is passed, it will diagonalize the MassMatrix. One caveat is that all inertia matrices are symmetric with rotations of +-PI around any axis, and there are even more symmetries if there are repeated principal moments, so you aren't guaranteed to get the same rotation from `PrincipalAxesOffset` that you gave to this function (unless you diagonalize).\r\n\r\nBoth functions have tests. I also found a bug in `MassMatrix3` when calling `PrincipalAxesOffset` on a multiple of the identity matrix with a negative tolerance. I've added test coverage and fixed the bug.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/pullrequests/121/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diffstat/ignitionrobotics/ign-math:2f7f097d35a0%0D1fe241c6909e?from_pullrequest_id=121"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/121/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/121.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/121/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/pullrequests/121/merge"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/121"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/121/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:2f7f097d35a0%0D1fe241c6909e?from_pullrequest_id=121"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/pullrequests/121/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/121/statuses_page=1.json"}}, "title": "Set Inertial Rotations", "close_source_branch": true, "reviewers": [], "id": 121, "destination": {"commit": {"hash": "1fe241c6909e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/commit/1fe241c6909e.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/commits/1fe241c6909e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "branch": {"name": "ign-math2"}}, "created_on": "2016-07-29T01:26:46.196627+00:00", "summary": {"raw": "The inertial class has two sets of rotations that affect the moment of inertia matrix:\r\n\r\n* the `Inertial::pose` rotation\r\n* the rotation embedded in the MassMatrix\r\n\r\nThis PR adds functions for setting either of these rotations without affecting the moment of inertia in the base frame accessible from `Inertial::MOI()`.\r\n\r\n* `SetInertialRotation`: sets the pose rotation and multiplies the matrices accordingly\r\n* `SetMassMatrixRotation`: sets the rotation embedded in the MassMatrix. If an identity quaternion is passed, it will diagonalize the MassMatrix. One caveat is that all inertia matrices are symmetric with rotations of +-PI around any axis, and there are even more symmetries if there are repeated principal moments, so you aren't guaranteed to get the same rotation from `PrincipalAxesOffset` that you gave to this function (unless you diagonalize).\r\n\r\nBoth functions have tests. I also found a bug in `MassMatrix3` when calling `PrincipalAxesOffset` on a multiple of the identity matrix with a negative tolerance. I've added test coverage and fixed the bug.", "markup": "markdown", "html": "<p>The inertial class has two sets of rotations that affect the moment of inertia matrix:</p>\n<ul>\n<li>the <code>Inertial::pose</code> rotation</li>\n<li>the rotation embedded in the MassMatrix</li>\n</ul>\n<p>This PR adds functions for setting either of these rotations without affecting the moment of inertia in the base frame accessible from <code>Inertial::MOI()</code>.</p>\n<ul>\n<li><code>SetInertialRotation</code>: sets the pose rotation and multiplies the matrices accordingly</li>\n<li><code>SetMassMatrixRotation</code>: sets the rotation embedded in the MassMatrix. If an identity quaternion is passed, it will diagonalize the MassMatrix. One caveat is that all inertia matrices are symmetric with rotations of +-PI around any axis, and there are even more symmetries if there are repeated principal moments, so you aren't guaranteed to get the same rotation from <code>PrincipalAxesOffset</code> that you gave to this function (unless you diagonalize).</li>\n</ul>\n<p>Both functions have tests. I also found a bug in <code>MassMatrix3</code> when calling <code>PrincipalAxesOffset</code> on a multiple of the identity matrix with a negative tolerance. I've added test coverage and fixed the bug.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fb09c5f36db0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/commit/fb09c5f36db0.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/commits/fb09c5f36db0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "branch": {"name": "inertial_rotations"}}, "comment_count": 6, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-08-02T18:20:23.848239+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2016-08-04T14:19:34.686914+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2016-08-08T14:41:30.787451+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2016-08-15T22:52:35.593187+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "2f7f097d35a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/commit/2f7f097d35a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/commits/2f7f097d35a0"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}