{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26835662.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26835662"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "Thanks for the contribution! This looks good to me.\n\nIt would be great to add a couple of tests as well, like [this](#!/ignitionrobotics/ign-math/src/ac3e1c68e7ec682b6425d10ac62fd0c357fdbfed/src/Helpers_TEST.cc?at=default&fileviewer=file-view-default#Helpers_TEST.cc-43).", "markup": "markdown", "html": "<p>Thanks for the contribution! This looks good to me.</p>\n<p>It would be great to add a couple of tests as well, like <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/ac3e1c68e7ec682b6425d10ac62fd0c357fdbfed/src/Helpers_TEST.cc?at=default&amp;fileviewer=file-view-default#Helpers_TEST.cc-43\" rel=\"nofollow\">this</a>.</p>", "type": "rendered"}, "created_on": "2016-11-15T16:24:24.382422+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2016-11-15T16:24:24.388275+00:00", "type": "pullrequest_comment", "id": 26835662}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26835982.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26835982"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "Here's a link to the Gazebo pull request: #!/ignitionrobotics/ign-math/src/ac3e1c68e7ec682b6425d10ac62fd0c357fdbfed/src/Helpers_TEST.cc?at=default&fileviewer=file-view-default#Helpers_TEST.cc-43\n\nI think it should be safe for this to go into the `ign-math2` branch", "markup": "markdown", "html": "<p>Here's a link to the Gazebo pull request: <a href=\"#!/ignitionrobotics/ign-math/src/ac3e1c68e7ec682b6425d10ac62fd0c357fdbfed/src/Helpers_TEST.cc?at=default&amp;fileviewer=file-view-default#Helpers_TEST.cc-43\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/src/ac3e1c68e7ec682b6425d10ac62fd0c357fdbfed/src/Helpers_TEST.cc?at=default&amp;fileviewer=file-view-default#Helpers_TEST.cc-43</a></p>\n<p>I think it should be safe for this to go into the <code>ign-math2</code> branch</p>", "type": "rendered"}, "created_on": "2016-11-15T16:27:39.779204+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2016-11-15T16:27:39.781864+00:00", "type": "pullrequest_comment", "id": 26835982}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26842719.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26842719"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "I'm not clear why these functions are needed. I believe the `<=` and `>=` operators work fine with floating point values.", "markup": "markdown", "html": "<p>I'm not clear why these functions are needed. I believe the <code>&lt;=</code> and <code>&gt;=</code> operators work fine with floating point values.</p>", "type": "rendered"}, "created_on": "2016-11-15T18:14:40.090872+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2016-11-15T18:14:40.095532+00:00", "type": "pullrequest_comment", "id": 26842719}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26844002.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26844002"}}, "parent": {"id": 26842719, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26842719.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26842719"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "I think they want to add a tolerance, but in that case I think it is clearer to literally add it to the expression:\n\n~~~\na <= b + 1e-6\n~~~", "markup": "markdown", "html": "<p>I think they want to add a tolerance, but in that case I think it is clearer to literally add it to the expression:</p>\n<div class=\"codehilite\"><pre><span></span>a &lt;= b + 1e-6\n</pre></div>", "type": "rendered"}, "created_on": "2016-11-15T18:38:34.761934+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2016-11-15T18:38:34.763771+00:00", "type": "pullrequest_comment", "id": 26844002}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26844152.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26844152"}}, "parent": {"id": 26844002, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26844002.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26844002"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "I agree.", "markup": "markdown", "html": "<p>I agree.</p>", "type": "rendered"}, "created_on": "2016-11-15T18:41:55.502883+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2016-11-15T18:41:55.504897+00:00", "type": "pullrequest_comment", "id": 26844152}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26877792.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26877792"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "In my opinion, we cannot say that the operators `<=` and `>=` works fine with floating point numbers. Let's take this example:\n\n```\n#!c++\n\n#include <iostream>\n\nint main()\n{\n    float f = 0.1f;\n    float sum;\n    sum = 0;\n\n    for (int i = 0; i < 10; ++i)\n        sum += f;\n    float product = f * 10;\n\n    if (sum <= product)\n        std::cout << \"sum <= product\" << std::endl;\n    else\n        std::cout << \"sum > product\" << std::endl;\n}\n```\nWe could expect to have \"sum <= product\", which is not what is produced when executing this code.\nA tolerance is actually mandatory in order to have results in line with arithmetic, and this is exactly for the same reason we use a tolerance in the `ignition::math::equal()` method.\nSo I believe that the presence of `lessOrEqual()` and `greaterOrEqual()` is as much justified as for `equal()`.\n\nThat being said, I agree that the implementation could be much simpler, like Steven suggested.", "markup": "markdown", "html": "<p>In my opinion, we cannot say that the operators <code>&lt;=</code> and <code>&gt;=</code> works fine with floating point numbers. Let's take this example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mf\">0.1f</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&lt;=</span> <span class=\"n\">product</span><span class=\"p\">)</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;sum &lt;= product&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;sum &gt; product&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>We could expect to have \"sum &lt;= product\", which is not what is produced when executing this code.\nA tolerance is actually mandatory in order to have results in line with arithmetic, and this is exactly for the same reason we use a tolerance in the <code>ignition::math::equal()</code> method.\nSo I believe that the presence of <code>lessOrEqual()</code> and <code>greaterOrEqual()</code> is as much justified as for <code>equal()</code>.</p>\n<p>That being said, I agree that the implementation could be much simpler, like Steven suggested.</p>", "type": "rendered"}, "created_on": "2016-11-16T09:55:23.622401+00:00", "user": {"display_name": "samuel lekieffre", "uuid": "{fb91c214-fb22-4bd8-9ecd-59fa5606f448}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D"}, "html": {"href": "https://bitbucket.org/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/711b8f132d9815416df59500328659f1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSL-4.png"}}, "nickname": "slekieffre", "type": "user", "account_id": "557058:0d0672e4-f62e-4297-b00a-3c73d652fb94"}, "updated_on": "2016-11-16T09:55:23.695997+00:00", "type": "pullrequest_comment", "id": 26877792}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26995592.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26995592"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "I'll be pedantic for two seconds. The `<=` and `>=` operators do work as expected. The problem is associated with floating point representation, not the comparison operators. You could (correctly) make the same argument for `==`. Equality tends to elicit a more pronounced error, and I do get your point about the `<=` and `>=` operators.\n\nAlso, a tolerance can be dangerous and should not be considered mandatory. A tolerance value should be in line with range of values that are to be compared.\n\nThis pull request does remind me that a better name should be used for `equal`. Can you change the function names to `lessOrNearEqual` and `greaterOrNearEqual`?", "markup": "markdown", "html": "<p>I'll be pedantic for two seconds. The <code>&lt;=</code> and <code>&gt;=</code> operators do work as expected. The problem is associated with floating point representation, not the comparison operators. You could (correctly) make the same argument for <code>==</code>. Equality tends to elicit a more pronounced error, and I do get your point about the <code>&lt;=</code> and <code>&gt;=</code> operators.</p>\n<p>Also, a tolerance can be dangerous and should not be considered mandatory. A tolerance value should be in line with range of values that are to be compared.</p>\n<p>This pull request does remind me that a better name should be used for <code>equal</code>. Can you change the function names to <code>lessOrNearEqual</code> and <code>greaterOrNearEqual</code>?</p>", "type": "rendered"}, "created_on": "2016-11-17T19:58:47.257607+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2016-11-17T19:58:47.259497+00:00", "type": "pullrequest_comment", "id": 26995592}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/27027307.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-27027307"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "OK, I pushed a new commit that changes the method names as you suggested.", "markup": "markdown", "html": "<p>OK, I pushed a new commit that changes the method names as you suggested.</p>", "type": "rendered"}, "created_on": "2016-11-18T10:39:33.600244+00:00", "user": {"display_name": "samuel lekieffre", "uuid": "{fb91c214-fb22-4bd8-9ecd-59fa5606f448}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D"}, "html": {"href": "https://bitbucket.org/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/711b8f132d9815416df59500328659f1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSL-4.png"}}, "nickname": "slekieffre", "type": "user", "account_id": "557058:0d0672e4-f62e-4297-b00a-3c73d652fb94"}, "updated_on": "2016-11-18T10:39:33.633826+00:00", "type": "pullrequest_comment", "id": 27027307}], "page": 1, "size": 8}