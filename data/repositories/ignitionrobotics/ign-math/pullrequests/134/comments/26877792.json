{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134/comments/26877792.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134/_/diff#comment-26877792"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 134, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/134.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/134"}}, "title": "Add new methods for floating numbers: lessOrEqual and greaterOrEqual"}, "content": {"raw": "In my opinion, we cannot say that the operators `<=` and `>=` works fine with floating point numbers. Let's take this example:\n\n```\n#!c++\n\n#include <iostream>\n\nint main()\n{\n    float f = 0.1f;\n    float sum;\n    sum = 0;\n\n    for (int i = 0; i < 10; ++i)\n        sum += f;\n    float product = f * 10;\n\n    if (sum <= product)\n        std::cout << \"sum <= product\" << std::endl;\n    else\n        std::cout << \"sum > product\" << std::endl;\n}\n```\nWe could expect to have \"sum <= product\", which is not what is produced when executing this code.\nA tolerance is actually mandatory in order to have results in line with arithmetic, and this is exactly for the same reason we use a tolerance in the `ignition::math::equal()` method.\nSo I believe that the presence of `lessOrEqual()` and `greaterOrEqual()` is as much justified as for `equal()`.\n\nThat being said, I agree that the implementation could be much simpler, like Steven suggested.", "markup": "markdown", "html": "<p>In my opinion, we cannot say that the operators <code>&lt;=</code> and <code>&gt;=</code> works fine with floating point numbers. Let's take this example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mf\">0.1f</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&lt;=</span> <span class=\"n\">product</span><span class=\"p\">)</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;sum &lt;= product&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;sum &gt; product&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>We could expect to have \"sum &lt;= product\", which is not what is produced when executing this code.\nA tolerance is actually mandatory in order to have results in line with arithmetic, and this is exactly for the same reason we use a tolerance in the <code>ignition::math::equal()</code> method.\nSo I believe that the presence of <code>lessOrEqual()</code> and <code>greaterOrEqual()</code> is as much justified as for <code>equal()</code>.</p>\n<p>That being said, I agree that the implementation could be much simpler, like Steven suggested.</p>", "type": "rendered"}, "created_on": "2016-11-16T09:55:23.622401+00:00", "user": {"display_name": "samuel lekieffre", "uuid": "{fb91c214-fb22-4bd8-9ecd-59fa5606f448}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D"}, "html": {"href": "https://bitbucket.org/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/711b8f132d9815416df59500328659f1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSL-4.png"}}, "nickname": "slekieffre", "type": "user", "account_id": "557058:0d0672e4-f62e-4297-b00a-3c73d652fb94"}, "updated_on": "2016-11-16T09:55:23.695997+00:00", "type": "pullrequest_comment", "id": 26877792}