{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/244/comments/60913487.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/244/_/diff#comment-60913487"}}, "parent": {"id": 60911780, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/244/comments/60911780.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/244/_/diff#comment-60911780"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 244, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/244.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/244"}}, "title": "Remove private data constructor"}, "content": {"raw": "I think it should be okay to merge.\n\nI do have some concerns about the fact that the implementation class definition is exposed to consumers. It's not entirely clear to me whether that could result in ABI conflicts if a consumer's library compiles a definition of `MovingWindowFilterPrivate<T>` and then we change the definition of that implementation class some time later.\n\nBasically, a templated class gets defined in each consumer that uses it, unless we [explicitly instantiate](http://en.cppreference.com/w/cpp/language/class_template#Explicit_instantiation) it. Explicit instantiation would make the PIMPL pattern safe for templates.\n\nHowever, if we only allow explicit instantiations, then this class template can only support a specific list of template arguments that we decide on ahead of time. For example, we might decide to explicitly instantiate `int`, `double`, `float`. But then the library would be unable to support `Vector2d`, `Vector2f`, `Vector3d`, `Vector3f`, etc, even though the class template should be perfectly able to support those template arguments.\n\nLinkers are kind of tricky, confusing, and not standardized, so it's not clear to me exactly how dangerous this concern is. I think if this turns out to be a serious concern, we can fix it later, and just move ahead with it as-is for now.", "markup": "markdown", "html": "<p>I think it should be okay to merge.</p>\n<p>I do have some concerns about the fact that the implementation class definition is exposed to consumers. It's not entirely clear to me whether that could result in ABI conflicts if a consumer's library compiles a definition of <code>MovingWindowFilterPrivate&lt;T&gt;</code> and then we change the definition of that implementation class some time later.</p>\n<p>Basically, a templated class gets defined in each consumer that uses it, unless we <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/language/class_template#Explicit_instantiation\" rel=\"nofollow\">explicitly instantiate</a> it. Explicit instantiation would make the PIMPL pattern safe for templates.</p>\n<p>However, if we only allow explicit instantiations, then this class template can only support a specific list of template arguments that we decide on ahead of time. For example, we might decide to explicitly instantiate <code>int</code>, <code>double</code>, <code>float</code>. But then the library would be unable to support <code>Vector2d</code>, <code>Vector2f</code>, <code>Vector3d</code>, <code>Vector3f</code>, etc, even though the class template should be perfectly able to support those template arguments.</p>\n<p>Linkers are kind of tricky, confusing, and not standardized, so it's not clear to me exactly how dangerous this concern is. I think if this turns out to be a serious concern, we can fix it later, and just move ahead with it as-is for now.</p>", "type": "rendered"}, "created_on": "2018-04-06T18:27:50.483496+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-04-06T18:29:23.136841+00:00", "type": "pullrequest_comment", "id": 60913487}