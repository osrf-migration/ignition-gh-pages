{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82/comments/16738813.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:None..None?path=src%2FMassMatrix3_TEST.cc"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82/_/diff#comment-16738813"}}, "parent": {"id": 16427601, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82/comments/16427601.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82/_/diff#comment-16427601"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 82, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82"}}, "title": "MassMatrix::PrincipalAxesOffset (eigenvectors of inertia matrix)"}, "content": {"raw": "+1 on new explicitly relative or numerically equal functions, issue #43.\n\nSide note issue #42 possible improvements to `Vector3::Equal` so it can accept vector of tolerances.\n\nFor the [current test](#!/ignitionrobotics/ign-math/src/e7b5cfb5f3f9/src/MassMatrix3_TEST.cc?fileviewer=file-view-default#MassMatrix3_TEST.cc-336), we can be be more specific with absolute value comparisons and list out each element while the two new issues are being worked on?\n\n~~~\n    const math::Vector3d Ieigen(0.98, 1e8-1e3, 1e8+1e3);\n    // the accuracy is approximately 2e-2\n    EXPECT_TRUE(m.PrincipalMoments().Equal(Ieigen, 2.5e-2));\n    EXPECT_FALSE(m.PrincipalMoments().Equal(Ieigen, 1.5e-2));\n~~~\n\nbecomes (pseudo-code):\n\n~~~\n    const math::Vector3d Ieigen(0.98, 1e8-1e3, 1e8+1e3);\n    // the accuracy is approximately 2e-2, for example matlab shows:\n    //      0.980000199802004\n    //      99999000\n    //      100001000.02\n    EXPECT_TRUE(math::equal(m.PrincipalMoments()[0], Ieigen[0], 0.000001));\n    EXPECT_TRUE(math::equal(m.PrincipalMoments()[1], Ieigen[1], 0.1));\n    EXPECT_TRUE(math::equal(m.PrincipalMoments()[2], Ieigen[2], 0.1));\n    EXPECT_FALSE(math::equal(m.PrincipalMoments()[0], Ieigen[0], 0.0000001));\n    EXPECT_FALSE(math::equal(m.PrincipalMoments()[1], Ieigen[1], 0.01));\n    EXPECT_FALSE(math::equal(m.PrincipalMoments()[2], Ieigen[2], 0.01));\n~~~", "markup": "markdown", "html": "<p>+1 on new explicitly relative or numerically equal functions, issue <a href=\"#!/ignitionrobotics/ign-math/issues/43/add-numerically-equal-and-relatively-equal\" rel=\"nofollow\" title=\"Add Numerically Equal and Relatively Equal comparisons in math helper class\" class=\"ap-connect-link\">#43</a>.</p>\n<p>Side note issue <a href=\"#!/ignitionrobotics/ign-math/issues/42/allow-vector3-equal-to-use-vector-of\" rel=\"nofollow\" title=\"Allow Vector3::Equal to use vector of tolerances\" class=\"ap-connect-link\">#42</a> possible improvements to <code>Vector3::Equal</code> so it can accept vector of tolerances.</p>\n<p>For the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/e7b5cfb5f3f9/src/MassMatrix3_TEST.cc?fileviewer=file-view-default#MassMatrix3_TEST.cc-336\" rel=\"nofollow\">current test</a>, we can be be more specific with absolute value comparisons and list out each element while the two new issues are being worked on?</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">const</span> <span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Vector3d</span> <span class=\"nt\">Ieigen</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">98</span><span class=\"o\">,</span> <span class=\"nt\">1e8-1e3</span><span class=\"o\">,</span> <span class=\"nt\">1e8</span><span class=\"o\">+</span><span class=\"nt\">1e3</span><span class=\"o\">);</span>\n    <span class=\"o\">//</span> <span class=\"nt\">the</span> <span class=\"nt\">accuracy</span> <span class=\"nt\">is</span> <span class=\"nt\">approximately</span> <span class=\"nt\">2e-2</span>\n    <span class=\"nt\">EXPECT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">Equal</span><span class=\"o\">(</span><span class=\"nt\">Ieigen</span><span class=\"o\">,</span> <span class=\"nt\">2</span><span class=\"p\">.</span><span class=\"nc\">5e-2</span><span class=\"o\">));</span>\n    <span class=\"nt\">EXPECT_FALSE</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">Equal</span><span class=\"o\">(</span><span class=\"nt\">Ieigen</span><span class=\"o\">,</span> <span class=\"nt\">1</span><span class=\"p\">.</span><span class=\"nc\">5e-2</span><span class=\"o\">));</span>\n</pre></div>\n\n\n<p>becomes (pseudo-code):</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">const</span> <span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Vector3d</span> <span class=\"nt\">Ieigen</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">98</span><span class=\"o\">,</span> <span class=\"nt\">1e8-1e3</span><span class=\"o\">,</span> <span class=\"nt\">1e8</span><span class=\"o\">+</span><span class=\"nt\">1e3</span><span class=\"o\">);</span>\n    <span class=\"o\">//</span> <span class=\"nt\">the</span> <span class=\"nt\">accuracy</span> <span class=\"nt\">is</span> <span class=\"nt\">approximately</span> <span class=\"nt\">2e-2</span><span class=\"o\">,</span> <span class=\"nt\">for</span> <span class=\"nt\">example</span> <span class=\"nt\">matlab</span> <span class=\"nt\">shows</span><span class=\"o\">:</span>\n    <span class=\"o\">//</span>      <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">980000199802004</span>\n    <span class=\"o\">//</span>      <span class=\"nt\">99999000</span>\n    <span class=\"o\">//</span>      <span class=\"nt\">100001000</span><span class=\"p\">.</span><span class=\"nc\">02</span>\n    <span class=\"nt\">EXPECT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">equal</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"cp\">[</span><span class=\"mi\">0</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">Ieigen</span><span class=\"cp\">[</span><span class=\"mi\">0</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">000001</span><span class=\"o\">));</span>\n    <span class=\"nt\">EXPECT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">equal</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"cp\">[</span><span class=\"mi\">1</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">Ieigen</span><span class=\"cp\">[</span><span class=\"mi\">1</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">1</span><span class=\"o\">));</span>\n    <span class=\"nt\">EXPECT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">equal</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"cp\">[</span><span class=\"mi\">2</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">Ieigen</span><span class=\"cp\">[</span><span class=\"mi\">2</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">1</span><span class=\"o\">));</span>\n    <span class=\"nt\">EXPECT_FALSE</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">equal</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"cp\">[</span><span class=\"mi\">0</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">Ieigen</span><span class=\"cp\">[</span><span class=\"mi\">0</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">0000001</span><span class=\"o\">));</span>\n    <span class=\"nt\">EXPECT_FALSE</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">equal</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"cp\">[</span><span class=\"mi\">1</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">Ieigen</span><span class=\"cp\">[</span><span class=\"mi\">1</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">01</span><span class=\"o\">));</span>\n    <span class=\"nt\">EXPECT_FALSE</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">equal</span><span class=\"o\">(</span><span class=\"nt\">m</span><span class=\"p\">.</span><span class=\"nc\">PrincipalMoments</span><span class=\"o\">()</span><span class=\"cp\">[</span><span class=\"mi\">2</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">Ieigen</span><span class=\"cp\">[</span><span class=\"mi\">2</span><span class=\"cp\">]</span><span class=\"o\">,</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">01</span><span class=\"o\">));</span>\n</pre></div>", "type": "rendered"}, "created_on": "2016-04-04T19:17:36.887313+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "inline": {"to": null, "from": null, "outdated": false, "path": "src/MassMatrix3_TEST.cc"}, "updated_on": "2016-04-04T19:28:59.737618+00:00", "type": "pullrequest_comment", "id": 16738813}