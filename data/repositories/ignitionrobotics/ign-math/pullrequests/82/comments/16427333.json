{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82/comments/16427333.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:None..None?path=src%2FMassMatrix3_TEST.cc"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82/_/diff#comment-16427333"}}, "parent": {"id": 16418570, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82/comments/16418570.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82/_/diff#comment-16418570"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 82, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82"}}, "title": "MassMatrix::PrincipalAxesOffset (eigenvectors of inertia matrix)"}, "content": {"raw": "Simbody has a whole infrastructure for comparing vectors and matrices, description [here](https://simtk.org/api_docs/simbody/latest/group__RegressionTesting.html), starting with a set of overloaded scalar comparison methods called `numericallyEqual()`. The vector and matrix ones use the scalar ones elementwise. [Here](https://github.com/simbody/simbody/blob/master/SimTKcommon/include/SimTKcommon/Testing.h#L200) is the double version:\n```c++\n    // Scale by the magnitude of the quantities being compared, so that we don't\n    // ask for unreasonable precision. For magnitudes near zero, we'll be satisfied\n    // if both are very small without demanding that they must also be relatively\n    // close. That is, we use a relative tolerance for big numbers and an absolute\n    // tolerance for small ones.\n    static bool numericallyEqual(double v1, double v2, int n, double tol=defTol<double>()) {\n        const double scale = n*std::max(std::max(std::abs(v1), std::abs(v2)), 1.0);\n        return std::abs(v1-v2) < scale*(double)tol;\n    }\n```\n\n[Here](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition) is an article and floating point comparisons that was referenced from GoogleTest, which uses a similar method. \n\n", "markup": "markdown", "html": "<p>Simbody has a whole infrastructure for comparing vectors and matrices, description <a data-is-external-link=\"true\" href=\"https://simtk.org/api_docs/simbody/latest/group__RegressionTesting.html\" rel=\"nofollow\">here</a>, starting with a set of overloaded scalar comparison methods called <code>numericallyEqual()</code>. The vector and matrix ones use the scalar ones elementwise. <a data-is-external-link=\"true\" href=\"https://github.com/simbody/simbody/blob/master/SimTKcommon/include/SimTKcommon/Testing.h#L200\" rel=\"nofollow\">Here</a> is the double version:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>    <span class=\"c1\">// Scale by the magnitude of the quantities being compared, so that we don&#39;t</span>\n    <span class=\"c1\">// ask for unreasonable precision. For magnitudes near zero, we&#39;ll be satisfied</span>\n    <span class=\"c1\">// if both are very small without demanding that they must also be relatively</span>\n    <span class=\"c1\">// close. That is, we use a relative tolerance for big numbers and an absolute</span>\n    <span class=\"c1\">// tolerance for small ones.</span>\n    <span class=\"k\">static</span> <span class=\"kt\">bool</span> <span class=\"nf\">numericallyEqual</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"n\">defTol</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)),</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"o\">-</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">scale</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)</span><span class=\"n\">tol</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p><a data-is-external-link=\"true\" href=\"https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition\" rel=\"nofollow\">Here</a> is an article and floating point comparisons that was referenced from GoogleTest, which uses a similar method. </p>", "type": "rendered"}, "created_on": "2016-03-29T23:53:59.195469+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "inline": {"to": null, "from": null, "outdated": false, "path": "src/MassMatrix3_TEST.cc"}, "updated_on": "2016-03-29T23:53:59.318951+00:00", "type": "pullrequest_comment", "id": 16427333}