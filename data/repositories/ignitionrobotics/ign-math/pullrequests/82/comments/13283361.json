{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82/comments/13283361.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82/_/diff#comment-13283361"}}, "parent": {"id": 13249668, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82/comments/13249668.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82/_/diff#comment-13249668"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 82, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/82.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/82"}}, "title": "MassMatrix::PrincipalAxesOffset (eigenvectors of inertia matrix)"}, "content": {"raw": "I whipped up a quick test in 02b152cdb00e (branch `mass_matrix_part3_eigen`). It searches for Eigen as an optional dependency, and if it's found, it builds an optional test.\n\nThe example can solve two different matrices, one of which is a pathological case with an eigenvalue ratio over 10^40. The matrices are solved with the algorithm proposed here, along with Eigen's direct and iterative methods. In brief testing, it looks like the speed depends on which matrix is being solved. For example, the MassMatrix3 algorithm can skip some branches when there is a repeated eigenvalue and |f1| is small. There are many more code branches required, however when there are no repeated eigenvalues and neither |f1| and |f2| are small. Sometimes this code is faster, sometimes it is slower.", "markup": "markdown", "html": "<p>I whipped up a quick test in <a href=\"#!/ignitionrobotics/ign-math/commits/02b152cdb00e\" rel=\"nofollow\" class=\"ap-connect-link\">02b152cdb00e</a> (branch <code>mass_matrix_part3_eigen</code>). It searches for Eigen as an optional dependency, and if it's found, it builds an optional test.</p>\n<p>The example can solve two different matrices, one of which is a pathological case with an eigenvalue ratio over 10^40. The matrices are solved with the algorithm proposed here, along with Eigen's direct and iterative methods. In brief testing, it looks like the speed depends on which matrix is being solved. For example, the MassMatrix3 algorithm can skip some branches when there is a repeated eigenvalue and |f1| is small. There are many more code branches required, however when there are no repeated eigenvalues and neither |f1| and |f2| are small. Sometimes this code is faster, sometimes it is slower.</p>", "type": "rendered"}, "created_on": "2016-01-08T01:30:01.449748+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2016-01-08T01:30:01.451555+00:00", "type": "pullrequest_comment", "id": 13283361}