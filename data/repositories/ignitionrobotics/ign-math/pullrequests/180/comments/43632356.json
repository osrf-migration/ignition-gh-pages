{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/180/comments/43632356.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/diff/ignitionrobotics/ign-math:53f87a2dc44f..6639799c2e1b?path=src%2FCMakeLists.txt"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/180/_/diff#comment-43632356"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 180, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/pullrequests/180.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/pull-requests/180"}}, "title": "C14"}, "content": {"raw": "Just to follow up this old comment, in CMake 3.5 is possible to enable C++14 mode for this library and all the downstream library that use it with: \n~~~\ntarget_compile_features(${PROJECT_LIBRARY_TARGET_NAME} PUBLIC cxx_attribute_deprecated)\n~~~\nI selected `cxx_attribute_deprecated` just because it is a random feature available only in C++14 . Since CMake 3.8 this can be made more explicit using the `cxx_std_14` metafeature. \n\nBeside being fully multiplatform, he main advantage of this over exposing directly the C++14 flag in the public compile options is that you are not forcing the downstream project to use **exactly** C++14, but you leavee to the downstream project the freedom to use (for example) C++17 . Furthermore, it is more convenient when you use multiple libraries, as CMake will take care of selecting automatically the correct standard to use, rather than just polluting the compilation flags of all different standard compilation flags.", "markup": "markdown", "html": "<p>Just to follow up this old comment, in CMake 3.5 is possible to enable C++14 mode for this library and all the downstream library that use it with: </p>\n<div class=\"codehilite\"><pre><span></span>target_compile_features(<span class=\"cp\">${</span><span class=\"n\">PROJECT_LIBRARY_TARGET_NAME</span><span class=\"cp\">}</span> PUBLIC cxx_attribute_deprecated)\n</pre></div>\n\n\n<p>I selected <code>cxx_attribute_deprecated</code> just because it is a random feature available only in C++14 . Since CMake 3.8 this can be made more explicit using the <code>cxx_std_14</code> metafeature. </p>\n<p>Beside being fully multiplatform, he main advantage of this over exposing directly the C++14 flag in the public compile options is that you are not forcing the downstream project to use <strong>exactly</strong> C++14, but you leavee to the downstream project the freedom to use (for example) C++17 . Furthermore, it is more convenient when you use multiple libraries, as CMake will take care of selecting automatically the correct standard to use, rather than just polluting the compilation flags of all different standard compilation flags.</p>", "type": "rendered"}, "created_on": "2017-08-25T20:46:19.594748+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "inline": {"to": 61, "from": null, "outdated": true, "path": "src/CMakeLists.txt"}, "updated_on": "2017-08-25T20:46:58.658161+00:00", "type": "pullrequest_comment", "id": 43632356}