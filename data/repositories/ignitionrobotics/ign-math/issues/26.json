{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/26/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/26.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/26/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/26/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/26/lines-line-segments-have-an-implicit"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/26/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Lines (line segments) have an implicit direction", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The current implementation of `Line2` (which are actually line segments, i.e. not infinite) has implicit start and end points. \r\n\r\nThe [equality operator](#!/ignitionrobotics/ign-math/src/b14fb1895d109070408cbdf914566be2240fa6e0/include/ignition/math/Line2.hh?at=default#cl-272) for example checks if `lineA->pts[0] == lineB->pts[0] && lineA->pts[1] == lineB->pts[1]`, but not if `lineA->pts[0] == lineB->pts[1] && lineA->pts[1] == lineB->pts[0]`.\r\n\r\nIs that done on purpose, that is, we want the start and end points of a line to mean something, or is it something which was overlooked?", "markup": "markdown", "html": "<p>The current implementation of <code>Line2</code> (which are actually line segments, i.e. not infinite) has implicit start and end points. </p>\n<p>The <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/b14fb1895d109070408cbdf914566be2240fa6e0/include/ignition/math/Line2.hh?at=default#cl-272\" rel=\"nofollow\">equality operator</a> for example checks if <code>lineA-&gt;pts[0] == lineB-&gt;pts[0] &amp;&amp; lineA-&gt;pts[1] == lineB-&gt;pts[1]</code>, but not if <code>lineA-&gt;pts[0] == lineB-&gt;pts[1] &amp;&amp; lineA-&gt;pts[1] == lineB-&gt;pts[0]</code>.</p>\n<p>Is that done on purpose, that is, we want the start and end points of a line to mean something, or is it something which was overlooked?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2015-06-29T21:42:12.503910+00:00", "milestone": null, "updated_on": "2015-06-29T21:42:12.503910+00:00", "type": "issue", "id": 26}