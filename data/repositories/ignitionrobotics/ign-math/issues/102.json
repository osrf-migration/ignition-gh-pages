{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/102/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/102.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/102/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/102/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/102/add-vector-absmax-and-absmin"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/102/vote"}}, "reporter": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "title": "Add Vector::AbsMax and AbsMin", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nBasically, I\u2019d like to add a function that would do the same as\r\n\r\n```\r\nmath::Vector3d v = ...;\r\nv.Abs().Max()\r\nv.Abs().Min()\r\n```\r\n\r\nbut without the unnecessary cost for creating new objects.\r\n\r\n# Motivation\r\n\r\nSometimes one is not interested in positiveness/negativeness of the values in a vector, but just in their magnitude.\r\n\r\n# Describe alternatives you've considered\r\n\r\nOne can use the Abs\\(\\).Max\\(\\) chain, but that leads to unncessary temporary object construction \\(unless the compiler optimizes it very well\\).\r\n\r\nI\u2019m not really sure about the name of the new methods, though. Alternatively, MaxMagnitude/MinMagnitude, MaxAbs/MinAbs\u2026\r\n\r\n# Additional context\r\n\r\n\u200c", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>Basically, I\u2019d like to add a function that would do the same as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Vector3d</span> <span class=\"nt\">v</span> <span class=\"o\">=</span> <span class=\"o\">...;</span>\n<span class=\"nt\">v</span><span class=\"p\">.</span><span class=\"nc\">Abs</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">Max</span><span class=\"o\">()</span>\n<span class=\"nt\">v</span><span class=\"p\">.</span><span class=\"nc\">Abs</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">Min</span><span class=\"o\">()</span>\n</pre></div>\n\n\n<p>but without the unnecessary cost for creating new objects.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>Sometimes one is not interested in positiveness/negativeness of the values in a vector, but just in their magnitude.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>One can use the Abs().Max() chain, but that leads to unncessary temporary object construction (unless the compiler optimizes it very well).</p>\n<p>I\u2019m not really sure about the name of the new methods, though. Alternatively, MaxMagnitude/MinMagnitude, MaxAbs/MinAbs\u2026</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>\u200c</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-10-02T09:31:32.130498+00:00", "milestone": null, "updated_on": "2020-03-22T12:44:47.807900+00:00", "type": "issue", "id": 102}