{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/79/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/79.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/79/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/79/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/79/graph-indegree-and-incidentsto-are-slower"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/79/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Graph::InDegree and IncidentsTo are slower than OutDegree and IncidentsFrom", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The `Graph` class uses an [adjacency list](#!/ignitionrobotics/ign-math/src/9e81045e43342db8a910dfe76729d0b22ffa4e68/include/ignition/math/graph/Graph.hh?fileviewer=file-view-default#Graph.hh-688:693) internally to assist with computations. This is stored internally as a map of Edges departing from each Vertex. This allows the `IncidentsFrom` and `OutDegree` functions to [look up a list of edges directly given a vertex id](#!/ignitionrobotics/ign-math/src/9e81045e43342db8a910dfe76729d0b22ffa4e68/include/ignition/math/graph/Graph.hh?fileviewer=file-view-default#Graph.hh-425:435).\r\n\r\nThere is no equivalent data structure for storing a list of edges arriving at a given vertex, however. This means that `IncidentsTo` and `InDegree` need to [iterate over all vertices and then all edges](#!/ignitionrobotics/ign-math/src/9e81045e43342db8a910dfe76729d0b22ffa4e68/include/ignition/math/graph/Graph.hh?fileviewer=file-view-default#Graph.hh-425:435) to see if any of those edges arrive at the specified vertex.\r\n\r\nI've added a test that illustrates this performance difference for graphs with large numbers of nodes in branch `edgeless_performance_test` (7bf2e007e43e). These test cases instantiates a graph with many vertices and no edges, then call `InDegree` and `OutDegree` for each vertex, expecting 0, since there are no edges. The test case that calls `InDegree` is much slower than `OutDegree`:\r\n\r\n~~~\r\n# DirectedEdge\r\n[ RUN      ] GraphTestFixture/0.EdgelessInDegree\r\n[       OK ] GraphTestFixture/0.EdgelessInDegree (936 ms)\r\n[ RUN      ] GraphTestFixture/0.EdgelessOutDegree\r\n[       OK ] GraphTestFixture/0.EdgelessOutDegree (8 ms)\r\n~~~\r\n\r\n~~~\r\n# UndirectedEdge\r\n[ RUN      ] GraphTestFixture/1.EdgelessInDegree\r\n[       OK ] GraphTestFixture/1.EdgelessInDegree (1270 ms)\r\n[ RUN      ] GraphTestFixture/1.EdgelessOutDegree\r\n[       OK ] GraphTestFixture/1.EdgelessOutDegree (8 ms)\r\n~~~\r\n\r\nFor cases when a graph with directed edges represents the kinematics of a multibody system with vertices as Links and edges as Joints, the `IncidentsTo` function is equivalent to `GetParentJoints`, which is used in many places in gazebo physics.\r\n\r\nThis is an issue of performance not correctness, so it may not be a priority, but I wanted to mention it.", "markup": "markdown", "html": "<p>The <code>Graph</code> class uses an <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/9e81045e43342db8a910dfe76729d0b22ffa4e68/include/ignition/math/graph/Graph.hh?fileviewer=file-view-default#Graph.hh-688:693\" rel=\"nofollow\">adjacency list</a> internally to assist with computations. This is stored internally as a map of Edges departing from each Vertex. This allows the <code>IncidentsFrom</code> and <code>OutDegree</code> functions to <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/9e81045e43342db8a910dfe76729d0b22ffa4e68/include/ignition/math/graph/Graph.hh?fileviewer=file-view-default#Graph.hh-425:435\" rel=\"nofollow\">look up a list of edges directly given a vertex id</a>.</p>\n<p>There is no equivalent data structure for storing a list of edges arriving at a given vertex, however. This means that <code>IncidentsTo</code> and <code>InDegree</code> need to <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/9e81045e43342db8a910dfe76729d0b22ffa4e68/include/ignition/math/graph/Graph.hh?fileviewer=file-view-default#Graph.hh-425:435\" rel=\"nofollow\">iterate over all vertices and then all edges</a> to see if any of those edges arrive at the specified vertex.</p>\n<p>I've added a test that illustrates this performance difference for graphs with large numbers of nodes in branch <code>edgeless_performance_test</code> (<a href=\"#!/ignitionrobotics/ign-math/commits/7bf2e007e43e\" rel=\"nofollow\" class=\"ap-connect-link\">7bf2e007e43e</a>). These test cases instantiates a graph with many vertices and no edges, then call <code>InDegree</code> and <code>OutDegree</code> for each vertex, expecting 0, since there are no edges. The test case that calls <code>InDegree</code> is much slower than <code>OutDegree</code>:</p>\n<div class=\"codehilite\"><pre><span></span># DirectedEdge\n[ RUN      ] GraphTestFixture/0.EdgelessInDegree\n[       OK ] GraphTestFixture/0.EdgelessInDegree (936 ms)\n[ RUN      ] GraphTestFixture/0.EdgelessOutDegree\n[       OK ] GraphTestFixture/0.EdgelessOutDegree (8 ms)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span># UndirectedEdge\n[ RUN      ] GraphTestFixture/1.EdgelessInDegree\n[       OK ] GraphTestFixture/1.EdgelessInDegree (1270 ms)\n[ RUN      ] GraphTestFixture/1.EdgelessOutDegree\n[       OK ] GraphTestFixture/1.EdgelessOutDegree (8 ms)\n</pre></div>\n\n\n<p>For cases when a graph with directed edges represents the kinematics of a multibody system with vertices as Links and edges as Joints, the <code>IncidentsTo</code> function is equivalent to <code>GetParentJoints</code>, which is used in many places in gazebo physics.</p>\n<p>This is an issue of performance not correctness, so it may not be a priority, but I wanted to mention it.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-09-06T19:30:15.745492+00:00", "milestone": null, "updated_on": "2017-09-12T23:22:31.932508+00:00", "type": "issue", "id": 79}