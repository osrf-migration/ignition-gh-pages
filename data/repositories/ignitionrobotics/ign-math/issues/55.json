{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/55/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/55.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/55/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/55/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/55/brainstorming-strong-er-typed-primitives"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/55/vote"}}, "reporter": {"display_name": "Davide Faconti", "uuid": "{3bbc1820-fdbe-4162-b25e-fab777cc0f8d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3bbc1820-fdbe-4162-b25e-fab777cc0f8d%7D"}, "html": {"href": "https://bitbucket.org/%7B3bbc1820-fdbe-4162-b25e-fab777cc0f8d%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:1062128f-7772-4ea3-89d5-5ef7858df793/e350d3ea-077e-4a95-b81c-d41dc0012942/128"}}, "nickname": "facontidavide", "type": "user", "account_id": "557058:1062128f-7772-4ea3-89d5-5ef7858df793"}, "title": "Brainstorming: strong(er) typed primitives with more semantic", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Hi,\r\nrecently in the C++ community we can notice a tendency toward strong types to avoid bugs at compilation time.\r\nGood examples are Boost::units and std::chrono.\r\n\r\nIn std::chrono there is a strong separation in terms of types between timepoint and duration.\r\nSome operations are permitted while others aren't; casting must be explicit.\r\n\r\nfor instance:\r\n\r\n     timepoint +/- duration = timepoint\r\n     duration +/- duration = duration\r\n     timepoint - timepoint = duration\r\n     timepoint + timepoint = won't compile\r\n\r\nThe same approach in terms of strong semantic can be applied to types such as Point3D/Vector3D or CoordinateFrame/HomogenousTransform3D (we might find better names).\r\n\r\n     Point3D +/- Vector3D = Point3D\r\n     Vector3D +/- Vector3D = Vector3D\r\n     Point3D - Point3D = Vector3D\r\n     Point3D + Point3D = won't compile\r\n\r\nI believe that this enhancement would be very interesting and it is the typical \"zero-overhead abstraction\" that is so popular nowadays.\r\n\r\nWhat do you think?\r\n\r\n\r\n\r\n", "markup": "markdown", "html": "<p>Hi,\nrecently in the C++ community we can notice a tendency toward strong types to avoid bugs at compilation time.\nGood examples are Boost::units and std::chrono.</p>\n<p>In std::chrono there is a strong separation in terms of types between timepoint and duration.\nSome operations are permitted while others aren't; casting must be explicit.</p>\n<p>for instance:</p>\n<div class=\"codehilite\"><pre><span></span> timepoint +/- duration = timepoint\n duration +/- duration = duration\n timepoint - timepoint = duration\n timepoint + timepoint = won&#39;t compile\n</pre></div>\n\n\n<p>The same approach in terms of strong semantic can be applied to types such as Point3D/Vector3D or CoordinateFrame/HomogenousTransform3D (we might find better names).</p>\n<div class=\"codehilite\"><pre><span></span> Point3D +/- Vector3D = Point3D\n Vector3D +/- Vector3D = Vector3D\n Point3D - Point3D = Vector3D\n Point3D + Point3D = won&#39;t compile\n</pre></div>\n\n\n<p>I believe that this enhancement would be very interesting and it is the typical \"zero-overhead abstraction\" that is so popular nowadays.</p>\n<p>What do you think?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-12-15T16:31:18.006171+00:00", "milestone": null, "updated_on": "2017-08-25T20:30:51.513734+00:00", "type": "issue", "id": 55}