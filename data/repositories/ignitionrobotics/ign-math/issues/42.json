{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/42/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/42.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/42/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/42/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/42/allow-vector3-equal-to-use-vector-of"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/42/vote"}}, "reporter": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "title": "Allow Vector3::Equal to use vector of tolerances", "component": null, "votes": 1, "watches": 2, "content": {"raw": "Curently, the [Vector3::Equal with tolerance check](#!/ignitionrobotics/ign-math/src/bde3d3bba851e6aa196a654c013f492d8b344dae/include/ignition/math/Vector3.hh?at=default&fileviewer=file-view-default#Vector3.hh-556) uses a single tolerance for all three elements.\r\n\r\nProposal to extend it by adding:\r\n\r\n~~~\r\n      /// \\brief Equality test with tolerance vector.\r\n      /// \\param[in] _v the vector to compare to\r\n      /// \\param[in] _tol a vector containing equality tolerances.\r\n      /// \\return true if the elements of the vectors are equal within\r\n      /// the tolerence specified by _tol.\r\n      public: bool Equal(const Vector3 &_v, const Vector3 &_tol) const\r\n      {\r\n        return equal<T>(this->data[0], _v[0], _tol[0])\r\n            && equal<T>(this->data[1], _v[1], _tol[1])\r\n            && equal<T>(this->data[2], _v[2], _tol[2]);\r\n      }\r\n~~~\r\n\r\nBased on discussion in pull request #82, we might need to extend it further with:\r\n\r\n~~~\r\n      public: bool NumericallyEqual(const Vector3 &_v, const Vector3 &_tol) const;\r\n      public: bool RelativelyEqual(const Vector3 &_v, const Vector3 &_tol) const;\r\n~~~\r\n\r\n", "markup": "markdown", "html": "<p>Curently, the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/bde3d3bba851e6aa196a654c013f492d8b344dae/include/ignition/math/Vector3.hh?at=default&amp;fileviewer=file-view-default#Vector3.hh-556\" rel=\"nofollow\">Vector3::Equal with tolerance check</a> uses a single tolerance for all three elements.</p>\n<p>Proposal to extend it by adding:</p>\n<div class=\"codehilite\"><pre><span></span>      /// \\brief Equality test with tolerance vector.\n      /// \\param[in] _v the vector to compare to\n      /// \\param[in] _tol a vector containing equality tolerances.\n      /// \\return true if the elements of the vectors are equal within\n      /// the tolerence specified by _tol.\n      public: bool Equal(const Vector3 &amp;_v, const Vector3 &amp;_tol) const\n      {\n        return equal&lt;T&gt;(this-&gt;data[0], _v[0], _tol[0])\n            &amp;&amp; equal&lt;T&gt;(this-&gt;data[1], _v[1], _tol[1])\n            &amp;&amp; equal&lt;T&gt;(this-&gt;data[2], _v[2], _tol[2]);\n      }\n</pre></div>\n\n\n<p>Based on discussion in <a href=\"#!/ignitionrobotics/ign-math/pull-requests/82/massmatrix-principalaxesoffset\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #82</a>, we might need to extend it further with:</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">bool</span> <span class=\"nt\">NumericallyEqual</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">Vector3</span> <span class=\"o\">&amp;</span><span class=\"nt\">_v</span><span class=\"o\">,</span> <span class=\"nt\">const</span> <span class=\"nt\">Vector3</span> <span class=\"o\">&amp;</span><span class=\"nt\">_tol</span><span class=\"o\">)</span> <span class=\"nt\">const</span><span class=\"o\">;</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">bool</span> <span class=\"nt\">RelativelyEqual</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">Vector3</span> <span class=\"o\">&amp;</span><span class=\"nt\">_v</span><span class=\"o\">,</span> <span class=\"nt\">const</span> <span class=\"nt\">Vector3</span> <span class=\"o\">&amp;</span><span class=\"nt\">_tol</span><span class=\"o\">)</span> <span class=\"nt\">const</span><span class=\"o\">;</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-04-04T19:16:40.412939+00:00", "milestone": null, "updated_on": "2017-02-28T04:13:06.367038+00:00", "type": "issue", "id": 42}