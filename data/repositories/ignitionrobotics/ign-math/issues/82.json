{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/82/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/82.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/82/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/82/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/82/feature-request-determine-if-a-connected"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/82/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Feature request: determine if a connected DirectedGraph is a DirectedTree", "component": null, "votes": 0, "watches": 1, "content": {"raw": "This could have a function prototype like:\r\n\r\n~~~\r\nVertexId DirectedGraph::DirectedTreeRoot(const VertexId &_idGuess = kNullId)\r\n~~~\r\n\r\nIt would operate on a `DirectedGraph` and return the root of the directed tree if it is found to be a directed tree. If it's not a directed tree it could return `kNullId`. You could pass in a guess for the `VertexId` of the root, which shouldn't affect the accuracy but might speed it up if you already know the root?\r\n\r\nThere are several properties that must be satisfied for a `DirectedGraph` to also be a directed tree:\r\n\r\n* if treated as an `UndirectedGraph`, it should be connected (one island)\r\n* there should be no loops\r\n* the root vertex should have `InDegree() == 0` (no parents) and all other vertices should have `InDegree() == 1` (only one parent)\r\n\r\nIt could be useful to provide additional functions to test these conditions (connectedness, presence of loops, singular parentage), since we currently have logic for the dart and simbody interfaces in gazebo that identifies kinematic loops and replaces one of the loop joints with a weld constraint.", "markup": "markdown", "html": "<p>This could have a function prototype like:</p>\n<div class=\"codehilite\"><pre><span></span>VertexId DirectedGraph::DirectedTreeRoot(const VertexId &amp;_idGuess = kNullId)\n</pre></div>\n\n\n<p>It would operate on a <code>DirectedGraph</code> and return the root of the directed tree if it is found to be a directed tree. If it's not a directed tree it could return <code>kNullId</code>. You could pass in a guess for the <code>VertexId</code> of the root, which shouldn't affect the accuracy but might speed it up if you already know the root?</p>\n<p>There are several properties that must be satisfied for a <code>DirectedGraph</code> to also be a directed tree:</p>\n<ul>\n<li>if treated as an <code>UndirectedGraph</code>, it should be connected (one island)</li>\n<li>there should be no loops</li>\n<li>the root vertex should have <code>InDegree() == 0</code> (no parents) and all other vertices should have <code>InDegree() == 1</code> (only one parent)</li>\n</ul>\n<p>It could be useful to provide additional functions to test these conditions (connectedness, presence of loops, singular parentage), since we currently have logic for the dart and simbody interfaces in gazebo that identifies kinematic loops and replaces one of the loop joints with a weld constraint.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-09-08T20:53:57.220705+00:00", "milestone": null, "updated_on": "2019-09-06T00:42:57.083891+00:00", "type": "issue", "id": 82}