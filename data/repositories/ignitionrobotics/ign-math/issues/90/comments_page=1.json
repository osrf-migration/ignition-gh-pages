{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/43649654.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-43649654"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2018-03-02T02:01:19.535438+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 43649654}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/43649657.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-43649657"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": "IssueForNewDevelopers", "markup": "markdown", "html": "<p>IssueForNewDevelopers</p>", "type": "rendered"}, "created_on": "2018-03-02T02:01:37.376177+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 43649657}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/43667611.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-43667611"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": "I would actually urge us to think carefully before adding more shape classes to `ign-math`.\n\nAs we experienced [with the frustum class](#!/ignitionrobotics/ign-math/pull-requests/193), collision detection is a really really hard problem, and it becomes combinatorially harder as you add arbitrarily more shape types to the mix.\n\nIf anything, I would suggest that we consider ways to have better integration with third-party collision detectors like FCL, ODE, Bullet, etc. Ideally we'd provide an abstract shape + collision detection interface for third-party collision detection libraries, and then choose a few popular open source collision detectors to provide stable support for, in the form of an optional component library.\n\nIt's not totally obvious to me where that kind of abstract shape concept would belong. I'm a bit reluctant to put it in `ign-math`, since `ign-math` (as far as I'm aware) has a history of just containing basic plain data types with some convenience functions. It wasn't particularly built to deal with abstraction, and supporting multiple collision detectors would be best facilitated by a plugin framework. `ign-physics` is all about abstraction and plugins, so I'd feel at least somewhat inclined to put this kind of thing in there instead.", "markup": "markdown", "html": "<p>I would actually urge us to think carefully before adding more shape classes to <code>ign-math</code>.</p>\n<p>As we experienced <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/pull-requests/193\" rel=\"nofollow\">with the frustum class</a>, collision detection is a really really hard problem, and it becomes combinatorially harder as you add arbitrarily more shape types to the mix.</p>\n<p>If anything, I would suggest that we consider ways to have better integration with third-party collision detectors like FCL, ODE, Bullet, etc. Ideally we'd provide an abstract shape + collision detection interface for third-party collision detection libraries, and then choose a few popular open source collision detectors to provide stable support for, in the form of an optional component library.</p>\n<p>It's not totally obvious to me where that kind of abstract shape concept would belong. I'm a bit reluctant to put it in <code>ign-math</code>, since <code>ign-math</code> (as far as I'm aware) has a history of just containing basic plain data types with some convenience functions. It wasn't particularly built to deal with abstraction, and supporting multiple collision detectors would be best facilitated by a plugin framework. <code>ign-physics</code> is all about abstraction and plugins, so I'd feel at least somewhat inclined to put this kind of thing in there instead.</p>", "type": "rendered"}, "created_on": "2018-03-02T18:54:53.680509+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 43667611}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/43674077.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-43674077"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": "I agree with all your points regarding collision detection. But we should keep in mind that there are many other use cases for a mathematical representation of a shape. Just like we use the `Box` and `Frustum` classes right now for a variety of logical tasks, `Sphere` and `Cylinder` classes could be convenient for things outside of physics, like visualizations, sensors and just general 3D geometry logic.", "markup": "markdown", "html": "<p>I agree with all your points regarding collision detection. But we should keep in mind that there are many other use cases for a mathematical representation of a shape. Just like we use the <code>Box</code> and <code>Frustum</code> classes right now for a variety of logical tasks, <code>Sphere</code> and <code>Cylinder</code> classes could be convenient for things outside of physics, like visualizations, sensors and just general 3D geometry logic.</p>", "type": "rendered"}, "created_on": "2018-03-02T22:51:28.999014+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 43674077}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/44684005.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-44684005"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": "To elaborate a little more on my thoughts, I definitely agree that mathematical representations of various shapes are valuable. Putting that into `ign-math` makes a lot of sense, since it would give various ignition projects an upstream way of communicating about geometry information.\n\nThe design concerns that I have in mind right now are the following:\n\n### Do we want to have geometry abstraction? And if so, what library does it belong in?\n\nIt can be very useful to have an abstraction for the concept of a \"geometric shape\". For example, it's useful if you can pass an arbitrary shape (whether it's a `Circle`, `Cylinder`, `Box`, `Mesh`, etc) to a collision detection engine or a rendering engine and expect it to handle the shape correctly. It's especially valuable if this is clean and extensible, e.g.:\n\n```\nclass CollisionDetector\n{\npublic:\n  CollisionObjectPtr AddShape(const Shape& shape);\n};\n```\n\nwhere `Shape` can be any of a number of types, instead of something like:\n\n```\nclass CollisionDetector\n{\npublic:\n\n  CollisionObjectPtr AddShape(const Sphere& sphere);\n\n  CollisionObjectPtr AddShape(const Box& box);\n\n  CollisionObjectPtr AddShape(const Cylinder& cylinder);\n\n  // ... and so on ...\n};\n```\n\nThis would require the `Shape` class to provide a pure virtual interface for the various shape types to inherit and implement. That means these shape types would have virtual functions and have some level of sophistication, which we should carefully design.\n\nIt sounds like your proposal is to have relatively plain data types for `Sphere` and `Cylinder` that only contain the minimal parameters needed to describe a \"sphere\" or \"cylinder\" concept. I think it makes a *lot* of sense to provide such classes, and I'm definitely in favor of doing so.\n\nHowever, the idea of more sophisticated abstract shape classes could be useful to both physics and rendering (and maybe other projects?), so it might make sense for them to share the implementation of that inside of `ign-math`. In that case, we would probably want `ignition::math::Sphere` to be the more sophisticated abstracted shape type instead of a simple class that just holds a radius parameter. Maybe we would actually want the plain sphere parameter class to be named something like `ignition::math::SphereParameters` or `ignition::math::Sphere::Parameters`. If we consistently use the nested `::Parameters` class pattern across all of the shape types, it would allow us (and users) to do some really fancy template programming. However, these things would be painful to introduce if those class names are already occupied (in fact, I think there would already be some pain caused by the existence of the `ignition::math::Box` class).\n\n### Do we want to template the shape classes for 2D vs 3D?\n\nThe Feature System proposal in `ign-physics` would allow us to very easily and cleanly support physics interfaces that can be shared between 2D and 3D simulation frameworks. However, it will require that our mathematical representations are templated for 2D and 3D information. This is very straightforward to implement using a template library like `Eigen`, and we could offer shape classes like:\n\n```\ntemplate<typename Precision, unsigned int Dimension>\nclass Ball : public Shape<Precision, Dimension>\n{\n  public: Precision& Radius() { return radius; }\n  public: const Precision& Radius() const { return radius; }\n\n  private: Precision radius;\n};\n\nusing Ball3d = Ball<double, 3>;\nusing Ball2d = Ball<double, 2>;\nusing Sphere = Ball3d;\nusing Circle = Ball2d;\n\ntemplate<typename Precision, unsigned int Dimension>\nclass Box : public Shape<Precision, Dimension>\n{\n  public: Precision& operator[](unsigned int i) { return parameters[i]; }\n\n  public: Precision& XLength() { return parameters[0]; }\n  public: Precision& YLength() { return parameters[1]; }\n  \n  // Template magic that makes this only compile when Dimension==3\n  public : Precision& ZLength() { return parameters[2]; }\n\n  private: Eigen::Matrix<Precision, Dimension, 1> parameters;\n};\n\nusing Box3d = Box<double, 3>;\nusing Box2d = Box<double, 2>;\n```", "markup": "markdown", "html": "<p>To elaborate a little more on my thoughts, I definitely agree that mathematical representations of various shapes are valuable. Putting that into <code>ign-math</code> makes a lot of sense, since it would give various ignition projects an upstream way of communicating about geometry information.</p>\n<p>The design concerns that I have in mind right now are the following:</p>\n<h3 id=\"markdown-header-do-we-want-to-have-geometry-abstraction-and-if-so-what-library-does-it-belong-in\">Do we want to have geometry abstraction? And if so, what library does it belong in?</h3>\n<p>It can be very useful to have an abstraction for the concept of a \"geometric shape\". For example, it's useful if you can pass an arbitrary shape (whether it's a <code>Circle</code>, <code>Cylinder</code>, <code>Box</code>, <code>Mesh</code>, etc) to a collision detection engine or a rendering engine and expect it to handle the shape correctly. It's especially valuable if this is clean and extensible, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">CollisionDetector</span>\n<span class=\"p\">{</span>\n<span class=\"kr\">public</span><span class=\"o\">:</span>\n  <span class=\"nx\">CollisionObjectPtr</span> <span class=\"nx\">AddShape</span><span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"nx\">Shape</span><span class=\"o\">&amp;</span> <span class=\"nx\">shape</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>where <code>Shape</code> can be any of a number of types, instead of something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">CollisionDetector</span>\n<span class=\"p\">{</span>\n<span class=\"kr\">public</span><span class=\"o\">:</span>\n\n  <span class=\"nx\">CollisionObjectPtr</span> <span class=\"nx\">AddShape</span><span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"nx\">Sphere</span><span class=\"o\">&amp;</span> <span class=\"nx\">sphere</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">CollisionObjectPtr</span> <span class=\"nx\">AddShape</span><span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"nx\">Box</span><span class=\"o\">&amp;</span> <span class=\"nx\">box</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">CollisionObjectPtr</span> <span class=\"nx\">AddShape</span><span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"nx\">Cylinder</span><span class=\"o\">&amp;</span> <span class=\"nx\">cylinder</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// ... and so on ...</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>This would require the <code>Shape</code> class to provide a pure virtual interface for the various shape types to inherit and implement. That means these shape types would have virtual functions and have some level of sophistication, which we should carefully design.</p>\n<p>It sounds like your proposal is to have relatively plain data types for <code>Sphere</code> and <code>Cylinder</code> that only contain the minimal parameters needed to describe a \"sphere\" or \"cylinder\" concept. I think it makes a <em>lot</em> of sense to provide such classes, and I'm definitely in favor of doing so.</p>\n<p>However, the idea of more sophisticated abstract shape classes could be useful to both physics and rendering (and maybe other projects?), so it might make sense for them to share the implementation of that inside of <code>ign-math</code>. In that case, we would probably want <code>ignition::math::Sphere</code> to be the more sophisticated abstracted shape type instead of a simple class that just holds a radius parameter. Maybe we would actually want the plain sphere parameter class to be named something like <code>ignition::math::SphereParameters</code> or <code>ignition::math::Sphere::Parameters</code>. If we consistently use the nested <code>::Parameters</code> class pattern across all of the shape types, it would allow us (and users) to do some really fancy template programming. However, these things would be painful to introduce if those class names are already occupied (in fact, I think there would already be some pain caused by the existence of the <code>ignition::math::Box</code> class).</p>\n<h3 id=\"markdown-header-do-we-want-to-template-the-shape-classes-for-2d-vs-3d\">Do we want to template the shape classes for 2D vs 3D?</h3>\n<p>The Feature System proposal in <code>ign-physics</code> would allow us to very easily and cleanly support physics interfaces that can be shared between 2D and 3D simulation frameworks. However, it will require that our mathematical representations are templated for 2D and 3D information. This is very straightforward to implement using a template library like <code>Eigen</code>, and we could offer shape classes like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">template</span><span class=\"o\">&lt;</span><span class=\"nx\">typename</span> <span class=\"nx\">Precision</span><span class=\"p\">,</span> <span class=\"nx\">unsigned</span> <span class=\"kr\">int</span> <span class=\"nx\">Dimension</span><span class=\"o\">&gt;</span>\n<span class=\"kr\">class</span> <span class=\"nx\">Ball</span> : <span class=\"kt\">public</span> <span class=\"nx\">Shape</span><span class=\"o\">&lt;</span><span class=\"nx\">Precision</span><span class=\"p\">,</span> <span class=\"nx\">Dimension</span><span class=\"o\">&gt;</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Precision</span><span class=\"o\">&amp;</span> <span class=\"nx\">Radius() {</span> <span class=\"k\">return</span> <span class=\"nx\">radius</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"kr\">const</span> <span class=\"nx\">Precision</span><span class=\"o\">&amp;</span> <span class=\"nx\">Radius</span><span class=\"p\">()</span> <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">radius</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span><span class=\"o\">:</span> <span class=\"nx\">Precision</span> <span class=\"nx\">radius</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">using</span> <span class=\"nx\">Ball3d</span> <span class=\"o\">=</span> <span class=\"nx\">Ball</span><span class=\"o\">&lt;</span><span class=\"kr\">double</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"nx\">using</span> <span class=\"nx\">Ball2d</span> <span class=\"o\">=</span> <span class=\"nx\">Ball</span><span class=\"o\">&lt;</span><span class=\"kr\">double</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"nx\">using</span> <span class=\"nx\">Sphere</span> <span class=\"o\">=</span> <span class=\"nx\">Ball3d</span><span class=\"p\">;</span>\n<span class=\"nx\">using</span> <span class=\"nx\">Circle</span> <span class=\"o\">=</span> <span class=\"nx\">Ball2d</span><span class=\"p\">;</span>\n\n<span class=\"nx\">template</span><span class=\"o\">&lt;</span><span class=\"nx\">typename</span> <span class=\"nx\">Precision</span><span class=\"p\">,</span> <span class=\"nx\">unsigned</span> <span class=\"kr\">int</span> <span class=\"nx\">Dimension</span><span class=\"o\">&gt;</span>\n<span class=\"kr\">class</span> <span class=\"nx\">Box</span> : <span class=\"kt\">public</span> <span class=\"nx\">Shape</span><span class=\"o\">&lt;</span><span class=\"nx\">Precision</span><span class=\"p\">,</span> <span class=\"nx\">Dimension</span><span class=\"o\">&gt;</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Precision</span><span class=\"o\">&amp;</span> <span class=\"nx\">operator</span><span class=\"p\">[](</span><span class=\"nx\">unsigned</span> <span class=\"kr\">int</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">parameters</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span> <span class=\"p\">}</span>\n\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Precision</span><span class=\"o\">&amp;</span> <span class=\"nx\">XLength() {</span> <span class=\"k\">return</span> <span class=\"nx\">parameters</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span> <span class=\"p\">}</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"nx\">Precision</span><span class=\"o\">&amp;</span> <span class=\"nx\">YLength() {</span> <span class=\"k\">return</span> <span class=\"nx\">parameters</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Template magic that makes this only compile when Dimension==3</span>\n  <span class=\"kr\">public</span> <span class=\"o\">:</span> <span class=\"nx\">Precision</span><span class=\"o\">&amp;</span> <span class=\"nx\">ZLength() {</span> <span class=\"k\">return</span> <span class=\"nx\">parameters</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span> <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span><span class=\"o\">:</span> <span class=\"nx\">Eigen</span><span class=\"o\">::</span><span class=\"nx\">Matrix</span><span class=\"o\">&lt;</span><span class=\"nx\">Precision</span><span class=\"p\">,</span> <span class=\"nx\">Dimension</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"nx\">parameters</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">using</span> <span class=\"nx\">Box3d</span> <span class=\"o\">=</span> <span class=\"nx\">Box</span><span class=\"o\">&lt;</span><span class=\"kr\">double</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"nx\">using</span> <span class=\"nx\">Box2d</span> <span class=\"o\">=</span> <span class=\"nx\">Box</span><span class=\"o\">&lt;</span><span class=\"kr\">double</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-04-14T00:39:17.624759+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 44684005}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/44724749.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-44724749"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": "I think geometry abstraction can be very useful. We currently have [gazebo::physics::Shape](http://gazebosim.org/api/dev/classgazebo_1_1physics_1_1Shape.html) and I agree it belongs more in math than in physics. Interestingly though, there is no such concept on `gazebo::rendering`, in fact, rendering geometries are created by `gazebo::common::MeshManager`.\n\nTemplating for different numbers of dimensions also sounds like a good idea. Ignition math currently has completely separate classes for things like `Vector2`,  `3` and `4`, which means there is some duplicate code and some inconsistent API (issue #71 for example).", "markup": "markdown", "html": "<p>I think geometry abstraction can be very useful. We currently have <a data-is-external-link=\"true\" href=\"http://gazebosim.org/api/dev/classgazebo_1_1physics_1_1Shape.html\" rel=\"nofollow\">gazebo::physics::Shape</a> and I agree it belongs more in math than in physics. Interestingly though, there is no such concept on <code>gazebo::rendering</code>, in fact, rendering geometries are created by <code>gazebo::common::MeshManager</code>.</p>\n<p>Templating for different numbers of dimensions also sounds like a good idea. Ignition math currently has completely separate classes for things like <code>Vector2</code>,  <code>3</code> and <code>4</code>, which means there is some duplicate code and some inconsistent API (issue <a href=\"#!/ignitionrobotics/ign-math/issues/71/add-functions-from-vector3-to-vector2-and\" rel=\"nofollow\" title=\"Add functions from Vector3 to Vector2 and Vector4\" class=\"ap-connect-link\">#71</a> for example).</p>", "type": "rendered"}, "created_on": "2018-04-16T15:44:31.420387+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 44724749}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/44726856.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-44726856"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": "Supporting shape information within `ign-math` would probably also make it easier to transmit shape-related messages over `ign-msgs`.", "markup": "markdown", "html": "<p>Supporting shape information within <code>ign-math</code> would probably also make it easier to transmit shape-related messages over <code>ign-msgs</code>.</p>", "type": "rendered"}, "created_on": "2018-04-16T17:21:48.327646+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 44726856}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/48895830.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-48895830"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": "Sphere and cylinder classes have recently been added:\n\n* #!/ignitionrobotics/ign-math/src/default/include/ignition/math/Cylinder.hh\n* #!/ignitionrobotics/ign-math/src/default/include/ignition/math/Sphere.hh\n\nI'll close this issue. @mxgrey, feel free to ticket a new issue about shape templates if you think that's still relevant.", "markup": "markdown", "html": "<p>Sphere and cylinder classes have recently been added:</p>\n<ul>\n<li><a href=\"#!/ignitionrobotics/ign-math/src/default/include/ignition/math/Cylinder.hh\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/src/default/include/ignition/math/Cylinder.hh</a></li>\n<li><a href=\"#!/ignitionrobotics/ign-math/src/default/include/ignition/math/Sphere.hh\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-math/src/default/include/ignition/math/Sphere.hh</a></li>\n</ul>\n<p>I'll close this issue. @mxgrey, feel free to ticket a new issue about shape templates if you think that's still relevant.</p>", "type": "rendered"}, "created_on": "2018-11-12T23:11:45.347366+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 48895830}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90/comments/48895833.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/90#comment-48895833"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/90.json"}}, "type": "issue", "id": 90, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Add sphere and cylinder shapes"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2018-11-12T23:11:52.127559+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 48895833}], "page": 1, "size": 9}