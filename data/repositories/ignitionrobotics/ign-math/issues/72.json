{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/72/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/72.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/72/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/72/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/72/box-initialized-with-invalid-extent"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/72/vote"}}, "reporter": {"display_name": "Jennifer Buehler", "uuid": "{5949baad-8c43-4d52-9a82-bb8c3511fed8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D"}, "html": {"href": "https://bitbucket.org/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b28ae0e95eada6ee16f0860c1fa59fdcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJB-4.png"}}, "nickname": "JenniferBuehler", "type": "user", "account_id": "557058:96bd489a-ec14-4a06-8d31-7bb6d46d1209"}, "title": "Box initialized with invalid extent", "component": null, "votes": 1, "watches": 1, "content": {"raw": "I stumbled upon a problem with ``Box`` when using the default constructor, and subsequently setting the box min/max with the ``Min()`` and ``Max()`` functions, e.g.\r\n\r\n```cpp\r\nignition::math::Box b;\r\nb.Min() = something;\r\nb.Max() = somethingElse;\r\n```\r\n\r\nThe default constructor doesn't initialize ``BoxPrivate::extent`` to ``EXTENT_FINITE``, as the other constructors would, e.g. the constructor taking two vectors:\r\n\r\n```cpp\r\n//////////////////////////////////////////////////                              \r\nBox::Box(const Vector3d &_vec1, const Vector3d &_vec2)                          \r\n: dataPtr(new BoxPrivate)                                                       \r\n{                                                                               \r\n  this->dataPtr->extent = BoxPrivate::EXTENT_FINITE;                            \r\n  ...\r\n}     \r\n```\r\nSo in my opinion it should be documented that to have a valid ``Box``, one needs to use any constructor but the default one, *or* we should add a method ``Box::Set(const ignition::Vector3d &min, ignition::Vector3d &max)`` which also sets the extent to EXTENT_FINITE, and document at ``Min()`` and ``Max()`` that if these functions are used to initialize the box, one would have to additionally ensure the box was previously correctly initialized with a suitable constructor, or that the new ``Set()`` function should be used instead. \r\n\r\nProblems arising if the extent is not initialized become clear with the ``Box::operator+=``:\r\n\r\n```cpp\r\n//////////////////////////////////////////////////                              \r\nconst Box &Box::operator+=(const Box &_b)                                       \r\n{                                                                               \r\n  if (this->dataPtr->extent != BoxPrivate::EXTENT_NULL)                         \r\n  {                                                                             \r\n    this->dataPtr->min.Min(_b.dataPtr->min);                                    \r\n    this->dataPtr->max.Max(_b.dataPtr->max);                                    \r\n  }                                                                             \r\n  else                                                                          \r\n  {                                                                             \r\n    this->dataPtr->min = _b.dataPtr->min;                                       \r\n    this->dataPtr->max = _b.dataPtr->max;                                       \r\n    this->dataPtr->extent = _b.dataPtr->extent;                                 \r\n  }                                                                             \r\n  return *this;                                                                 \r\n}      \r\n```\r\nAn invalid box will never be added correctly to other boxes.\r\n\r\nI noticed this in Gazebo, where ``gazebo::physics::Link::BoundingBox()`` uses this operator.\r\n\r\nI would propose to update the documentation and add a ``Set()`` function as suggested. If you agree, or have other suggestions, let me know and I can send a PR for this.", "markup": "markdown", "html": "<p>I stumbled upon a problem with <code>Box</code> when using the default constructor, and subsequently setting the box min/max with the <code>Min()</code> and <code>Max()</code> functions, e.g.</p>\n<div class=\"codehilite language-cpp\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Box</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Min</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"n\">something</span><span class=\"p\">;</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Max</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"n\">somethingElse</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>The default constructor doesn't initialize <code>BoxPrivate::extent</code> to <code>EXTENT_FINITE</code>, as the other constructors would, e.g. the constructor taking two vectors:</p>\n<div class=\"codehilite language-cpp\"><pre><span></span><span class=\"c1\">//////////////////////////////////////////////////                              </span>\n<span class=\"n\">Box</span><span class=\"o\">::</span><span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Vector3d</span> <span class=\"o\">&amp;</span><span class=\"n\">_vec1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Vector3d</span> <span class=\"o\">&amp;</span><span class=\"n\">_vec2</span><span class=\"p\">)</span>                          \n<span class=\"o\">:</span> <span class=\"n\">dataPtr</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">BoxPrivate</span><span class=\"p\">)</span>                                                       \n<span class=\"p\">{</span>                                                                               \n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"n\">BoxPrivate</span><span class=\"o\">::</span><span class=\"n\">EXTENT_FINITE</span><span class=\"p\">;</span>                            \n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>     \n</pre></div>\n\n\n<p>So in my opinion it should be documented that to have a valid <code>Box</code>, one needs to use any constructor but the default one, <em>or</em> we should add a method <code>Box::Set(const ignition::Vector3d &amp;min, ignition::Vector3d &amp;max)</code> which also sets the extent to EXTENT_FINITE, and document at <code>Min()</code> and <code>Max()</code> that if these functions are used to initialize the box, one would have to additionally ensure the box was previously correctly initialized with a suitable constructor, or that the new <code>Set()</code> function should be used instead. </p>\n<p>Problems arising if the extent is not initialized become clear with the <code>Box::operator+=</code>:</p>\n<div class=\"codehilite language-cpp\"><pre><span></span><span class=\"c1\">//////////////////////////////////////////////////                              </span>\n<span class=\"k\">const</span> <span class=\"n\">Box</span> <span class=\"o\">&amp;</span><span class=\"n\">Box</span><span class=\"o\">::</span><span class=\"k\">operator</span><span class=\"o\">+=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Box</span> <span class=\"o\">&amp;</span><span class=\"n\">_b</span><span class=\"p\">)</span>                                       \n<span class=\"p\">{</span>                                                                               \n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">extent</span> <span class=\"o\">!=</span> <span class=\"n\">BoxPrivate</span><span class=\"o\">::</span><span class=\"n\">EXTENT_NULL</span><span class=\"p\">)</span>                         \n  <span class=\"p\">{</span>                                                                             \n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">min</span><span class=\"p\">.</span><span class=\"n\">Min</span><span class=\"p\">(</span><span class=\"n\">_b</span><span class=\"p\">.</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">min</span><span class=\"p\">);</span>                                    \n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">max</span><span class=\"p\">.</span><span class=\"n\">Max</span><span class=\"p\">(</span><span class=\"n\">_b</span><span class=\"p\">.</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">max</span><span class=\"p\">);</span>                                    \n  <span class=\"p\">}</span>                                                                             \n  <span class=\"k\">else</span>                                                                          \n  <span class=\"p\">{</span>                                                                             \n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">_b</span><span class=\"p\">.</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">min</span><span class=\"p\">;</span>                                       \n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">_b</span><span class=\"p\">.</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">max</span><span class=\"p\">;</span>                                       \n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">extent</span> <span class=\"o\">=</span> <span class=\"n\">_b</span><span class=\"p\">.</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">extent</span><span class=\"p\">;</span>                                 \n  <span class=\"p\">}</span>                                                                             \n  <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"k\">this</span><span class=\"p\">;</span>                                                                 \n<span class=\"p\">}</span>      \n</pre></div>\n\n\n<p>An invalid box will never be added correctly to other boxes.</p>\n<p>I noticed this in Gazebo, where <code>gazebo::physics::Link::BoundingBox()</code> uses this operator.</p>\n<p>I would propose to update the documentation and add a <code>Set()</code> function as suggested. If you agree, or have other suggestions, let me know and I can send a PR for this.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-05-18T08:02:41.660407+00:00", "milestone": null, "updated_on": "2017-07-07T23:35:43.446874+00:00", "type": "issue", "id": 72}