{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/43/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/43.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/43/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-math/issues/43/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/43/add-numerically-equal-and-relatively-equal"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-math/issues/43/vote"}}, "reporter": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "title": "Add Numerically Equal and Relatively Equal comparisons in math helper class", "component": null, "votes": 0, "watches": 1, "content": {"raw": "[Current comparison strategy math::equal](#!/ignitionrobotics/ign-math/src/bde3d3bba851e6aa196a654c013f492d8b344dae/include/ignition/math/Helpers.hh?at=default&fileviewer=file-view-default#Helpers.hh-327) is using primitive absolute magnitude comparison. This may not be sufficient in some cases, for example where relative magnitudes are large, or the values being compared border numerical precision boundaries. \r\n\r\nPer @sherm1 recommendation in pull request #82, we should add `math::numericallyEqual` and `math::relativelyEqual`.\r\n\r\nAlso, see issue #42 for extension to Vector3 class.", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/bde3d3bba851e6aa196a654c013f492d8b344dae/include/ignition/math/Helpers.hh?at=default&amp;fileviewer=file-view-default#Helpers.hh-327\" rel=\"nofollow\">Current comparison strategy math::equal</a> is using primitive absolute magnitude comparison. This may not be sufficient in some cases, for example where relative magnitudes are large, or the values being compared border numerical precision boundaries. </p>\n<p>Per @sherm1 recommendation in <a href=\"#!/ignitionrobotics/ign-math/pull-requests/82/massmatrix-principalaxesoffset\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #82</a>, we should add <code>math::numericallyEqual</code> and <code>math::relativelyEqual</code>.</p>\n<p>Also, see issue <a href=\"#!/ignitionrobotics/ign-math/issues/42/allow-vector3-equal-to-use-vector-of\" rel=\"nofollow\" title=\"Allow Vector3::Equal to use vector of tolerances\" class=\"ap-connect-link\">#42</a> for extension to Vector3 class.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-04-04T19:23:27.489214+00:00", "milestone": null, "updated_on": "2017-02-27T19:53:17.712670+00:00", "type": "issue", "id": 43}