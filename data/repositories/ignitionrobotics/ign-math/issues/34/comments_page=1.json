{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/34/comments/25264212.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/34#comment-25264212"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/34.json"}}, "type": "issue", "id": 34, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Vector3::Normalize returns Vector3, Vector[24]::Normalize return void"}, "content": {"raw": "Actually, there is a bit of different behavior that can be expected.\n\nFor example, we added `Transpose` and `Transposed` methods to the matrix classes in pull request #74:\n\n~~~\npublic: void Matrix3::Transpose()\npublic: Matrix3<T> Matrix3::Transposed() const\n~~~\n\nThe `Transpose` method acts in place on an existing object, while `Transposed` is `const`, so it doesn't affect the base object, but returns a new value.\n\nI think we could do a similar thing for `Normalize` with the vector classes and perhaps Quaternion as well:\n\n* `Normalize` for in-place modification of an object\n* `Normalized` for creating a new object\n\nI realize this doesn't directly address the title of this issue, which is about return values, but changing that will break API/ABI, so we can wait until the next major release to change the return type if we decide to do so.", "markup": "markdown", "html": "<p>Actually, there is a bit of different behavior that can be expected.</p>\n<p>For example, we added <code>Transpose</code> and <code>Transposed</code> methods to the matrix classes in <a href=\"#!/ignitionrobotics/ign-math/pull-requests/74/add-transpose-methods-for-matrix3-4-with\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #74</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span><span class=\"o\">:</span> <span class=\"kc\">void</span> <span class=\"n\">Matrix3</span><span class=\"o\">::</span><span class=\"n\">Transpose</span><span class=\"o\">()</span>\n<span class=\"kd\">public</span><span class=\"o\">:</span> <span class=\"n\">Matrix3</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">Matrix3</span><span class=\"o\">::</span><span class=\"n\">Transposed</span><span class=\"o\">()</span> <span class=\"kd\">const</span>\n</pre></div>\n\n\n<p>The <code>Transpose</code> method acts in place on an existing object, while <code>Transposed</code> is <code>const</code>, so it doesn't affect the base object, but returns a new value.</p>\n<p>I think we could do a similar thing for <code>Normalize</code> with the vector classes and perhaps Quaternion as well:</p>\n<ul>\n<li><code>Normalize</code> for in-place modification of an object</li>\n<li><code>Normalized</code> for creating a new object</li>\n</ul>\n<p>I realize this doesn't directly address the title of this issue, which is about return values, but changing that will break API/ABI, so we can wait until the next major release to change the return type if we decide to do so.</p>", "type": "rendered"}, "created_on": "2016-02-05T00:58:27.679463+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 25264212}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/34/comments/26427111.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/34#comment-26427111"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/34.json"}}, "type": "issue", "id": 34, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Vector3::Normalize returns Vector3, Vector[24]::Normalize return void"}, "content": {"raw": "\nI tried the bug, please have a look.\nhttps://bitbucket.org/amtj/ign-math/commits/all\n\nRegards.\n", "markup": "markdown", "html": "<p>I tried the bug, please have a look.\n<a href=\"https://bitbucket.org/amtj/ign-math/commits/all\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/amtj/ign-math/commits/all</a></p>\n<p>Regards.</p>", "type": "rendered"}, "created_on": "2016-03-22T21:04:02.671873+00:00", "user": {"display_name": "Amitoj", "uuid": "{2b9fe476-79df-4d9c-a7dc-505159e59eb3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2b9fe476-79df-4d9c-a7dc-505159e59eb3%7D"}, "html": {"href": "https://bitbucket.org/%7B2b9fe476-79df-4d9c-a7dc-505159e59eb3%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ed5aaa62-8ec9-4639-bd03-c618f1d9bfca/156600cb-6464-445a-8b06-25c7f9f47409/128"}}, "nickname": "amtj", "type": "user", "account_id": "557058:ed5aaa62-8ec9-4639-bd03-c618f1d9bfca"}, "updated_on": null, "type": "issue_comment", "id": 26427111}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/34/comments/26427203.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/34#comment-26427203"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/34.json"}}, "type": "issue", "id": 34, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "Vector3::Normalize returns Vector3, Vector[24]::Normalize return void"}, "content": {"raw": "[Here](https://bitbucket.org/amtj/ign-math/branches/compare/amtj/ign-math:default%0Dignitionrobotics/ign-math:default#diff)'s the complete diff between your branch and this one.\n\nI think it looks like a good start. We should probably also add `Vector3::Normalized`. And there should be tests for all new functions, see [this](#!/ignitionrobotics/ign-math/src/d1caec2b23082e84979a6e5f7461bf53505fddb1/src/Vector3_TEST.cc?at=default&fileviewer=file-view-default#Vector3_TEST.cc-161) for example.", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"https://bitbucket.org/amtj/ign-math/branches/compare/amtj/ign-math:default%0Dignitionrobotics/ign-math:default#diff\" rel=\"nofollow\">Here</a>'s the complete diff between your branch and this one.</p>\n<p>I think it looks like a good start. We should probably also add <code>Vector3::Normalized</code>. And there should be tests for all new functions, see <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-math/src/d1caec2b23082e84979a6e5f7461bf53505fddb1/src/Vector3_TEST.cc?at=default&amp;fileviewer=file-view-default#Vector3_TEST.cc-161\" rel=\"nofollow\">this</a> for example.</p>", "type": "rendered"}, "created_on": "2016-03-22T21:08:22.566246+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 26427203}], "page": 1, "size": 3}