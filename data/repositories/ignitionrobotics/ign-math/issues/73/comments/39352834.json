{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/73/comments/39352834.json"}, "html": {"href": "#!/ignitionrobotics/ign-math/issues/73#comment-39352834"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math/issues/73.json"}}, "type": "issue", "id": 73, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-math.json"}, "html": {"href": "#!/ignitionrobotics/ign-math"}, "avatar": {"href": "data/bytebucket.org/ravatar/{18503e50-08ea-4d88-ab99-110fde3c7256}ts=1533305"}}, "type": "repository", "name": "ign-math", "full_name": "ignitionrobotics/ign-math", "uuid": "{18503e50-08ea-4d88-ab99-110fde3c7256}"}, "title": "ignition::math::Vector3: operator [] does not return reference"}, "content": {"raw": "I strongly strongly agree with Shane on this.\n\nWhile I'm all in favor of safety checks, I don't think clamping adds safety; I think it would only result in confusing unexpected behavior that would make strange situations harder to debug. I think there's also an expectation that access operators like `operator[std::size_t]` are extremely low-cost direct access to memory, so adding in comparisons would unexpectedly penalize its use.\n\nIf we want to add bounds safety, I would propose having an assert that checks the bounds on the index that gets passed in. The assert would only be compiled in debug mode, so it wouldn't affect performance, and it would identify undefined behavior instead of confusingly disguising it.\n\nAlso, I added a non-const reference version of the operator in pull request #181 which I opened prior to seeing this issue posted.", "markup": "markdown", "html": "<p>I strongly strongly agree with Shane on this.</p>\n<p>While I'm all in favor of safety checks, I don't think clamping adds safety; I think it would only result in confusing unexpected behavior that would make strange situations harder to debug. I think there's also an expectation that access operators like <code>operator[std::size_t]</code> are extremely low-cost direct access to memory, so adding in comparisons would unexpectedly penalize its use.</p>\n<p>If we want to add bounds safety, I would propose having an assert that checks the bounds on the index that gets passed in. The assert would only be compiled in debug mode, so it wouldn't affect performance, and it would identify undefined behavior instead of confusingly disguising it.</p>\n<p>Also, I added a non-const reference version of the operator in <a href=\"#!/ignitionrobotics/ign-math/pull-requests/181/adding-non-const-bracket-operators-and\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #181</a> which I opened prior to seeing this issue posted.</p>", "type": "rendered"}, "created_on": "2017-08-25T20:44:10.699158+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-08-25T20:45:42.532754+00:00", "type": "issue_comment", "id": 39352834}