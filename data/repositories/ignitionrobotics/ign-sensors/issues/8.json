{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/8/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/8.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/8/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/8/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/8/gpu-laser-crashes-with-more-than-16k"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/8/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "GPU laser crashes with more than 16k samples", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [X] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\nGPU laser crashes with more than 16k horizontal samples.\r\n\r\n# Steps to Reproduce\r\n\r\nTry this SDF:\r\n\r\n~~~\r\n            <sensor name='front_laser' type='gpu_ray'>\r\n              <pose>0.08 0 0.3 0 0 0</pose>\r\n              <update_rate>15</update_rate>\r\n              <topic>/x1/points</topic>\r\n              <lidar>\r\n                <scan>\r\n                  <horizontal>\r\n                    <samples>18000</samples>\r\n                    <resolution>0.1</resolution>\r\n                    <min_angle>-3.1459</min_angle>\r\n                    <max_angle>3.1459</max_angle>\r\n                  </horizontal>\r\n                  <vertical>\r\n                    <samples>16</samples>\r\n                    <resolution>1</resolution>\r\n                    <min_angle>-0.261799</min_angle>\r\n                    <max_angle>0.261799</max_angle>\r\n                  </vertical>\r\n                </scan>\r\n                <range>\r\n                  <min>0.05</min>\r\n                  <max>75</max>\r\n                  <resolution>0.01</resolution>\r\n                </range>\r\n                <noise>\r\n                  <type>gaussian</type>\r\n                  <mean>0</mean>\r\n                  <stddev>0.01</stddev>\r\n                </noise>\r\n              </lidar>\r\n            </sensor>\r\n~~~\r\n\r\n**Expected behavior:**  \r\n\r\nSensor is properly created with no crash. If you change the `18000` above to `16000` there's no crash.\r\n\r\n**Actual behavior:**\r\n\r\nCrash with:\r\n\r\n~~~\r\nterminate called after throwing an instance of 'Ogre::RenderingAPIException'\r\n  what():  OGRE EXCEPTION(3:RenderingAPIException): Zero sized texture surface on texture x1::base::front_laser_samplerTex face 0 mipmap 0. The GL driver probably refused to create the texture. in GL3PlusTexture::_createSurfaceList at /var/lib/jenkins/workspace/ogre-2.1-debbuilder/repo/RenderSystems/GL3Plus/src/OgreGL3PlusTexture.cpp (line 516)\r\n~~~\r\n\r\n**Reproduces how often:** \r\n\r\n100%\r\n\r\n# Versions\r\n\r\n`ign-sensors2`\r\n\r\n# Additional Information\r\n\r\nI talked to @iche033 and apparently large sample counts are redundant anyway, since the underlying computations use a cube with 1024x1024 sized walls.\r\n\r\nWe should at least prevent the crash, but a better solution may involve interpolating the samples.", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[X] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>GPU laser crashes with more than 16k horizontal samples.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<p>Try this SDF:</p>\n<div class=\"codehilite\"><pre><span></span>            <span class=\"nt\">&lt;sensor</span> <span class=\"na\">name=</span><span class=\"s\">&#39;front_laser&#39;</span> <span class=\"na\">type=</span><span class=\"s\">&#39;gpu_ray&#39;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;pose&gt;</span>0.08 0 0.3 0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n              <span class=\"nt\">&lt;update_rate&gt;</span>15<span class=\"nt\">&lt;/update_rate&gt;</span>\n              <span class=\"nt\">&lt;topic&gt;</span>/x1/points<span class=\"nt\">&lt;/topic&gt;</span>\n              <span class=\"nt\">&lt;lidar&gt;</span>\n                <span class=\"nt\">&lt;scan&gt;</span>\n                  <span class=\"nt\">&lt;horizontal&gt;</span>\n                    <span class=\"nt\">&lt;samples&gt;</span>18000<span class=\"nt\">&lt;/samples&gt;</span>\n                    <span class=\"nt\">&lt;resolution&gt;</span>0.1<span class=\"nt\">&lt;/resolution&gt;</span>\n                    <span class=\"nt\">&lt;min_angle&gt;</span>-3.1459<span class=\"nt\">&lt;/min_angle&gt;</span>\n                    <span class=\"nt\">&lt;max_angle&gt;</span>3.1459<span class=\"nt\">&lt;/max_angle&gt;</span>\n                  <span class=\"nt\">&lt;/horizontal&gt;</span>\n                  <span class=\"nt\">&lt;vertical&gt;</span>\n                    <span class=\"nt\">&lt;samples&gt;</span>16<span class=\"nt\">&lt;/samples&gt;</span>\n                    <span class=\"nt\">&lt;resolution&gt;</span>1<span class=\"nt\">&lt;/resolution&gt;</span>\n                    <span class=\"nt\">&lt;min_angle&gt;</span>-0.261799<span class=\"nt\">&lt;/min_angle&gt;</span>\n                    <span class=\"nt\">&lt;max_angle&gt;</span>0.261799<span class=\"nt\">&lt;/max_angle&gt;</span>\n                  <span class=\"nt\">&lt;/vertical&gt;</span>\n                <span class=\"nt\">&lt;/scan&gt;</span>\n                <span class=\"nt\">&lt;range&gt;</span>\n                  <span class=\"nt\">&lt;min&gt;</span>0.05<span class=\"nt\">&lt;/min&gt;</span>\n                  <span class=\"nt\">&lt;max&gt;</span>75<span class=\"nt\">&lt;/max&gt;</span>\n                  <span class=\"nt\">&lt;resolution&gt;</span>0.01<span class=\"nt\">&lt;/resolution&gt;</span>\n                <span class=\"nt\">&lt;/range&gt;</span>\n                <span class=\"nt\">&lt;noise&gt;</span>\n                  <span class=\"nt\">&lt;type&gt;</span>gaussian<span class=\"nt\">&lt;/type&gt;</span>\n                  <span class=\"nt\">&lt;mean&gt;</span>0<span class=\"nt\">&lt;/mean&gt;</span>\n                  <span class=\"nt\">&lt;stddev&gt;</span>0.01<span class=\"nt\">&lt;/stddev&gt;</span>\n                <span class=\"nt\">&lt;/noise&gt;</span>\n              <span class=\"nt\">&lt;/lidar&gt;</span>\n            <span class=\"nt\">&lt;/sensor&gt;</span>\n</pre></div>\n\n\n<p><strong>Expected behavior:</strong>  </p>\n<p>Sensor is properly created with no crash. If you change the <code>18000</code> above to <code>16000</code> there's no crash.</p>\n<p><strong>Actual behavior:</strong></p>\n<p>Crash with:</p>\n<div class=\"codehilite\"><pre><span></span>terminate called after throwing an instance of &#39;Ogre::RenderingAPIException&#39;\n  what():  OGRE EXCEPTION(3:RenderingAPIException): Zero sized texture surface on texture x1::base::front_laser_samplerTex face 0 mipmap 0. The GL driver probably refused to create the texture. in GL3PlusTexture::_createSurfaceList at /var/lib/jenkins/workspace/ogre-2.1-debbuilder/repo/RenderSystems/GL3Plus/src/OgreGL3PlusTexture.cpp (line 516)\n</pre></div>\n\n\n<p><strong>Reproduces how often:</strong> </p>\n<p>100%</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p><code>ign-sensors2</code></p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>I talked to @iche033 and apparently large sample counts are redundant anyway, since the underlying computations use a cube with 1024x1024 sized walls.</p>\n<p>We should at least prevent the crash, but a better solution may involve interpolating the samples.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-05-18T01:20:33.454355+00:00", "milestone": null, "updated_on": "2019-05-18T01:27:24.316502+00:00", "type": "issue", "id": 8}