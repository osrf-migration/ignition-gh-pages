{"pagelen": 100, "values": [{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/1/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/1/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/1/allow-reusing-existing-instance-of"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/1/vote"}}, "reporter": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "title": "Allow reusing existing instance of ignition physics", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Initializers in https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/11599873/Ignition+Sensors\r\n\r\nRelated\r\n#!/ignitionrobotics/ign-sensors/pull-requests/1/wip-manager-interface/activity#comment-42770711\r\n\r\n```\r\n      /// \\brief Initialize the sensor library with physics.\r\n      /// \\return True if successfully initialized, false if not\r\n      bool Init(ignition::physics::Manager &_physics);\r\n \r\n \r\n      /// \\brief Initialize the sensor library with rendering and physics.\r\n      /// \\return True if successfully initialized, false if not\r\n      bool Init(ignition::rendering::Manager &_rendering, ignition::physics::Manager &_physics);\r\n```\r\n\r\n```\r\n/// \\brief set the rendering manager used by sensors\r\nSetPhysics(ignition::physics::Manager &_physics)\r\n```", "markup": "markdown", "html": "<p>Initializers in <a href=\"https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/11599873/Ignition+Sensors\" rel=\"nofollow\" class=\"ap-connect-link\">https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/11599873/Ignition+Sensors</a></p>\n<p>Related\n<a href=\"#!/ignitionrobotics/ign-sensors/pull-requests/1/wip-manager-interface/activity#comment-42770711\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-sensors/pull-requests/1/wip-manager-interface/activity#comment-42770711</a></p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">brief</span> <span class=\"nt\">Initialize</span> <span class=\"nt\">the</span> <span class=\"nt\">sensor</span> <span class=\"nt\">library</span> <span class=\"nt\">with</span> <span class=\"nt\">physics</span><span class=\"o\">.</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">return</span> <span class=\"nt\">True</span> <span class=\"nt\">if</span> <span class=\"nt\">successfully</span> <span class=\"nt\">initialized</span><span class=\"o\">,</span> <span class=\"nt\">false</span> <span class=\"nt\">if</span> <span class=\"nt\">not</span>\n      <span class=\"nt\">bool</span> <span class=\"nt\">Init</span><span class=\"o\">(</span><span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">physics</span><span class=\"p\">::</span><span class=\"nd\">Manager</span> <span class=\"o\">&amp;</span><span class=\"nt\">_physics</span><span class=\"o\">);</span>\n\n\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">brief</span> <span class=\"nt\">Initialize</span> <span class=\"nt\">the</span> <span class=\"nt\">sensor</span> <span class=\"nt\">library</span> <span class=\"nt\">with</span> <span class=\"nt\">rendering</span> <span class=\"nt\">and</span> <span class=\"nt\">physics</span><span class=\"o\">.</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">return</span> <span class=\"nt\">True</span> <span class=\"nt\">if</span> <span class=\"nt\">successfully</span> <span class=\"nt\">initialized</span><span class=\"o\">,</span> <span class=\"nt\">false</span> <span class=\"nt\">if</span> <span class=\"nt\">not</span>\n      <span class=\"nt\">bool</span> <span class=\"nt\">Init</span><span class=\"o\">(</span><span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">rendering</span><span class=\"p\">::</span><span class=\"nd\">Manager</span> <span class=\"o\">&amp;</span><span class=\"nt\">_rendering</span><span class=\"o\">,</span> <span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">physics</span><span class=\"p\">::</span><span class=\"nd\">Manager</span> <span class=\"o\">&amp;</span><span class=\"nt\">_physics</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>/// \\brief set the rendering manager used by sensors\nSetPhysics(ignition::physics::Manager &amp;_physics)\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-08-14T16:41:42.410824+00:00", "milestone": null, "updated_on": "2017-11-10T16:16:34.449565+00:00", "type": "issue", "id": 1}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/2/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/2/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/2/proposal-use-raii-constructor-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/2/vote"}}, "reporter": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "title": "Proposal: Use RAII/Constructor to initialize sensors instead of Init() pattern", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Functions like `Init()` and `Load()` which have to be called after construction can be confusing for users (and developers), and easily lead to bugs and maintenance issues. As an example, it can be very unclear whether `Init()` should be called before or after `Load()`, or it might not be obvious to a user that these functions even exist, and so they might try to use the constructed object in an uninitialized (or partially initialized) state, leading to crashes or exceptions that are difficult to debug.\r\n\r\nIf it's at all possible, I would strongly encourage us to design sensors so that the arguments that get passed to `Init()` and `Load()` would instead get passed to the constructor of the `Sensor`. Classes that derive from `Sensor` therefore must make constructors which accept those same arguments (plus they have the option of additionally accepting their own custom arguments).\r\n\r\nWe could keep the `Load(sdf)` function in case we want a way to re-initialize a sensor or change its parameters while it's in operation, but calling it would be optional. The `Init()` function would be removed entirely.\r\n\r\nI believe we're going to be aggressively enforcing the RAII pattern in the `ign-physics` design, so it would be especially great if `ign-sensors` were able to match that.", "markup": "markdown", "html": "<p>Functions like <code>Init()</code> and <code>Load()</code> which have to be called after construction can be confusing for users (and developers), and easily lead to bugs and maintenance issues. As an example, it can be very unclear whether <code>Init()</code> should be called before or after <code>Load()</code>, or it might not be obvious to a user that these functions even exist, and so they might try to use the constructed object in an uninitialized (or partially initialized) state, leading to crashes or exceptions that are difficult to debug.</p>\n<p>If it's at all possible, I would strongly encourage us to design sensors so that the arguments that get passed to <code>Init()</code> and <code>Load()</code> would instead get passed to the constructor of the <code>Sensor</code>. Classes that derive from <code>Sensor</code> therefore must make constructors which accept those same arguments (plus they have the option of additionally accepting their own custom arguments).</p>\n<p>We could keep the <code>Load(sdf)</code> function in case we want a way to re-initialize a sensor or change its parameters while it's in operation, but calling it would be optional. The <code>Init()</code> function would be removed entirely.</p>\n<p>I believe we're going to be aggressively enforcing the RAII pattern in the <code>ign-physics</code> design, so it would be especially great if <code>ign-sensors</code> were able to match that.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-09-28T22:08:51.157912+00:00", "milestone": null, "updated_on": "2017-09-28T22:13:16.992899+00:00", "type": "issue", "id": 2}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/3/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/3/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/3/sdformat8-include-directories-not-exported"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/3/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "sdformat8 include directories not exported in pkg-config or cmake config files", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [X] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\nWhile attempting to build a bottle for ignition-sensors0 in [osrf/simulation pull 497](https://github.com/osrf/homebrew-simulation/pull/497), I noticed that the homebrew formula's test that tries to use the ign-sensors pkg-config file to build an example program was failing to locate the sdformat header file location:\r\n\r\n* https://build.osrfoundation.org/job/generic-release-homebrew_bottle_builder/label=osx_mojave/31/console\r\n\r\n~~~\r\nignition/sensors/CameraConfig.hh:25:10: fatal error: 'sdf/sdf.hh' file not found\r\n#include <sdf/sdf.hh>\r\n         ^~~~~~~~~~~~\r\n1 error generated.\r\nError: osrf/simulation/ignition-sensors0: failed\r\n~~~\r\n\r\nI've confirmed that the issue also occurs with the cmake config file.\r\n\r\n# Steps to Reproduce\r\n\r\n1. Build and install ign-sensors\r\n2. Try to build the [save_image example](#!/ignitionrobotics/ign-sensors/src/d65e56660cd602760c2074c73674562855da0166/examples/save_image/?at=default)\r\n3. It will fail to find the sdf headers.\r\n\r\n**Expected behavior:**  \r\n\r\nSDF include dirs should be exported with the ign-sensors cmake target and in the pkg-config file, and the example should compile.\r\n\r\n**Actual behavior:**\r\n\r\nThey aren't exported, so the example doesn't compile.\r\n\r\n**Reproduces how often:** \r\n\r\n100%\r\n\r\n# Versions\r\n\r\n0.1.0~pre1, macOS mojave and Ubuntu bionic\r\n\r\n# Additional Information", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[X] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>While attempting to build a bottle for ignition-sensors0 in <a data-is-external-link=\"true\" href=\"https://github.com/osrf/homebrew-simulation/pull/497\" rel=\"nofollow\">osrf/simulation pull 497</a>, I noticed that the homebrew formula's test that tries to use the ign-sensors pkg-config file to build an example program was failing to locate the sdformat header file location:</p>\n<ul>\n<li><a href=\"https://build.osrfoundation.org/job/generic-release-homebrew_bottle_builder/label=osx_mojave/31/console\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/job/generic-release-homebrew_bottle_builder/label=osx_mojave/31/console</a></li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ignition</span><span class=\"o\">/</span><span class=\"n\">sensors</span><span class=\"o\">/</span><span class=\"n\">CameraConfig</span><span class=\"p\">.</span><span class=\"nl\">hh</span><span class=\"p\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">fatal</span> <span class=\"nl\">error</span><span class=\"p\">:</span> <span class=\"err\">&#39;</span><span class=\"n\">sdf</span><span class=\"o\">/</span><span class=\"n\">sdf</span><span class=\"p\">.</span><span class=\"n\">hh</span><span class=\"err\">&#39;</span> <span class=\"n\">file</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sdf/sdf.hh&gt;</span><span class=\"cp\"></span>\n         <span class=\"o\">^~~~~~~~~~~~</span>\n<span class=\"mi\">1</span> <span class=\"n\">error</span> <span class=\"n\">generated</span><span class=\"p\">.</span>\n<span class=\"nl\">Error</span><span class=\"p\">:</span> <span class=\"n\">osrf</span><span class=\"o\">/</span><span class=\"n\">simulation</span><span class=\"o\">/</span><span class=\"n\">ignition</span><span class=\"o\">-</span><span class=\"nl\">sensors0</span><span class=\"p\">:</span> <span class=\"n\">failed</span>\n</pre></div>\n\n\n<p>I've confirmed that the issue also occurs with the cmake config file.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ol>\n<li>Build and install ign-sensors</li>\n<li>Try to build the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-sensors/src/d65e56660cd602760c2074c73674562855da0166/examples/save_image/?at=default\" rel=\"nofollow\">save_image example</a></li>\n<li>It will fail to find the sdf headers.</li>\n</ol>\n<p><strong>Expected behavior:</strong>  </p>\n<p>SDF include dirs should be exported with the ign-sensors cmake target and in the pkg-config file, and the example should compile.</p>\n<p><strong>Actual behavior:</strong></p>\n<p>They aren't exported, so the example doesn't compile.</p>\n<p><strong>Reproduces how often:</strong> </p>\n<p>100%</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>0.1.0~pre1, macOS mojave and Ubuntu bionic</p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-11-06T02:16:49.211944+00:00", "milestone": null, "updated_on": "2019-03-22T21:50:04.444836+00:00", "type": "issue", "id": 3}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/4/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/4/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/4/lidar-unit-test-segfaults-on-homebrew"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/4/vote"}}, "reporter": {"display_name": "Javier Iv\u00e1n Choclin", "uuid": "{745acb37-6a3b-4169-8ba9-2c142a7408fb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D"}, "html": {"href": "https://bitbucket.org/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2279399d-3c75-4e1e-b818-4fb8339b2939/26f5815d-5477-4106-ba9b-ac56ee23e175/128"}}, "nickname": "Javier Choclin", "type": "user", "account_id": "557058:2279399d-3c75-4e1e-b818-4fb8339b2939"}, "title": "Lidar unit test segfaults on Homebrew", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Description \r\n\r\nLidar unit test segfaults on Homebrew.\r\n\r\n**Expected behavior:**  \r\n\r\nIt shouldn't be an issue since Lidar is a class that should be used with GPU and CPU lidar.\r\n\r\n**Actual behavior:**\r\n\r\nThere is a segfault when the unit test is run.\r\n\r\n```\r\n5: Test command: /Users/jenkins/workspace/ignition_sensors-ci-pr_any-homebrew-amd64/build/bin/UNIT_Lidar_TEST \"--gtest_output=xml:/Users/jenkins/workspace/ignition_sensors-ci-pr_any-homebrew-amd64/build/test_results/UNIT_Lidar_TEST.xml\"\r\n5: Test timeout computed to be: 240\r\n5: [==========] Running 1 test from 1 test case.\r\n5: [----------] Global test environment set-up.\r\n5: [----------] 1 test from Lidar_TEST\r\n5: [ RUN      ] Lidar_TEST.CreateLaser\r\n5: [Err] [Manager.hh:111] SDF sensor type does not match template type\r\n5: /Users/jenkins/workspace/ignition_sensors-ci-pr_any-homebrew-amd64/ign-sensors/src/Lidar_TEST.cc:127: Failure\r\n5: Value of: sensor != nullptr\r\n5:   Actual: false\r\n5: Expected: true\r\n 5/14 Test  #5: UNIT_Lidar_TEST .............................***Exception: SegFault  0.10 sec\r\n```\r\n\r\n**Reproduces how often:** \r\n\r\nOn every Jenkins run.\r\n\r\n# Versions\r\n\r\nIgnition sensors 1", "markup": "markdown", "html": "<h1 id=\"markdown-header-description\">Description</h1>\n<p>Lidar unit test segfaults on Homebrew.</p>\n<p><strong>Expected behavior:</strong>  </p>\n<p>It shouldn't be an issue since Lidar is a class that should be used with GPU and CPU lidar.</p>\n<p><strong>Actual behavior:</strong></p>\n<p>There is a segfault when the unit test is run.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">command</span><span class=\"o\">:</span> <span class=\"sr\">/Users/jenkins/workspace/ignition_sensors-ci-pr_any-homebrew-amd64/build/bin/UNIT_Lidar_TEST &quot;--gtest_output=xml:/Users/jenkins/workspace/ignition_sensors-ci-pr_any-homebrew-amd64/build/test_results/</span><span class=\"n\">UNIT_Lidar_TEST</span><span class=\"o\">.</span><span class=\"na\">xml</span><span class=\"err\">&quot;</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">timeout</span> <span class=\"n\">computed</span> <span class=\"n\">to</span> <span class=\"n\">be</span><span class=\"o\">:</span> <span class=\"mi\">240</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"o\">[==========]</span> <span class=\"n\">Running</span> <span class=\"mi\">1</span> <span class=\"n\">test</span> <span class=\"n\">from</span> <span class=\"mi\">1</span> <span class=\"n\">test</span> <span class=\"k\">case</span><span class=\"o\">.</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"o\">[----------]</span> <span class=\"n\">Global</span> <span class=\"n\">test</span> <span class=\"n\">environment</span> <span class=\"kd\">set</span><span class=\"o\">-</span><span class=\"n\">up</span><span class=\"o\">.</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"o\">[----------]</span> <span class=\"mi\">1</span> <span class=\"n\">test</span> <span class=\"n\">from</span> <span class=\"n\">Lidar_TEST</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"o\">[</span> <span class=\"n\">RUN</span>      <span class=\"o\">]</span> <span class=\"n\">Lidar_TEST</span><span class=\"o\">.</span><span class=\"na\">CreateLaser</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Err</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Manager</span><span class=\"o\">.</span><span class=\"na\">hh</span><span class=\"o\">:</span><span class=\"mi\">111</span><span class=\"o\">]</span> <span class=\"n\">SDF</span> <span class=\"n\">sensor</span> <span class=\"n\">type</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">match</span> <span class=\"n\">template</span> <span class=\"n\">type</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"sr\">/Users/jenkins/workspace/ignition_sensors-ci-pr_any-homebrew-amd64/ign-sensors/src/</span><span class=\"n\">Lidar_TEST</span><span class=\"o\">.</span><span class=\"na\">cc</span><span class=\"o\">:</span><span class=\"mi\">127</span><span class=\"o\">:</span> <span class=\"n\">Failure</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"n\">of</span><span class=\"o\">:</span> <span class=\"n\">sensor</span> <span class=\"o\">!=</span> <span class=\"n\">nullptr</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span>   <span class=\"n\">Actual</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n<span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">Expected</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n <span class=\"mi\">5</span><span class=\"o\">/</span><span class=\"mi\">14</span> <span class=\"n\">Test</span>  <span class=\"err\">#</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">UNIT_Lidar_TEST</span> <span class=\"o\">.............................***</span><span class=\"n\">Exception</span><span class=\"o\">:</span> <span class=\"n\">SegFault</span>  <span class=\"mf\">0.10</span> <span class=\"n\">sec</span>\n</pre></div>\n\n\n<p><strong>Reproduces how often:</strong> </p>\n<p>On every Jenkins run.</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>Ignition sensors 1</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-03-12T17:50:13.047048+00:00", "milestone": null, "updated_on": "2019-03-12T17:50:13.047048+00:00", "type": "issue", "id": 4}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/5/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/5/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/5/update-api-to-use-std-chrono"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/5/vote"}}, "reporter": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "title": "Update API to use std::chrono", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nThe sensor Update function currently accepts `common::Time`. We should consider either changing them to accept std::chrono through tick-tock cycle or adding new overloaded Update function in addition to the existing ones.\r\n\r\n# Motivation\r\n\r\n`std::chrono` is now a widely accepted time and date library and it's also used in other ignition projects.\r\n\r\n# Describe alternatives you've considered\r\n\r\nN/A", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>The sensor Update function currently accepts <code>common::Time</code>. We should consider either changing them to accept std::chrono through tick-tock cycle or adding new overloaded Update function in addition to the existing ones.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p><code>std::chrono</code> is now a widely accepted time and date library and it's also used in other ignition projects.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>N/A</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-03-19T19:35:57.075205+00:00", "milestone": null, "updated_on": "2019-03-19T19:35:57.075205+00:00", "type": "issue", "id": 5}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/6/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/6/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/6/windows-build-failing"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/6/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Windows build failing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [X] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\nWindows build fails:\r\n\r\n* https://build.osrfoundation.org/job/ign_sensors-ign-1-win/5\r\n\r\n~~~\r\nCameraSensor.obj : error LNK2001:\r\n unresolved external symbol \"__declspec(dllimport) public: __cdecl\r\n ignition::sensors::v1::SensorTypePlugin<class ignition::sensors::v1::CameraSensor>::SensorTypePlugin<class ignition::sensors::v1::CameraSensor>(void)\" \r\n~~~\r\n\r\n~~~\r\nGpuLidarSensor.obj : error LNK2001:\r\n unresolved external symbol \"__declspec(dllimport) public: __cdecl\r\n ignition::sensors::v1::SensorTypePlugin<class ignition::sensors::v1::GpuLidarSensor>::SensorTypePlugin<class ignition::sensors::v1::GpuLidarSensor>(void)\" \r\n~~~\r\n\r\n~~~\r\nLogicalCameraSensor.obj : error LNK2001:\r\n unresolved external symbol \"__declspec(dllimport) public: __cdecl\r\n ignition::sensors::v1::SensorTypePlugin<class ignition::sensors::v1::LogicalCameraSensor>::SensorTypePlugin<class ignition::sensors::v1::LogicalCameraSensor>(void)\" \r\n~~~\r\n# Steps to Reproduce\r\n\r\n1. Build on windows\r\n\r\n**Expected behavior:**  \r\n\r\nBuilds successfully\r\n\r\n**Actual behavior:**\r\n\r\nFails to build\r\n\r\n**Reproduces how often:** \r\n\r\n100%\r\n\r\n# Versions\r\n\r\nign-sensors1 branch on windows\r\n\r\n# Additional Information", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[X] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>Windows build fails:</p>\n<ul>\n<li><a href=\"https://build.osrfoundation.org/job/ign_sensors-ign-1-win/5\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/job/ign_sensors-ign-1-win/5</a></li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>CameraSensor.obj : error LNK2001:\n unresolved external symbol &quot;__declspec(dllimport) public: __cdecl\n ignition::sensors::v1::SensorTypePlugin&lt;class ignition::sensors::v1::CameraSensor&gt;::SensorTypePlugin&lt;class ignition::sensors::v1::CameraSensor&gt;(void)&quot; \n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>GpuLidarSensor.obj : error LNK2001:\n unresolved external symbol &quot;__declspec(dllimport) public: __cdecl\n ignition::sensors::v1::SensorTypePlugin&lt;class ignition::sensors::v1::GpuLidarSensor&gt;::SensorTypePlugin&lt;class ignition::sensors::v1::GpuLidarSensor&gt;(void)&quot; \n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>LogicalCameraSensor.obj : error LNK2001:\n unresolved external symbol &quot;__declspec(dllimport) public: __cdecl\n ignition::sensors::v1::SensorTypePlugin&lt;class ignition::sensors::v1::LogicalCameraSensor&gt;::SensorTypePlugin&lt;class ignition::sensors::v1::LogicalCameraSensor&gt;(void)&quot; \n</pre></div>\n\n\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ol>\n<li>Build on windows</li>\n</ol>\n<p><strong>Expected behavior:</strong>  </p>\n<p>Builds successfully</p>\n<p><strong>Actual behavior:</strong></p>\n<p>Fails to build</p>\n<p><strong>Reproduces how often:</strong> </p>\n<p>100%</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>ign-sensors1 branch on windows</p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-03-22T21:55:09.080747+00:00", "milestone": null, "updated_on": "2019-03-25T21:51:25.567858+00:00", "type": "issue", "id": 6}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/7/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/7/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/7/advanced-imu-parameterization"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/7/vote"}}, "reporter": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "title": "Advanced IMU Parameterization", "component": null, "votes": 0, "watches": 1, "content": {"raw": "While updating the noise models, I thought of a few additional parameters that may be useful to simulate real IMUs \\(and potentially other sensors\\).\r\n\r\n* Sensor Properties\r\n\r\n    * Dynamic Range - The maximum range that a sensor can measure before the readings are clipped.  It\u2019s possible to saturate sensors that have higher sensitivity over a smaller dynamic range.\r\n    * Sensitivity - This may already be captured by precision value, but we may need to rework how precision is mapped over a given dynamic range.\r\n    * Sensor Bandwidth - Typically sensors will have either mechanically or electrically-imposed bandwidth limits such that higher frequency components are filtered out.  For instance the ADIS16448 has a front-end lowpass filter at approximately 330 Hz.  Other sensors like a magnetometer are even lower \\(25Hz\\).\r\n    \r\n* Other Error Sources\r\n\r\n    * Sensor timing - we could potentially model things like clock jitter or skew.\r\n    * Scale Factor - A multiplier between the physical input and the measurement, typically parts-per-million\r\n    * Nonlinearity - A non-linear function that maps the physical input to the measurement.\r\n    * Misalignment - Could probably already be captured by slight perturbations in the pose of the sensor.\r\n    * Non-orthogonality - If the sensor isn\u2019t manufactured perfectly, then some physical inputs on the body axes will \u201cleak\u201d into other channels\r\n    * Acceleration effect on Bias - In MEMS gyroscopes, high accelerations can lead to additional biases in the measurements.\r\n    * Tempertature effect on Bias - In MEMS gyroscopes, varying temperatures can lead to additional biases in the measurements.", "markup": "markdown", "html": "<p>While updating the noise models, I thought of a few additional parameters that may be useful to simulate real IMUs (and potentially other sensors).</p>\n<ul>\n<li>\n<p>Sensor Properties</p>\n<ul>\n<li>Dynamic Range - The maximum range that a sensor can measure before the readings are clipped.  It\u2019s possible to saturate sensors that have higher sensitivity over a smaller dynamic range.</li>\n<li>Sensitivity - This may already be captured by precision value, but we may need to rework how precision is mapped over a given dynamic range.</li>\n<li>Sensor Bandwidth - Typically sensors will have either mechanically or electrically-imposed bandwidth limits such that higher frequency components are filtered out.  For instance the ADIS16448 has a front-end lowpass filter at approximately 330 Hz.  Other sensors like a magnetometer are even lower (25Hz).</li>\n</ul>\n</li>\n<li>\n<p>Other Error Sources</p>\n<ul>\n<li>Sensor timing - we could potentially model things like clock jitter or skew.</li>\n<li>Scale Factor - A multiplier between the physical input and the measurement, typically parts-per-million</li>\n<li>Nonlinearity - A non-linear function that maps the physical input to the measurement.</li>\n<li>Misalignment - Could probably already be captured by slight perturbations in the pose of the sensor.</li>\n<li>Non-orthogonality - If the sensor isn\u2019t manufactured perfectly, then some physical inputs on the body axes will \u201cleak\u201d into other channels</li>\n<li>Acceleration effect on Bias - In MEMS gyroscopes, high accelerations can lead to additional biases in the measurements.</li>\n<li>Tempertature effect on Bias - In MEMS gyroscopes, varying temperatures can lead to additional biases in the measurements.</li>\n</ul>\n</li>\n</ul>", "type": "rendered"}, "assignee": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-05-07T17:51:13.073685+00:00", "milestone": null, "updated_on": "2019-05-07T17:51:13.073685+00:00", "type": "issue", "id": 7}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/8/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/8.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/8/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/8/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/8/gpu-laser-crashes-with-more-than-16k"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/8/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "GPU laser crashes with more than 16k samples", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [X] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\nGPU laser crashes with more than 16k horizontal samples.\r\n\r\n# Steps to Reproduce\r\n\r\nTry this SDF:\r\n\r\n~~~\r\n            <sensor name='front_laser' type='gpu_ray'>\r\n              <pose>0.08 0 0.3 0 0 0</pose>\r\n              <update_rate>15</update_rate>\r\n              <topic>/x1/points</topic>\r\n              <lidar>\r\n                <scan>\r\n                  <horizontal>\r\n                    <samples>18000</samples>\r\n                    <resolution>0.1</resolution>\r\n                    <min_angle>-3.1459</min_angle>\r\n                    <max_angle>3.1459</max_angle>\r\n                  </horizontal>\r\n                  <vertical>\r\n                    <samples>16</samples>\r\n                    <resolution>1</resolution>\r\n                    <min_angle>-0.261799</min_angle>\r\n                    <max_angle>0.261799</max_angle>\r\n                  </vertical>\r\n                </scan>\r\n                <range>\r\n                  <min>0.05</min>\r\n                  <max>75</max>\r\n                  <resolution>0.01</resolution>\r\n                </range>\r\n                <noise>\r\n                  <type>gaussian</type>\r\n                  <mean>0</mean>\r\n                  <stddev>0.01</stddev>\r\n                </noise>\r\n              </lidar>\r\n            </sensor>\r\n~~~\r\n\r\n**Expected behavior:**  \r\n\r\nSensor is properly created with no crash. If you change the `18000` above to `16000` there's no crash.\r\n\r\n**Actual behavior:**\r\n\r\nCrash with:\r\n\r\n~~~\r\nterminate called after throwing an instance of 'Ogre::RenderingAPIException'\r\n  what():  OGRE EXCEPTION(3:RenderingAPIException): Zero sized texture surface on texture x1::base::front_laser_samplerTex face 0 mipmap 0. The GL driver probably refused to create the texture. in GL3PlusTexture::_createSurfaceList at /var/lib/jenkins/workspace/ogre-2.1-debbuilder/repo/RenderSystems/GL3Plus/src/OgreGL3PlusTexture.cpp (line 516)\r\n~~~\r\n\r\n**Reproduces how often:** \r\n\r\n100%\r\n\r\n# Versions\r\n\r\n`ign-sensors2`\r\n\r\n# Additional Information\r\n\r\nI talked to @iche033 and apparently large sample counts are redundant anyway, since the underlying computations use a cube with 1024x1024 sized walls.\r\n\r\nWe should at least prevent the crash, but a better solution may involve interpolating the samples.", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[X] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>GPU laser crashes with more than 16k horizontal samples.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<p>Try this SDF:</p>\n<div class=\"codehilite\"><pre><span></span>            <span class=\"nt\">&lt;sensor</span> <span class=\"na\">name=</span><span class=\"s\">&#39;front_laser&#39;</span> <span class=\"na\">type=</span><span class=\"s\">&#39;gpu_ray&#39;</span><span class=\"nt\">&gt;</span>\n              <span class=\"nt\">&lt;pose&gt;</span>0.08 0 0.3 0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n              <span class=\"nt\">&lt;update_rate&gt;</span>15<span class=\"nt\">&lt;/update_rate&gt;</span>\n              <span class=\"nt\">&lt;topic&gt;</span>/x1/points<span class=\"nt\">&lt;/topic&gt;</span>\n              <span class=\"nt\">&lt;lidar&gt;</span>\n                <span class=\"nt\">&lt;scan&gt;</span>\n                  <span class=\"nt\">&lt;horizontal&gt;</span>\n                    <span class=\"nt\">&lt;samples&gt;</span>18000<span class=\"nt\">&lt;/samples&gt;</span>\n                    <span class=\"nt\">&lt;resolution&gt;</span>0.1<span class=\"nt\">&lt;/resolution&gt;</span>\n                    <span class=\"nt\">&lt;min_angle&gt;</span>-3.1459<span class=\"nt\">&lt;/min_angle&gt;</span>\n                    <span class=\"nt\">&lt;max_angle&gt;</span>3.1459<span class=\"nt\">&lt;/max_angle&gt;</span>\n                  <span class=\"nt\">&lt;/horizontal&gt;</span>\n                  <span class=\"nt\">&lt;vertical&gt;</span>\n                    <span class=\"nt\">&lt;samples&gt;</span>16<span class=\"nt\">&lt;/samples&gt;</span>\n                    <span class=\"nt\">&lt;resolution&gt;</span>1<span class=\"nt\">&lt;/resolution&gt;</span>\n                    <span class=\"nt\">&lt;min_angle&gt;</span>-0.261799<span class=\"nt\">&lt;/min_angle&gt;</span>\n                    <span class=\"nt\">&lt;max_angle&gt;</span>0.261799<span class=\"nt\">&lt;/max_angle&gt;</span>\n                  <span class=\"nt\">&lt;/vertical&gt;</span>\n                <span class=\"nt\">&lt;/scan&gt;</span>\n                <span class=\"nt\">&lt;range&gt;</span>\n                  <span class=\"nt\">&lt;min&gt;</span>0.05<span class=\"nt\">&lt;/min&gt;</span>\n                  <span class=\"nt\">&lt;max&gt;</span>75<span class=\"nt\">&lt;/max&gt;</span>\n                  <span class=\"nt\">&lt;resolution&gt;</span>0.01<span class=\"nt\">&lt;/resolution&gt;</span>\n                <span class=\"nt\">&lt;/range&gt;</span>\n                <span class=\"nt\">&lt;noise&gt;</span>\n                  <span class=\"nt\">&lt;type&gt;</span>gaussian<span class=\"nt\">&lt;/type&gt;</span>\n                  <span class=\"nt\">&lt;mean&gt;</span>0<span class=\"nt\">&lt;/mean&gt;</span>\n                  <span class=\"nt\">&lt;stddev&gt;</span>0.01<span class=\"nt\">&lt;/stddev&gt;</span>\n                <span class=\"nt\">&lt;/noise&gt;</span>\n              <span class=\"nt\">&lt;/lidar&gt;</span>\n            <span class=\"nt\">&lt;/sensor&gt;</span>\n</pre></div>\n\n\n<p><strong>Expected behavior:</strong>  </p>\n<p>Sensor is properly created with no crash. If you change the <code>18000</code> above to <code>16000</code> there's no crash.</p>\n<p><strong>Actual behavior:</strong></p>\n<p>Crash with:</p>\n<div class=\"codehilite\"><pre><span></span>terminate called after throwing an instance of &#39;Ogre::RenderingAPIException&#39;\n  what():  OGRE EXCEPTION(3:RenderingAPIException): Zero sized texture surface on texture x1::base::front_laser_samplerTex face 0 mipmap 0. The GL driver probably refused to create the texture. in GL3PlusTexture::_createSurfaceList at /var/lib/jenkins/workspace/ogre-2.1-debbuilder/repo/RenderSystems/GL3Plus/src/OgreGL3PlusTexture.cpp (line 516)\n</pre></div>\n\n\n<p><strong>Reproduces how often:</strong> </p>\n<p>100%</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p><code>ign-sensors2</code></p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>I talked to @iche033 and apparently large sample counts are redundant anyway, since the underlying computations use a cube with 1024x1024 sized walls.</p>\n<p>We should at least prevent the crash, but a better solution may involve interpolating the samples.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-05-18T01:20:33.454355+00:00", "milestone": null, "updated_on": "2019-05-18T01:27:24.316502+00:00", "type": "issue", "id": 8}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-sensors.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71484f03-645d-4ba1-be9e-2f64dce50289}ts=default"}}, "type": "repository", "name": "ign-sensors", "full_name": "ignitionrobotics/ign-sensors", "uuid": "{71484f03-645d-4ba1-be9e-2f64dce50289}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/9/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/9.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/9/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-sensors/issues/9/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-sensors/issues/9/support-custom-sensors"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-sensors/issues/9/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Support custom sensors", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nDownstream users often need to create their own custom sensors. Ideally, they should be able to leverage Ignition Sensors' APIs for that.\r\n\r\n# Motivation\r\n\r\nUsers need the flexibility to implement sensors that don't make it into the Ignition Sensors library, because they want to keep the sensors private, or because the sensors are too specialized for some use case, or some other reason.\r\n\r\n# Describe alternatives you've considered\r\n\r\nUsers could always implement their sensors as custom Ignition Gazebo systems, but they wouldn't be able to make use of Ignition Sensors' features like custom noise and other convenient APIs.\r\n\r\n# Additional context\r\n\r\nIgnition sensors already has a plugin architecture and each sensor is being released as its own component package. But we don't have any examples of a sensor implemented as an external library. Is that already supported? What's missing?", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>Downstream users often need to create their own custom sensors. Ideally, they should be able to leverage Ignition Sensors' APIs for that.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>Users need the flexibility to implement sensors that don't make it into the Ignition Sensors library, because they want to keep the sensors private, or because the sensors are too specialized for some use case, or some other reason.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>Users could always implement their sensors as custom Ignition Gazebo systems, but they wouldn't be able to make use of Ignition Sensors' features like custom noise and other convenient APIs.</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>Ignition sensors already has a plugin architecture and each sensor is being released as its own component package. But we don't have any examples of a sensor implemented as an external library. Is that already supported? What's missing?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-03-24T22:14:16.530245+00:00", "milestone": null, "updated_on": "2020-03-24T22:14:16.530245+00:00", "type": "issue", "id": 9}], "page": 1, "size": 9}