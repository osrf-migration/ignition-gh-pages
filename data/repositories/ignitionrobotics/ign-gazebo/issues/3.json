{"priority": "critical", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/issues/3/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/3/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/3/pose-components"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/issues/3/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Pose components", "component": null, "votes": 0, "watches": 1, "content": {"raw": "This issue is meant to discuss the frame of reference, and more generally pose components, within the ECS.\r\n\r\n## Current implementation\r\n\r\nCurrently, [ignition::gazebo::components::Pose](#!/ignitionrobotics/ign-gazebo/src/e38b48e51c74124e070cfc236cfd290941d04a1d/include/ignition/gazebo/components/Pose.hh?at=default&fileviewer=file-view-default) holds an `ignition::math::Pose3d` for an entity, but its frame of reference is not clear from the component itself. For now, the physics and rendering systems have been assuming the SDF spec:\r\n\r\nEntity | Pose frame\r\n----------- | ---------\r\nModel | Parent entity (world or parent model)\r\nLink | Parent model\r\nCollision | Parent link\r\nVisual | Parent link\r\nJoint (not on `ign-gazebo` yet) | Child link\r\n\r\n## Related discussions\r\n\r\nBefore any considerations, it would be interesting to be aware of previous documents:\r\n\r\n* [SDF reference geometry design document](https://bitbucket.org/osrf/gazebo_design/src/33bc24ee42157acfa3c252ed9195c6639526e177/sdf_reference_geometry/sdf_reference_geometry.md?at=smart_pointers&fileviewer=file-view-default)\r\n\r\n* [Ignition Physics: Frame semantics](https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics#IgnitionPhysics-FrameSemantics)\r\n\r\n##  Use cases\r\n\r\nSeveral parts of `ign-gazebo` will handle pose components, and each of them has different use cases. For example:\r\n\r\n* **Server**: Must be able to parse SDF to create pose components.\r\n* **Physics system**: Creates its internal representation based on pose components, and updates them as time elapses.\r\n* **Rendering system**: Creates its scene based on pose components and updates the scene as the pose changes.\r\n* **GUI**: Displays entity poses to users, and also lets users edit the pose. For increased usability, the user should be able to choose which frame of reference to use, the units, and convention (i.e. Euler / quaternion).\r\n\r\n## Proposals\r\n\r\nHere are some solutions I can think of, please feel free to discuss and propose alternatives below.\r\n\r\n### \"Pose manager\"\r\n\r\nIt looks like it would be convenient to have a central API which allows converting from any frame of reference to any other at any given time, and is accessible by all systems. This would be akin to the TF framework on ROS, but thinner and more specific to the ECS. This way, systems don't need to worry about keeping track of frames, they could just query as needed.\r\n\r\nSome considerations:\r\n\r\n* The manager could be implemented as a system, which gathers all pose information and exposes that to other systems on demand.\r\n* A synchronous interface would be ideal, so systems can make fast queries within their update callbacks. But we also need an asynchronous interface for when systems are spread across processes. So I think it makes sense to use Ignition Transport to provide pose query services, and it would be interesting to use sync/async as needed.\r\n* [ignition::gazebo::systems::SceneBroadcaster](#!/ignitionrobotics/ign-gazebo/src/e38b48e51c74124e070cfc236cfd290941d04a1d/src/systems/SceneBroadcaster.cc?at=default&fileviewer=file-view-default) already implemented some features which could be moved to the pose manager, like a `pose/info` publisher and a `pose/graph` service.\r\n\r\n### Pose component's frame\r\n\r\nIt has been suggested before that the pose component carry two pieces of information:\r\n\r\n* The `ignition::math::Pose3d`\r\n* The reference frame\r\n\r\nThis way, each entity could be explicit about what frame its pose is being expressed about.\r\n\r\nI think this adds complexity, as all systems will need to handle poses with arbitrary frames.\r\n\r\nSo my first proposal is: **The pose component should not carry frame information, instead, that is defined by convention.**\r\n\r\nThen the question is about what should the convention be. I lean towards **the pose always being expressed w.r.t. the parent entity**, as opposed to any other ancestor closer to the root (like the world or the root model). The main reason being that an entity knows who their immediate parent entity is, but it would necessary to crawl the entity tree to figure our who the other descendant would be.\r\n\r\nUsing the pose manager, any systems which use different conventions should be able to easily get the pose in the frame they're interested in.\r\n\r\n\r\n## Unanswered questions\r\n\r\n* Who is the parent of a joint entity and how does its pose get defined?", "markup": "markdown", "html": "<p>This issue is meant to discuss the frame of reference, and more generally pose components, within the ECS.</p>\n<h2 id=\"markdown-header-current-implementation\">Current implementation</h2>\n<p>Currently, <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/e38b48e51c74124e070cfc236cfd290941d04a1d/include/ignition/gazebo/components/Pose.hh?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">ignition::gazebo::components::Pose</a> holds an <code>ignition::math::Pose3d</code> for an entity, but its frame of reference is not clear from the component itself. For now, the physics and rendering systems have been assuming the SDF spec:</p>\n<table>\n<thead>\n<tr>\n<th>Entity</th>\n<th>Pose frame</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Model</td>\n<td>Parent entity (world or parent model)</td>\n</tr>\n<tr>\n<td>Link</td>\n<td>Parent model</td>\n</tr>\n<tr>\n<td>Collision</td>\n<td>Parent link</td>\n</tr>\n<tr>\n<td>Visual</td>\n<td>Parent link</td>\n</tr>\n<tr>\n<td>Joint (not on <code>ign-gazebo</code> yet)</td>\n<td>Child link</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"markdown-header-related-discussions\">Related discussions</h2>\n<p>Before any considerations, it would be interesting to be aware of previous documents:</p>\n<ul>\n<li>\n<p><a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo_design/src/33bc24ee42157acfa3c252ed9195c6639526e177/sdf_reference_geometry/sdf_reference_geometry.md?at=smart_pointers&amp;fileviewer=file-view-default\" rel=\"nofollow\">SDF reference geometry design document</a></p>\n</li>\n<li>\n<p><a data-is-external-link=\"true\" href=\"https://osrfoundation.atlassian.net/wiki/spaces/GAZ/pages/659926/Ignition+Physics#IgnitionPhysics-FrameSemantics\" rel=\"nofollow\">Ignition Physics: Frame semantics</a></p>\n</li>\n</ul>\n<h2 id=\"markdown-header-use-cases\">Use cases</h2>\n<p>Several parts of <code>ign-gazebo</code> will handle pose components, and each of them has different use cases. For example:</p>\n<ul>\n<li><strong>Server</strong>: Must be able to parse SDF to create pose components.</li>\n<li><strong>Physics system</strong>: Creates its internal representation based on pose components, and updates them as time elapses.</li>\n<li><strong>Rendering system</strong>: Creates its scene based on pose components and updates the scene as the pose changes.</li>\n<li><strong>GUI</strong>: Displays entity poses to users, and also lets users edit the pose. For increased usability, the user should be able to choose which frame of reference to use, the units, and convention (i.e. Euler / quaternion).</li>\n</ul>\n<h2 id=\"markdown-header-proposals\">Proposals</h2>\n<p>Here are some solutions I can think of, please feel free to discuss and propose alternatives below.</p>\n<h3 id=\"markdown-header-pose-manager\">\"Pose manager\"</h3>\n<p>It looks like it would be convenient to have a central API which allows converting from any frame of reference to any other at any given time, and is accessible by all systems. This would be akin to the TF framework on ROS, but thinner and more specific to the ECS. This way, systems don't need to worry about keeping track of frames, they could just query as needed.</p>\n<p>Some considerations:</p>\n<ul>\n<li>The manager could be implemented as a system, which gathers all pose information and exposes that to other systems on demand.</li>\n<li>A synchronous interface would be ideal, so systems can make fast queries within their update callbacks. But we also need an asynchronous interface for when systems are spread across processes. So I think it makes sense to use Ignition Transport to provide pose query services, and it would be interesting to use sync/async as needed.</li>\n<li><a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/e38b48e51c74124e070cfc236cfd290941d04a1d/src/systems/SceneBroadcaster.cc?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">ignition::gazebo::systems::SceneBroadcaster</a> already implemented some features which could be moved to the pose manager, like a <code>pose/info</code> publisher and a <code>pose/graph</code> service.</li>\n</ul>\n<h3 id=\"markdown-header-pose-components-frame\">Pose component's frame</h3>\n<p>It has been suggested before that the pose component carry two pieces of information:</p>\n<ul>\n<li>The <code>ignition::math::Pose3d</code></li>\n<li>The reference frame</li>\n</ul>\n<p>This way, each entity could be explicit about what frame its pose is being expressed about.</p>\n<p>I think this adds complexity, as all systems will need to handle poses with arbitrary frames.</p>\n<p>So my first proposal is: <strong>The pose component should not carry frame information, instead, that is defined by convention.</strong></p>\n<p>Then the question is about what should the convention be. I lean towards <strong>the pose always being expressed w.r.t. the parent entity</strong>, as opposed to any other ancestor closer to the root (like the world or the root model). The main reason being that an entity knows who their immediate parent entity is, but it would necessary to crawl the entity tree to figure our who the other descendant would be.</p>\n<p>Using the pose manager, any systems which use different conventions should be able to easily get the pose in the frame they're interested in.</p>\n<h2 id=\"markdown-header-unanswered-questions\">Unanswered questions</h2>\n<ul>\n<li>Who is the parent of a joint entity and how does its pose get defined?</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-10-09T18:45:01.990402+00:00", "milestone": null, "updated_on": "2018-10-18T14:55:53.859015+00:00", "type": "issue", "id": 3}