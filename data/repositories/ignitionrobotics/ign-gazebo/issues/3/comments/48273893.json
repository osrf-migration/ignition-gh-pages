{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/3/comments/48273893.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/3#comment-48273893"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/3.json"}}, "type": "issue", "id": 3, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Pose components"}, "content": {"raw": "I agree with most of your points, @mxgrey , and I agree they make sense for a physics engine, but I think you're not taking a few characteristics of `ign-gazebo` into account. Having all nodes expressed w.r.t. the world frame is convenient when all frames are always being updated. But this is not the case here (at least for now). Think of this scenario:\n\nConsider the following SDF:\n\n~~~\n<model ...>\n  <link ...>\n    <visual ...>\n   <collision ...>\n   <sensor...>\n      <imu...>\n   </sensor>\n</model>\n~~~\n\nWhen loaded, the following entities are created in the ECS, each with its own pose component: `model`, `link`, `visual`, `collision`, `imu`.\n\nThe physics system will handle `model`, `link` and `collision`, but it is unaware of `visual` and `imu`.\n\nThe rendering system builds a tree for `model`, `link` and `visual`, and an IMU system handles `imu`.\n\nThe next time-step, the model is supposed to move, but the link and collision poses w.r.t. the model remained the same (a very common situation).\n\nLet's see what each system will need to do in each approach:\n\n### World as reference\n\n* Physics will need to update the `model`, `link` and `collision` poses, because they all changed w.r.t. the world.\n* Rendering will need to crawl the tree to find `visual`'s parent `link`, and add the visual pose offset to update the node on ign-rendering that is attached to the world.\n* IMU system will need to find the IMU's parent `link`, add `imu`'s pose offset, and then perform calculations.\n\n### Parent as reference\n\n* Physics only updates the `model` pose.\n* Rendering will update `model`'s pose, and `ign-rendering` takes care of moving all descendants accordingly.\n* IMU system will need to compute FK all the way down to `imu`, and then perform calculations.\n\nSummarizing the advantages of the 2nd approach:\n\n1. Offsets which are fixed most of the time don't need to be continuously updated through the ECS - which means less data flying around.\n1. Systems can delegate FK computation to other libraries, like `ign-rendering`, to take advantage of their scene graph.", "markup": "markdown", "html": "<p>I agree with most of your points, @mxgrey , and I agree they make sense for a physics engine, but I think you're not taking a few characteristics of <code>ign-gazebo</code> into account. Having all nodes expressed w.r.t. the world frame is convenient when all frames are always being updated. But this is not the case here (at least for now). Think of this scenario:</p>\n<p>Consider the following SDF:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"err\">...</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"err\">...</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;visual</span> <span class=\"err\">...</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;collision</span> <span class=\"err\">...</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;sensor...&gt;</span>\n      <span class=\"nt\">&lt;imu...&gt;</span>\n   <span class=\"nt\">&lt;/sensor&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>When loaded, the following entities are created in the ECS, each with its own pose component: <code>model</code>, <code>link</code>, <code>visual</code>, <code>collision</code>, <code>imu</code>.</p>\n<p>The physics system will handle <code>model</code>, <code>link</code> and <code>collision</code>, but it is unaware of <code>visual</code> and <code>imu</code>.</p>\n<p>The rendering system builds a tree for <code>model</code>, <code>link</code> and <code>visual</code>, and an IMU system handles <code>imu</code>.</p>\n<p>The next time-step, the model is supposed to move, but the link and collision poses w.r.t. the model remained the same (a very common situation).</p>\n<p>Let's see what each system will need to do in each approach:</p>\n<h3 id=\"markdown-header-world-as-reference\">World as reference</h3>\n<ul>\n<li>Physics will need to update the <code>model</code>, <code>link</code> and <code>collision</code> poses, because they all changed w.r.t. the world.</li>\n<li>Rendering will need to crawl the tree to find <code>visual</code>'s parent <code>link</code>, and add the visual pose offset to update the node on ign-rendering that is attached to the world.</li>\n<li>IMU system will need to find the IMU's parent <code>link</code>, add <code>imu</code>'s pose offset, and then perform calculations.</li>\n</ul>\n<h3 id=\"markdown-header-parent-as-reference\">Parent as reference</h3>\n<ul>\n<li>Physics only updates the <code>model</code> pose.</li>\n<li>Rendering will update <code>model</code>'s pose, and <code>ign-rendering</code> takes care of moving all descendants accordingly.</li>\n<li>IMU system will need to compute FK all the way down to <code>imu</code>, and then perform calculations.</li>\n</ul>\n<p>Summarizing the advantages of the 2nd approach:</p>\n<ol>\n<li>Offsets which are fixed most of the time don't need to be continuously updated through the ECS - which means less data flying around.</li>\n<li>Systems can delegate FK computation to other libraries, like <code>ign-rendering</code>, to take advantage of their scene graph.</li>\n</ol>", "type": "rendered"}, "created_on": "2018-10-10T17:32:59.488796+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 48273893}