{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/3/comments/48258925.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/3#comment-48258925"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/3.json"}}, "type": "issue", "id": 3, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Pose components"}, "content": {"raw": "Following up on [this remark](#!/ignitionrobotics/ign-gazebo/pull-requests/57/ensure-correct-transform-for-canonical/diff#comment-78494909):\n\n> I'm not sure about the world frame being \"almost always the most useful frame of reference for systems\" though, lots of rendering frameworks position nodes relative to parent nodes.\n\nMany rendering engine APIs (e.g. Ogre and OpenSceneGraph) *allow* users to define tree structures and provide relative transforms because they assume that a tree structure is convenient for users when expressing the layout of objects, and most of the time this is definitely the case.\n\nHowever this means the rendering engine is performing forward kinematics computations, but in our ECS framework specifically we're already computing forward kinematics by necessity in the physics system. It would be wasteful and unnecessary for both systems to compute forward kinematics. In the `libdartsim-gui-osg` (which is DART integrated with OpenSceneGraph) we construct a \"scene graph\" where every object node is just a direct child of the root, and DART simply feeds in the object transforms with respect to the world which were already computed during the physics update. That saves the rendering engine from doing a whole ton of redundant matrix computations.\n\nIn general, the best possible way to be able to transform between different frames of reference is to have **all** transform data provided in the world frame and do a single inverse-matrix-multiply operation to switch between reference frames. We don't need the sophistication that TF has because TF assumes that there is no canonical \"world frame\", but as a simulation engine with full world knowledge, we have the benefit of a definitive world frame, and we should take advantage of that.\n\nThis world frame approach is essentially how Frame Semantics currently works in `ign-physics`. The Frame Semantics implementation assumes an underlying ECS framework because `ign-physics` is itself an ECS, so we could potentially adapt the frame semantics implementation for `ign-gazebo` by moving the core components upstream to `ign-math`. The overall implementation was intended for Eigen, but the core templates like [RelativeQuantity](#!/ignitionrobotics/ign-physics/src/default/include/ignition/physics/RelativeQuantity.hh) and classes like [FrameID](#!/ignitionrobotics/ign-physics/src/default/include/ignition/physics/FrameID.hh) can use `ign-gazebo` as its ECS and `ign-math` as its arithmetic library.\n\nNote that we can represent pose information in the world frame while still maintaining a \"parent\" concept as a separate component. Then if the \"pose relative to parent\" of a child is requested, it would simply be `P.inverse() * C` where `P` is the parent pose in the world while `C` is the child pose in the world.", "markup": "markdown", "html": "<p>Following up on <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/57/ensure-correct-transform-for-canonical/diff#comment-78494909\" rel=\"nofollow\">this remark</a>:</p>\n<blockquote>\n<p>I'm not sure about the world frame being \"almost always the most useful frame of reference for systems\" though, lots of rendering frameworks position nodes relative to parent nodes.</p>\n</blockquote>\n<p>Many rendering engine APIs (e.g. Ogre and OpenSceneGraph) <em>allow</em> users to define tree structures and provide relative transforms because they assume that a tree structure is convenient for users when expressing the layout of objects, and most of the time this is definitely the case.</p>\n<p>However this means the rendering engine is performing forward kinematics computations, but in our ECS framework specifically we're already computing forward kinematics by necessity in the physics system. It would be wasteful and unnecessary for both systems to compute forward kinematics. In the <code>libdartsim-gui-osg</code> (which is DART integrated with OpenSceneGraph) we construct a \"scene graph\" where every object node is just a direct child of the root, and DART simply feeds in the object transforms with respect to the world which were already computed during the physics update. That saves the rendering engine from doing a whole ton of redundant matrix computations.</p>\n<p>In general, the best possible way to be able to transform between different frames of reference is to have <strong>all</strong> transform data provided in the world frame and do a single inverse-matrix-multiply operation to switch between reference frames. We don't need the sophistication that TF has because TF assumes that there is no canonical \"world frame\", but as a simulation engine with full world knowledge, we have the benefit of a definitive world frame, and we should take advantage of that.</p>\n<p>This world frame approach is essentially how Frame Semantics currently works in <code>ign-physics</code>. The Frame Semantics implementation assumes an underlying ECS framework because <code>ign-physics</code> is itself an ECS, so we could potentially adapt the frame semantics implementation for <code>ign-gazebo</code> by moving the core components upstream to <code>ign-math</code>. The overall implementation was intended for Eigen, but the core templates like <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/default/include/ignition/physics/RelativeQuantity.hh\" rel=\"nofollow\">RelativeQuantity</a> and classes like <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-physics/src/default/include/ignition/physics/FrameID.hh\" rel=\"nofollow\">FrameID</a> can use <code>ign-gazebo</code> as its ECS and <code>ign-math</code> as its arithmetic library.</p>\n<p>Note that we can represent pose information in the world frame while still maintaining a \"parent\" concept as a separate component. Then if the \"pose relative to parent\" of a child is requested, it would simply be <code>P.inverse() * C</code> where <code>P</code> is the parent pose in the world while <code>C</code> is the child pose in the world.</p>", "type": "rendered"}, "created_on": "2018-10-10T03:25:10.323120+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-10-10T03:32:05.294710+00:00", "type": "issue_comment", "id": 48258925}