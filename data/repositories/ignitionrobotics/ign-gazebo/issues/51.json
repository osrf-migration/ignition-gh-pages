{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/issues/51/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/51/allow-stepping-the-simulator-in-paused"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/issues/51/vote"}}, "reporter": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "title": "Allow stepping the simulator in paused state", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nAllow performing single paused blocking simulation steps to update Systems. Systems could for example read new modifications of the ECM and take actions even if the simulated time is not going forward.\r\n\r\n# Motivation\r\n\r\nIn this moment, the `Server` class allows controlling the simulation in a reproducible way \\(issuing blocking calls\\) only in unpaused state. If the simulator is stepped in paused state, it will loop forever.\r\n\r\nI would expect that a single paused step would be executed similarly to unpaused ones.\r\n\r\nExample:\r\n\r\n```c++\r\n#include <ignition/gazebo/Server.hh>\r\n#include <ignition/gazebo/ServerConfig.hh>\r\n\r\n\r\nint main(int /*argc*/, char* /*argv*/[])\r\n{\r\n    ignition::gazebo::ServerConfig config;\r\n    config.SetSdfFile(\"empty.sdf\");\r\n    config.SetUseLevels(false);\r\n    config.SetUpdateRate(1000);\r\n\r\n    // Create the server\r\n    ignition::gazebo::Server server(config);\r\n\r\n    // This is ok\r\n    std::cout << \"Running an unpaused blocking iteration...\" << std::endl;\r\n    server.Run(/*blocking=*/true, /*iterations=*/1, /*paused=*/false);\r\n    std::cout << \"... done\" << std::endl;\r\n\r\n    // This is looping forever\r\n    std::cout << \"Running a paused blocking iteration...\" << std::endl;\r\n    server.Run(/*blocking=*/true, /*iterations=*/1, /*paused=*/true);\r\n    std::cout << \"... done\" << std::endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n```\r\ncmake_minimum_required(VERSION 3.12)\r\nproject(Test VERSION 0.1)\r\n\r\nset(CMAKE_CXX_STANDARD 17)\r\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\r\n\r\nfind_package(ignition-gazebo3 COMPONENTS all REQUIRED)\r\n\r\nadd_executable(Test test.cpp)\r\ntarget_link_libraries(Test PUBLIC ignition-gazebo3::core)\r\n```\r\n\r\n# Describe alternatives you've considered\r\n\r\nNone\r\n\r\n# Additional context\r\n\r\nThis is somehow related to [#!/ignitionrobotics/ign-gazebo/pull-requests/556](#!/ignitionrobotics/ign-gazebo/pull-requests/556). Executing paused steps could be now useful to process ECM updates without executing a physics step.", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>Allow performing single paused blocking simulation steps to update Systems. Systems could for example read new modifications of the ECM and take actions even if the simulated time is not going forward.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>In this moment, the <code>Server</code> class allows controlling the simulation in a reproducible way (issuing blocking calls) only in unpaused state. If the simulator is stepped in paused state, it will loop forever.</p>\n<p>I would expect that a single paused step would be executed similarly to unpaused ones.</p>\n<p>Example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/gazebo/Server.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/gazebo/ServerConfig.hh&gt;</span><span class=\"cp\"></span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"cm\">/*argc*/</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"cm\">/*argv*/</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">ServerConfig</span> <span class=\"n\">config</span><span class=\"p\">;</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">SetSdfFile</span><span class=\"p\">(</span><span class=\"s\">&quot;empty.sdf&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">SetUseLevels</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">SetUpdateRate</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Create the server</span>\n    <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">Server</span> <span class=\"n\">server</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// This is ok</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Running an unpaused blocking iteration...&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"cm\">/*blocking=*/</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"cm\">/*iterations=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"cm\">/*paused=*/</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;... done&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// This is looping forever</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Running a paused blocking iteration...&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"cm\">/*blocking=*/</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"cm\">/*iterations=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"cm\">/*paused=*/</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;... done&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>cmake_minimum_required(VERSION 3.12)\nproject(Test VERSION 0.1)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nfind_package(ignition-gazebo3 COMPONENTS all REQUIRED)\n\nadd_executable(Test test.cpp)\ntarget_link_libraries(Test PUBLIC ignition-gazebo3::core)\n</pre></div>\n\n\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>None</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>This is somehow related to <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/556\" rel=\"nofollow\">#!/ignitionrobotics/ign-gazebo/pull-requests/556</a>. Executing paused steps could be now useful to process ECM updates without executing a physics step.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-03-12T10:26:21.668889+00:00", "milestone": null, "updated_on": "2020-03-14T11:23:08.648417+00:00", "type": "issue", "id": 51}