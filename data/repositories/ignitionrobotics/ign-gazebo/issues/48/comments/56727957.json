{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/48/comments/56727957.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/48#comment-56727957"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/48.json"}}, "type": "issue", "id": 48, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Possible memory management issues in DART BoxedLcpConstrainedSolver?"}, "content": {"raw": "@{557058:90bc87b0-2886-4377-a17c-3a6629a697ff}\n\nThank you very much for looking into this and for your helpful response! I can confirm that your suggestions fix the issue for the model I shared.\n\nNow I'm trying to understand exactly what parameters are relevant and why, so that I can avoid similar mistakes in future models.\n\nTo do this systematically, I've instrumented a templated model where I'm varying the following:\n\n* Number of \u201crollers\u201d \\(9, 10, 11\\).\n* Adding fixed joint \\(True, False\\).\n* Adding inertial \\(True, False\\). I've assumed uniform density, 10,000 kg/m^3. This gives higher numbers than yours, but the model doesn\u2019t seem too sensitive to scaling these.\n* z\\_offset \\(0.0, 0.025, 0.05\\). With 0.0 the model should be touching the ground exactly.\n\nYour recommended configuration is:\n\n* fixed\\_joint : False\n* inertial : True\n* z\\_offset : 0.0\n\nRunning over all 36 \\(3 x 2 x 2 x 3\\) combinations yields the following table \\(successes **bolded**\\):\n\n| n\\_rollers | fixed\\_joint | inertial | z\\_offset | success | comment |\n| --- | --- | --- | --- | --- | --- |\n| 9 | True | False | 0.0 | False | \\(1\\) |\n| 10 | True | False | 0.0 | False | \\(1\\) |\n| 11 | True | False | 0.0 | False | \\(1\\) |\n| **9** | **False** | **False** | **0.0** | **True** |  |\n| **10** | **False** | **False** | **0.0** | **True** |  |\n| 11 | False | False | 0.0 | False | \\(2\\) |\n| 9 | True | True | 0.0 | False | \\(3\\) |\n| 10 | True | True | 0.0 | False | \\(2\\) |\n| 11 | True | True | 0.0 | False | \\(1\\) |\n| **9** | **False** | **True** | **0.0** | **True** |  |\n| **10** | **False** | **True** | **0.0** | **True** | **\\(4\\)** |\n| 11 | False | True | 0.0 | False | \\(2\\) |\n| 9 | True | False | 0.025 | False | \\(1\\) |\n| 10 | True | False | 0.025 | False | \\(1\\) |\n| 11 | True | False | 0.025 | False | \\(1\\) |\n| 9 | False | False | 0.025 | False | \\(2\\) |\n| 10 | False | False | 0.025 | False | \\(2\\) |\n| 11 | False | False | 0.025 | False | \\(2\\) |\n| 9 | True | True | 0.025 | False | \\(3\\) |\n| 10 | True | True | 0.025 | False | \\(2\\) |\n| 11 | True | True | 0.025 | False | \\(3\\) |\n| **9** | **False** | **True** | **0.025** | **True** |  |\n| **10** | **False** | **True** | **0.025** | **True** |  |\n| 11 | False | True | 0.025 | False | \\(2\\) |\n| 9 | True | False | 0.05 | False | \\(1\\) |\n| 10 | True | False | 0.05 | False | \\(1\\) |\n| 11 | True | False | 0.05 | False | \\(1\\) |\n| 9 | False | False | 0.05 | False | \\(2\\) |\n| 10 | False | False | 0.05 | False | \\(2\\) |\n| 11 | False | False | 0.05 | False | \\(2\\) |\n| 9 | True | True | 0.05 | False | \\(2\\) |\n| 10 | True | True | 0.05 | False | \\(2\\) |\n| 11 | True | True | 0.05 | False | \\(1\\) |\n| **9** | **False** | **True** | **0.05** | **True** |  |\n| **10** | **False** | **True** | **0.05** | **True** |  |\n| 11 | False | True | 0.05 | False | \\(2\\) |\n\nFootnotes:\n\n\\(1\\) Fails after a few seconds.\n\n\\(2\\) Fails almost immediately.\n\n\\(3\\) Fails after/around box hits.\n\n\\(4\\) Recommended configuration for the original model.\n\nConclusions:\n\n* Adding a fixed joint _always_ causes failure.\n* Inertial is only relevant when model starts with z\\_offset > 0.0 \\(i.e. it first needs to drop\\). This makes sense to me, assuming Gazebo does not automatically derive any inertial parameters.\n* Pushing up n\\_rollers by one always causes failure. Decreasing it never causes failure when all other parameters are equal to a \"good\" configuration. \\(This is for the cases I\u2019ve tested, not exhaustive.\\)\n\nThis gives rise to some follow-up questions:\n\n* Is there anything else wrong with the SDF model that would explain why upping the number of rollers would cause it to crash? You can find the base template for just the conveyor model [here](https://gist.github.com/JaldertVicarious/06d1c19c92280b3de2f2aa5069a58474) \\(Jinja2 format, similar to ERB, but easier for me to script\\) since that is probably a lot easier to eyeball. If you're interested, I'm also happy to share the generator that plugs values into the template and renders them.\n* Why does adding a fixed joint always cause a crash for this model? In particular, I\u2019m using fixed joints for other models seemingly without issues.\n* How did you come up with the fixes to the SDF? Are there guides that can help expand my understanding, or is this purely based on experience?\n\n@{557058:67759e29-d1df-465f-868d-047738e36fc9}\n\nYour hypothesis sounded valid to me, so I also ran the configurations with a z-offset of -5cm with the expectation that the model would always crash. However, that is not what I observed. In fact, in this case, inertial can be left unspecified, and thus only fixed\\_joint and n\\_rollers affect the success/failure of running the world. This shows that it is possible for a simulation with fundamentally unsolvable collision constraints to run fine.\n\nFrom a user perspective, auto-checking for common violations and auto-generating \\(missing\\) parameters such as inertial matrices could make modelling more fool-proof. An example: \\(Py\\)Bullet by default recomputes the inertial matrices when loading from URDF/SDF: [loadURDF](https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit#heading=h.sbnykoneq1me) see the \"URDF\\_USE\\_INERTIA\\_FROM\\_FILE\" flag. I'm guessing this was done because many model files contain mistakes in the inertial parameters. The downside of this is that those matrices might be wrong in more subtle ways \\(e.g. for non-uniform mass distribution\\) that keep the simulation running but produce unrealistic results. Generating some output on exactly what gets auto-computed could be a solution to that.\n\nI have attached conveyor\\_with\\_box\\_experiments.tgz  in a separate comment \\(couldn\u2019t find a way to attach it to this comment\\). This archive contains all SDFs for the table.\n\nI'm happy to provide any further information!", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"557058:90bc87b0-2886-4377-a17c-3a6629a697ff\">@Addisu Z. Taddese</span></p>\n<p>Thank you very much for looking into this and for your helpful response! I can confirm that your suggestions fix the issue for the model I shared.</p>\n<p>Now I'm trying to understand exactly what parameters are relevant and why, so that I can avoid similar mistakes in future models.</p>\n<p>To do this systematically, I've instrumented a templated model where I'm varying the following:</p>\n<ul>\n<li>Number of \u201crollers\u201d (9, 10, 11).</li>\n<li>Adding fixed joint (True, False).</li>\n<li>Adding inertial (True, False). I've assumed uniform density, 10,000 kg/m^3. This gives higher numbers than yours, but the model doesn\u2019t seem too sensitive to scaling these.</li>\n<li>z_offset (0.0, 0.025, 0.05). With 0.0 the model should be touching the ground exactly.</li>\n</ul>\n<p>Your recommended configuration is:</p>\n<ul>\n<li>fixed_joint : False</li>\n<li>inertial : True</li>\n<li>z_offset : 0.0</li>\n</ul>\n<p>Running over all 36 (3 x 2 x 2 x 3) combinations yields the following table (successes <strong>bolded</strong>):</p>\n<table>\n<thead>\n<tr>\n<th>n_rollers</th>\n<th>fixed_joint</th>\n<th>inertial</th>\n<th>z_offset</th>\n<th>success</th>\n<th>comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9</td>\n<td>True</td>\n<td>False</td>\n<td>0.0</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>True</td>\n<td>False</td>\n<td>0.0</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>True</td>\n<td>False</td>\n<td>0.0</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td><strong>9</strong></td>\n<td><strong>False</strong></td>\n<td><strong>False</strong></td>\n<td><strong>0.0</strong></td>\n<td><strong>True</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>10</strong></td>\n<td><strong>False</strong></td>\n<td><strong>False</strong></td>\n<td><strong>0.0</strong></td>\n<td><strong>True</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>False</td>\n<td>False</td>\n<td>0.0</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>True</td>\n<td>True</td>\n<td>0.0</td>\n<td>False</td>\n<td>(3)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>True</td>\n<td>True</td>\n<td>0.0</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>True</td>\n<td>True</td>\n<td>0.0</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td><strong>9</strong></td>\n<td><strong>False</strong></td>\n<td><strong>True</strong></td>\n<td><strong>0.0</strong></td>\n<td><strong>True</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>10</strong></td>\n<td><strong>False</strong></td>\n<td><strong>True</strong></td>\n<td><strong>0.0</strong></td>\n<td><strong>True</strong></td>\n<td><strong>(4)</strong></td>\n</tr>\n<tr>\n<td>11</td>\n<td>False</td>\n<td>True</td>\n<td>0.0</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>True</td>\n<td>False</td>\n<td>0.025</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>True</td>\n<td>False</td>\n<td>0.025</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>True</td>\n<td>False</td>\n<td>0.025</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>False</td>\n<td>False</td>\n<td>0.025</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>False</td>\n<td>False</td>\n<td>0.025</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>False</td>\n<td>False</td>\n<td>0.025</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>True</td>\n<td>True</td>\n<td>0.025</td>\n<td>False</td>\n<td>(3)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>True</td>\n<td>True</td>\n<td>0.025</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>True</td>\n<td>True</td>\n<td>0.025</td>\n<td>False</td>\n<td>(3)</td>\n</tr>\n<tr>\n<td><strong>9</strong></td>\n<td><strong>False</strong></td>\n<td><strong>True</strong></td>\n<td><strong>0.025</strong></td>\n<td><strong>True</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>10</strong></td>\n<td><strong>False</strong></td>\n<td><strong>True</strong></td>\n<td><strong>0.025</strong></td>\n<td><strong>True</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>False</td>\n<td>True</td>\n<td>0.025</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>True</td>\n<td>False</td>\n<td>0.05</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>True</td>\n<td>False</td>\n<td>0.05</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>True</td>\n<td>False</td>\n<td>0.05</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>False</td>\n<td>False</td>\n<td>0.05</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>False</td>\n<td>False</td>\n<td>0.05</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>False</td>\n<td>False</td>\n<td>0.05</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>9</td>\n<td>True</td>\n<td>True</td>\n<td>0.05</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>True</td>\n<td>True</td>\n<td>0.05</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>True</td>\n<td>True</td>\n<td>0.05</td>\n<td>False</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td><strong>9</strong></td>\n<td><strong>False</strong></td>\n<td><strong>True</strong></td>\n<td><strong>0.05</strong></td>\n<td><strong>True</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>10</strong></td>\n<td><strong>False</strong></td>\n<td><strong>True</strong></td>\n<td><strong>0.05</strong></td>\n<td><strong>True</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>False</td>\n<td>True</td>\n<td>0.05</td>\n<td>False</td>\n<td>(2)</td>\n</tr>\n</tbody>\n</table>\n<p>Footnotes:</p>\n<p>(1) Fails after a few seconds.</p>\n<p>(2) Fails almost immediately.</p>\n<p>(3) Fails after/around box hits.</p>\n<p>(4) Recommended configuration for the original model.</p>\n<p>Conclusions:</p>\n<ul>\n<li>Adding a fixed joint <em>always</em> causes failure.</li>\n<li>Inertial is only relevant when model starts with z_offset &gt; 0.0 (i.e. it first needs to drop). This makes sense to me, assuming Gazebo does not automatically derive any inertial parameters.</li>\n<li>Pushing up n_rollers by one always causes failure. Decreasing it never causes failure when all other parameters are equal to a \"good\" configuration. (This is for the cases I\u2019ve tested, not exhaustive.)</li>\n</ul>\n<p>This gives rise to some follow-up questions:</p>\n<ul>\n<li>Is there anything else wrong with the SDF model that would explain why upping the number of rollers would cause it to crash? You can find the base template for just the conveyor model <a data-is-external-link=\"true\" href=\"https://gist.github.com/JaldertVicarious/06d1c19c92280b3de2f2aa5069a58474\" rel=\"nofollow\">here</a> (Jinja2 format, similar to ERB, but easier for me to script) since that is probably a lot easier to eyeball. If you're interested, I'm also happy to share the generator that plugs values into the template and renders them.</li>\n<li>Why does adding a fixed joint always cause a crash for this model? In particular, I\u2019m using fixed joints for other models seemingly without issues.</li>\n<li>How did you come up with the fixes to the SDF? Are there guides that can help expand my understanding, or is this purely based on experience?</li>\n</ul>\n<p><span class=\"ap-mention\" data-atlassian-id=\"557058:67759e29-d1df-465f-868d-047738e36fc9\">@Michael Grey</span></p>\n<p>Your hypothesis sounded valid to me, so I also ran the configurations with a z-offset of -5cm with the expectation that the model would always crash. However, that is not what I observed. In fact, in this case, inertial can be left unspecified, and thus only fixed_joint and n_rollers affect the success/failure of running the world. This shows that it is possible for a simulation with fundamentally unsolvable collision constraints to run fine.</p>\n<p>From a user perspective, auto-checking for common violations and auto-generating (missing) parameters such as inertial matrices could make modelling more fool-proof. An example: (Py)Bullet by default recomputes the inertial matrices when loading from URDF/SDF: <a data-is-external-link=\"true\" href=\"https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit#heading=h.sbnykoneq1me\" rel=\"nofollow\">loadURDF</a> see the \"URDF_USE_INERTIA_FROM_FILE\" flag. I'm guessing this was done because many model files contain mistakes in the inertial parameters. The downside of this is that those matrices might be wrong in more subtle ways (e.g. for non-uniform mass distribution) that keep the simulation running but produce unrealistic results. Generating some output on exactly what gets auto-computed could be a solution to that.</p>\n<p>I have attached conveyor_with_box_experiments.tgz  in a separate comment (couldn\u2019t find a way to attach it to this comment). This archive contains all SDFs for the table.</p>\n<p>I'm happy to provide any further information!</p>", "type": "rendered"}, "created_on": "2020-03-30T23:57:33.734975+00:00", "user": {"display_name": "Jaldert Rombouts", "uuid": "{04334d8c-9f71-470e-abc0-61f12f3b82ff}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B04334d8c-9f71-470e-abc0-61f12f3b82ff%7D"}, "html": {"href": "https://bitbucket.org/%7B04334d8c-9f71-470e-abc0-61f12f3b82ff%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/7576bbb265fcaf87c16d8e34d15ee0afd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-0.png"}}, "nickname": "Jaldert", "type": "user", "account_id": "5e39fd3fe18f970e61a0a4cf"}, "updated_on": "2020-03-31T00:26:06.207017+00:00", "type": "issue_comment", "id": 56727957}