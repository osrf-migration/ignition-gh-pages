{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/48/comments/56684195.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/48#comment-56684195"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/48.json"}}, "type": "issue", "id": 48, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Possible memory management issues in DART BoxedLcpConstrainedSolver?"}, "content": {"raw": "If there\u2019s a collision constraint violation between static objects \\(i.e. a fundamentally unsolvable scenario\\), I\u2019m not especially surprised that a catastrophic crash is occurring. I can imagine that kind of scenario may produce NaN values in the simulation state, and those NaN values may spill out to other parts of the program, eventually causing some kind of undefined behavior or unhandled excpetion.\n\nIt would be preferable for the simulation to kindly explain what the problem is, but it\u2019s possible that the amount of sanity checks needed throughout the simulation pipeline to figure that out would be prohibitively expensive. Maybe dartsim could have more assertions to check for NaN values.", "markup": "markdown", "html": "<p>If there\u2019s a collision constraint violation between static objects (i.e. a fundamentally unsolvable scenario), I\u2019m not especially surprised that a catastrophic crash is occurring. I can imagine that kind of scenario may produce NaN values in the simulation state, and those NaN values may spill out to other parts of the program, eventually causing some kind of undefined behavior or unhandled excpetion.</p>\n<p>It would be preferable for the simulation to kindly explain what the problem is, but it\u2019s possible that the amount of sanity checks needed throughout the simulation pipeline to figure that out would be prohibitively expensive. Maybe dartsim could have more assertions to check for NaN values.</p>", "type": "rendered"}, "created_on": "2020-03-27T05:45:00.853541+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 56684195}