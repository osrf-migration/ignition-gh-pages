{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/20/comments/51351211.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/20#comment-51351211"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/20.json"}}, "type": "issue", "id": 20, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Current performance of ignition robotic libraries"}, "content": {"raw": "@carromj As suggested I disabled all the GUI-related systems (broadcaster and user-commands) and commented out the GUI plugins (scene 3d, world control and world stats). The two cases represented by removing the component and zeroing its value did not differ significantly. The output of `time` is the following:\n\n| `time` column | Removing the component | Zeroing its value |\n| --- | --- | --- |\n| real | `0m13.390s` | `0m12.988s` |\n| user | `0m6.054s` | `0m5.465s` |\n| sys | `0m0.310s` | `0m0.300s` |\n\nI did not do any statistical significant analysis, more or less every run has similar values.\n\nHowever, this time the callgrind analysis is slightly better. I attached the 5% and 2% graphs. Now the `CreateComponent` call is not shown anymore and the cost of the physic engine became ~15.5% (data reads, cache misses, etc.). A little bit better but the overall overhead seems still significant.", "markup": "markdown", "html": "<p>@carromj As suggested I disabled all the GUI-related systems (broadcaster and user-commands) and commented out the GUI plugins (scene 3d, world control and world stats). The two cases represented by removing the component and zeroing its value did not differ significantly. The output of <code>time</code> is the following:</p>\n<table>\n<thead>\n<tr>\n<th><code>time</code> column</th>\n<th>Removing the component</th>\n<th>Zeroing its value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>real</td>\n<td><code>0m13.390s</code></td>\n<td><code>0m12.988s</code></td>\n</tr>\n<tr>\n<td>user</td>\n<td><code>0m6.054s</code></td>\n<td><code>0m5.465s</code></td>\n</tr>\n<tr>\n<td>sys</td>\n<td><code>0m0.310s</code></td>\n<td><code>0m0.300s</code></td>\n</tr>\n</tbody>\n</table>\n<p>I did not do any statistical significant analysis, more or less every run has similar values.</p>\n<p>However, this time the callgrind analysis is slightly better. I attached the 5% and 2% graphs. Now the <code>CreateComponent</code> call is not shown anymore and the cost of the physic engine became ~15.5% (data reads, cache misses, etc.). A little bit better but the overall overhead seems still significant.</p>", "type": "rendered"}, "created_on": "2019-03-27T08:56:41.905124+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": "2019-03-27T18:55:05.730036+00:00", "type": "issue_comment", "id": 51351211}