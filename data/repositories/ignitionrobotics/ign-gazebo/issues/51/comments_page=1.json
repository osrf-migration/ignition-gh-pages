{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/comments/56500166.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/51#comment-56500166"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51.json"}}, "type": "issue", "id": 51, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Allow stepping the simulator in paused state"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2020-03-12T10:26:52.141145+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": null, "type": "issue_comment", "id": 56500166}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/comments/56506215.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/51#comment-56506215"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51.json"}}, "type": "issue", "id": 51, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Allow stepping the simulator in paused state"}, "content": {"raw": "I think [this line](#!/ignitionrobotics/ign-gazebo/src/dd4ff2a4c1112a8727c12a2e927e87ca64392611/src/SimulationRunner.cc#lines-646) is the culprit. I believe the intention is for iterations to only count if they affect sim time (i.e. not paused).\n\nI remember [way back](#!/ignitionrobotics/ign-gazebo/pull-requests/33/) I proposed the concept of \"ECS iterations\" separate from \"Sim iterations\", but we ended up only having \"Sim iterations\" for now. I'm open to revisiting the concept of \"ECS iterations\" if people find it useful.", "markup": "markdown", "html": "<p>I think <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/dd4ff2a4c1112a8727c12a2e927e87ca64392611/src/SimulationRunner.cc#lines-646\" rel=\"nofollow\">this line</a> is the culprit. I believe the intention is for iterations to only count if they affect sim time (i.e. not paused).</p>\n<p>I remember <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/33/\" rel=\"nofollow\">way back</a> I proposed the concept of \"ECS iterations\" separate from \"Sim iterations\", but we ended up only having \"Sim iterations\" for now. I'm open to revisiting the concept of \"ECS iterations\" if people find it useful.</p>", "type": "rendered"}, "created_on": "2020-03-12T18:18:16.071653+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 56506215}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/comments/56512370.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/51#comment-56512370"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51.json"}}, "type": "issue", "id": 51, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Allow stepping the simulator in paused state"}, "content": {"raw": "Thank a lot @{557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8} for the link, very enlightening! I confirm that commenting out that if statement fixes the problem. Do you think that this small modification could lead to any problems on the current codebase? It would be great seeing it hitting upstream soon.\n\nThis is the new behaviour:\n\n```c++\n#include <ignition/gazebo/Server.hh>\n#include <ignition/gazebo/ServerConfig.hh>\n\n\nint main(int /*argc*/, char* /*argv*/[])\n{\n    ignition::gazebo::ServerConfig config;\n    config.SetSdfFile(\"empty.sdf\");\n    config.SetUseLevels(false);\n    config.SetUpdateRate(1000);\n\n    // Create the server\n    ignition::gazebo::Server server(config);\n\n    // This is ok\n    for (size_t i = 0; i < 5; ++i) {\n        std::cout << \"Running an unpaused blocking iteration... \";\n        server.Run(/*blocking=*/true, /*iterations=*/1, /*paused=*/false);\n        std::cout << \"done\" << std::endl;\n\n        std::cout << \"Iterations=\" << server.IterationCount().value() << std::endl;\n    }\n\n    // This is no longer looping forever\n    for (size_t i = 0; i < 5; ++i) {\n        std::cout << \"Running a paused blocking iteration... \";\n        server.Run(/*blocking=*/true, /*iterations=*/1, /*paused=*/true);\n        std::cout << \"done\" << std::endl;\n\n        std::cout << \"Iterations=\" << server.IterationCount().value() << std::endl;\n    }\n\n    return 0;\n}\n```\n\nOutput:\n\n\u200c\n\n```\n\u276f ./Test \nRunning an unpaused blocking iteration... done\nIterations=1\nRunning an unpaused blocking iteration... done\nIterations=2\nRunning an unpaused blocking iteration... done\nIterations=3\nRunning an unpaused blocking iteration... done\nIterations=4\nRunning an unpaused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\n```\n\n\u200c", "markup": "markdown", "html": "<p>Thank a lot <span class=\"ap-mention\" data-atlassian-id=\"557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8\">@Louise Poubel</span> for the link, very enlightening! I confirm that commenting out that if statement fixes the problem. Do you think that this small modification could lead to any problems on the current codebase? It would be great seeing it hitting upstream soon.</p>\n<p>This is the new behaviour:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/gazebo/Server.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/gazebo/ServerConfig.hh&gt;</span><span class=\"cp\"></span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"cm\">/*argc*/</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"cm\">/*argv*/</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">ServerConfig</span> <span class=\"n\">config</span><span class=\"p\">;</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">SetSdfFile</span><span class=\"p\">(</span><span class=\"s\">&quot;empty.sdf&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">SetUseLevels</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">SetUpdateRate</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Create the server</span>\n    <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">Server</span> <span class=\"n\">server</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// This is ok</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Running an unpaused blocking iteration... &quot;</span><span class=\"p\">;</span>\n        <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"cm\">/*blocking=*/</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"cm\">/*iterations=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"cm\">/*paused=*/</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;done&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Iterations=&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">IterationCount</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// This is no longer looping forever</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Running a paused blocking iteration... &quot;</span><span class=\"p\">;</span>\n        <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"cm\">/*blocking=*/</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"cm\">/*iterations=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"cm\">/*paused=*/</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;done&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Iterations=&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">IterationCount</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Output:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>\u276f ./Test \nRunning an unpaused blocking iteration... done\nIterations=1\nRunning an unpaused blocking iteration... done\nIterations=2\nRunning an unpaused blocking iteration... done\nIterations=3\nRunning an unpaused blocking iteration... done\nIterations=4\nRunning an unpaused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\nRunning a paused blocking iteration... done\nIterations=5\n</pre></div>\n\n\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2020-03-13T09:27:58.679302+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": "2020-03-13T09:28:44.710173+00:00", "type": "issue_comment", "id": 56512370}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/comments/56517433.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/51#comment-56517433"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51.json"}}, "type": "issue", "id": 51, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Allow stepping the simulator in paused state"}, "content": {"raw": "I tried to do the same (comment it out) as part of PR #556, but it broke `UNIT_Server_Test`, so I resorted to using `Server::Run` with `blocking=false`. It would be nice to be able to run with `blocking=true, paused=true` for testing.", "markup": "markdown", "html": "<p>I tried to do the same (comment it out) as part of <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/556/update-physics-state-even-when-paused-not\" rel=\"nofollow\" class=\"ap-connect-link\">PR #556</a>, but it broke <code>UNIT_Server_Test</code>, so I resorted to using <code>Server::Run</code> with <code>blocking=false</code>. It would be nice to be able to run with <code>blocking=true, paused=true</code> for testing.</p>", "type": "rendered"}, "created_on": "2020-03-13T16:07:30.614138+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "updated_on": null, "type": "issue_comment", "id": 56517433}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/comments/56521048.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/51#comment-56521048"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51.json"}}, "type": "issue", "id": 51, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Allow stepping the simulator in paused state"}, "content": {"raw": "> I confirm that commenting out that if statement fixes the problem\n\nThanks for checking\n\n> Do you think that this small modification could lead to any problems on the current codebase?\n\nUnfortunately this sounds like a breaking change, because there could be users counting on the relationship between iterations and sim time.\n\nMy suggestion would be to add a separate iteration counter for ECS iterations. I think it could be hard to get this into a released version though, so this may need to go into Dome.", "markup": "markdown", "html": "<blockquote>\n<p>I confirm that commenting out that if statement fixes the problem</p>\n</blockquote>\n<p>Thanks for checking</p>\n<blockquote>\n<p>Do you think that this small modification could lead to any problems on the current codebase?</p>\n</blockquote>\n<p>Unfortunately this sounds like a breaking change, because there could be users counting on the relationship between iterations and sim time.</p>\n<p>My suggestion would be to add a separate iteration counter for ECS iterations. I think it could be hard to get this into a released version though, so this may need to go into Dome.</p>", "type": "rendered"}, "created_on": "2020-03-14T03:36:15.057567+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 56521048}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51/comments/56522738.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/issues/51#comment-56522738"}}, "issue": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/issues/51.json"}}, "type": "issue", "id": 51, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "title": "Allow stepping the simulator in paused state"}, "content": {"raw": "> Unfortunately this sounds like a breaking change, because there could be users counting on the relationship between iterations and sim time.\n\nI\u2019m not sure if I got correctly what you meant, but calling `Server::IterationCount()` does not increase after _paused_ runs of the simulator \\(as shown [here](#!/ignitionrobotics/ign-gazebo/issues/51/allow-stepping-the-simulator-in-paused#comment-56512370)\\).", "markup": "markdown", "html": "<blockquote>\n<p>Unfortunately this sounds like a breaking change, because there could be users counting on the relationship between iterations and sim time.</p>\n</blockquote>\n<p>I\u2019m not sure if I got correctly what you meant, but calling <code>Server::IterationCount()</code> does not increase after <em>paused</em> runs of the simulator (as shown <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/issues/51/allow-stepping-the-simulator-in-paused#comment-56512370\" rel=\"nofollow\">here</a>).</p>", "type": "rendered"}, "created_on": "2020-03-14T11:23:08.638170+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": null, "type": "issue_comment", "id": 56522738}], "page": 1, "size": 6}