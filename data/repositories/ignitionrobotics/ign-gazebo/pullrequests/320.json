{"rendered": {"description": {"raw": "We are currently using stream operators to serialize components. This can be problematic if end users define their own overloads for a given stream operator. For example, we currently define a stream operator for `std::vector<double>`. If an end user wants to print out a `std::vector<double>` they might define a stream operator that outputs the values with, say, 2 digit precision. Since the overload is already defined, I'm not sure the user will be able to. If they can, our serialization won't work properly.\r\n\r\nThis PR takes a different approach where a Serializer class is passed in as the third template argument to `component::Component`. Apart from mitigating the problem mentioned above, this also allows us to share Serializers among Components while still being able to provide different serializers for two different components that happen to have the same underlying data type.\r\n\r\nAlso in this PR `component::Component` now uses compiler defined constructors and assignment operators. I believe this works since [sdformat PR #524](https://bitbucket.org/osrf/sdformat/pull-requests/524)", "markup": "markdown", "html": "<p>We are currently using stream operators to serialize components. This can be problematic if end users define their own overloads for a given stream operator. For example, we currently define a stream operator for <code>std::vector&lt;double&gt;</code>. If an end user wants to print out a <code>std::vector&lt;double&gt;</code> they might define a stream operator that outputs the values with, say, 2 digit precision. Since the overload is already defined, I'm not sure the user will be able to. If they can, our serialization won't work properly.</p>\n<p>This PR takes a different approach where a Serializer class is passed in as the third template argument to <code>component::Component</code>. Apart from mitigating the problem mentioned above, this also allows us to share Serializers among Components while still being able to provide different serializers for two different components that happen to have the same underlying data type.</p>\n<p>Also in this PR <code>component::Component</code> now uses compiler defined constructors and assignment operators. I believe this works since <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/524\" rel=\"nofollow\">sdformat PR #524</a></p>", "type": "rendered"}, "title": {"raw": "[Blueprint] Serializer classes", "markup": "markdown", "html": "<p>[Blueprint] Serializer classes</p>", "type": "rendered"}}, "type": "pullrequest", "description": "We are currently using stream operators to serialize components. This can be problematic if end users define their own overloads for a given stream operator. For example, we currently define a stream operator for `std::vector<double>`. If an end user wants to print out a `std::vector<double>` they might define a stream operator that outputs the values with, say, 2 digit precision. Since the overload is already defined, I'm not sure the user will be able to. If they can, our serialization won't work properly.\r\n\r\nThis PR takes a different approach where a Serializer class is passed in as the third template argument to `component::Component`. Apart from mitigating the problem mentioned above, this also allows us to share Serializers among Components while still being able to provide different serializers for two different components that happen to have the same underlying data type.\r\n\r\nAlso in this PR `component::Component` now uses compiler defined constructors and assignment operators. I believe this works since [sdformat PR #524](https://bitbucket.org/osrf/sdformat/pull-requests/524)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/320/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:de7cbafc6078%0D6c7d70b31a62?from_pullrequest_id=320"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/320/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/320.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/320/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/320/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/320"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/320/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:de7cbafc6078%0D6c7d70b31a62?from_pullrequest_id=320"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/320/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/320/statuses_page=1.json"}}, "title": "[Blueprint] Serializer classes", "close_source_branch": true, "reviewers": [{"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 320, "destination": {"commit": {"hash": "6c7d70b31a62", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c7d70b31a62.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c7d70b31a62"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "created_on": "2019-05-07T21:45:17.232811+00:00", "summary": {"raw": "We are currently using stream operators to serialize components. This can be problematic if end users define their own overloads for a given stream operator. For example, we currently define a stream operator for `std::vector<double>`. If an end user wants to print out a `std::vector<double>` they might define a stream operator that outputs the values with, say, 2 digit precision. Since the overload is already defined, I'm not sure the user will be able to. If they can, our serialization won't work properly.\r\n\r\nThis PR takes a different approach where a Serializer class is passed in as the third template argument to `component::Component`. Apart from mitigating the problem mentioned above, this also allows us to share Serializers among Components while still being able to provide different serializers for two different components that happen to have the same underlying data type.\r\n\r\nAlso in this PR `component::Component` now uses compiler defined constructors and assignment operators. I believe this works since [sdformat PR #524](https://bitbucket.org/osrf/sdformat/pull-requests/524)", "markup": "markdown", "html": "<p>We are currently using stream operators to serialize components. This can be problematic if end users define their own overloads for a given stream operator. For example, we currently define a stream operator for <code>std::vector&lt;double&gt;</code>. If an end user wants to print out a <code>std::vector&lt;double&gt;</code> they might define a stream operator that outputs the values with, say, 2 digit precision. Since the overload is already defined, I'm not sure the user will be able to. If they can, our serialization won't work properly.</p>\n<p>This PR takes a different approach where a Serializer class is passed in as the third template argument to <code>component::Component</code>. Apart from mitigating the problem mentioned above, this also allows us to share Serializers among Components while still being able to provide different serializers for two different components that happen to have the same underlying data type.</p>\n<p>Also in this PR <code>component::Component</code> now uses compiler defined constructors and assignment operators. I believe this works since <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/524\" rel=\"nofollow\">sdformat PR #524</a></p>", "type": "rendered"}, "source": {"commit": {"hash": "ca1e04f4d3aa", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/ca1e04f4d3aa.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/ca1e04f4d3aa"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "serializer_classes"}}, "comment_count": 34, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-05-08T00:12:24.993253+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-08T18:01:12.017621+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2019-05-08T17:58:15.851512+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-08T05:24:59.601350+00:00", "type": "participant", "approved": false, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}], "reason": "", "updated_on": "2019-05-08T18:02:42.250297+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "de7cbafc6078", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/de7cbafc6078.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/de7cbafc6078"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}