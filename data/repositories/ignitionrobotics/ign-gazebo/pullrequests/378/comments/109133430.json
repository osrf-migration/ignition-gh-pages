{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/378/comments/109133430.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:f4a4fbe567bb..a10b70c4aba8?path=src%2Fsystems%2Fscene_broadcaster%2FSceneBroadcaster.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/378/_/diff#comment-109133430"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 378, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/378.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/378"}}, "title": "Skipping update on static links."}, "content": {"raw": "> statPub publisher (above) only sends data out periodically.\n\nThat's not entirely true. As documented above, it will \"also publish off-rate if there are change events (new / erased entities)\".\n\nSince the GUI is now only getting the state diff, when a static model is moved, we only get that pose change for a single iteration, and never again. This will become a common use case once we're displaying more info in the GUI, because a lot of that info will be of the same one-iteration nature.\n\nIdeally those changes should be marked as \"change events\" worthy of prompting an off-rate update.\n\nI'm trying to think of an implementation which avoids the current entanglement of the scene broadcaster and the ECM.", "markup": "markdown", "html": "<blockquote>\n<p>statPub publisher (above) only sends data out periodically.</p>\n</blockquote>\n<p>That's not entirely true. As documented above, it will \"also publish off-rate if there are change events (new / erased entities)\".</p>\n<p>Since the GUI is now only getting the state diff, when a static model is moved, we only get that pose change for a single iteration, and never again. This will become a common use case once we're displaying more info in the GUI, because a lot of that info will be of the same one-iteration nature.</p>\n<p>Ideally those changes should be marked as \"change events\" worthy of prompting an off-rate update.</p>\n<p>I'm trying to think of an implementation which avoids the current entanglement of the scene broadcaster and the ECM.</p>", "type": "rendered"}, "created_on": "2019-07-12T15:26:29.212034+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 284, "from": null, "outdated": false, "path": "src/systems/scene_broadcaster/SceneBroadcaster.cc"}, "updated_on": "2019-07-12T15:26:29.221724+00:00", "type": "pullrequest_comment", "id": 109133430}