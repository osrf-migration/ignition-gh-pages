{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/376/comments/108835113.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:af3cd443c043..d38b19229505?path=src%2Fsystems%2Fuser_commands%2FUserCommands.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/376/_/diff#comment-108835113"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 376, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/376.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/376"}}, "title": "Nate testing scenebroad improvements"}, "content": {"raw": "It will be tough to enforce that all component changes be done through this `SetChanged(SetData)` idiom.\n\nAnother upcoming use case to keep in mind is that once systems are updated in parallel, the ECM will need to resolve which changes have priority. With that in mind, how about adding a function like `RequestComponentChange` to the ECM, similar to `RequestEntityRemoval`, which marks the change and processes it after post-update? It would also be nice to prevent users from changing components in any other way, so we may need to get rid of the `Each` calls which provide access to non-const components.\n\nAll these changes could be cleaner if we targeted Citadel.", "markup": "markdown", "html": "<p>It will be tough to enforce that all component changes be done through this <code>SetChanged(SetData)</code> idiom.</p>\n<p>Another upcoming use case to keep in mind is that once systems are updated in parallel, the ECM will need to resolve which changes have priority. With that in mind, how about adding a function like <code>RequestComponentChange</code> to the ECM, similar to <code>RequestEntityRemoval</code>, which marks the change and processes it after post-update? It would also be nice to prevent users from changing components in any other way, so we may need to get rid of the <code>Each</code> calls which provide access to non-const components.</p>\n<p>All these changes could be cleaner if we targeted Citadel.</p>", "type": "rendered"}, "created_on": "2019-07-10T19:40:58.668908+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 626, "from": null, "outdated": true, "path": "src/systems/user_commands/UserCommands.cc"}, "updated_on": "2019-07-10T19:40:58.678740+00:00", "type": "pullrequest_comment", "id": 108835113}