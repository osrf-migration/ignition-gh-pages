{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/440/comments/121396370.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:2ea27e562fe5..504a12f9e128?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/440/_/diff#comment-121396370"}}, "parent": {"id": 121395032, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/440/comments/121395032.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/440/_/diff#comment-121395032"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 440, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/440.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/440"}}, "title": "Detachable joint system"}, "content": {"raw": "I'm liking the idea of using `WeldJointConstraint` more and more. The issue I see now is that a detached model cannot collide with the model it was detached from. Maybe it would work if both models had `self_collide` on, but that's not always feasible.\n\n![no_self_collide.gif](data/bitbucket.org/repo/8zodKzn/images/904027186-no_self_collide.gif)\n\nWith the example I added, I tried putting the plugin in the breadcrumb models, but that only worked for 1 breadcrumb. For the other two, the joint was not created because the child now has a parent joint from the first breadcrumb.", "markup": "markdown", "html": "<p>I'm liking the idea of using <code>WeldJointConstraint</code> more and more. The issue I see now is that a detached model cannot collide with the model it was detached from. Maybe it would work if both models had <code>self_collide</code> on, but that's not always feasible.</p>\n<p><img alt=\"no_self_collide.gif\" src=\"data/bitbucket.org/repo/8zodKzn/images/904027186-no_self_collide.gif\" /></p>\n<p>With the example I added, I tried putting the plugin in the breadcrumb models, but that only worked for 1 breadcrumb. For the other two, the joint was not created because the child now has a parent joint from the first breadcrumb.</p>", "type": "rendered"}, "created_on": "2019-10-19T00:03:50.478026+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 627, "from": null, "outdated": true, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2019-10-19T00:03:50.485988+00:00", "type": "pullrequest_comment", "id": 121396370}