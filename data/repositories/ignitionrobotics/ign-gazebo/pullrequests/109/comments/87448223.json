{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/109/comments/87448223.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/109/_/diff#comment-87448223"}}, "parent": {"id": 87415141, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/109/comments/87415141.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/109/_/diff#comment-87415141"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 109, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/109.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/109"}}, "title": "[WIP] Mesh support"}, "content": {"raw": "I\u2019ve been continuing to investigate this using dartsim directly without the ignition layers on top.\n\nHere\u2019s what I\u2019ve found so far:\n\n1. The number of contacts that are being detected is actually pretty low; it never exceeds 4.\n2. When I use FCL as a collision detector instead of Bullet, the RTF is able to remain high.  Allowing the simulation to run at full-throttle, the lowest the RTF gets while using FCL is 4.2, whereas it drops as low as 0.24 when using the Bullet collision detector.\n3. Similarly, using the ODE collision detector, the RTF stays above 2.16.\n\ndartsim doesn\u2019t do much internal profiling, so from what I can figure right now there are two possibilities:\n\n1. Bullet is computing the mesh-primitive collisions rather slowly whereas FCL and ODE are able to compute them fairly fast\n2. The contact points that Bullet produces for the mesh-primitive collision make for a harder LCP problem to solve than the contact points that FCL and ODE are producing.\n\nThis actually aligns well with the advice that we tend to give dartsim users: Use FCL when mesh shapes are important, use Bullet when you're only dealing with primitive shapes, and use ODE if you need both. I think we've been using the Bullet collision detector up until now because it supports plane-primitive collisions and we weren't using meshes until now.  I'll try out the ODE collision detector in `ign-physics` to see if we can get the best of both worlds. The catch is it\u2019ll bring in a dependency on ODE \\(but we\u2019re planning on making an ODE physics engine plugin for ODE eventually anyway, so that shouldn\u2019t really be an issue\\).\n\nWhatever the case, I think this tells us that we should provide users with a feature for selecting their desired collision detector. Most physics engines will probably only support their own native collision detector \\(e.g. ODE and Bullet\\), but some physics engines \\(e.g. dartsim\\) use a wrapper to support multiple third-party collision detectors. This could be a good example of an optional feature.", "markup": "markdown", "html": "<p>I\u2019ve been continuing to investigate this using dartsim directly without the ignition layers on top.</p>\n<p>Here\u2019s what I\u2019ve found so far:</p>\n<ol>\n<li>The number of contacts that are being detected is actually pretty low; it never exceeds 4.</li>\n<li>When I use FCL as a collision detector instead of Bullet, the RTF is able to remain high.  Allowing the simulation to run at full-throttle, the lowest the RTF gets while using FCL is 4.2, whereas it drops as low as 0.24 when using the Bullet collision detector.</li>\n<li>Similarly, using the ODE collision detector, the RTF stays above 2.16.</li>\n</ol>\n<p>dartsim doesn\u2019t do much internal profiling, so from what I can figure right now there are two possibilities:</p>\n<ol>\n<li>Bullet is computing the mesh-primitive collisions rather slowly whereas FCL and ODE are able to compute them fairly fast</li>\n<li>The contact points that Bullet produces for the mesh-primitive collision make for a harder LCP problem to solve than the contact points that FCL and ODE are producing.</li>\n</ol>\n<p>This actually aligns well with the advice that we tend to give dartsim users: Use FCL when mesh shapes are important, use Bullet when you're only dealing with primitive shapes, and use ODE if you need both. I think we've been using the Bullet collision detector up until now because it supports plane-primitive collisions and we weren't using meshes until now.  I'll try out the ODE collision detector in <code>ign-physics</code> to see if we can get the best of both worlds. The catch is it\u2019ll bring in a dependency on ODE (but we\u2019re planning on making an ODE physics engine plugin for ODE eventually anyway, so that shouldn\u2019t really be an issue).</p>\n<p>Whatever the case, I think this tells us that we should provide users with a feature for selecting their desired collision detector. Most physics engines will probably only support their own native collision detector (e.g. ODE and Bullet), but some physics engines (e.g. dartsim) use a wrapper to support multiple third-party collision detectors. This could be a good example of an optional feature.</p>", "type": "rendered"}, "created_on": "2019-01-09T06:28:46.846904+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-01-09T06:28:46.858687+00:00", "type": "pullrequest_comment", "id": 87448223}