{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/62/comments/79145652.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:52be49ec7f2f..14a619f929f7?path=src%2FSimulationRunner.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/62/_/diff#comment-79145652"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 62, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/62.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/62"}}, "title": "Erase entity [Ready for review]"}, "content": {"raw": "I have mixed feelings about giving a component type special meaning within the server. How can entities which don't have a name component be deleted? I propose this function takes `EntityId`.\n\nAlso note that:\n\n* we're currently not enforcing unique names\n* the name within the component is the \"local\" name and doesn't contain the scope of the entity - so expect many component names to equal \"link\", for example\n* we may want to support URIs, which work more like scoped names\n\nInstead, I'd propose we add a system (i.e. `FactorySystem`), which provides Ignition Transport services for insertion and deletion. Since it is user-facing, it would make sense that it handles specifically entities which have a name component. Another benefit is that the system can be aware of the entity hierarchy, so deleting a model will also delete its links.\n\nThe tricky thing with the asynchronous handling of deletion is that the service wouldn't be able to return to the caller a valid answer as to whether the entity has been successfully deleted (unless it waits for an iteration to check).", "markup": "markdown", "html": "<p>I have mixed feelings about giving a component type special meaning within the server. How can entities which don't have a name component be deleted? I propose this function takes <code>EntityId</code>.</p>\n<p>Also note that:</p>\n<ul>\n<li>we're currently not enforcing unique names</li>\n<li>the name within the component is the \"local\" name and doesn't contain the scope of the entity - so expect many component names to equal \"link\", for example</li>\n<li>we may want to support URIs, which work more like scoped names</li>\n</ul>\n<p>Instead, I'd propose we add a system (i.e. <code>FactorySystem</code>), which provides Ignition Transport services for insertion and deletion. Since it is user-facing, it would make sense that it handles specifically entities which have a name component. Another benefit is that the system can be aware of the entity hierarchy, so deleting a model will also delete its links.</p>\n<p>The tricky thing with the asynchronous handling of deletion is that the service wouldn't be able to return to the caller a valid answer as to whether the entity has been successfully deleted (unless it waits for an iteration to check).</p>", "type": "rendered"}, "created_on": "2018-10-15T22:23:29.014088+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 605, "from": null, "outdated": true, "path": "src/SimulationRunner.cc"}, "updated_on": "2018-10-15T22:23:29.020139+00:00", "type": "pullrequest_comment", "id": 79145652}