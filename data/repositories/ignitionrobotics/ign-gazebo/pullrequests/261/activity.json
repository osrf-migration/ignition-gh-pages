{"pagelen": 50, "values": [{"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* ~~fix the tests~~\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] Unify network and sync managers", "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a299eefe4a39", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/a299eefe4a39.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/a299eefe4a39"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "MERGED", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2019-04-18T15:23:53.027925+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"approval": {"date": "2019-04-18T15:23:40.989509+00:00", "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98881596.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98881596"}}, "parent": {"id": 98836783, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98836783.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98836783"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "content": {"raw": "Thanks for the review. I updated the PR with some linter fixes and updated docs. If you're ok with these changes, feel free to merge.", "markup": "markdown", "html": "<p>Thanks for the review. I updated the PR with some linter fixes and updated docs. If you're ok with these changes, feel free to merge.</p>", "type": "rendered"}, "created_on": "2019-04-16T01:23:50.707127+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-16T01:23:50.716524+00:00", "type": "pullrequest_comment", "id": 98881596}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* ~~fix the tests~~\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] Unify network and sync managers", "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a299eefe4a39", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/a299eefe4a39.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/a299eefe4a39"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-16T00:28:30.376503+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* ~~fix the tests~~\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] Unify network and sync managers", "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1908a9d33d21", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/1908a9d33d21.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/1908a9d33d21"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-15T20:36:52.334200+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98861671.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98861671"}}, "parent": {"id": 98836707, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98836707.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98836707"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "content": {"raw": "clang-tidy was the one complaining about it, should we make an exception?\n", "markup": "markdown", "html": "<p>clang-tidy was the one complaining about it, should we make an exception?</p>", "type": "rendered"}, "created_on": "2019-04-15T20:11:37.079827+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2019-04-15T20:11:37.092620+00:00", "type": "pullrequest_comment", "id": 98861671}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98836783.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98836783"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "content": {"raw": "LGTM with a few minor comments.", "markup": "markdown", "html": "<p>LGTM with a few minor comments.</p>", "type": "rendered"}, "created_on": "2019-04-15T16:30:51.464773+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-04-15T16:30:51.473038+00:00", "type": "pullrequest_comment", "id": 98836783}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"approval": {"date": "2019-04-15T16:30:32.616423+00:00", "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98836707.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98836707"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "content": {"raw": "I know that this goes against the naming conventions, but I was generally using the `BM_` prefix to make finding the benchmarks easy in the JSON output. ", "markup": "markdown", "html": "<p>I know that this goes against the naming conventions, but I was generally using the <code>BM_</code> prefix to make finding the benchmarks easy in the JSON output. </p>", "type": "rendered"}, "created_on": "2019-04-15T16:30:14.246834+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-04-15T16:30:14.256675+00:00", "type": "pullrequest_comment", "id": 98836707}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98830508.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98830508"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "content": {"raw": "I really like this refactoring :thumbsup: ", "markup": "markdown", "html": "<p>I really like this refactoring <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f44d.png\" alt=\"\ud83d\udc4d\" title=\":thumbsup:\" data-emoji-short-name=\":thumbsup:\" /> </p>", "type": "rendered"}, "created_on": "2019-04-15T15:48:09.841654+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-04-15T15:48:09.849558+00:00", "type": "pullrequest_comment", "id": 98830508}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98693946.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98693946"}}, "parent": {"id": 98528074, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98528074.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98528074"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "content": {"raw": "Thanks for taking a look! I fixed the tests and now this is ready for review.", "markup": "markdown", "html": "<p>Thanks for taking a look! I fixed the tests and now this is ready for review.</p>", "type": "rendered"}, "created_on": "2019-04-13T02:02:48.434871+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-13T02:02:48.443196+00:00", "type": "pullrequest_comment", "id": 98693946}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* ~~fix the tests~~\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] Unify network and sync managers", "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7e33acd1b278", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/7e33acd1b278.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/7e33acd1b278"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-13T02:02:17.322058+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7e33acd1b278", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/7e33acd1b278.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/7e33acd1b278"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-13T02:01:37.064914+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "fc67249d5ed2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/fc67249d5ed2.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/fc67249d5ed2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-13T00:10:31.574095+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e2ae8799f30", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2e2ae8799f30.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2e2ae8799f30"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-12T21:13:53.474172+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments/98528074.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261/_/diff#comment-98528074"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}, "content": {"raw": "Initial thoughts \\(some of this happened offline so moving here\\)\n\nThe downside is that new performance is not as good as `default`'s implementation, I can confirm on my local machine as well.    The upside is that the reason that performance was better before was due to a bug in the SyncManager.  Previously the sync manager would not block until all updates had been received from secondaries, but rather continue the simulation.  This could potentially cause issues if/when performers were transferred from one runner to another, or in the case of very dynamic performers being visualized.\n\nI think what is here represents the correct behavior.", "markup": "markdown", "html": "<p>Initial thoughts (some of this happened offline so moving here)</p>\n<p>The downside is that new performance is not as good as <code>default</code>'s implementation, I can confirm on my local machine as well.    The upside is that the reason that performance was better before was due to a bug in the SyncManager.  Previously the sync manager would not block until all updates had been received from secondaries, but rather continue the simulation.  This could potentially cause issues if/when performers were transferred from one runner to another, or in the case of very dynamic performers being visualized.</p>\n<p>I think what is here represents the correct behavior.</p>", "type": "rendered"}, "created_on": "2019-04-11T19:49:09.342451+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-04-11T19:49:09.353007+00:00", "type": "pullrequest_comment", "id": 98528074}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "9efa9c3411ae", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9efa9c3411ae.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9efa9c3411ae"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e2ae8799f30", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2e2ae8799f30.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2e2ae8799f30"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T22:21:03.621745+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* Pull request #262\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "9efa9c3411ae", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9efa9c3411ae.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9efa9c3411ae"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e2ae8799f30", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2e2ae8799f30.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2e2ae8799f30"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T22:20:48.562032+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* Pull request #262\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "9efa9c3411ae", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9efa9c3411ae.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9efa9c3411ae"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e2ae8799f30", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2e2ae8799f30.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2e2ae8799f30"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T22:20:48.518975+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* Pull request #262\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "db117a695a6c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/db117a695a6c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/db117a695a6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e2ae8799f30", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2e2ae8799f30.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2e2ae8799f30"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T19:18:51.142123+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* Pull request #262\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "db117a695a6c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/db117a695a6c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/db117a695a6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e2ae8799f30", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2e2ae8799f30.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2e2ae8799f30"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T19:18:51.097085+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "8db7b927ed14", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/8db7b927ed14.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/8db7b927ed14"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2e2ae8799f30", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2e2ae8799f30.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2e2ae8799f30"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T19:18:12.253368+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "8db7b927ed14", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/8db7b927ed14.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/8db7b927ed14"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4a9791308c62", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/4a9791308c62.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/4a9791308c62"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T03:11:03.756707+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}, {"update": {"description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\n## TODO\r\n\r\n* fix the tests\r\n* investigate why performance is much worse than current implementation\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "title": "[Blueprint] [WIP] Unify network and sync managers", "destination": {"commit": {"hash": "8db7b927ed14", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/8db7b927ed14.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/8db7b927ed14"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4a9791308c62", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/4a9791308c62.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/4a9791308c62"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-04-10T03:11:03.687685+00:00"}, "pull_request": {"type": "pullrequest", "id": 261, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}}, "title": "[Blueprint] Unify network and sync managers"}}]}