{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/224/comments/95606050.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/224/_/diff#comment-95606050"}}, "parent": {"id": 95597843, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/224/comments/95597843.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/224/_/diff#comment-95597843"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 224, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/224.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/224"}}, "title": "[Acropolis][WIP] Mutex to protect systems added on demand"}, "content": {"raw": "> I agree with adding new systems to a queue, much like we do entities.\n\nIf I understand correctly, we currently queue entity removal, but creation takes effect immediately. New entities are marked as new until the end of the iteration, but anyone calling `Each` in the same update as the entity is created may get it or not (we need to fix this).\n\n>  making an entity for each system that is added\n\nDo you mean that there would be an entity that just has the system so their lifecycles are managed together? I think that wouldn't be much different from what we have now, where the system is always tied to an entity. I just think we're not unloading the system when the entity is deleted, and we should.", "markup": "markdown", "html": "<blockquote>\n<p>I agree with adding new systems to a queue, much like we do entities.</p>\n</blockquote>\n<p>If I understand correctly, we currently queue entity removal, but creation takes effect immediately. New entities are marked as new until the end of the iteration, but anyone calling <code>Each</code> in the same update as the entity is created may get it or not (we need to fix this).</p>\n<blockquote>\n<p>making an entity for each system that is added</p>\n</blockquote>\n<p>Do you mean that there would be an entity that just has the system so their lifecycles are managed together? I think that wouldn't be much different from what we have now, where the system is always tied to an entity. I just think we're not unloading the system when the entity is deleted, and we should.</p>", "type": "rendered"}, "created_on": "2019-03-19T18:31:41.899871+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-03-19T18:31:41.915455+00:00", "type": "pullrequest_comment", "id": 95606050}