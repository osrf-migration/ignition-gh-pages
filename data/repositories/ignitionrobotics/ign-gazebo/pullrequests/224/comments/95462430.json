{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/224/comments/95462430.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/224/_/diff#comment-95462430"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 224, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/224.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/224"}}, "title": "[Acropolis][WIP] Mutex to protect systems added on demand"}, "content": {"raw": "I did some digging and I don't think its so much a race condition, but an issue of invalidated iterators. This piece of code is from[ SimulationRunner:301](#!/ignitionrobotics/ign-gazebo/src/44c79420340e66bf009bc7b939d9fc99459fabc9/src/SimulationRunner.cc?fileviewer=file-view-default#SimulationRunner.cc-301)\n```\n {\n    IGN_PROFILE(\"PreUpdate\");\n    for (auto& system : this->systemsPreupdate)\n      system->PreUpdate(this->currentInfo, this->entityCompMgr);\n  }\n```\nWhen `system->PreUpdate` is called, a system can add another system by invoking an event. But this all happens in the same thread so it's not a race condition. However, the `this->systemsPreupdate` container is a `std::vector` and all its iterators become invalid when a `push_back` is called and the vector has to be resized. One solution is to use `std::list` as the container for all `systems(Pre|Post)update` containers as the iterators and references to elements never get invalidated as a result of a `push_back`. I have tested this on macOS and it fixes the segfaults, but I didn't know if this is the best solution.\n\nAnother solution is to add new systems to a queue when the `LoadPlugins` event is triggered and only add the systems to the `systems(Pre|Post)update` containers after `SimulationRunner::UpdateSystems` is finished.\n\nThoughts?", "markup": "markdown", "html": "<p>I did some digging and I don't think its so much a race condition, but an issue of invalidated iterators. This piece of code is from<a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/44c79420340e66bf009bc7b939d9fc99459fabc9/src/SimulationRunner.cc?fileviewer=file-view-default#SimulationRunner.cc-301\" rel=\"nofollow\"> SimulationRunner:301</a></p>\n<div class=\"codehilite\"><pre><span></span> {\n    IGN_PROFILE(&quot;PreUpdate&quot;);\n    for (auto&amp; system : this-&gt;systemsPreupdate)\n      system-&gt;PreUpdate(this-&gt;currentInfo, this-&gt;entityCompMgr);\n  }\n</pre></div>\n\n\n<p>When <code>system-&gt;PreUpdate</code> is called, a system can add another system by invoking an event. But this all happens in the same thread so it's not a race condition. However, the <code>this-&gt;systemsPreupdate</code> container is a <code>std::vector</code> and all its iterators become invalid when a <code>push_back</code> is called and the vector has to be resized. One solution is to use <code>std::list</code> as the container for all <code>systems(Pre|Post)update</code> containers as the iterators and references to elements never get invalidated as a result of a <code>push_back</code>. I have tested this on macOS and it fixes the segfaults, but I didn't know if this is the best solution.</p>\n<p>Another solution is to add new systems to a queue when the <code>LoadPlugins</code> event is triggered and only add the systems to the <code>systems(Pre|Post)update</code> containers after <code>SimulationRunner::UpdateSystems</code> is finished.</p>\n<p>Thoughts?</p>", "type": "rendered"}, "created_on": "2019-03-19T00:24:43.972785+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "updated_on": "2019-03-19T00:24:43.982418+00:00", "type": "pullrequest_comment", "id": 95462430}