{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/232/comments/96115897.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:50ac317ffd15..f74b2da3b265?path=include%2Fignition%2Fgazebo%2Fcomponents%2FFactory.hh"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/232/_/diff#comment-96115897"}}, "parent": {"id": 96098457, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/232/comments/96098457.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/232/_/diff#comment-96098457"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 232, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/232.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/232"}}, "title": "[Acropolis] Bring component type names back"}, "content": {"raw": "Clang was not happy about enforcing unique names because it wasn't sharing the static variables across libraries, so whenever a new library that uses the component is loaded, it would try to register it again, fail, and the component would be ID-less and nameless for that plugin. I don't know why the same doesn't happen with GCC.\n\nSo now, what it's doing is:\n\n* If the ID is already set (i.e. != 0) we don't set it again and silently return.\n* Otherwise, set the ID anyway\n* But if the maps have already been filled for that ID, we don't overwrite these entries.\n* However, if the runtime name of the component is different from the previously registered one, we print an error. This will not prevent the user from trying to use one component as if it was the other, which will potentially cause crashes, but at least it makes the issue traceable.\n\nI'm also unregistering components as their libraries are unloaded so they don't dangle around, but developers should think carefully about this when sharing custom components across libs.\n\t\n50ac317", "markup": "markdown", "html": "<p>Clang was not happy about enforcing unique names because it wasn't sharing the static variables across libraries, so whenever a new library that uses the component is loaded, it would try to register it again, fail, and the component would be ID-less and nameless for that plugin. I don't know why the same doesn't happen with GCC.</p>\n<p>So now, what it's doing is:</p>\n<ul>\n<li>If the ID is already set (i.e. != 0) we don't set it again and silently return.</li>\n<li>Otherwise, set the ID anyway</li>\n<li>But if the maps have already been filled for that ID, we don't overwrite these entries.</li>\n<li>However, if the runtime name of the component is different from the previously registered one, we print an error. This will not prevent the user from trying to use one component as if it was the other, which will potentially cause crashes, but at least it makes the issue traceable.</li>\n</ul>\n<p>I'm also unregistering components as their libraries are unloaded so they don't dangle around, but developers should think carefully about this when sharing custom components across libs.</p>\n<p><a href=\"#!/ignitionrobotics/ign-gazebo/commits/50ac317\" rel=\"nofollow\" class=\"ap-connect-link\">50ac317</a></p>", "type": "rendered"}, "created_on": "2019-03-23T00:06:18.549897+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 126, "from": null, "outdated": true, "path": "include/ignition/gazebo/components/Factory.hh"}, "updated_on": "2019-03-23T00:06:18.561431+00:00", "type": "pullrequest_comment", "id": 96115897}