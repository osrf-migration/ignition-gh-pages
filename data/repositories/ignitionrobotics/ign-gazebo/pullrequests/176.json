{"rendered": {"description": {"raw": "Right now component types have 2 IDs:\r\n\r\n* one used within the ECM, which is not guaranteed to be the same across runs or compilers\r\n* one registered with the Factory, which is guaranteed to be the same\r\n\r\nThis is confusing and error prone. In fact, the Factory code itself is mixing up both of them, setting one as `ComponentType::id` and keeping another into its `compsById` map, so currently `Factory::New(ComponentType::id)` doesn't work.\r\n\r\nThis PR:\r\n\r\n* **Removes the ECM's ID** and uses the one from the factory everywhere instead\r\n* A consequence is that **all components must be registered with the factory**\r\n* Removed `EntityComponentManager::ComponentType<Type>` since it is no longer convenient. We should use `Type::typeId` instead.\r\n* Adds functions `TypeName` and `TypeId`, which **allow retrieving the correct type information even from a `BaseComponent` pointer**. This is helpful when using `Factory::New`.\r\n\r\n---\r\n\r\n## Future work\r\n\r\n* Currently, if  someone forgets to register a component the error will manifest itself in weird ways. I'm planning to tackle this in a future pull request.\r\n\r\n---\r\n\r\nThis is broken off the `streaming` branch.", "markup": "markdown", "html": "<p>Right now component types have 2 IDs:</p>\n<ul>\n<li>one used within the ECM, which is not guaranteed to be the same across runs or compilers</li>\n<li>one registered with the Factory, which is guaranteed to be the same</li>\n</ul>\n<p>This is confusing and error prone. In fact, the Factory code itself is mixing up both of them, setting one as <code>ComponentType::id</code> and keeping another into its <code>compsById</code> map, so currently <code>Factory::New(ComponentType::id)</code> doesn't work.</p>\n<p>This PR:</p>\n<ul>\n<li><strong>Removes the ECM's ID</strong> and uses the one from the factory everywhere instead</li>\n<li>A consequence is that <strong>all components must be registered with the factory</strong></li>\n<li>Removed <code>EntityComponentManager::ComponentType&lt;Type&gt;</code> since it is no longer convenient. We should use <code>Type::typeId</code> instead.</li>\n<li>Adds functions <code>TypeName</code> and <code>TypeId</code>, which <strong>allow retrieving the correct type information even from a <code>BaseComponent</code> pointer</strong>. This is helpful when using <code>Factory::New</code>.</li>\n</ul>\n<hr />\n<h2 id=\"markdown-header-future-work\">Future work</h2>\n<ul>\n<li>Currently, if  someone forgets to register a component the error will manifest itself in weird ways. I'm planning to tackle this in a future pull request.</li>\n</ul>\n<hr />\n<p>This is broken off the <code>streaming</code> branch.</p>", "type": "rendered"}, "title": {"raw": "[A-4] One component type ID", "markup": "markdown", "html": "<p>[A-4] One component type ID</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Right now component types have 2 IDs:\r\n\r\n* one used within the ECM, which is not guaranteed to be the same across runs or compilers\r\n* one registered with the Factory, which is guaranteed to be the same\r\n\r\nThis is confusing and error prone. In fact, the Factory code itself is mixing up both of them, setting one as `ComponentType::id` and keeping another into its `compsById` map, so currently `Factory::New(ComponentType::id)` doesn't work.\r\n\r\nThis PR:\r\n\r\n* **Removes the ECM's ID** and uses the one from the factory everywhere instead\r\n* A consequence is that **all components must be registered with the factory**\r\n* Removed `EntityComponentManager::ComponentType<Type>` since it is no longer convenient. We should use `Type::typeId` instead.\r\n* Adds functions `TypeName` and `TypeId`, which **allow retrieving the correct type information even from a `BaseComponent` pointer**. This is helpful when using `Factory::New`.\r\n\r\n---\r\n\r\n## Future work\r\n\r\n* Currently, if  someone forgets to register a component the error will manifest itself in weird ways. I'm planning to tackle this in a future pull request.\r\n\r\n---\r\n\r\nThis is broken off the `streaming` branch.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/176/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:2abb5f7d521a%0Ddba828e5d39d?from_pullrequest_id=176"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/176/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/176.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/176/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/176/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/176"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/176/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:2abb5f7d521a%0Ddba828e5d39d?from_pullrequest_id=176"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/176/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/176/statuses_page=1.json"}}, "title": "[A-4] One component type ID", "close_source_branch": true, "reviewers": [{"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 176, "destination": {"commit": {"hash": "dba828e5d39d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/dba828e5d39d.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/dba828e5d39d"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "created_on": "2019-02-21T05:07:45.123207+00:00", "summary": {"raw": "Right now component types have 2 IDs:\r\n\r\n* one used within the ECM, which is not guaranteed to be the same across runs or compilers\r\n* one registered with the Factory, which is guaranteed to be the same\r\n\r\nThis is confusing and error prone. In fact, the Factory code itself is mixing up both of them, setting one as `ComponentType::id` and keeping another into its `compsById` map, so currently `Factory::New(ComponentType::id)` doesn't work.\r\n\r\nThis PR:\r\n\r\n* **Removes the ECM's ID** and uses the one from the factory everywhere instead\r\n* A consequence is that **all components must be registered with the factory**\r\n* Removed `EntityComponentManager::ComponentType<Type>` since it is no longer convenient. We should use `Type::typeId` instead.\r\n* Adds functions `TypeName` and `TypeId`, which **allow retrieving the correct type information even from a `BaseComponent` pointer**. This is helpful when using `Factory::New`.\r\n\r\n---\r\n\r\n## Future work\r\n\r\n* Currently, if  someone forgets to register a component the error will manifest itself in weird ways. I'm planning to tackle this in a future pull request.\r\n\r\n---\r\n\r\nThis is broken off the `streaming` branch.", "markup": "markdown", "html": "<p>Right now component types have 2 IDs:</p>\n<ul>\n<li>one used within the ECM, which is not guaranteed to be the same across runs or compilers</li>\n<li>one registered with the Factory, which is guaranteed to be the same</li>\n</ul>\n<p>This is confusing and error prone. In fact, the Factory code itself is mixing up both of them, setting one as <code>ComponentType::id</code> and keeping another into its <code>compsById</code> map, so currently <code>Factory::New(ComponentType::id)</code> doesn't work.</p>\n<p>This PR:</p>\n<ul>\n<li><strong>Removes the ECM's ID</strong> and uses the one from the factory everywhere instead</li>\n<li>A consequence is that <strong>all components must be registered with the factory</strong></li>\n<li>Removed <code>EntityComponentManager::ComponentType&lt;Type&gt;</code> since it is no longer convenient. We should use <code>Type::typeId</code> instead.</li>\n<li>Adds functions <code>TypeName</code> and <code>TypeId</code>, which <strong>allow retrieving the correct type information even from a <code>BaseComponent</code> pointer</strong>. This is helpful when using <code>Factory::New</code>.</li>\n</ul>\n<hr />\n<h2 id=\"markdown-header-future-work\">Future work</h2>\n<ul>\n<li>Currently, if  someone forgets to register a component the error will manifest itself in weird ways. I'm planning to tackle this in a future pull request.</li>\n</ul>\n<hr />\n<p>This is broken off the <code>streaming</code> branch.</p>", "type": "rendered"}, "source": {"commit": {"hash": "7c62169afbda", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/7c62169afbda.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/7c62169afbda"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "one_id"}}, "comment_count": 9, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-02-22T16:06:55.840752+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-02-22T18:55:22.117635+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-02-22T18:55:39.119111+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "2abb5f7d521a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2abb5f7d521a.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2abb5f7d521a"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}