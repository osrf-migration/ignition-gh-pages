{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/254/comments/97872127.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:1219c296cea3..828af9f2ca46?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/254/_/diff#comment-97872127"}}, "parent": {"id": 97826578, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/254/comments/97826578.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/254/_/diff#comment-97826578"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 254, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/254.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/254"}}, "title": "[Acropolis] Add ApplyJointForce system"}, "content": {"raw": "Related to this comment: can we consider having the `Data` in these components contain a variable sized array? I feel like creating entirely new types to represent additional coordinates is a waste of symbols and isn\u2019t able to extend to arbitrary joint types. For example, the current implementation of this physics system can\u2019t handle ball joints \\(3 rotation dofs\\), euler joints \\(3 rotation dofs\\), planar joints \\(2 translation dofs, 1 rotation dof\\), or potentially other custom higher dof joints.\n\nInstead of checking for `DataType2` components, we could just take `std::size_t N = std::min(data.size(), jointIt->second->GetDegreesOfFreedom())` and then call\n\n```\nfor (std::size_t i=0; i < N; ++i)\n  jointIt->second->SetDataType(i, data[i]);\n```\n\nAnd pertaining directly to @{557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6} 's comment, we could consider emitting a warning when `data.size()` and `jointIt->second->GetDegreesOfFreedom()` don\u2019t match.", "markup": "markdown", "html": "<p>Related to this comment: can we consider having the <code>Data</code> in these components contain a variable sized array? I feel like creating entirely new types to represent additional coordinates is a waste of symbols and isn\u2019t able to extend to arbitrary joint types. For example, the current implementation of this physics system can\u2019t handle ball joints (3 rotation dofs), euler joints (3 rotation dofs), planar joints (2 translation dofs, 1 rotation dof), or potentially other custom higher dof joints.</p>\n<p>Instead of checking for <code>DataType2</code> components, we could just take <code>std::size_t N = std::min(data.size(), jointIt-&gt;second-&gt;GetDegreesOfFreedom())</code> and then call</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">for</span> <span class=\"o\">(</span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">size_t</span> <span class=\"nt\">i</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"o\">;</span> <span class=\"nt\">i</span> <span class=\"o\">&lt;</span> <span class=\"nt\">N</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"nt\">i</span><span class=\"o\">)</span>\n  <span class=\"nt\">jointIt-</span><span class=\"o\">&gt;</span><span class=\"nt\">second-</span><span class=\"o\">&gt;</span><span class=\"nt\">SetDataType</span><span class=\"o\">(</span><span class=\"nt\">i</span><span class=\"o\">,</span> <span class=\"nt\">data</span><span class=\"cp\">[</span><span class=\"nx\">i</span><span class=\"cp\">]</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>And pertaining directly to <span class=\"ap-mention\" data-atlassian-id=\"557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6\">@Silvio Traversaro</span> 's comment, we could consider emitting a warning when <code>data.size()</code> and <code>jointIt-&gt;second-&gt;GetDegreesOfFreedom()</code> don\u2019t match.</p>", "type": "rendered"}, "created_on": "2019-04-08T04:24:15.082136+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 584, "from": null, "outdated": true, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2019-04-08T04:24:34.671060+00:00", "type": "pullrequest_comment", "id": 97872127}