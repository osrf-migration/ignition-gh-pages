{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/254/comments/98494713.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/254/_/diff#comment-98494713"}}, "parent": {"id": 98196253, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/254/comments/98196253.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/254/_/diff#comment-98196253"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 254, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/254.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/254"}}, "title": "[Acropolis] Add ApplyJointForce system"}, "content": {"raw": "Thanks for reviewing the PR @dgferigo.\n\n> Force references are stored in a new PendingJointForce components, velocity references instead in a JointVelocityCmd component (PR#260). Despite it would not be a recommended practice as already discussed, I think you're going to implement also a JointPositionCmd component. Is there any reason not to use JointForceCmd to have an uniform naming scheme? Since the force reference could be the output of a position / velocity PID controller, it would make sense to me.\n\nMakes sense to call it JointForceCmd to stay consistent with the other PR.\n\n> I still have few doubts about the resetting policy of these reference components. I do not have any strong opinion yet, and I\u2019m not sure if the best approach would be resetting the reference as happens in this PR, or leaving it there as happens in PR#260 for the velocity (I guess, expecting that it would be changed from the user side in the next iterations). Do you (or @Nate Koenig ) have any insight to share about this?\n\nIn my thinking, these components, especially the forces, are shared among many systems. Resetting them to zero enables systems to simply add their contributions to the component in the next simulation step. This may not make sense for velocity components, but having a consistent interface where all `*Cmd` components get cleared by the physics system in every step would be easier to document and understand. I can make a comment in PR #260 to that effect. If there are other components that we are currently not doing this on, please feel free to point them out. \n\n> Related to point 2., I do not know what would be the effect of setting 0 references in the cycles after the components have been reset. I noticed that the process of adding and removing components continuously is not efficient due to the ecm caching, so zeroing references seems the only way. I only argue if this can cause troubles to some physic engines. Though, I\u2019m not really knowledgeable about it.\n\nI'm not sure what you mean. Per my response above, it would be the responsibility of the system to set the `*Cmd` component to the desired value in every simulation step. Adding or removing a component does have an overhead compared to setting it to zero.", "markup": "markdown", "html": "<p>Thanks for reviewing the PR @dgferigo.</p>\n<blockquote>\n<p>Force references are stored in a new PendingJointForce components, velocity references instead in a JointVelocityCmd component (PR#260). Despite it would not be a recommended practice as already discussed, I think you're going to implement also a JointPositionCmd component. Is there any reason not to use JointForceCmd to have an uniform naming scheme? Since the force reference could be the output of a position / velocity PID controller, it would make sense to me.</p>\n</blockquote>\n<p>Makes sense to call it JointForceCmd to stay consistent with the other PR.</p>\n<blockquote>\n<p>I still have few doubts about the resetting policy of these reference components. I do not have any strong opinion yet, and I\u2019m not sure if the best approach would be resetting the reference as happens in this PR, or leaving it there as happens in PR#260 for the velocity (I guess, expecting that it would be changed from the user side in the next iterations). Do you (or @Nate Koenig ) have any insight to share about this?</p>\n</blockquote>\n<p>In my thinking, these components, especially the forces, are shared among many systems. Resetting them to zero enables systems to simply add their contributions to the component in the next simulation step. This may not make sense for velocity components, but having a consistent interface where all <code>*Cmd</code> components get cleared by the physics system in every step would be easier to document and understand. I can make a comment in <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/260/blueprint-joint-state-pub\" rel=\"nofollow\" class=\"ap-connect-link\">PR #260</a> to that effect. If there are other components that we are currently not doing this on, please feel free to point them out. </p>\n<blockquote>\n<p>Related to point 2., I do not know what would be the effect of setting 0 references in the cycles after the components have been reset. I noticed that the process of adding and removing components continuously is not efficient due to the ecm caching, so zeroing references seems the only way. I only argue if this can cause troubles to some physic engines. Though, I\u2019m not really knowledgeable about it.</p>\n</blockquote>\n<p>I'm not sure what you mean. Per my response above, it would be the responsibility of the system to set the <code>*Cmd</code> component to the desired value in every simulation step. Adding or removing a component does have an overhead compared to setting it to zero.</p>", "type": "rendered"}, "created_on": "2019-04-11T15:22:25.712501+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "updated_on": "2019-04-11T15:22:25.794962+00:00", "type": "pullrequest_comment", "id": 98494713}