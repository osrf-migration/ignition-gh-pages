{"rendered": {"description": {"raw": "@carromj brought up in [another PR](#!/ignitionrobotics/ign-gazebo/pull-requests/232/acropolis-bring-component-type-names-back/activity#comment-96091920) that we're not enforcing name and ID uniqueness across component types.\r\n\r\nWhile investigating it, I noticed that the couple of tests we have where custm components are registered by plugins (`TestModelSystem` and `TestWorldSystem`), the tests were only passing because 2 different components were being registered with the same name and exact same structure - `IntComponent` and `DoubleComponent` were being registered by the plugin, and by the test. The test would use its own type, the plugin would use its own, and they were stored together by the ECM because they had the same ID. I wondered a bit whether this was a feature or a bug, and came to the conclusion that we should enforce uniqueness and if 2 plugins do want to share a component type, they should against each other so they are really using the same type.\r\n\r\n---\r\n\r\nOn `SimulationRunner_TEST`, there are 2 tests that run in a sequence loading the same plugins, and enforcing uniqueness had some adverse effects depending on the compiler used.\r\n\r\nClang calls the static registration macros again when plugins are loaded in the 2nd test, but gcc doesn't. This causes the test to crash when creating a storage for the component on the 2nd test, but the same doesn't happen for gcc.\r\n\r\nI've already put more time into investigating this than I had anticipated. For now, I'm unregistering the plugins in the end of the first test just for clang. If someone else is curious, it would be interesting to pinpoint exactly what's happening; one of my guesses is that clang may be unloading the shared library between tests, while gcc isn't.", "markup": "markdown", "html": "<p>@carromj brought up in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/232/acropolis-bring-component-type-names-back/activity#comment-96091920\" rel=\"nofollow\">another PR</a> that we're not enforcing name and ID uniqueness across component types.</p>\n<p>While investigating it, I noticed that the couple of tests we have where custm components are registered by plugins (<code>TestModelSystem</code> and <code>TestWorldSystem</code>), the tests were only passing because 2 different components were being registered with the same name and exact same structure - <code>IntComponent</code> and <code>DoubleComponent</code> were being registered by the plugin, and by the test. The test would use its own type, the plugin would use its own, and they were stored together by the ECM because they had the same ID. I wondered a bit whether this was a feature or a bug, and came to the conclusion that we should enforce uniqueness and if 2 plugins do want to share a component type, they should against each other so they are really using the same type.</p>\n<hr />\n<p>On <code>SimulationRunner_TEST</code>, there are 2 tests that run in a sequence loading the same plugins, and enforcing uniqueness had some adverse effects depending on the compiler used.</p>\n<p>Clang calls the static registration macros again when plugins are loaded in the 2nd test, but gcc doesn't. This causes the test to crash when creating a storage for the component on the 2nd test, but the same doesn't happen for gcc.</p>\n<p>I've already put more time into investigating this than I had anticipated. For now, I'm unregistering the plugins in the end of the first test just for clang. If someone else is curious, it would be interesting to pinpoint exactly what's happening; one of my guesses is that clang may be unloading the shared library between tests, while gcc isn't.</p>", "type": "rendered"}, "title": {"raw": "[Acropolis] Enforce component type uniqueness", "markup": "markdown", "html": "<p>[Acropolis] Enforce component type uniqueness</p>", "type": "rendered"}}, "type": "pullrequest", "description": "@carromj brought up in [another PR](#!/ignitionrobotics/ign-gazebo/pull-requests/232/acropolis-bring-component-type-names-back/activity#comment-96091920) that we're not enforcing name and ID uniqueness across component types.\r\n\r\nWhile investigating it, I noticed that the couple of tests we have where custm components are registered by plugins (`TestModelSystem` and `TestWorldSystem`), the tests were only passing because 2 different components were being registered with the same name and exact same structure - `IntComponent` and `DoubleComponent` were being registered by the plugin, and by the test. The test would use its own type, the plugin would use its own, and they were stored together by the ECM because they had the same ID. I wondered a bit whether this was a feature or a bug, and came to the conclusion that we should enforce uniqueness and if 2 plugins do want to share a component type, they should against each other so they are really using the same type.\r\n\r\n---\r\n\r\nOn `SimulationRunner_TEST`, there are 2 tests that run in a sequence loading the same plugins, and enforcing uniqueness had some adverse effects depending on the compiler used.\r\n\r\nClang calls the static registration macros again when plugins are loaded in the 2nd test, but gcc doesn't. This causes the test to crash when creating a storage for the component on the 2nd test, but the same doesn't happen for gcc.\r\n\r\nI've already put more time into investigating this than I had anticipated. For now, I'm unregistering the plugins in the end of the first test just for clang. If someone else is curious, it would be interesting to pinpoint exactly what's happening; one of my guesses is that clang may be unloading the shared library between tests, while gcc isn't.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/236/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:4501108c710d%0Df07f8f6f2dee?from_pullrequest_id=236"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/236/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/236.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/236/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/236/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/236"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/236/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:4501108c710d%0Df07f8f6f2dee?from_pullrequest_id=236"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/236/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/236/statuses_page=1.json"}}, "title": "[Acropolis] Enforce component type uniqueness", "close_source_branch": true, "reviewers": [{"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 236, "destination": {"commit": {"hash": "f07f8f6f2dee", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f07f8f6f2dee.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f07f8f6f2dee"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "created_on": "2019-03-25T23:44:56.839983+00:00", "summary": {"raw": "@carromj brought up in [another PR](#!/ignitionrobotics/ign-gazebo/pull-requests/232/acropolis-bring-component-type-names-back/activity#comment-96091920) that we're not enforcing name and ID uniqueness across component types.\r\n\r\nWhile investigating it, I noticed that the couple of tests we have where custm components are registered by plugins (`TestModelSystem` and `TestWorldSystem`), the tests were only passing because 2 different components were being registered with the same name and exact same structure - `IntComponent` and `DoubleComponent` were being registered by the plugin, and by the test. The test would use its own type, the plugin would use its own, and they were stored together by the ECM because they had the same ID. I wondered a bit whether this was a feature or a bug, and came to the conclusion that we should enforce uniqueness and if 2 plugins do want to share a component type, they should against each other so they are really using the same type.\r\n\r\n---\r\n\r\nOn `SimulationRunner_TEST`, there are 2 tests that run in a sequence loading the same plugins, and enforcing uniqueness had some adverse effects depending on the compiler used.\r\n\r\nClang calls the static registration macros again when plugins are loaded in the 2nd test, but gcc doesn't. This causes the test to crash when creating a storage for the component on the 2nd test, but the same doesn't happen for gcc.\r\n\r\nI've already put more time into investigating this than I had anticipated. For now, I'm unregistering the plugins in the end of the first test just for clang. If someone else is curious, it would be interesting to pinpoint exactly what's happening; one of my guesses is that clang may be unloading the shared library between tests, while gcc isn't.", "markup": "markdown", "html": "<p>@carromj brought up in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/232/acropolis-bring-component-type-names-back/activity#comment-96091920\" rel=\"nofollow\">another PR</a> that we're not enforcing name and ID uniqueness across component types.</p>\n<p>While investigating it, I noticed that the couple of tests we have where custm components are registered by plugins (<code>TestModelSystem</code> and <code>TestWorldSystem</code>), the tests were only passing because 2 different components were being registered with the same name and exact same structure - <code>IntComponent</code> and <code>DoubleComponent</code> were being registered by the plugin, and by the test. The test would use its own type, the plugin would use its own, and they were stored together by the ECM because they had the same ID. I wondered a bit whether this was a feature or a bug, and came to the conclusion that we should enforce uniqueness and if 2 plugins do want to share a component type, they should against each other so they are really using the same type.</p>\n<hr />\n<p>On <code>SimulationRunner_TEST</code>, there are 2 tests that run in a sequence loading the same plugins, and enforcing uniqueness had some adverse effects depending on the compiler used.</p>\n<p>Clang calls the static registration macros again when plugins are loaded in the 2nd test, but gcc doesn't. This causes the test to crash when creating a storage for the component on the 2nd test, but the same doesn't happen for gcc.</p>\n<p>I've already put more time into investigating this than I had anticipated. For now, I'm unregistering the plugins in the end of the first test just for clang. If someone else is curious, it would be interesting to pinpoint exactly what's happening; one of my guesses is that clang may be unloading the shared library between tests, while gcc isn't.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e110e4cc904c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/e110e4cc904c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/e110e4cc904c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unique_component_types"}}, "comment_count": 19, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-04-01T21:08:42.288425+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-03-27T22:50:06.483500+00:00", "type": "participant", "approved": false, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-01T23:13:09.398251+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-04-01T23:14:14.183864+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "4501108c710d", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/4501108c710d.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/4501108c710d"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}