{"pagelen": 50, "values": [{"update": {"description": "**Requires** [this](#!/ignitionrobotics/ign-common/pull-requests/170/a-string-to-uint64_t-hash-function/diff) pull request from Ignition Common.\r\n\r\nThis pull request implements a factory, where all components self-register. Besides our original discussion, I ended up creating a `Component` base class, as is needed for the `Factory` class.\r\n\r\nComponents can be created based on strings or ids \\(uint64\\_t\\). I changed they way we were assigning the Ids in the `EntityComponentManager` class. Now, we use `ignition::common::hash64`.", "title": "[A-4] Component factory", "destination": {"commit": {"hash": "06efe3b5ad0f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/06efe3b5ad0f.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/06efe3b5ad0f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "bd92d188835e", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/bd92d188835e.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/bd92d188835e"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_factory"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2019-02-02T01:00:08.065504+00:00"}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/90209245.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-90209245"}}, "parent": {"id": 90192947, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/90192947.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-90192947"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "@caguero and I concluded that making it part of the ECM probably doesn\u2019t make sense, because it would force the ECM to be a singleton, instead it probably should live as a member of the ECM.", "markup": "markdown", "html": "<p>@caguero and I concluded that making it part of the ECM probably doesn\u2019t make sense, because it would force the ECM to be a singleton, instead it probably should live as a member of the ECM.</p>", "type": "rendered"}, "created_on": "2019-02-01T22:04:28.388103+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-02-01T22:04:28.403899+00:00", "type": "pullrequest_comment", "id": 90209245}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/90192947.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-90192947"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "@caguero , as we spoke before, I renamed the `Factory` class to something less confusing in pull request #148. The new code you're adding could go into a separate class, called `ComponentFactory` for example, or maybe it even makes sense as part of the ECM.", "markup": "markdown", "html": "<p>@caguero , as we spoke before, I renamed the <code>Factory</code> class to something less confusing in <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/148/debt-rename-factory-and-erase\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #148</a>. The new code you're adding could go into a separate class, called <code>ComponentFactory</code> for example, or maybe it even makes sense as part of the ECM.</p>", "type": "rendered"}, "created_on": "2019-02-01T18:38:56.248688+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2019-02-01T18:38:56.266292+00:00", "type": "pullrequest_comment", "id": 90192947}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89929433.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89929433"}}, "parent": {"id": 89929072, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89929072.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89929072"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "I was also thinking that we could annotate components with our own stable hash function.\n\nI took a quick stab at making the murmur2 hash a `constexpr`, so it can be evaluated completely at compile-time: [https://godbolt.org/z/KtJuMV](https://godbolt.org/z/KtJuMV) \\(based on [http://szelei.me/constexpr-murmurhash/](http://szelei.me/constexpr-murmurhash/)\\)\n\nIt seems to check out against a known-good implementation \\(the ign-common impl has a small bug\\).\n\nNote: that this would only work with c\\+\\+14 and up \\(not an issue as far as our current platforms\\)\n\nAlso note: murmurhash2 has some limitations, so the constexpr version does too?\n\n    // Note - This code makes a few assumptions about how your machine behaves -\n    \n    // 1. We can read a 4-byte value from any address without crashing\n    // 2. sizeof(int) == 4\n    \n    // And it has a few limitations -\n    \n    // 1. It will not work incrementally.\n    // 2. It will not produce the same results on little-endian and big-endian\n    //    machines.", "markup": "markdown", "html": "<p>I was also thinking that we could annotate components with our own stable hash function.</p>\n<p>I took a quick stab at making the murmur2 hash a <code>constexpr</code>, so it can be evaluated completely at compile-time: <a data-is-external-link=\"true\" href=\"https://godbolt.org/z/KtJuMV\" rel=\"nofollow\">https://godbolt.org/z/KtJuMV</a> (based on <a data-is-external-link=\"true\" href=\"http://szelei.me/constexpr-murmurhash/\" rel=\"nofollow\">http://szelei.me/constexpr-murmurhash/</a>)</p>\n<p>It seems to check out against a known-good implementation (the ign-common impl has a small bug).</p>\n<p>Note: that this would only work with c++14 and up (not an issue as far as our current platforms)</p>\n<p>Also note: murmurhash2 has some limitations, so the constexpr version does too?</p>\n<div class=\"codehilite\"><pre><span></span>// Note - This code makes a few assumptions about how your machine behaves -\n\n// 1. We can read a 4-byte value from any address without crashing\n// 2. sizeof(int) == 4\n\n// And it has a few limitations -\n\n// 1. It will not work incrementally.\n// 2. It will not produce the same results on little-endian and big-endian\n//    machines.\n</pre></div>", "type": "rendered"}, "created_on": "2019-01-31T04:49:44.561767+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-01-31T04:55:33.871734+00:00", "type": "pullrequest_comment", "id": 89929433}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89929344.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89929344"}}, "parent": {"id": 89928967, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89928967.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89928967"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "Ah, sorry, I was thinking of the static data destruction fiasco, not the initialization fiasco. I also didn\u2019t notice that this function was being called by constructors of static objects.\n\nWrapping this data up in a singleton class should, indeed, help avoid that issue.", "markup": "markdown", "html": "<p>Ah, sorry, I was thinking of the static data destruction fiasco, not the initialization fiasco. I also didn\u2019t notice that this function was being called by constructors of static objects.</p>\n<p>Wrapping this data up in a singleton class should, indeed, help avoid that issue.</p>", "type": "rendered"}, "created_on": "2019-01-31T04:48:15.689941+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2019-01-31T04:48:15.699474+00:00", "type": "pullrequest_comment", "id": 89929344}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89929072.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89929072"}}, "parent": {"id": 89925658, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89925658.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89925658"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "The issue we are trying to avoid is that the `typeid()` hash\\_code doesn't have consistent behavior \\(which is what the standard states\\), and was creating issues between shared libraries and the main executable on macOS.  If `type_name` is more consistent than `hash_code` \\(and it sounds like it is\\) then I\u2019m good with it.", "markup": "markdown", "html": "<p>The issue we are trying to avoid is that the <code>typeid()</code> hash_code doesn't have consistent behavior (which is what the standard states), and was creating issues between shared libraries and the main executable on macOS.  If <code>type_name</code> is more consistent than <code>hash_code</code> (and it sounds like it is) then I\u2019m good with it.</p>", "type": "rendered"}, "created_on": "2019-01-31T04:42:39.537875+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-01-31T04:42:39.549614+00:00", "type": "pullrequest_comment", "id": 89929072}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89928967.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89928967"}}, "parent": {"id": 89926443, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89926443.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89926443"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "Is that true even with the downstream component classes using the macro below \\(which calls the Register function\\)?  Does that create the dependency?", "markup": "markdown", "html": "<p>Is that true even with the downstream component classes using the macro below (which calls the Register function)?  Does that create the dependency?</p>", "type": "rendered"}, "created_on": "2019-01-31T04:40:33.236352+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-01-31T04:40:33.252951+00:00", "type": "pullrequest_comment", "id": 89928967}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89926443.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89926443"}}, "parent": {"id": 89921538, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89921538.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89921538"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "There shouldn\u2019t be any risk here, because the data dependencies of these static variables are self-contained. The static data here doesn\u2019t depend on any other static data \\(everything contained in this static map should have \u201cautomatic storage duration\u201d\\). So no matter what order the program\u2019s static data gets destructed in, the destructors of these members should work fine.", "markup": "markdown", "html": "<p>There shouldn\u2019t be any risk here, because the data dependencies of these static variables are self-contained. The static data here doesn\u2019t depend on any other static data (everything contained in this static map should have \u201cautomatic storage duration\u201d). So no matter what order the program\u2019s static data gets destructed in, the destructors of these members should work fine.</p>", "type": "rendered"}, "created_on": "2019-01-31T03:47:05.224455+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2019-01-31T03:47:05.236408+00:00", "type": "pullrequest_comment", "id": 89926443}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89925658.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89925658"}}, "parent": {"id": 89921703, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89921703.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89921703"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "In all of the implementations that we support \\(GCC, Clang, MSVC\\), any collisions that could happen between the `typeid(T).name()` of different `T` classes would also result in a multiple definition error \\(in other words, one of those classes will collide with the other in the linker because they would share the same symbol name\\).\n\nThe standard doesn't make any guarantees about this, but the supported implementations always produce different `typeid(T).name()` values for different symbol names \\(in fact, Clang and GCC literally return the symbol name itself\\).", "markup": "markdown", "html": "<p>In all of the implementations that we support (GCC, Clang, MSVC), any collisions that could happen between the <code>typeid(T).name()</code> of different <code>T</code> classes would also result in a multiple definition error (in other words, one of those classes will collide with the other in the linker because they would share the same symbol name).</p>\n<p>The standard doesn't make any guarantees about this, but the supported implementations always produce different <code>typeid(T).name()</code> values for different symbol names (in fact, Clang and GCC literally return the symbol name itself).</p>", "type": "rendered"}, "created_on": "2019-01-31T03:33:16.049086+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2019-01-31T03:34:55.475208+00:00", "type": "pullrequest_comment", "id": 89925658}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89921703.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89921703"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "I'm slightly concerned that `typeid().name()` may have some of the same fragility we were trying to avoid: [https://en.cppreference.com/w/cpp/types/type\\_info/name](https://en.cppreference.com/w/cpp/types/type_info/name)\n\nSpecifically: \n\n> No guarantees are given; in particular, the returned string can be identical for several types and change between invocations of the same program.", "markup": "markdown", "html": "<p>I'm slightly concerned that <code>typeid().name()</code> may have some of the same fragility we were trying to avoid: <a data-is-external-link=\"true\" href=\"https://en.cppreference.com/w/cpp/types/type_info/name\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/types/type_info/name</a></p>\n<p>Specifically: </p>\n<blockquote>\n<p>No guarantees are given; in particular, the returned string can be identical for several types and change between invocations of the same program.</p>\n</blockquote>", "type": "rendered"}, "created_on": "2019-01-31T02:04:44.314814+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-01-31T02:04:44.322287+00:00", "type": "pullrequest_comment", "id": 89921703}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147/comments/89921538.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147/_/diff#comment-89921538"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}, "content": {"raw": "I'm trying to decide if this is potentially unsafe, but I can't quite reason through it.  I think making these `static` rather than using a singleton may put us at risk of the \u201cstatic initialization order fiasco\u201d \\([https://isocpp.org/wiki/faq/ctors#static-init-order](https://isocpp.org/wiki/faq/ctors#static-init-order)\\), but I\u2019m not positive.  Is there a reason that you didn\u2019t use the singleton here?", "markup": "markdown", "html": "<p>I'm trying to decide if this is potentially unsafe, but I can't quite reason through it.  I think making these <code>static</code> rather than using a singleton may put us at risk of the \u201cstatic initialization order fiasco\u201d (<a data-is-external-link=\"true\" href=\"https://isocpp.org/wiki/faq/ctors#static-init-order\" rel=\"nofollow\">https://isocpp.org/wiki/faq/ctors#static-init-order</a>), but I\u2019m not positive.  Is there a reason that you didn\u2019t use the singleton here?</p>", "type": "rendered"}, "created_on": "2019-01-31T02:01:00.320127+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-01-31T02:01:00.327174+00:00", "type": "pullrequest_comment", "id": 89921538}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"update": {"description": "**Requires** [this](#!/ignitionrobotics/ign-common/pull-requests/170/a-string-to-uint64_t-hash-function/diff) pull request from Ignition Common.\r\n\r\nThis pull request implements a factory, where all components self-register. Besides our original discussion, I ended up creating a `Component` base class, as is needed for the `Factory` class.\r\n\r\nComponents can be created based on strings or ids \\(uint64\\_t\\). I changed they way we were assigning the Ids in the `EntityComponentManager` class. Now, we use `ignition::common::hash64`.", "title": "[A-4] Component factory", "destination": {"commit": {"hash": "f7597140869c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f7597140869c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f7597140869c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c352b5da7bb6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/c352b5da7bb6.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/c352b5da7bb6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_factory"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2019-01-30T23:59:26.918586+00:00"}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"update": {"description": "**Requires** [this](#!/ignitionrobotics/ign-common/pull-requests/170/a-string-to-uint64_t-hash-function/diff) pull request from Ignition Common.\r\n\r\nThis pull request implements a factory, where all components self-register. Besides our original discussion, I ended up creating a `Component` base class, as is needed for the `Factory` class.\r\n\r\nComponents can be created based on strings or ids \\(uint64\\_t\\). I changed they way we were assigning the Ids in the `EntityComponentManager` class. Now, we use `ignition::common::hash64`.", "title": "[A-4] Component factory", "destination": {"commit": {"hash": "f7597140869c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f7597140869c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f7597140869c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "66ec174d69ac", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/66ec174d69ac.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/66ec174d69ac"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_factory"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2019-01-30T23:31:35.627159+00:00"}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"update": {"description": "**Requires** [this](#!/ignitionrobotics/ign-common/pull-requests/170/a-string-to-uint64_t-hash-function/diff) pull request from Ignition Common.\r\n\r\nThis pull request implements a factory, where all components self-register. Besides our original discussion, I ended up creating a `Component` base class, as is needed for the `Factory` class.\r\n\r\nComponents can be created based on strings or ids \\(uint64\\_t\\). I changed they way we were assigning the Ids in the `EntityComponentManager` class. Now, we use `ignition::common::hash64`.", "title": "[A-4] Component factory", "destination": {"commit": {"hash": "f7597140869c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f7597140869c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f7597140869c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "66ec174d69ac", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/66ec174d69ac.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/66ec174d69ac"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_factory"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2019-01-30T23:30:20.400549+00:00"}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"update": {"description": "**Requires** [this](#!/ignitionrobotics/ign-common/pull-requests/170/a-string-to-uint64_t-hash-function/diff) pull request from Ignition Common.\r\n\r\nThis pull request implements a factory, where all components self-register. Besides our original discussion, I ended up creating a `Component` base class, as is needed for the `Factory` class.\r\n\r\nComponents can be created based on strings or ids \\(uint64\\_t\\). I changed they way we were assigning the Ids in the `EntityComponentManager` class. Now, we use `ignition::common::hash64`.", "title": "Component factory", "destination": {"commit": {"hash": "f7597140869c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f7597140869c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f7597140869c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "66ec174d69ac", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/66ec174d69ac.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/66ec174d69ac"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_factory"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2019-01-30T23:26:01.324876+00:00"}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"update": {"description": "**Requires** [this](#!/ignitionrobotics/ign-common/pull-requests/170/a-string-to-uint64_t-hash-function/diff) pull request from Ignition Common.\r\n\r\nThis pull request implements a factory, where all components self-register. Besides our original discussion, I ended up creating a `Component` base class, as is needed for the `Factory` class.\r\n\r\nComponents can be created based on strings or ids \\(uint64\\_t\\). I changed they way we were assigning the Ids in the `EntityComponentManager` class. Now, we use `ignition::common::hash64`.", "title": "Component factory", "destination": {"commit": {"hash": "f7597140869c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f7597140869c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f7597140869c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "35903d8f3cad", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/35903d8f3cad.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/35903d8f3cad"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_factory"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2019-01-30T23:25:06.777678+00:00"}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}, {"update": {"description": "**Requires** [this](#!/ignitionrobotics/ign-common/pull-requests/170/a-string-to-uint64_t-hash-function/diff) pull request from Ignition Common.\r\n\r\nThis pull request implements a factory, where all components self-register. Besides our original discussion, I ended up creating a `Component` base class, as is needed for the `Factory` class.\r\n\r\nComponents can be created based on strings or ids \\(uint64\\_t\\). I changed they way we were assigning the Ids in the `EntityComponentManager` class. Now, we use `ignition::common::hash64`.", "title": "Component factory", "destination": {"commit": {"hash": "f7597140869c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f7597140869c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f7597140869c"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "35903d8f3cad", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/35903d8f3cad.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/35903d8f3cad"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_factory"}}, "state": "OPEN", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "date": "2019-01-30T23:25:06.738514+00:00"}, "pull_request": {"type": "pullrequest", "id": 147, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/147.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/147"}}, "title": "[A-4] Component factory"}}]}