{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/87277808.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:27e36ccbe807..bcc9cc2031f2?path=doc%2Farchitecture_design.md"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-87277808"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 120, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120"}}, "title": "[A-4] Component Serialization"}, "content": {"raw": "Is there a use case for not synchronizing some entities? I think we can reduce some complexity if we just consider that all entities and all of their components should be synced.", "markup": "markdown", "html": "<p>Is there a use case for not synchronizing some entities? I think we can reduce some complexity if we just consider that all entities and all of their components should be synced.</p>", "type": "rendered"}, "created_on": "2019-01-07T21:25:35.246065+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 454, "from": null, "path": "doc/architecture_design.md"}, "updated_on": "2019-01-07T21:25:35.256407+00:00", "type": "pullrequest_comment", "id": 87277808}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/87842666.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:d7d73785d077..bd03380c6e49?path=doc%2Farchitecture_design.md"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-87842666"}}, "parent": {"id": 87277808, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/87277808.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-87277808"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 120, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120"}}, "title": "[A-4] Component Serialization"}, "content": {"raw": "During the meeting it was brought up that in the future we may have components which we don't necessarily need to sync, such as camera images, which can be recreated from the rest of the state, which is a fair concern.\n\nI've been giving this some thought, and I think that if we want to be able to move an entity with all of its current state to another machine, not sending all of the components may leave systems which counted on those components lagging behind the others. A system that operates on camera images will need to wait at least one iteration for a new image to be generated. Maybe there are ways in which we can mitigate this.\n\nAnother thought that I had is the granularity of the decision to synchronize a component or not. The current proposal is going for a very granular approach where each entity keeps a different list of components to sync. I wonder if it may not make more sense to associate a component type itself with syncing, rather than on a per entity basis. So for example, all poses would be synced, and no images would be synced. That could be configurable through SDF.", "markup": "markdown", "html": "<p>During the meeting it was brought up that in the future we may have components which we don't necessarily need to sync, such as camera images, which can be recreated from the rest of the state, which is a fair concern.</p>\n<p>I've been giving this some thought, and I think that if we want to be able to move an entity with all of its current state to another machine, not sending all of the components may leave systems which counted on those components lagging behind the others. A system that operates on camera images will need to wait at least one iteration for a new image to be generated. Maybe there are ways in which we can mitigate this.</p>\n<p>Another thought that I had is the granularity of the decision to synchronize a component or not. The current proposal is going for a very granular approach where each entity keeps a different list of components to sync. I wonder if it may not make more sense to associate a component type itself with syncing, rather than on a per entity basis. So for example, all poses would be synced, and no images would be synced. That could be configurable through SDF.</p>", "type": "rendered"}, "created_on": "2019-01-11T19:56:47.191453+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 454, "from": null, "path": "doc/architecture_design.md"}, "updated_on": "2019-01-11T19:56:47.200183+00:00", "type": "pullrequest_comment", "id": 87842666}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/89270689.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-89270689"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 120, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120"}}, "title": "[A-4] Component Serialization"}, "content": {"raw": "A question about the `Any` field in `SerializedComponent`:\n\nIt seems that the `Any` \"forces\" us to serialize the message during the message creation \\(i.e.: when calling `PackFrom()`\\). This text is from the Protobuf documentation:\n\n    The Any message type lets you use messages as embedded types without having their .proto definition. An Any contains an arbitrary serialized message as bytes, along with a URL that acts as a globally unique identifier for and resolves to that message's type.\n\nI believe the intent was to wrap any component as a `SerializedComponent` without serialize it explicitly. Am I right here?", "markup": "markdown", "html": "<p>A question about the <code>Any</code> field in <code>SerializedComponent</code>:</p>\n<p>It seems that the <code>Any</code> \"forces\" us to serialize the message during the message creation (i.e.: when calling <code>PackFrom()</code>). This text is from the Protobuf documentation:</p>\n<div class=\"codehilite\"><pre><span></span>The Any message type lets you use messages as embedded types without having their .proto definition. An Any contains an arbitrary serialized message as bytes, along with a URL that acts as a globally unique identifier for and resolves to that message&#39;s type.\n</pre></div>\n\n\n<p>I believe the intent was to wrap any component as a <code>SerializedComponent</code> without serialize it explicitly. Am I right here?</p>", "type": "rendered"}, "created_on": "2019-01-25T00:17:43.538575+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2019-01-25T00:17:43.545869+00:00", "type": "pullrequest_comment", "id": 89270689}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/89511442.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-89511442"}}, "parent": {"id": 89270689, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/89270689.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-89270689"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 120, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120"}}, "title": "[A-4] Component Serialization"}, "content": {"raw": "Yes, I guess I missed that part of the documentation, I thought that it would allow you to keep the protobuf structure without having to explicitly serialize at the time of the creation.  Perhaps we want to rethink how this can be handled.", "markup": "markdown", "html": "<p>Yes, I guess I missed that part of the documentation, I thought that it would allow you to keep the protobuf structure without having to explicitly serialize at the time of the creation.  Perhaps we want to rethink how this can be handled.</p>", "type": "rendered"}, "created_on": "2019-01-28T14:45:03.070068+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-01-28T14:45:03.168057+00:00", "type": "pullrequest_comment", "id": 89511442}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/89516091.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-89516091"}}, "parent": {"id": 89270689, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/89270689.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-89270689"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 120, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120"}}, "title": "[A-4] Component Serialization"}, "content": {"raw": "Reading more, it certainly addresses the need of serializing and arbitrary type, but we also have to bear the cost of explicitly serializing with the `PackFrom` method.  This may just be a fundamental limitation with protobuf.  I would be inclined to try it in the current configuration, and then get measurements of performance to make a decision further down the road.", "markup": "markdown", "html": "<p>Reading more, it certainly addresses the need of serializing and arbitrary type, but we also have to bear the cost of explicitly serializing with the <code>PackFrom</code> method.  This may just be a fundamental limitation with protobuf.  I would be inclined to try it in the current configuration, and then get measurements of performance to make a decision further down the road.</p>", "type": "rendered"}, "created_on": "2019-01-28T15:09:41.975685+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-01-28T15:09:41.987434+00:00", "type": "pullrequest_comment", "id": 89516091}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/89516380.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-89516380"}}, "parent": {"id": 89270689, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120/comments/89270689.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120/_/diff#comment-89270689"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 120, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/120.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/120"}}, "title": "[A-4] Component Serialization"}, "content": {"raw": "One alternative would be to use the `OneOf` mechanism for types that are known, and use the `Any` mechanism for types that aren\u2019t known.  That would probably give the best balance.", "markup": "markdown", "html": "<p>One alternative would be to use the <code>OneOf</code> mechanism for types that are known, and use the <code>Any</code> mechanism for types that aren\u2019t known.  That would probably give the best balance.</p>", "type": "rendered"}, "created_on": "2019-01-28T15:11:13.840495+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-01-28T15:11:13.860175+00:00", "type": "pullrequest_comment", "id": 89516380}], "page": 1, "size": 6}