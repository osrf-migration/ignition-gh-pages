{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/264/comments/98551260.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:4e4e85319ca2..13d6dfb1ea1e?path=test%2Fintegration%2Flevel_manager.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/264/_/diff#comment-98551260"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 264, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/264.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/264"}}, "title": "[Blueprint] Service to add performers at runtime"}, "content": {"raw": "Wouldn't it be better if this was it's own test? I see the performer `perf_box` is commented out in `levels.sdf`, but this now means the test is not exercising if `LevelManager::ReadPerformers()` can read in multiple performers.", "markup": "markdown", "html": "<p>Wouldn't it be better if this was it's own test? I see the performer <code>perf_box</code> is commented out in <code>levels.sdf</code>, but this now means the test is not exercising if <code>LevelManager::ReadPerformers()</code> can read in multiple performers.</p>", "type": "rendered"}, "created_on": "2019-04-12T01:35:25.620285+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 163, "from": null, "outdated": true, "path": "test/integration/level_manager.cc"}, "updated_on": "2019-04-12T01:35:25.634750+00:00", "type": "pullrequest_comment", "id": 98551260}