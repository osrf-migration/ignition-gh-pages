{"pagelen": 50, "values": [{"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "63ea9c445cf2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/63ea9c445cf2.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/63ea9c445cf2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "f8caf94bad00", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f8caf94bad00.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f8caf94bad00"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "MERGED", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-03-15T19:48:33.789887+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95247790.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95247790"}}, "parent": {"id": 95235873, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95235873.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95235873"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "msgs3 has been released, and the pipeline passes using on the stable debs, so I will merge since this has one approval and CI is working", "markup": "markdown", "html": "<p>msgs3 has been released, and the pipeline passes using on the stable debs, so I will merge since this has one approval and CI is working</p>", "type": "rendered"}, "created_on": "2019-03-15T19:48:20.075061+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2019-03-15T19:48:20.088118+00:00", "type": "pullrequest_comment", "id": 95247790}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "63ea9c445cf2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/63ea9c445cf2.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/63ea9c445cf2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "f8caf94bad00", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f8caf94bad00.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f8caf94bad00"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-15T18:49:46.765609+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95235873.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95235873"}}, "parent": {"id": 95228218, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95228218.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95228218"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "Update: we're ready for a minor ign-gazebo release now, so I triggered a stable msgs3 release.", "markup": "markdown", "html": "<p>Update: we're ready for a minor ign-gazebo release now, so I triggered a stable msgs3 release.</p>", "type": "rendered"}, "created_on": "2019-03-15T17:50:20.091992+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-03-15T17:50:20.106777+00:00", "type": "pullrequest_comment", "id": 95235873}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95228218.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95228218"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "All CI is happy.\n\n@scpeters , what do you think of merging this now, and only working on a ign-msgs 3.1.0 stable release once we're ready for a new minor ign-gazebo release?", "markup": "markdown", "html": "<p>All CI is happy.</p>\n<p>@scpeters , what do you think of merging this now, and only working on a ign-msgs 3.1.0 stable release once we're ready for a new minor ign-gazebo release?</p>", "type": "rendered"}, "created_on": "2019-03-15T16:47:54.158554+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-03-15T16:48:02.683049+00:00", "type": "pullrequest_comment", "id": 95228218}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "65bbcd168ed1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/65bbcd168ed1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/65bbcd168ed1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "bebea6d90acb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/bebea6d90acb.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/bebea6d90acb"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-15T02:36:11.043735+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95118774.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95118774"}}, "parent": {"id": 94856021, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94856021.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94856021"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "This has been fixed", "markup": "markdown", "html": "<p>This has been fixed</p>", "type": "rendered"}, "created_on": "2019-03-15T02:34:47.860155+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2019-03-15T02:34:47.872601+00:00", "type": "pullrequest_comment", "id": 95118774}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "65bbcd168ed1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/65bbcd168ed1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/65bbcd168ed1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "54186fe1f21f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/54186fe1f21f.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/54186fe1f21f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-15T02:26:53.289199+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95118452.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95118452"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "By the way, I've been working on integrating this with log/playback in the `log_serialized` branch and it seems to be working well. I'm just recording and playing back the whole state though.", "markup": "markdown", "html": "<p>By the way, I've been working on integrating this with log/playback in the <code>log_serialized</code> branch and it seems to be working well. I'm just recording and playing back the whole state though.</p>", "type": "rendered"}, "created_on": "2019-03-15T02:26:29.813631+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-03-15T02:26:29.820143+00:00", "type": "pullrequest_comment", "id": 95118452}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/95115556.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-95115556"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "I think codecheck is complaining about the order of this header because it ends in `.h` and codecheck thinks it should be earlier", "markup": "markdown", "html": "<p>I think codecheck is complaining about the order of this header because it ends in <code>.h</code> and codecheck thinks it should be earlier</p>", "type": "rendered"}, "created_on": "2019-03-15T01:08:22.354125+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2019-03-15T01:08:22.361857+00:00", "type": "pullrequest_comment", "id": 95115556}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "65bbcd168ed1", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/65bbcd168ed1.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/65bbcd168ed1"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "83c89a6cd3f5", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/83c89a6cd3f5.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/83c89a6cd3f5"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-13T22:15:27.601774+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94875509.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94875509"}}, "parent": {"id": 94874809, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94874809.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94874809"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "I\u2019m good without it.  Just a thought.", "markup": "markdown", "html": "<p>I\u2019m good without it.  Just a thought.</p>", "type": "rendered"}, "created_on": "2019-03-13T15:30:52.991032+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-03-13T15:30:53.278914+00:00", "type": "pullrequest_comment", "id": 94875509}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94874809.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94874809"}}, "parent": {"id": 94697143, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94697143.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94697143"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "I just realized I didn't address this comment. I don't have a strong preference, I don't usually do it, and whenever I come across an alias like this I feel that I need to do extra work to search for its definition in the code. What do you recommend it be called?", "markup": "markdown", "html": "<p>I just realized I didn't address this comment. I don't have a strong preference, I don't usually do it, and whenever I come across an alias like this I feel that I need to do extra work to search for its definition in the code. What do you recommend it be called?</p>", "type": "rendered"}, "created_on": "2019-03-13T15:27:34.163843+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {}, "updated_on": "2019-03-13T15:27:34.231842+00:00", "type": "pullrequest_comment", "id": 94874809}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"approval": {"date": "2019-03-13T14:06:03.193428+00:00", "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94856478.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94856478"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "LGTM other than the compiler warning.\n\nAs a follow-on, this seems like a great candidate for performance testing.", "markup": "markdown", "html": "<p>LGTM other than the compiler warning.</p>\n<p>As a follow-on, this seems like a great candidate for performance testing.</p>", "type": "rendered"}, "created_on": "2019-03-13T14:06:00.017934+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-03-13T14:06:00.044747+00:00", "type": "pullrequest_comment", "id": 94856478}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94856021.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94856021"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "This is giving me an unused variable `compId` warning.", "markup": "markdown", "html": "<p>This is giving me an unused variable <code>compId</code> warning.</p>", "type": "rendered"}, "created_on": "2019-03-13T14:03:59.564469+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-03-13T14:03:59.616769+00:00", "type": "pullrequest_comment", "id": 94856021}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "61cf78500132", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/61cf78500132.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/61cf78500132"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-12T18:50:12.469540+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "61cf78500132", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/61cf78500132.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/61cf78500132"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-12T18:49:04.140828+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94697298.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94697298"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "I have also considered moving the network-specific messages into the `network` directory, but haven\u2019t gotten around to it yet.  That way those messages would be private to the network subsystem.", "markup": "markdown", "html": "<p>I have also considered moving the network-specific messages into the <code>network</code> directory, but haven\u2019t gotten around to it yet.  That way those messages would be private to the network subsystem.</p>", "type": "rendered"}, "created_on": "2019-03-12T15:32:38.931451+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-03-12T15:32:38.969453+00:00", "type": "pullrequest_comment", "id": 94697298}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94697143.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94697143"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "Would it be worthwhile to make some type aliases for these `set` just to tighten up signatures?", "markup": "markdown", "html": "<p>Would it be worthwhile to make some type aliases for these <code>set</code> just to tighten up signatures?</p>", "type": "rendered"}, "created_on": "2019-03-12T15:31:51.653851+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "inline": {}, "updated_on": "2019-03-12T15:31:51.710597+00:00", "type": "pullrequest_comment", "id": 94697143}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "e24ec297c6d3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/e24ec297c6d3.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/e24ec297c6d3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-12T02:27:28.215604+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "05e5b3059335", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/05e5b3059335.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/05e5b3059335"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-12T02:14:55.702340+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update: changed to work in progress\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj", "title": "[Acropolis][WIP] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "05e5b3059335", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/05e5b3059335.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/05e5b3059335"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-12T02:13:34.603244+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update: changed to work in progress\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj", "title": "[Acropolis][WIP] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "b562dc921964", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/b562dc921964.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/b562dc921964"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-12T01:00:27.078099+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update: changed to work in progress\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj", "title": "[Acropolis][WIP] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "3ea12d5f9f18", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/3ea12d5f9f18.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/3ea12d5f9f18"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-12T00:17:54.327846+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update: changed to work in progress\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj", "title": "[Acropolis][WIP] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "a3f154356c7b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/a3f154356c7b.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/a3f154356c7b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-11T22:52:33.708851+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update: changed to work in progress\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj", "title": "[Acropolis][WIP] Complete state streaming", "destination": {"commit": {"hash": "9e7b0c4ae5d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9e7b0c4ae5d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9e7b0c4ae5d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "941ec156f933", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/941ec156f933.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/941ec156f933"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-11T20:04:44.494108+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94561307.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94561307"}}, "parent": {"id": 94517476, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94517476.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94517476"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "> I think using std::set or std::unordered_set in place of the std::vectors in the API may make more sense, so that we can guarantee that we aren\u2019t getting duplicate Entity or ComponentTypeIds\n\nGood point, I'll use `unordered_set`.\n\n> have masked versions of SetState so that we can mask out particular entities or component types that we want to update.\n\nI thought a bit about this and came to the conclusion that if the caller of `SetState` would handle this when assembling the state message, the ECM's API itself would be simpler. But I don't feel too strongly about it.", "markup": "markdown", "html": "<blockquote>\n<p>I think using std::set or std::unordered_set in place of the std::vectors in the API may make more sense, so that we can guarantee that we aren\u2019t getting duplicate Entity or ComponentTypeIds</p>\n</blockquote>\n<p>Good point, I'll use <code>unordered_set</code>.</p>\n<blockquote>\n<p>have masked versions of SetState so that we can mask out particular entities or component types that we want to update.</p>\n</blockquote>\n<p>I thought a bit about this and came to the conclusion that if the caller of <code>SetState</code> would handle this when assembling the state message, the ECM's API itself would be simpler. But I don't feel too strongly about it.</p>", "type": "rendered"}, "created_on": "2019-03-11T20:04:30.842602+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-03-11T20:04:30.854777+00:00", "type": "pullrequest_comment", "id": 94561307}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94518276.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94518276"}}, "parent": {"id": 94518225, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94518225.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94518225"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "```\n/// Future work, ECM needs to track changed components first\n```\n\nAnswered my own question.", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span>/// Future work, ECM needs to track changed components first\n</pre></div>\n\n\n<p>Answered my own question.</p>", "type": "rendered"}, "created_on": "2019-03-11T15:28:52.112299+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-03-11T15:28:52.208813+00:00", "type": "pullrequest_comment", "id": 94518276}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94518225.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94518225"}}, "parent": {"id": 94517476, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94517476.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94517476"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "Also, just for clarity, `ChangedState` refers to components being added/removed/modified and not entities, correct?  We have a separate mechanism for tracking when entities are added/removed", "markup": "markdown", "html": "<p>Also, just for clarity, <code>ChangedState</code> refers to components being added/removed/modified and not entities, correct?  We have a separate mechanism for tracking when entities are added/removed</p>", "type": "rendered"}, "created_on": "2019-03-11T15:28:38.911691+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-03-11T15:28:39.190811+00:00", "type": "pullrequest_comment", "id": 94518225}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"comment": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments/94517476.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184/_/diff#comment-94517476"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}, "content": {"raw": "I agree with removing the operators, the new API looks much better\n\nI think using `std::set` or `std::unordered_set` in place of the `std::vectors` in the API may make more sense, so that we can guarantee that we aren\u2019t getting duplicate Entity or ComponentTypeIds \\(unless there is a need for this?\\)  \nAlso, I think a good follow-on would be to have  masked versions of `SetState` so that we can mask out particular entities or component types that we want to update.", "markup": "markdown", "html": "<p>I agree with removing the operators, the new API looks much better</p>\n<p>I think using <code>std::set</code> or <code>std::unordered_set</code> in place of the <code>std::vectors</code> in the API may make more sense, so that we can guarantee that we aren\u2019t getting duplicate Entity or ComponentTypeIds (unless there is a need for this?)<br />\nAlso, I think a good follow-on would be to have  masked versions of <code>SetState</code> so that we can mask out particular entities or component types that we want to update.</p>", "type": "rendered"}, "created_on": "2019-03-11T15:25:15.408079+00:00", "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "updated_on": "2019-03-11T15:25:15.514997+00:00", "type": "pullrequest_comment", "id": 94517476}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update: changed to work in progress\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj", "title": "[Acropolis][WIP] Complete state streaming", "destination": {"commit": {"hash": "b5a848f7e562", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/b5a848f7e562.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/b5a848f7e562"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "66675b72f154", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/66675b72f154.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/66675b72f154"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-09T02:01:38.547515+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "eeffb393f083", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/eeffb393f083.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/eeffb393f083"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "66675b72f154", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/66675b72f154.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/66675b72f154"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-03-07T00:28:18.332997+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "2bc8e0f56a4a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2bc8e0f56a4a.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2bc8e0f56a4a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "bbfd394585cb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/bbfd394585cb.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/bbfd394585cb"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-03-04T20:27:59.821456+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "2bc8e0f56a4a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2bc8e0f56a4a.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2bc8e0f56a4a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "5c6ff969d99f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/5c6ff969d99f.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/5c6ff969d99f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2019-03-04T20:13:38.153646+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state", "title": "[Acropolis] Complete state streaming", "destination": {"commit": {"hash": "2bc8e0f56a4a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2bc8e0f56a4a.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2bc8e0f56a4a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "5c6ff969d99f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/5c6ff969d99f.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/5c6ff969d99f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "date": "2019-03-04T20:13:38.086905+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state", "title": "[Blueprint] Complete state streaming", "destination": {"commit": {"hash": "b8271be8d06b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/b8271be8d06b.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/b8271be8d06b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "5c6ff969d99f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/5c6ff969d99f.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/5c6ff969d99f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-02-27T20:28:04.593303+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state", "title": "[Blueprint] Complete state streaming", "destination": {"commit": {"hash": "b8271be8d06b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/b8271be8d06b.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/b8271be8d06b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "5c6ff969d99f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/5c6ff969d99f.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/5c6ff969d99f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-02-27T20:28:04.138603+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n* Update the factory so it can also be used to create new component storages. This is needed to populate the ECM from a message.\r\n* The factory and components no longer stores type names. The registered type names were being cleaned up during tests, but not the type IDs. @caguero and I debugged a bit with no success, so the current workaround is to remove names completely, since they're not being used anyway. :warning: We may just be pushing the issue down the road, it would be nice to eventually understand why the names were being reset.", "title": "[A-4] Complete state streaming", "destination": {"commit": {"hash": "6b8c37ca7765", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6b8c37ca7765.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6b8c37ca7765"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "5c6ff969d99f", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/5c6ff969d99f.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/5c6ff969d99f"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-02-27T20:27:33.597991+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n* Update the factory so it can also be used to create new component storages. This is needed to populate the ECM from a message.\r\n* The factory and components no longer stores type names. The registered type names were being cleaned up during tests, but not the type IDs. @caguero and I debugged a bit with no success, so the current workaround is to remove names completely, since they're not being used anyway. :warning: We may just be pushing the issue down the road, it would be nice to eventually understand why the names were being reset.", "title": "[A-4] Complete state streaming", "destination": {"commit": {"hash": "c1d1a737d4b3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/c1d1a737d4b3.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/c1d1a737d4b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "ca6d3c0ff82b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/ca6d3c0ff82b.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/ca6d3c0ff82b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-02-26T20:42:23.838892+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}, {"update": {"description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n* Update the factory so it can also be used to create new component storages. This is needed to populate the ECM from a message.\r\n* The factory and components no longer stores type names. The registered type names were being cleaned up during tests, but not the type IDs. @caguero and I debugged a bit with no success, so the current workaround is to remove names completely, since they're not being used anyway. :warning: We may just be pushing the issue down the road, it would be nice to eventually understand why the names were being reset.", "title": "[A-4] Complete state streaming", "destination": {"commit": {"hash": "c1d1a737d4b3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/c1d1a737d4b3.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/c1d1a737d4b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "reason": "", "source": {"commit": {"hash": "ca6d3c0ff82b", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/ca6d3c0ff82b.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/ca6d3c0ff82b"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2019-02-26T20:42:23.701274+00:00"}, "pull_request": {"type": "pullrequest", "id": 184, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}}, "title": "[Acropolis] Complete state streaming"}}]}