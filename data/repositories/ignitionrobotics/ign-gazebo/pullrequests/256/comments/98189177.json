{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/256/comments/98189177.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:c5139704d1ae..92bab269c401?path=include%2Fignition%2Fgazebo%2Fcomponents%2FJointPosition.hh"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/256/_/diff#comment-98189177"}}, "parent": {"id": 98163167, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/256/comments/98163167.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/256/_/diff#comment-98163167"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 256, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/256.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/256"}}, "title": "[Acropolis] Port of LiftDragPlugin"}, "content": {"raw": "> That's already fixed on SDF. Gazebo-classic supports ball joints, which have 3 axes, but it provides no API for interacting with the axes one-by-one.\n\nIt would be nice to support at least 3 DOF joints. Even if they are not controlled, knowing the joint positions might be useful.\n\n> I think we should protect against the user trying to access a non-existent axis, but were you thinking of something else?\n\nWhat I had in mind was if `JointPosition` has, say 3 axes, and its attached to a 1 axis joint. The user of the component must check another component for the joint type before knowing which axes out of the 3 are valid. With the `std::vector` approach, the physics system populates the correct number of joint positions so there is no need to check another component. ", "markup": "markdown", "html": "<blockquote>\n<p>That's already fixed on SDF. Gazebo-classic supports ball joints, which have 3 axes, but it provides no API for interacting with the axes one-by-one.</p>\n</blockquote>\n<p>It would be nice to support at least 3 DOF joints. Even if they are not controlled, knowing the joint positions might be useful.</p>\n<blockquote>\n<p>I think we should protect against the user trying to access a non-existent axis, but were you thinking of something else?</p>\n</blockquote>\n<p>What I had in mind was if <code>JointPosition</code> has, say 3 axes, and its attached to a 1 axis joint. The user of the component must check another component for the joint type before knowing which axes out of the 3 are valid. With the <code>std::vector</code> approach, the physics system populates the correct number of joint positions so there is no need to check another component. </p>", "type": "rendered"}, "created_on": "2019-04-09T20:53:54.592931+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": null, "from": null, "outdated": true, "path": "include/ignition/gazebo/components/JointPosition.hh"}, "updated_on": "2019-04-09T20:53:54.608540+00:00", "type": "pullrequest_comment", "id": 98189177}