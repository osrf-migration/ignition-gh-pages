{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/114/comments/87122187.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/114/_/diff#comment-87122187"}}, "parent": {"id": 87119446, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/114/comments/87119446.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/114/_/diff#comment-87119446"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 114, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/114.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/114"}}, "title": "[WIP] Camera sensors"}, "content": {"raw": "This is something @iche033 and I have talked about before. I think there are 3 main tasks to be done: creating the sensor, updating its readings and updating its properties. Here are some ways in which I think it could be distributed, taking the camera as an example:\n\n## 1\n\nThis is basically what we currently have, with `ign-sensors` managing sensors and `ign-gazebo` just calling it in the appropriate times: \n\n* **Creation**: `ign-gazebo` passes an SDF object to `ign-sensors`, which creates a `rendering::Camera` object internal to it and a `sensors::CameraSensor` which is kept with `ign-gazebo`. It also needs to keep the sensor manager.\n* **Udate readings**: `ign-gazebo` updates the rendering scene and runs the `ign-sensor`'s manager at every update.\n* **Update properties**: `ign-gazebo` calls `ign-sensors` APIs whenever it detects component updates, such as camera FOV changes.\n\nThe advantage is that `ign-sensors` exists as its own library which could be reused by others.\n \n## 2\n\nThis would be an alternative completely without `ign-sensors`:\n\n* **Creation**: `ign-gazebo` parses components and makes direct rendering calls to create a `rendering::Camera`\n* **Udate readings**: `ign-gazebo` directly updates the scene and camera at every update\n* **Update properties**: `ign-gazebo` calls `ign-rendering` APIs whenever it detects component updates, such as camera FOV changes.\n\nThe advantage is less complexity?\n\n## 3\n\nSomething in between? It would be interesting to elaborate on what `Ign-sensors would become a repository of sensor models` would entail - would it just be wrappers around rendering and physics types, without lifecycle management?", "markup": "markdown", "html": "<p>This is something @iche033 and I have talked about before. I think there are 3 main tasks to be done: creating the sensor, updating its readings and updating its properties. Here are some ways in which I think it could be distributed, taking the camera as an example:</p>\n<h2 id=\"markdown-header-1\">1</h2>\n<p>This is basically what we currently have, with <code>ign-sensors</code> managing sensors and <code>ign-gazebo</code> just calling it in the appropriate times: </p>\n<ul>\n<li><strong>Creation</strong>: <code>ign-gazebo</code> passes an SDF object to <code>ign-sensors</code>, which creates a <code>rendering::Camera</code> object internal to it and a <code>sensors::CameraSensor</code> which is kept with <code>ign-gazebo</code>. It also needs to keep the sensor manager.</li>\n<li><strong>Udate readings</strong>: <code>ign-gazebo</code> updates the rendering scene and runs the <code>ign-sensor</code>'s manager at every update.</li>\n<li><strong>Update properties</strong>: <code>ign-gazebo</code> calls <code>ign-sensors</code> APIs whenever it detects component updates, such as camera FOV changes.</li>\n</ul>\n<p>The advantage is that <code>ign-sensors</code> exists as its own library which could be reused by others.</p>\n<h2 id=\"markdown-header-2\">2</h2>\n<p>This would be an alternative completely without <code>ign-sensors</code>:</p>\n<ul>\n<li><strong>Creation</strong>: <code>ign-gazebo</code> parses components and makes direct rendering calls to create a <code>rendering::Camera</code></li>\n<li><strong>Udate readings</strong>: <code>ign-gazebo</code> directly updates the scene and camera at every update</li>\n<li><strong>Update properties</strong>: <code>ign-gazebo</code> calls <code>ign-rendering</code> APIs whenever it detects component updates, such as camera FOV changes.</li>\n</ul>\n<p>The advantage is less complexity?</p>\n<h2 id=\"markdown-header-3\">3</h2>\n<p>Something in between? It would be interesting to elaborate on what <code>Ign-sensors would become a repository of sensor models</code> would entail - would it just be wrappers around rendering and physics types, without lifecycle management?</p>", "type": "rendered"}, "created_on": "2019-01-04T18:17:35.503922+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-01-04T18:17:35.519850+00:00", "type": "pullrequest_comment", "id": 87122187}