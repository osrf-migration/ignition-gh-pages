{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133540158.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133540158"}}, "parent": {"id": 133536354, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133536354.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133536354"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "> I suspect you may be suggesting some compile-time way of checking that though, right?\n\nNo, not compile-time. It just needs to be able to determine the required components before it instantiates the physics engine. Because otherwise you might select a physics engine that doesn\u2019t support a component type that hasn\u2019t shown up yet.\n\n> It's common for new systems to be loaded at runtime.\n\nThere are two ways I can imagine handling this, and both options could be used in parallel \\(they are not mutually exclusive features\\):\n\n1. Allow users to forward-declare in their SDF what systems they expect will be needed\n2. Allow physics engines to be hot-swapped mid-simulation\n\nOf course we should also support allowing users to specify a preferred physics engine explicitly, like you mentioned. We could even do something like a \u201cboot order\u201d, where users can specify an ordered priority queue of the physics engines that they like, and ign-gazebo can choose the highest priority physics engine that matches the required components.\n\n> This PR refers to it by name \\(`dart` / `bullet`\\), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var\n\nThis isn\u2019t required if we\u2019re okay with enforcing a policy about how the physics engine plugins get installed. For example, we could require that physics engine plugins install a metadata file into `${CMAKE_INSTALL_LIBDIR}/ign-physics/engine/${ENGINE_NAME}`, where the metadata file simply contains a path to the actual library. Then when a user specifies a physics engine by name, we can search for a metadata file in that directory which matches that name, and load the library path contained in that metadata file. This is how middleware plugins are loaded by the current implementation of [SOSS](https://github.com/osrf/soss/blob/1fff22320be0067955b227a98aa5b5fee4e02b0e/packages/core/include/soss/Search.hpp). We can also have `ign-physics` provide cmake macros to make the installation of the metadata easy for physics engine developers.\n\n> Not sure whether `ign-gazebo` or `ign-physics` will be handling that.\n\nWe can have `ign-physics` provide utility functions for it, and then `ign-gazebo` can use the utility functions.\n\n> Currently we only have `libignition-gazebo-physics-system.so`, but we may offer others in the future \\(i.e. `libignition-gazebo-kinematic-physics-system.so`\\).\n\nI would hope that we can leverage the feature flexibility of `ign-physics` into a single physics system that can be used across all out-of-the-box physics engines that we support. Admittedly it\u2019s much trickier for a single physics system to support third-party features that we don\u2019t anticipate ahead of time, because there\u2019s a disconnect between the ign-gazebo API and the ign-physics API.\n\n> Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.\n\nI\u2019d say this depends on how we\u2019re defining \u201cphysics engine\u201d. I think it would be fine to support additional \u201cphysics systems\u201d that add new features or modify the behavior of an underlying physics system.\n\n\u200c", "markup": "markdown", "html": "<blockquote>\n<p>I suspect you may be suggesting some compile-time way of checking that though, right?</p>\n</blockquote>\n<p>No, not compile-time. It just needs to be able to determine the required components before it instantiates the physics engine. Because otherwise you might select a physics engine that doesn\u2019t support a component type that hasn\u2019t shown up yet.</p>\n<blockquote>\n<p>It's common for new systems to be loaded at runtime.</p>\n</blockquote>\n<p>There are two ways I can imagine handling this, and both options could be used in parallel (they are not mutually exclusive features):</p>\n<ol>\n<li>Allow users to forward-declare in their SDF what systems they expect will be needed</li>\n<li>Allow physics engines to be hot-swapped mid-simulation</li>\n</ol>\n<p>Of course we should also support allowing users to specify a preferred physics engine explicitly, like you mentioned. We could even do something like a \u201cboot order\u201d, where users can specify an ordered priority queue of the physics engines that they like, and ign-gazebo can choose the highest priority physics engine that matches the required components.</p>\n<blockquote>\n<p>This PR refers to it by name (<code>dart</code> / <code>bullet</code>), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var</p>\n</blockquote>\n<p>This isn\u2019t required if we\u2019re okay with enforcing a policy about how the physics engine plugins get installed. For example, we could require that physics engine plugins install a metadata file into <code>${CMAKE_INSTALL_LIBDIR}/ign-physics/engine/${ENGINE_NAME}</code>, where the metadata file simply contains a path to the actual library. Then when a user specifies a physics engine by name, we can search for a metadata file in that directory which matches that name, and load the library path contained in that metadata file. This is how middleware plugins are loaded by the current implementation of <a data-is-external-link=\"true\" href=\"https://github.com/osrf/soss/blob/1fff22320be0067955b227a98aa5b5fee4e02b0e/packages/core/include/soss/Search.hpp\" rel=\"nofollow\">SOSS</a>. We can also have <code>ign-physics</code> provide cmake macros to make the installation of the metadata easy for physics engine developers.</p>\n<blockquote>\n<p>Not sure whether <code>ign-gazebo</code> or <code>ign-physics</code> will be handling that.</p>\n</blockquote>\n<p>We can have <code>ign-physics</code> provide utility functions for it, and then <code>ign-gazebo</code> can use the utility functions.</p>\n<blockquote>\n<p>Currently we only have <code>libignition-gazebo-physics-system.so</code>, but we may offer others in the future (i.e. <code>libignition-gazebo-kinematic-physics-system.so</code>).</p>\n</blockquote>\n<p>I would hope that we can leverage the feature flexibility of <code>ign-physics</code> into a single physics system that can be used across all out-of-the-box physics engines that we support. Admittedly it\u2019s much trickier for a single physics system to support third-party features that we don\u2019t anticipate ahead of time, because there\u2019s a disconnect between the ign-gazebo API and the ign-physics API.</p>\n<blockquote>\n<p>Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.</p>\n</blockquote>\n<p>I\u2019d say this depends on how we\u2019re defining \u201cphysics engine\u201d. I think it would be fine to support additional \u201cphysics systems\u201d that add new features or modify the behavior of an underlying physics system.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2020-01-29T03:57:28.018420+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 268, "from": null, "outdated": true, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-29T03:57:28.027208+00:00", "type": "pullrequest_comment", "id": 133540158}