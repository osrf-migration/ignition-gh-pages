{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133536354.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133536354"}}, "parent": {"id": 133341333, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133341333.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133341333"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "> I think it would be good for ignition-gazebo systems to have some way to express what their component dependencies are.\n\nI agree that this is useful. We currently have a mechanism to tell this at runtime. For example, any system can create a component at runtime, and other systems may react to that as it becomes available. For example, systems like `DiffDrive` and `JointController` may create a `JointVelocityCmd` component, and the `Physics` system will only make use of that if it's available. I suspect you may be suggesting some compile-time way of checking that though, right? I'm not sure if that would be well suited for Ignition Gazebo, see below.\n\n> We shouldn\u2019t be selecting physics engines based on their name, we should be selecting them based on...\n\nSo if I understand correctly, what you're suggesting is to startup simulation with a given set of systems. Then check what features that specific set of system needs, and iterate through all the available physics engines until we find one that's suited. Please correct me if I'm wrong. Some questions:\n\n* It's common for new systems to be loaded at runtime. For example, the `DiffDrive` plugin is loaded the moment a vehicle is spawned. But by that point the engine has already been chosen. How do you envision that working?\n* How does Ignition Gazebo know where to find the engines to iterate over? How will a downstream user tell Ignition Gazebo to consider their custom engine, installed at some random location?\n\n---\n\nOne way I could see this working is:\n\n* Have an environment variable that lists paths to look for physics engines, i.e. `IGNITION_PHYSICS_ENGINE_PATH`.\n    * Not sure whether `ign-gazebo` or `ign-physics` will be handling that.\n* Users can select an engine at load time through the SDF tag `<physics type=\"engine-identifier\">`.\n    * This PR refers to it by name (`dart` / `bullet`), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var.\n    * If it becomes too cumbersome to use the `<physics>` tag, we can consider choosing the engine some other way (maybe passed directly to the physics system).\n* Users will also select a physics system to be loaded via the SDF.\n    * Currently we only have `libignition-gazebo-physics-system.so`, but we may offer others in the future (i.e. `libignition-gazebo-kinematic-physics-system.so`).\n    * That system will look for the engine on the paths from the env var. If the engine in not in the path or it doens't fit all the feature requirements, then fail gracefully.\n    * Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.", "markup": "markdown", "html": "<blockquote>\n<p>I think it would be good for ignition-gazebo systems to have some way to express what their component dependencies are.</p>\n</blockquote>\n<p>I agree that this is useful. We currently have a mechanism to tell this at runtime. For example, any system can create a component at runtime, and other systems may react to that as it becomes available. For example, systems like <code>DiffDrive</code> and <code>JointController</code> may create a <code>JointVelocityCmd</code> component, and the <code>Physics</code> system will only make use of that if it's available. I suspect you may be suggesting some compile-time way of checking that though, right? I'm not sure if that would be well suited for Ignition Gazebo, see below.</p>\n<blockquote>\n<p>We shouldn\u2019t be selecting physics engines based on their name, we should be selecting them based on...</p>\n</blockquote>\n<p>So if I understand correctly, what you're suggesting is to startup simulation with a given set of systems. Then check what features that specific set of system needs, and iterate through all the available physics engines until we find one that's suited. Please correct me if I'm wrong. Some questions:</p>\n<ul>\n<li>It's common for new systems to be loaded at runtime. For example, the <code>DiffDrive</code> plugin is loaded the moment a vehicle is spawned. But by that point the engine has already been chosen. How do you envision that working?</li>\n<li>How does Ignition Gazebo know where to find the engines to iterate over? How will a downstream user tell Ignition Gazebo to consider their custom engine, installed at some random location?</li>\n</ul>\n<hr />\n<p>One way I could see this working is:</p>\n<ul>\n<li>Have an environment variable that lists paths to look for physics engines, i.e. <code>IGNITION_PHYSICS_ENGINE_PATH</code>.<ul>\n<li>Not sure whether <code>ign-gazebo</code> or <code>ign-physics</code> will be handling that.</li>\n</ul>\n</li>\n<li>Users can select an engine at load time through the SDF tag <code>&lt;physics type=\"engine-identifier\"&gt;</code>.<ul>\n<li>This PR refers to it by name (<code>dart</code> / <code>bullet</code>), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var.</li>\n<li>If it becomes too cumbersome to use the <code>&lt;physics&gt;</code> tag, we can consider choosing the engine some other way (maybe passed directly to the physics system).</li>\n</ul>\n</li>\n<li>Users will also select a physics system to be loaded via the SDF.<ul>\n<li>Currently we only have <code>libignition-gazebo-physics-system.so</code>, but we may offer others in the future (i.e. <code>libignition-gazebo-kinematic-physics-system.so</code>).</li>\n<li>That system will look for the engine on the paths from the env var. If the engine in not in the path or it doens't fit all the feature requirements, then fail gracefully.</li>\n<li>Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.</li>\n</ul>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2020-01-29T02:35:25.599464+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 268, "from": null, "outdated": true, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-29T02:35:25.607428+00:00", "type": "pullrequest_comment", "id": 133536354}