{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133094264.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133094264"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "This, as well as the explicit reference to `dartsim-plugin` and `bullet-plugin` in `CmakeLists`, doesn't look like a very scalable way to select different physics engines. Do we have a plan for how to support 3rd party engines? CC @{557058:67759e29-d1df-465f-868d-047738e36fc9} ", "markup": "markdown", "html": "<p>This, as well as the explicit reference to <code>dartsim-plugin</code> and <code>bullet-plugin</code> in <code>CmakeLists</code>, doesn't look like a very scalable way to select different physics engines. Do we have a plan for how to support 3rd party engines? CC <span class=\"ap-mention\" data-atlassian-id=\"557058:67759e29-d1df-465f-868d-047738e36fc9\">@Michael Grey</span> </p>", "type": "rendered"}, "created_on": "2020-01-24T17:52:53.238161+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 268, "from": null, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-24T17:52:53.296865+00:00", "type": "pullrequest_comment", "id": 133094264}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133341333.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133341333"}}, "parent": {"id": 133094264, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133094264.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133094264"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "Yes, this is exactly what the Feature System of ignition-physics was designed for. We shouldn\u2019t be selecting physics engines based on their name, we should be selecting them based on\n\n1. What features are needed by the downstream and upstream systems\n2. What features are provided by the physics engine in question\n\nThis is another reason that I think it would be good for ignition-gazebo systems to have some way to express what their component dependencies are. That could be used to infer what features are needed from a physics engine.\n\n\u200c", "markup": "markdown", "html": "<p>Yes, this is exactly what the Feature System of ignition-physics was designed for. We shouldn\u2019t be selecting physics engines based on their name, we should be selecting them based on</p>\n<ol>\n<li>What features are needed by the downstream and upstream systems</li>\n<li>What features are provided by the physics engine in question</li>\n</ol>\n<p>This is another reason that I think it would be good for ignition-gazebo systems to have some way to express what their component dependencies are. That could be used to infer what features are needed from a physics engine.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2020-01-28T03:10:01.992393+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 268, "from": null, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-28T03:10:01.999276+00:00", "type": "pullrequest_comment", "id": 133341333}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133536354.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133536354"}}, "parent": {"id": 133341333, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133341333.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133341333"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "> I think it would be good for ignition-gazebo systems to have some way to express what their component dependencies are.\n\nI agree that this is useful. We currently have a mechanism to tell this at runtime. For example, any system can create a component at runtime, and other systems may react to that as it becomes available. For example, systems like `DiffDrive` and `JointController` may create a `JointVelocityCmd` component, and the `Physics` system will only make use of that if it's available. I suspect you may be suggesting some compile-time way of checking that though, right? I'm not sure if that would be well suited for Ignition Gazebo, see below.\n\n> We shouldn\u2019t be selecting physics engines based on their name, we should be selecting them based on...\n\nSo if I understand correctly, what you're suggesting is to startup simulation with a given set of systems. Then check what features that specific set of system needs, and iterate through all the available physics engines until we find one that's suited. Please correct me if I'm wrong. Some questions:\n\n* It's common for new systems to be loaded at runtime. For example, the `DiffDrive` plugin is loaded the moment a vehicle is spawned. But by that point the engine has already been chosen. How do you envision that working?\n* How does Ignition Gazebo know where to find the engines to iterate over? How will a downstream user tell Ignition Gazebo to consider their custom engine, installed at some random location?\n\n---\n\nOne way I could see this working is:\n\n* Have an environment variable that lists paths to look for physics engines, i.e. `IGNITION_PHYSICS_ENGINE_PATH`.\n    * Not sure whether `ign-gazebo` or `ign-physics` will be handling that.\n* Users can select an engine at load time through the SDF tag `<physics type=\"engine-identifier\">`.\n    * This PR refers to it by name (`dart` / `bullet`), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var.\n    * If it becomes too cumbersome to use the `<physics>` tag, we can consider choosing the engine some other way (maybe passed directly to the physics system).\n* Users will also select a physics system to be loaded via the SDF.\n    * Currently we only have `libignition-gazebo-physics-system.so`, but we may offer others in the future (i.e. `libignition-gazebo-kinematic-physics-system.so`).\n    * That system will look for the engine on the paths from the env var. If the engine in not in the path or it doens't fit all the feature requirements, then fail gracefully.\n    * Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.", "markup": "markdown", "html": "<blockquote>\n<p>I think it would be good for ignition-gazebo systems to have some way to express what their component dependencies are.</p>\n</blockquote>\n<p>I agree that this is useful. We currently have a mechanism to tell this at runtime. For example, any system can create a component at runtime, and other systems may react to that as it becomes available. For example, systems like <code>DiffDrive</code> and <code>JointController</code> may create a <code>JointVelocityCmd</code> component, and the <code>Physics</code> system will only make use of that if it's available. I suspect you may be suggesting some compile-time way of checking that though, right? I'm not sure if that would be well suited for Ignition Gazebo, see below.</p>\n<blockquote>\n<p>We shouldn\u2019t be selecting physics engines based on their name, we should be selecting them based on...</p>\n</blockquote>\n<p>So if I understand correctly, what you're suggesting is to startup simulation with a given set of systems. Then check what features that specific set of system needs, and iterate through all the available physics engines until we find one that's suited. Please correct me if I'm wrong. Some questions:</p>\n<ul>\n<li>It's common for new systems to be loaded at runtime. For example, the <code>DiffDrive</code> plugin is loaded the moment a vehicle is spawned. But by that point the engine has already been chosen. How do you envision that working?</li>\n<li>How does Ignition Gazebo know where to find the engines to iterate over? How will a downstream user tell Ignition Gazebo to consider their custom engine, installed at some random location?</li>\n</ul>\n<hr />\n<p>One way I could see this working is:</p>\n<ul>\n<li>Have an environment variable that lists paths to look for physics engines, i.e. <code>IGNITION_PHYSICS_ENGINE_PATH</code>.<ul>\n<li>Not sure whether <code>ign-gazebo</code> or <code>ign-physics</code> will be handling that.</li>\n</ul>\n</li>\n<li>Users can select an engine at load time through the SDF tag <code>&lt;physics type=\"engine-identifier\"&gt;</code>.<ul>\n<li>This PR refers to it by name (<code>dart</code> / <code>bullet</code>), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var.</li>\n<li>If it becomes too cumbersome to use the <code>&lt;physics&gt;</code> tag, we can consider choosing the engine some other way (maybe passed directly to the physics system).</li>\n</ul>\n</li>\n<li>Users will also select a physics system to be loaded via the SDF.<ul>\n<li>Currently we only have <code>libignition-gazebo-physics-system.so</code>, but we may offer others in the future (i.e. <code>libignition-gazebo-kinematic-physics-system.so</code>).</li>\n<li>That system will look for the engine on the paths from the env var. If the engine in not in the path or it doens't fit all the feature requirements, then fail gracefully.</li>\n<li>Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.</li>\n</ul>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2020-01-29T02:35:25.599464+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 268, "from": null, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-29T02:35:25.607428+00:00", "type": "pullrequest_comment", "id": 133536354}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133540158.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133540158"}}, "parent": {"id": 133536354, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133536354.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133536354"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "> I suspect you may be suggesting some compile-time way of checking that though, right?\n\nNo, not compile-time. It just needs to be able to determine the required components before it instantiates the physics engine. Because otherwise you might select a physics engine that doesn\u2019t support a component type that hasn\u2019t shown up yet.\n\n> It's common for new systems to be loaded at runtime.\n\nThere are two ways I can imagine handling this, and both options could be used in parallel \\(they are not mutually exclusive features\\):\n\n1. Allow users to forward-declare in their SDF what systems they expect will be needed\n2. Allow physics engines to be hot-swapped mid-simulation\n\nOf course we should also support allowing users to specify a preferred physics engine explicitly, like you mentioned. We could even do something like a \u201cboot order\u201d, where users can specify an ordered priority queue of the physics engines that they like, and ign-gazebo can choose the highest priority physics engine that matches the required components.\n\n> This PR refers to it by name \\(`dart` / `bullet`\\), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var\n\nThis isn\u2019t required if we\u2019re okay with enforcing a policy about how the physics engine plugins get installed. For example, we could require that physics engine plugins install a metadata file into `${CMAKE_INSTALL_LIBDIR}/ign-physics/engine/${ENGINE_NAME}`, where the metadata file simply contains a path to the actual library. Then when a user specifies a physics engine by name, we can search for a metadata file in that directory which matches that name, and load the library path contained in that metadata file. This is how middleware plugins are loaded by the current implementation of [SOSS](https://github.com/osrf/soss/blob/1fff22320be0067955b227a98aa5b5fee4e02b0e/packages/core/include/soss/Search.hpp). We can also have `ign-physics` provide cmake macros to make the installation of the metadata easy for physics engine developers.\n\n> Not sure whether `ign-gazebo` or `ign-physics` will be handling that.\n\nWe can have `ign-physics` provide utility functions for it, and then `ign-gazebo` can use the utility functions.\n\n> Currently we only have `libignition-gazebo-physics-system.so`, but we may offer others in the future \\(i.e. `libignition-gazebo-kinematic-physics-system.so`\\).\n\nI would hope that we can leverage the feature flexibility of `ign-physics` into a single physics system that can be used across all out-of-the-box physics engines that we support. Admittedly it\u2019s much trickier for a single physics system to support third-party features that we don\u2019t anticipate ahead of time, because there\u2019s a disconnect between the ign-gazebo API and the ign-physics API.\n\n> Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.\n\nI\u2019d say this depends on how we\u2019re defining \u201cphysics engine\u201d. I think it would be fine to support additional \u201cphysics systems\u201d that add new features or modify the behavior of an underlying physics system.\n\n\u200c", "markup": "markdown", "html": "<blockquote>\n<p>I suspect you may be suggesting some compile-time way of checking that though, right?</p>\n</blockquote>\n<p>No, not compile-time. It just needs to be able to determine the required components before it instantiates the physics engine. Because otherwise you might select a physics engine that doesn\u2019t support a component type that hasn\u2019t shown up yet.</p>\n<blockquote>\n<p>It's common for new systems to be loaded at runtime.</p>\n</blockquote>\n<p>There are two ways I can imagine handling this, and both options could be used in parallel (they are not mutually exclusive features):</p>\n<ol>\n<li>Allow users to forward-declare in their SDF what systems they expect will be needed</li>\n<li>Allow physics engines to be hot-swapped mid-simulation</li>\n</ol>\n<p>Of course we should also support allowing users to specify a preferred physics engine explicitly, like you mentioned. We could even do something like a \u201cboot order\u201d, where users can specify an ordered priority queue of the physics engines that they like, and ign-gazebo can choose the highest priority physics engine that matches the required components.</p>\n<blockquote>\n<p>This PR refers to it by name (<code>dart</code> / <code>bullet</code>), but to support 3rd party engines, I think we'll need a way to refer to their shared libraries, which must be located on a path from the env var</p>\n</blockquote>\n<p>This isn\u2019t required if we\u2019re okay with enforcing a policy about how the physics engine plugins get installed. For example, we could require that physics engine plugins install a metadata file into <code>${CMAKE_INSTALL_LIBDIR}/ign-physics/engine/${ENGINE_NAME}</code>, where the metadata file simply contains a path to the actual library. Then when a user specifies a physics engine by name, we can search for a metadata file in that directory which matches that name, and load the library path contained in that metadata file. This is how middleware plugins are loaded by the current implementation of <a data-is-external-link=\"true\" href=\"https://github.com/osrf/soss/blob/1fff22320be0067955b227a98aa5b5fee4e02b0e/packages/core/include/soss/Search.hpp\" rel=\"nofollow\">SOSS</a>. We can also have <code>ign-physics</code> provide cmake macros to make the installation of the metadata easy for physics engine developers.</p>\n<blockquote>\n<p>Not sure whether <code>ign-gazebo</code> or <code>ign-physics</code> will be handling that.</p>\n</blockquote>\n<p>We can have <code>ign-physics</code> provide utility functions for it, and then <code>ign-gazebo</code> can use the utility functions.</p>\n<blockquote>\n<p>Currently we only have <code>libignition-gazebo-physics-system.so</code>, but we may offer others in the future (i.e. <code>libignition-gazebo-kinematic-physics-system.so</code>).</p>\n</blockquote>\n<p>I would hope that we can leverage the feature flexibility of <code>ign-physics</code> into a single physics system that can be used across all out-of-the-box physics engines that we support. Admittedly it\u2019s much trickier for a single physics system to support third-party features that we don\u2019t anticipate ahead of time, because there\u2019s a disconnect between the ign-gazebo API and the ign-physics API.</p>\n<blockquote>\n<p>Users shouldn't load 2 physics systems at a time. We may want to enforce that somehow later on.</p>\n</blockquote>\n<p>I\u2019d say this depends on how we\u2019re defining \u201cphysics engine\u201d. I think it would be fine to support additional \u201cphysics systems\u201d that add new features or modify the behavior of an underlying physics system.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2020-01-29T03:57:28.018420+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 268, "from": null, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-29T03:57:28.027208+00:00", "type": "pullrequest_comment", "id": 133540158}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133725962.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133725962"}}, "parent": {"id": 133540158, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133540158.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133540158"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "> users can specify an ordered priority queue of the physics engines that they like, and ign-gazebo can choose the highest priority physics engine that matches the required components.\n\nThat's an interesting idea. Do you think it will be common for users to have several engines available, but they don't know whether they fit their current simulation, and they will be ok just loading the first one that matches?\n\n> enforcing a policy about how the physics engine plugins get installed. For example, we could require that physics engine plugins install a metadata file into ${CMAKE_INSTALL_LIBDIR}/ign-physics/engine/${ENGINE_NAME}\n\nI think this can be problematic when mixing debian packages with user plugins. A plugin coming from a ROS package, or from a local workspace, shouldn't be installed under `/usr` together with `ign-physics`' debs . Neither the plugin nor its metadata. That will require using `sudo` and prevent users from having self-contained workspaces.\n\nAlternatively, I'd be ok if we supported a canonical location somewhere under `$HOME`, like `~/.ignition/physics/plugins`. But we still need a way for users to provide alternative paths that match their workspace layout, and environment variables are a familiar for Gazebo-classic and ROS users to do that. \n\n> I would hope that we can leverage the feature flexibility of ign-physics into a single physics system that can be used across all out-of-the-box physics engines that we support\n\nI agree that this would be ideal. We can look into this in the coming weeks, at least with the goal of supporting known physics engines at first.\n\n> I\u2019d say this depends on how we\u2019re defining \u201cphysics engine\u201d. I think it would be fine to support additional \u201cphysics systems\u201d that add new features or modify the behavior of an underlying physics system.\n\nYeah I was referring to `ign-gazebo` systems that are setup to drive the `Update` loop. Currently we only have `Physics` and `LogPlayback` playing that role. I agree that there's room for supporting plugins that modify the physics engine directly, I'm just not sure whether they should be `ign-gazebo` systems. But that's a bit outside the scope of this conversation.\n", "markup": "markdown", "html": "<blockquote>\n<p>users can specify an ordered priority queue of the physics engines that they like, and ign-gazebo can choose the highest priority physics engine that matches the required components.</p>\n</blockquote>\n<p>That's an interesting idea. Do you think it will be common for users to have several engines available, but they don't know whether they fit their current simulation, and they will be ok just loading the first one that matches?</p>\n<blockquote>\n<p>enforcing a policy about how the physics engine plugins get installed. For example, we could require that physics engine plugins install a metadata file into ${CMAKE_INSTALL_LIBDIR}/ign-physics/engine/${ENGINE_NAME}</p>\n</blockquote>\n<p>I think this can be problematic when mixing debian packages with user plugins. A plugin coming from a ROS package, or from a local workspace, shouldn't be installed under <code>/usr</code> together with <code>ign-physics</code>' debs . Neither the plugin nor its metadata. That will require using <code>sudo</code> and prevent users from having self-contained workspaces.</p>\n<p>Alternatively, I'd be ok if we supported a canonical location somewhere under <code>$HOME</code>, like <code>~/.ignition/physics/plugins</code>. But we still need a way for users to provide alternative paths that match their workspace layout, and environment variables are a familiar for Gazebo-classic and ROS users to do that. </p>\n<blockquote>\n<p>I would hope that we can leverage the feature flexibility of ign-physics into a single physics system that can be used across all out-of-the-box physics engines that we support</p>\n</blockquote>\n<p>I agree that this would be ideal. We can look into this in the coming weeks, at least with the goal of supporting known physics engines at first.</p>\n<blockquote>\n<p>I\u2019d say this depends on how we\u2019re defining \u201cphysics engine\u201d. I think it would be fine to support additional \u201cphysics systems\u201d that add new features or modify the behavior of an underlying physics system.</p>\n</blockquote>\n<p>Yeah I was referring to <code>ign-gazebo</code> systems that are setup to drive the <code>Update</code> loop. Currently we only have <code>Physics</code> and <code>LogPlayback</code> playing that role. I agree that there's room for supporting plugins that modify the physics engine directly, I'm just not sure whether they should be <code>ign-gazebo</code> systems. But that's a bit outside the scope of this conversation.</p>", "type": "rendered"}, "created_on": "2020-01-30T00:16:19.558596+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 268, "from": null, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-30T00:16:19.567673+00:00", "type": "pullrequest_comment", "id": 133725962}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133739018.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133739018"}}, "parent": {"id": 133725962, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133725962.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133725962"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "> Do you think it will be common for users to have several engines available, but they don't know whether they fit their current simulation, and they will be ok just loading the first one that matches?\n\nTruthfully I have no idea; it might be a completely ludicrous feature concept. But I wouldn\u2019t be too surprised if the community and/or us might recommend an ordered list of recommended physics engines, and users just copy/paste that list into their configuration with the hope that at least one thing on that list will suit their needs.\n\n> A plugin coming from a ROS package, or from a local workspace, shouldn't be installed under `/usr` together with `ign-physics`' debs . Neither the plugin nor its metadata\n\nOf course. For SOSS plugins what we do is look at the `LD_LIBRARY_PATH` environment variable and use any paths inside that variable as a prefix for our search. That covers the use case of anyone who is using a build tool like colcon. In addition, users can specify other application-specific environment variables, for example we could have a `IGN_PHYSICS_ENGINE_PATH` which could be a list of paths that can be used as prefixes for the physics engine metadata lookup. We could also support passing in path prefixes through the command line. The [SOSS Search class that I linked to before](https://github.com/osrf/soss/blob/1fff22320be0067955b227a98aa5b5fee4e02b0e/packages/core/include/soss/Search.hpp) does all of this, and I think it\u2019s worked quite well for us, so I recommend taking a look at the documentation for that class to see what I mean \\(but be warned that it\u2019s more complicated than what we need for physics engines, because it differentiates between two different categories of plugins\\).\n\n> Alternatively, I'd be ok if we supported a canonical location somewhere under `$HOME`, like `~/.ignition/physics/plugins`. But we still need a way for users to provide alternative paths that match their workspace layout, and environment variables are a familiar for Gazebo-classic and ROS users to do that.\n\nIndeed the SOSS `Search` class also supports searching relative to the home directory. The workspace layout can be handled using `LD_LIBRARY_PATH` as mentioned above.", "markup": "markdown", "html": "<blockquote>\n<p>Do you think it will be common for users to have several engines available, but they don't know whether they fit their current simulation, and they will be ok just loading the first one that matches?</p>\n</blockquote>\n<p>Truthfully I have no idea; it might be a completely ludicrous feature concept. But I wouldn\u2019t be too surprised if the community and/or us might recommend an ordered list of recommended physics engines, and users just copy/paste that list into their configuration with the hope that at least one thing on that list will suit their needs.</p>\n<blockquote>\n<p>A plugin coming from a ROS package, or from a local workspace, shouldn't be installed under <code>/usr</code> together with <code>ign-physics</code>' debs . Neither the plugin nor its metadata</p>\n</blockquote>\n<p>Of course. For SOSS plugins what we do is look at the <code>LD_LIBRARY_PATH</code> environment variable and use any paths inside that variable as a prefix for our search. That covers the use case of anyone who is using a build tool like colcon. In addition, users can specify other application-specific environment variables, for example we could have a <code>IGN_PHYSICS_ENGINE_PATH</code> which could be a list of paths that can be used as prefixes for the physics engine metadata lookup. We could also support passing in path prefixes through the command line. The <a data-is-external-link=\"true\" href=\"https://github.com/osrf/soss/blob/1fff22320be0067955b227a98aa5b5fee4e02b0e/packages/core/include/soss/Search.hpp\" rel=\"nofollow\">SOSS Search class that I linked to before</a> does all of this, and I think it\u2019s worked quite well for us, so I recommend taking a look at the documentation for that class to see what I mean (but be warned that it\u2019s more complicated than what we need for physics engines, because it differentiates between two different categories of plugins).</p>\n<blockquote>\n<p>Alternatively, I'd be ok if we supported a canonical location somewhere under <code>$HOME</code>, like <code>~/.ignition/physics/plugins</code>. But we still need a way for users to provide alternative paths that match their workspace layout, and environment variables are a familiar for Gazebo-classic and ROS users to do that.</p>\n</blockquote>\n<p>Indeed the SOSS <code>Search</code> class also supports searching relative to the home directory. The workspace layout can be handled using <code>LD_LIBRARY_PATH</code> as mentioned above.</p>", "type": "rendered"}, "created_on": "2020-01-30T04:14:56.284961+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 268, "from": null, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-01-30T04:14:56.292894+00:00", "type": "pullrequest_comment", "id": 133739018}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/137277305.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48501daf432c..ad8a6ce72565?path=src%2Fsystems%2Fphysics%2FPhysics.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-137277305"}}, "parent": {"id": 133094264, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/133094264.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-133094264"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "Pull request #541 has a proposal.", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/541/find-custom-physics-engines\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #541</a> has a proposal.</p>", "type": "rendered"}, "created_on": "2020-02-25T01:44:04.414841+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 268, "from": null, "path": "src/systems/physics/Physics.cc"}, "updated_on": "2020-02-25T01:44:04.424560+00:00", "type": "pullrequest_comment", "id": 137277305}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/135049790.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-135049790"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "Cannot run sdf files provided after building. Backtrace points to ign-gazebo/src/systems/physics/Physics.cc:295", "markup": "markdown", "html": "<p>Cannot run sdf files provided after building. Backtrace points to ign-gazebo/src/systems/physics/Physics.cc:295</p>", "type": "rendered"}, "created_on": "2020-02-07T21:27:22.957925+00:00", "user": {"display_name": "Ashton Larkin", "uuid": "{0d8d5c66-3903-4ba7-bffc-1dbdc96eece7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0d8d5c66-3903-4ba7-bffc-1dbdc96eece7%7D"}, "html": {"href": "https://bitbucket.org/%7B0d8d5c66-3903-4ba7-bffc-1dbdc96eece7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5e39ce40494d780ca21c3a4a/4a648ae3-1751-4dd9-ba81-d38e990b47df/128"}}, "nickname": "Ashton Larkin", "type": "user", "account_id": "5e39ce40494d780ca21c3a4a"}, "updated_on": "2020-02-07T21:27:22.963996+00:00", "type": "pullrequest_comment", "id": 135049790}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/135050990.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-135050990"}}, "parent": {"id": 135049790, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/135049790.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-135049790"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "seems to be an issue with the engine parameter of \u2018this\u2019", "markup": "markdown", "html": "<p>seems to be an issue with the engine parameter of \u2018this\u2019</p>", "type": "rendered"}, "created_on": "2020-02-07T21:41:32.693301+00:00", "user": {"display_name": "Ashton Larkin", "uuid": "{0d8d5c66-3903-4ba7-bffc-1dbdc96eece7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0d8d5c66-3903-4ba7-bffc-1dbdc96eece7%7D"}, "html": {"href": "https://bitbucket.org/%7B0d8d5c66-3903-4ba7-bffc-1dbdc96eece7%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5e39ce40494d780ca21c3a4a/4a648ae3-1751-4dd9-ba81-d38e990b47df/128"}}, "nickname": "Ashton Larkin", "type": "user", "account_id": "5e39ce40494d780ca21c3a4a"}, "updated_on": "2020-02-07T21:41:32.703096+00:00", "type": "pullrequest_comment", "id": 135050990}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/142418001.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-142418001"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "Pull request #573 is an alternative to this one.", "markup": "markdown", "html": "<p><a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/573/optional-physics-features\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #573</a> is an alternative to this one.</p>", "type": "rendered"}, "created_on": "2020-03-27T17:15:58.858686+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2020-03-27T17:15:58.861577+00:00", "type": "pullrequest_comment", "id": 142418001}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/143437802.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-143437802"}}, "parent": {"id": 142418001, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/142418001.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-142418001"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "@{557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5} , how do you feel about declining this pull request? \n\n* The changes to how a physics engine is chosen should be superseded by the more general approach on pull request #541\n* The other changes to the physics system will break current DART functionality. Instead of removing unsupported features, we should make them optional like on pull request #573", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5\">@Ian Chen</span> , how do you feel about declining this pull request? </p>\n<ul>\n<li>The changes to how a physics engine is chosen should be superseded by the more general approach on <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/541/find-custom-physics-engines\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #541</a></li>\n<li>The other changes to the physics system will break current DART functionality. Instead of removing unsupported features, we should make them optional like on <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/573/optional-physics-features\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #573</a></li>\n</ul>", "type": "rendered"}, "created_on": "2020-04-02T22:19:46.422357+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2020-04-02T22:19:46.434476+00:00", "type": "pullrequest_comment", "id": 143437802}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/143438526.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-143438526"}}, "parent": {"id": 143437802, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/143437802.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-143437802"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "Oh the example worlds here are cool. We could leave just them on the PR. Or open a separate PR with them :smile: ", "markup": "markdown", "html": "<p>Oh the example worlds here are cool. We could leave just them on the PR. Or open a separate PR with them <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f604.png\" alt=\"\ud83d\ude04\" title=\":smile:\" data-emoji-short-name=\":smile:\" /> </p>", "type": "rendered"}, "created_on": "2020-04-02T22:27:47.317518+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2020-04-02T22:27:47.321992+00:00", "type": "pullrequest_comment", "id": 143438526}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/143447784.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-143447784"}}, "parent": {"id": 143438526, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421/comments/143438526.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421/_/diff#comment-143438526"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 421, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/421.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/421"}}, "title": "Support simulation with bullet physics engine"}, "content": {"raw": "ok let\u2019s decline this. We can open a new PR for the example world later.", "markup": "markdown", "html": "<p>ok let\u2019s decline this. We can open a new PR for the example world later.</p>", "type": "rendered"}, "created_on": "2020-04-03T00:34:54.025301+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2020-04-03T00:34:54.031743+00:00", "type": "pullrequest_comment", "id": 143447784}], "page": 1, "size": 13}