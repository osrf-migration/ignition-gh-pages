{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/285/comments/101394238.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/285/_/diff#comment-101394238"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 285, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/285.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/285"}}, "title": "[Blueprint] Entity tree UI"}, "content": {"raw": "@nkoenig @iche033 , e34f02e fixes the issue deserializing components created at runtime.\n\n---\n\nComponent registration happens at static initialization. Only components whose headers are included in the currently loaded libraries are initialized. Some of our components, such as `JointVelocityCmd` and `BatterySoC` happened not to be included by any of the files running in the GUI, so they were not being registered and that process didn't know how to deserialize them.\n\nThat commit does several things:\n\n* Accepts the environment variable `IGN_DEBUG_COMPONENT_FACTORY` for printing the components that are registered. This should help debugging in the future. Since components are created before `main`, we can't use ign-common's Console.\n* Add a `Factory::HasType` to check types that are registered\n* Use `HasType` before trying to serialize and print a warning accordingly. The warning is only printed once per component type.\n* Add the meta header `components.hh`, which includes all the headers in that directory.\n* Include `components.hh` in `GuiRunner.hh`, so the GUI has full support for all Gazebo components. This will be handy for the property tree.\n* If you're curious enable the factory debug and compare the list of components printed for the server and GUI.", "markup": "markdown", "html": "<p>@nkoenig @iche033 , <a href=\"#!/ignitionrobotics/ign-gazebo/commits/e34f02e\" rel=\"nofollow\" class=\"ap-connect-link\">e34f02e</a> fixes the issue deserializing components created at runtime.</p>\n<hr />\n<p>Component registration happens at static initialization. Only components whose headers are included in the currently loaded libraries are initialized. Some of our components, such as <code>JointVelocityCmd</code> and <code>BatterySoC</code> happened not to be included by any of the files running in the GUI, so they were not being registered and that process didn't know how to deserialize them.</p>\n<p>That commit does several things:</p>\n<ul>\n<li>Accepts the environment variable <code>IGN_DEBUG_COMPONENT_FACTORY</code> for printing the components that are registered. This should help debugging in the future. Since components are created before <code>main</code>, we can't use ign-common's Console.</li>\n<li>Add a <code>Factory::HasType</code> to check types that are registered</li>\n<li>Use <code>HasType</code> before trying to serialize and print a warning accordingly. The warning is only printed once per component type.</li>\n<li>Add the meta header <code>components.hh</code>, which includes all the headers in that directory.</li>\n<li>Include <code>components.hh</code> in <code>GuiRunner.hh</code>, so the GUI has full support for all Gazebo components. This will be handy for the property tree.</li>\n<li>If you're curious enable the factory debug and compare the list of components printed for the server and GUI.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-05-09T02:33:30.542468+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-05-09T02:33:30.557698+00:00", "type": "pullrequest_comment", "id": 101394238}