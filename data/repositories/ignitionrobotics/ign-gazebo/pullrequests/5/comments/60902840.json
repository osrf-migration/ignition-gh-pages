{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/5/comments/60902840.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:f1c92d1cb08b..67c86163ddae?path=src%2FServerPrivate.hh"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/5/_/diff#comment-60902840"}}, "parent": {"id": 60893145, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/5/comments/60893145.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/5/_/diff#comment-60893145"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/5.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/5"}}, "title": "Server"}, "content": {"raw": "For POD initialization via `=` is equivalent to brace initialization. At least, that is my understanding.\n\nYou can try this:\n\n1. Create a main.cc with:\n\n```\nint main()\n{ \n  double a{0.0};\n} \n```\n\n2. Compile: `g++ main.cc -std=gnu++11`\n\n3. Get the assembly: `objdump -d a.out`, and look for the `<main>` section. It should look like:\n\n```\n4004d6: 55                    push   %rbp\n4004d7: 48 89 e5              mov    %rsp,%rbp\n4004da: 66 0f ef c0           pxor   %xmm0,%xmm0\n4004de: f2 0f 11 45 f8        movsd  %xmm0,-0x8(%rbp)\n4004e3: b8 00 00 00 00        mov    $0x0,%eax\n4004e8: 5d                    pop    %rbp\n4004e9: c3                    retq\n4004ea: 66 0f 1f 44 00 00     nopw   0x0(%rax,%rax,1)\n```\n\n4. Alter the main to use the equal operator, and compare the resulting assembly.\n", "markup": "markdown", "html": "<p>For POD initialization via <code>=</code> is equivalent to brace initialization. At least, that is my understanding.</p>\n<p>You can try this:</p>\n<ol>\n<li>Create a main.cc with:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>int main()\n{ \n  double a{0.0};\n} \n</pre></div>\n\n\n<ol>\n<li>\n<p>Compile: <code>g++ main.cc -std=gnu++11</code></p>\n</li>\n<li>\n<p>Get the assembly: <code>objdump -d a.out</code>, and look for the <code>&lt;main&gt;</code> section. It should look like:</p>\n</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">4004</span><span class=\"n\">d6</span><span class=\"o\">:</span> <span class=\"mi\">55</span>                    <span class=\"n\">push</span>   <span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"mi\">4004</span><span class=\"n\">d7</span><span class=\"o\">:</span> <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>              <span class=\"n\">mov</span>    <span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"o\">,%</span><span class=\"n\">rbp</span>\n<span class=\"mi\">4004</span><span class=\"n\">da</span><span class=\"o\">:</span> <span class=\"mi\">66</span> <span class=\"mi\">0</span><span class=\"n\">f</span> <span class=\"n\">ef</span> <span class=\"n\">c0</span>           <span class=\"n\">pxor</span>   <span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"o\">,%</span><span class=\"n\">xmm0</span>\n<span class=\"mi\">4004</span><span class=\"n\">de</span><span class=\"o\">:</span> <span class=\"n\">f2</span> <span class=\"mi\">0</span><span class=\"n\">f</span> <span class=\"mi\">11</span> <span class=\"mi\">45</span> <span class=\"n\">f8</span>        <span class=\"n\">movsd</span>  <span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"o\">,-</span><span class=\"mh\">0x8</span><span class=\"o\">(%</span><span class=\"n\">rbp</span><span class=\"o\">)</span>\n<span class=\"mi\">4004</span><span class=\"n\">e3</span><span class=\"o\">:</span> <span class=\"n\">b8</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span>        <span class=\"n\">mov</span>    <span class=\"n\">$0x0</span><span class=\"o\">,%</span><span class=\"n\">eax</span>\n<span class=\"mi\">4004</span><span class=\"n\">e8</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"n\">d</span>                    <span class=\"n\">pop</span>    <span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"mi\">4004</span><span class=\"n\">e9</span><span class=\"o\">:</span> <span class=\"n\">c3</span>                    <span class=\"n\">retq</span>\n<span class=\"mi\">4004</span><span class=\"n\">ea</span><span class=\"o\">:</span> <span class=\"mi\">66</span> <span class=\"mi\">0</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"n\">f</span> <span class=\"mi\">44</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span>     <span class=\"n\">nopw</span>   <span class=\"mh\">0x0</span><span class=\"o\">(%</span><span class=\"n\">rax</span><span class=\"o\">,%</span><span class=\"n\">rax</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<ol>\n<li>Alter the main to use the equal operator, and compare the resulting assembly.</li>\n</ol>", "type": "rendered"}, "created_on": "2018-04-06T16:11:04.654030+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "outdated": true, "path": "src/ServerPrivate.hh"}, "updated_on": "2018-04-06T16:11:04.657347+00:00", "type": "pullrequest_comment", "id": 60902840}