{"rendered": {"description": {"raw": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* ~~fix the tests~~\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "markup": "markdown", "html": "<p>Still a work in progress, opening for visibility and early feedback.</p>\n<p>Broken off the <code>distributed_transfer</code> branch.</p>\n<p>Builds on top of:</p>\n<ul>\n<li><del><a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/262/blueprint-add-performerlevels-component\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #262</a></del> merged</li>\n</ul>\n<h2 id=\"markdown-header-todo\">TODO</h2>\n<ul>\n<li><del>fix the tests</del></li>\n<li><del>investigate why performance is much worse than current implementation</del> - performance is better at default <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074\" rel=\"nofollow\">because</a> doesn't always step in sync.</li>\n</ul>\n<hr />\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>There are several aspects of simulation which need to be kept in sync between primary and secondaries. </p>\n<ol>\n<li>Sim time</li>\n<li>Performer state</li>\n<li>Performer &lt;-&gt; secondary affinities</li>\n</ol>\n<p>The current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. </p>\n<h1 id=\"markdown-header-proposal\">Proposal</h1>\n<table>\n<thead>\n<tr>\n<th>.</th>\n<th>Current</th>\n<th>Proposed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sim time</td>\n<td>Initiated from primary to secondaries through the <code>step</code> topic and secondaries report back the end of a step through the <code>stepAck</code> topic.</td>\n<td>Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Secondaries are also stepped by the <code>SimulationRunner</code> through the <code>Step</code> function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable.</td>\n<td>Secondaries are no longer stepped by <code>SimulationRunner</code>, they're only stepped via the topic</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Not well defined what should happen if secondaries and primary are run for a different number of iterations.</td>\n<td>Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until <code>Stop</code> is received.</td>\n</tr>\n<tr>\n<td>State</td>\n<td>Reported from secondaries to primary through the <code>state_update</code> topic, which must be kept in sync with the <code>step</code> topic</td>\n<td>Send secondary state updates in the end of an iteration as part of <code>step_ack</code> and avoid one extra synchronization mechanism.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Primary doesn't report state to secondaries.</td>\n<td>Primary will send state when a new performer is assigned to a secondary (<code>distributed_transfer</code> branch)</td>\n</tr>\n<tr>\n<td>Affinities</td>\n<td>Affinities are assigned only at startup through <code>prefix/affinity</code> services</td>\n<td>Affinity changes are sent as part of <code>SimulationStep</code>.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Initial distribution through performer round-robin</td>\n<td>Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>No subsequent distribution</td>\n<td>Subsequent distribution done according to the levels where performers currently are (<code>distributed_transfer</code> branch)</td>\n</tr>\n</tbody>\n</table>", "type": "rendered"}, "title": {"raw": "[Blueprint] Unify network and sync managers", "markup": "markdown", "html": "<p>[Blueprint] Unify network and sync managers</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* ~~fix the tests~~\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:2a6b17a01952%0D6c174a1dc8a0?from_pullrequest_id=261"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/261"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:2a6b17a01952%0D6c174a1dc8a0?from_pullrequest_id=261"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/261/statuses_page=1.json"}}, "title": "[Blueprint] Unify network and sync managers", "close_source_branch": true, "reviewers": [{"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 261, "destination": {"commit": {"hash": "6c174a1dc8a0", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6c174a1dc8a0.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6c174a1dc8a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "created_on": "2019-04-10T03:11:03.673468+00:00", "summary": {"raw": "Still a work in progress, opening for visibility and early feedback.\r\n\r\nBroken off the `distributed_transfer` branch.\r\n\r\nBuilds on top of:\r\n\r\n* ~~Pull request #262~~ merged\r\n\r\n## TODO\r\n\r\n* ~~fix the tests~~\r\n* ~~investigate why performance is much worse than current implementation~~ - performance is better at default [because](#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074) doesn't always step in sync.\r\n\r\n---\r\n\r\n# Motivation\r\n\r\nThere are several aspects of simulation which need to be kept in sync between primary and secondaries. \r\n\r\n1. Sim time\r\n1. Performer state\r\n1. Performer <-> secondary affinities\r\n\r\nThe current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. \r\n\r\n# Proposal\r\n\r\n. | Current | Proposed\r\n-- | -- | --\r\nSim time | Initiated from primary to secondaries through the `step` topic and secondaries report back the end of a step through the `stepAck` topic. | Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)\r\n. | Secondaries are also stepped by the `SimulationRunner` through the `Step` function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable. | Secondaries are no longer stepped by `SimulationRunner`, they're only stepped via the topic\r\n. | Not well defined what should happen if secondaries and primary are run for a different number of iterations. | Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until `Stop` is received.\r\nState |  Reported from secondaries to primary through the `state_update` topic, which must be kept in sync with the `step` topic | Send secondary state updates in the end of an iteration as part of `step_ack` and avoid one extra synchronization mechanism.\r\n. |  Primary doesn't report state to secondaries. | Primary will send state when a new performer is assigned to a secondary (`distributed_transfer` branch)\r\nAffinities | Affinities are assigned only at startup through `prefix/affinity` services  | Affinity changes are sent as part of `SimulationStep`.\r\n. | Initial distribution through performer round-robin | Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary. \r\n. | No subsequent distribution | Subsequent distribution done according to the levels where performers currently are (`distributed_transfer` branch)", "markup": "markdown", "html": "<p>Still a work in progress, opening for visibility and early feedback.</p>\n<p>Broken off the <code>distributed_transfer</code> branch.</p>\n<p>Builds on top of:</p>\n<ul>\n<li><del><a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/262/blueprint-add-performerlevels-component\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #262</a></del> merged</li>\n</ul>\n<h2 id=\"markdown-header-todo\">TODO</h2>\n<ul>\n<li><del>fix the tests</del></li>\n<li><del>investigate why performance is much worse than current implementation</del> - performance is better at default <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/261/blueprint-wip-unify-network-and-sync/diff#comment-98528074\" rel=\"nofollow\">because</a> doesn't always step in sync.</li>\n</ul>\n<hr />\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>There are several aspects of simulation which need to be kept in sync between primary and secondaries. </p>\n<ol>\n<li>Sim time</li>\n<li>Performer state</li>\n<li>Performer &lt;-&gt; secondary affinities</li>\n</ol>\n<p>The current implementation synchronizes each of them separately, state is only going one-way when it should be going 2 ways, and affinities are only set at startup when they should be able to change during simulation. </p>\n<h1 id=\"markdown-header-proposal\">Proposal</h1>\n<table>\n<thead>\n<tr>\n<th>.</th>\n<th>Current</th>\n<th>Proposed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sim time</td>\n<td>Initiated from primary to secondaries through the <code>step</code> topic and secondaries report back the end of a step through the <code>stepAck</code> topic.</td>\n<td>Keep topics, use new messages (also experimented with services, but topics seemed more appropriate because we will soon have the GUI as a non-blocking secondary)</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Secondaries are also stepped by the <code>SimulationRunner</code> through the <code>Step</code> function. This means that the 2 different \"step sources\" must be kept in sync through a condition variable.</td>\n<td>Secondaries are no longer stepped by <code>SimulationRunner</code>, they're only stepped via the topic</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Not well defined what should happen if secondaries and primary are run for a different number of iterations.</td>\n<td>Secondaries ignore things like total iteration number and update rate. They just do what the primary asks until <code>Stop</code> is received.</td>\n</tr>\n<tr>\n<td>State</td>\n<td>Reported from secondaries to primary through the <code>state_update</code> topic, which must be kept in sync with the <code>step</code> topic</td>\n<td>Send secondary state updates in the end of an iteration as part of <code>step_ack</code> and avoid one extra synchronization mechanism.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Primary doesn't report state to secondaries.</td>\n<td>Primary will send state when a new performer is assigned to a secondary (<code>distributed_transfer</code> branch)</td>\n</tr>\n<tr>\n<td>Affinities</td>\n<td>Affinities are assigned only at startup through <code>prefix/affinity</code> services</td>\n<td>Affinity changes are sent as part of <code>SimulationStep</code>.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>Initial distribution through performer round-robin</td>\n<td>Initial distribution through levels round-robin, so all performers in the same level end up in the same secondary.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>No subsequent distribution</td>\n<td>Subsequent distribution done according to the levels where performers currently are (<code>distributed_transfer</code> branch)</td>\n</tr>\n</tbody>\n</table>", "type": "rendered"}, "source": {"commit": {"hash": "a299eefe4a39", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/a299eefe4a39.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/a299eefe4a39"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "unify_managers"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-04-15T16:30:32.616423+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-18T15:23:40.989509+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-16T01:23:50.716524+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-04-18T15:23:53.009294+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "2a6b17a01952", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2a6b17a01952.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2a6b17a01952"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}