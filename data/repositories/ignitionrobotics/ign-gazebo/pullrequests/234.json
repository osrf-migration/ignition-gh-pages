{"rendered": {"description": {"raw": "Depends on ~~sdformat add\\_battery branch \\(~~[~~this PR~~](https://bitbucket.org/osrf/sdformat/pull-requests/513/add-battery-tag-under-link/diff)~~\\) for new type sdf::Battery, and~~ ign-common battery\\_plugin branch \\([this PR](#!/ignitionrobotics/ign-common/pull-requests/186/battery-additions-for-plugin-port/diff)\\) for additions to `common::Battery`.\r\n\r\nThis PR ports LinearBatteryPlugin from Gazebo classic:\r\n\r\n[LinearBatteryPlugin.hh](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.hh?at=default&fileviewer=file-view-default)  \r\n[LinearBatteryPlugin.cc](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.cc?at=default)  \r\n[LinearBatteryConsumerPlugin.hh](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.hh?at=default&fileviewer=file-view-default)  \r\n[LinearBatteryConsumerPlugin.cc](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.cc?at=default)\r\n\r\n~~Integration tests are added for single link consuming single battery, multiple links consuming the same battery, single link consuming multiple batteries, multiple links consuming multiple batteries, and links of the same name under different models consuming different batteries.~~\r\n\r\nTwo batteries are currently considered the same if they ~~their <link><battery name=\"foo\"><voltage>12.0</voltage></battery></link> tags in the SDF~~ have the same name and same initial voltage \\(checked by `common::Battery::operator==()` \\).\r\n\r\n## Testing\r\n\r\n```\r\n# Keyboard control\r\ncd ign-gazebo/examples/standalone/keyboard/build\r\n./keyboard ../keyboard.sdf\r\n# Diff drive, left vehicle has battery. Once voltage drops < 0, it stops.\r\ncd ign-gazebo/examples/worlds\r\nign-gazebo -f linear_battery_demo.sdf -v 4 -r\r\n```\r\n\r\n~~This file has t~~w~~o <link>s consuming the same battery.~~ **Update:** This file has a battery `<plugin>` under a `<model>`. Power load is set to 500 to drain quickly for testing effect. `<battery>` tag has been removed entirely from SDF. Battery is specified only in `<plugin>` and nowhere else.\r\n\r\nWhen battery drains, joint forces in the model are set to 0. Currently diff\\_drive does not use JointForceCmd, so joint velocities are also set to 0, to make diff\\_drive work.\r\n\r\nThere's some debug printouts right now to see the voltage and number of consumers \\( `PowerLoads().size()` \\) - these are printed in the plugin and will be removed, but for now, there's no other way of telling how much is left in the battery.\r\n\r\nSample output:\r\n\r\n```\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.282894\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.231637\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.168065\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.0787631\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: -0.116923\r\n[Wrn] [LinearBatteryPlugin.cc:289] Model vehicle_blue out of battery.\r\n```\r\n\r\n~~At component creation time of component::Battery, whose Data\\(\\) is a common::BatteryPtr , SdfEntityCreator.cc checks that if two links are to consume the same battery, instead of creating a new common::Battery, it points to the existing common::BatteryPtr in an existing components::Battery. A new Entity and a new Component will still be created, just the common::BatteryPtr is the same, so that it can have multiple consumers and drain accordingly.~~ **Update:** Batteries, including `common::Battery` and `components::BatterySoC` \\(state of charge\\), are created and updated in `LinearBatteryPlugin.cc`. For simplicity of turning off joints when battery drains completely, only one consumer \\(a model\\) per battery \\(a model plugin\\) is currently supported. As a result, this plugin currently also serves as the consumer - consumer needs access to `common::Battery` object to `AddConsumer()` and `SetPowerLoad()`.\r\n\r\n~~More SDF files for testing are in test/worlds used for integration tests, for comparing drainage between single and multiple links/batteries.~~", "markup": "markdown", "html": "<p>Depends on <del>sdformat add_battery branch (</del><a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/513/add-battery-tag-under-link/diff\" rel=\"nofollow\"><del>this PR</del></a><del>) for new type sdf::Battery, and</del> ign-common battery_plugin branch (<a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/186/battery-additions-for-plugin-port/diff\" rel=\"nofollow\">this PR</a>) for additions to <code>common::Battery</code>.</p>\n<p>This PR ports LinearBatteryPlugin from Gazebo classic:</p>\n<p><a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.hh?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">LinearBatteryPlugin.hh</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.cc?at=default\" rel=\"nofollow\">LinearBatteryPlugin.cc</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.hh?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">LinearBatteryConsumerPlugin.hh</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.cc?at=default\" rel=\"nofollow\">LinearBatteryConsumerPlugin.cc</a></p>\n<p><del>Integration tests are added for single link consuming single battery, multiple links consuming the same battery, single link consuming multiple batteries, multiple links consuming multiple batteries, and links of the same name under different models consuming different batteries.</del></p>\n<p>Two batteries are currently considered the same if they <del>their &lt;link&gt;&lt;battery name=\"foo\"&gt;&lt;voltage&gt;12.0&lt;/voltage&gt;&lt;/battery&gt;&lt;/link&gt; tags in the SDF</del> have the same name and same initial voltage (checked by <code>common::Battery::operator==()</code> ).</p>\n<h2 id=\"markdown-header-testing\">Testing</h2>\n<div class=\"codehilite\"><pre><span></span># Keyboard control\ncd ign-gazebo/examples/standalone/keyboard/build\n./keyboard ../keyboard.sdf\n# Diff drive, left vehicle has battery. Once voltage drops &lt; 0, it stops.\ncd ign-gazebo/examples/worlds\nign-gazebo -f linear_battery_demo.sdf -v 4 -r\n</pre></div>\n\n\n<p><del>This file has t</del>w<del>o &lt;link&gt;s consuming the same battery.</del> <strong>Update:</strong> This file has a battery <code>&lt;plugin&gt;</code> under a <code>&lt;model&gt;</code>. Power load is set to 500 to drain quickly for testing effect. <code>&lt;battery&gt;</code> tag has been removed entirely from SDF. Battery is specified only in <code>&lt;plugin&gt;</code> and nowhere else.</p>\n<p>When battery drains, joint forces in the model are set to 0. Currently diff_drive does not use JointForceCmd, so joint velocities are also set to 0, to make diff_drive work.</p>\n<p>There's some debug printouts right now to see the voltage and number of consumers ( <code>PowerLoads().size()</code> ) - these are printed in the plugin and will be removed, but for now, there's no other way of telling how much is left in the battery.</p>\n<p>Sample output:</p>\n<div class=\"codehilite\"><pre><span></span>[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.282894\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.231637\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.168065\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.0787631\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: -0.116923\n[Wrn] [LinearBatteryPlugin.cc:289] Model vehicle_blue out of battery.\n</pre></div>\n\n\n<p><del>At component creation time of component::Battery, whose Data() is a common::BatteryPtr , SdfEntityCreator.cc checks that if two links are to consume the same battery, instead of creating a new common::Battery, it points to the existing common::BatteryPtr in an existing components::Battery. A new Entity and a new Component will still be created, just the common::BatteryPtr is the same, so that it can have multiple consumers and drain accordingly.</del> <strong>Update:</strong> Batteries, including <code>common::Battery</code> and <code>components::BatterySoC</code> (state of charge), are created and updated in <code>LinearBatteryPlugin.cc</code>. For simplicity of turning off joints when battery drains completely, only one consumer (a model) per battery (a model plugin) is currently supported. As a result, this plugin currently also serves as the consumer - consumer needs access to <code>common::Battery</code> object to <code>AddConsumer()</code> and <code>SetPowerLoad()</code>.</p>\n<p><del>More SDF files for testing are in test/worlds used for integration tests, for comparing drainage between single and multiple links/batteries.</del></p>", "type": "rendered"}, "title": {"raw": "[Acropolis] Port battery plugin from Gazebo classic", "markup": "markdown", "html": "<p>[Acropolis] Port battery plugin from Gazebo classic</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Depends on ~~sdformat add\\_battery branch \\(~~[~~this PR~~](https://bitbucket.org/osrf/sdformat/pull-requests/513/add-battery-tag-under-link/diff)~~\\) for new type sdf::Battery, and~~ ign-common battery\\_plugin branch \\([this PR](#!/ignitionrobotics/ign-common/pull-requests/186/battery-additions-for-plugin-port/diff)\\) for additions to `common::Battery`.\r\n\r\nThis PR ports LinearBatteryPlugin from Gazebo classic:\r\n\r\n[LinearBatteryPlugin.hh](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.hh?at=default&fileviewer=file-view-default)  \r\n[LinearBatteryPlugin.cc](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.cc?at=default)  \r\n[LinearBatteryConsumerPlugin.hh](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.hh?at=default&fileviewer=file-view-default)  \r\n[LinearBatteryConsumerPlugin.cc](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.cc?at=default)\r\n\r\n~~Integration tests are added for single link consuming single battery, multiple links consuming the same battery, single link consuming multiple batteries, multiple links consuming multiple batteries, and links of the same name under different models consuming different batteries.~~\r\n\r\nTwo batteries are currently considered the same if they ~~their <link><battery name=\"foo\"><voltage>12.0</voltage></battery></link> tags in the SDF~~ have the same name and same initial voltage \\(checked by `common::Battery::operator==()` \\).\r\n\r\n## Testing\r\n\r\n```\r\n# Keyboard control\r\ncd ign-gazebo/examples/standalone/keyboard/build\r\n./keyboard ../keyboard.sdf\r\n# Diff drive, left vehicle has battery. Once voltage drops < 0, it stops.\r\ncd ign-gazebo/examples/worlds\r\nign-gazebo -f linear_battery_demo.sdf -v 4 -r\r\n```\r\n\r\n~~This file has t~~w~~o <link>s consuming the same battery.~~ **Update:** This file has a battery `<plugin>` under a `<model>`. Power load is set to 500 to drain quickly for testing effect. `<battery>` tag has been removed entirely from SDF. Battery is specified only in `<plugin>` and nowhere else.\r\n\r\nWhen battery drains, joint forces in the model are set to 0. Currently diff\\_drive does not use JointForceCmd, so joint velocities are also set to 0, to make diff\\_drive work.\r\n\r\nThere's some debug printouts right now to see the voltage and number of consumers \\( `PowerLoads().size()` \\) - these are printed in the plugin and will be removed, but for now, there's no other way of telling how much is left in the battery.\r\n\r\nSample output:\r\n\r\n```\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.282894\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.231637\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.168065\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.0787631\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: -0.116923\r\n[Wrn] [LinearBatteryPlugin.cc:289] Model vehicle_blue out of battery.\r\n```\r\n\r\n~~At component creation time of component::Battery, whose Data\\(\\) is a common::BatteryPtr , SdfEntityCreator.cc checks that if two links are to consume the same battery, instead of creating a new common::Battery, it points to the existing common::BatteryPtr in an existing components::Battery. A new Entity and a new Component will still be created, just the common::BatteryPtr is the same, so that it can have multiple consumers and drain accordingly.~~ **Update:** Batteries, including `common::Battery` and `components::BatterySoC` \\(state of charge\\), are created and updated in `LinearBatteryPlugin.cc`. For simplicity of turning off joints when battery drains completely, only one consumer \\(a model\\) per battery \\(a model plugin\\) is currently supported. As a result, this plugin currently also serves as the consumer - consumer needs access to `common::Battery` object to `AddConsumer()` and `SetPowerLoad()`.\r\n\r\n~~More SDF files for testing are in test/worlds used for integration tests, for comparing drainage between single and multiple links/batteries.~~", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/234/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:fe55442346a3%0Dfdbd5652f9cb?from_pullrequest_id=234"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/234/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/234.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/234/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/234/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/234"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/234/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:fe55442346a3%0Dfdbd5652f9cb?from_pullrequest_id=234"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/234/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/234/statuses_page=1.json"}}, "title": "[Acropolis] Port battery plugin from Gazebo classic", "close_source_branch": true, "reviewers": [{"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}], "id": 234, "destination": {"commit": {"hash": "fdbd5652f9cb", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/fdbd5652f9cb.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/fdbd5652f9cb"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "created_on": "2019-03-23T06:07:57.754478+00:00", "summary": {"raw": "Depends on ~~sdformat add\\_battery branch \\(~~[~~this PR~~](https://bitbucket.org/osrf/sdformat/pull-requests/513/add-battery-tag-under-link/diff)~~\\) for new type sdf::Battery, and~~ ign-common battery\\_plugin branch \\([this PR](#!/ignitionrobotics/ign-common/pull-requests/186/battery-additions-for-plugin-port/diff)\\) for additions to `common::Battery`.\r\n\r\nThis PR ports LinearBatteryPlugin from Gazebo classic:\r\n\r\n[LinearBatteryPlugin.hh](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.hh?at=default&fileviewer=file-view-default)  \r\n[LinearBatteryPlugin.cc](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.cc?at=default)  \r\n[LinearBatteryConsumerPlugin.hh](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.hh?at=default&fileviewer=file-view-default)  \r\n[LinearBatteryConsumerPlugin.cc](https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.cc?at=default)\r\n\r\n~~Integration tests are added for single link consuming single battery, multiple links consuming the same battery, single link consuming multiple batteries, multiple links consuming multiple batteries, and links of the same name under different models consuming different batteries.~~\r\n\r\nTwo batteries are currently considered the same if they ~~their <link><battery name=\"foo\"><voltage>12.0</voltage></battery></link> tags in the SDF~~ have the same name and same initial voltage \\(checked by `common::Battery::operator==()` \\).\r\n\r\n## Testing\r\n\r\n```\r\n# Keyboard control\r\ncd ign-gazebo/examples/standalone/keyboard/build\r\n./keyboard ../keyboard.sdf\r\n# Diff drive, left vehicle has battery. Once voltage drops < 0, it stops.\r\ncd ign-gazebo/examples/worlds\r\nign-gazebo -f linear_battery_demo.sdf -v 4 -r\r\n```\r\n\r\n~~This file has t~~w~~o <link>s consuming the same battery.~~ **Update:** This file has a battery `<plugin>` under a `<model>`. Power load is set to 500 to drain quickly for testing effect. `<battery>` tag has been removed entirely from SDF. Battery is specified only in `<plugin>` and nowhere else.\r\n\r\nWhen battery drains, joint forces in the model are set to 0. Currently diff\\_drive does not use JointForceCmd, so joint velocities are also set to 0, to make diff\\_drive work.\r\n\r\nThere's some debug printouts right now to see the voltage and number of consumers \\( `PowerLoads().size()` \\) - these are printed in the plugin and will be removed, but for now, there's no other way of telling how much is left in the battery.\r\n\r\nSample output:\r\n\r\n```\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.282894\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.231637\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.168065\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.0787631\r\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\r\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: -0.116923\r\n[Wrn] [LinearBatteryPlugin.cc:289] Model vehicle_blue out of battery.\r\n```\r\n\r\n~~At component creation time of component::Battery, whose Data\\(\\) is a common::BatteryPtr , SdfEntityCreator.cc checks that if two links are to consume the same battery, instead of creating a new common::Battery, it points to the existing common::BatteryPtr in an existing components::Battery. A new Entity and a new Component will still be created, just the common::BatteryPtr is the same, so that it can have multiple consumers and drain accordingly.~~ **Update:** Batteries, including `common::Battery` and `components::BatterySoC` \\(state of charge\\), are created and updated in `LinearBatteryPlugin.cc`. For simplicity of turning off joints when battery drains completely, only one consumer \\(a model\\) per battery \\(a model plugin\\) is currently supported. As a result, this plugin currently also serves as the consumer - consumer needs access to `common::Battery` object to `AddConsumer()` and `SetPowerLoad()`.\r\n\r\n~~More SDF files for testing are in test/worlds used for integration tests, for comparing drainage between single and multiple links/batteries.~~", "markup": "markdown", "html": "<p>Depends on <del>sdformat add_battery branch (</del><a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/513/add-battery-tag-under-link/diff\" rel=\"nofollow\"><del>this PR</del></a><del>) for new type sdf::Battery, and</del> ign-common battery_plugin branch (<a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-common/pull-requests/186/battery-additions-for-plugin-port/diff\" rel=\"nofollow\">this PR</a>) for additions to <code>common::Battery</code>.</p>\n<p>This PR ports LinearBatteryPlugin from Gazebo classic:</p>\n<p><a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.hh?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">LinearBatteryPlugin.hh</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryPlugin.cc?at=default\" rel=\"nofollow\">LinearBatteryPlugin.cc</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.hh?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">LinearBatteryConsumerPlugin.hh</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/42d7d20dbf5075936965afaef40c8e3d08124b88/plugins/LinearBatteryConsumerPlugin.cc?at=default\" rel=\"nofollow\">LinearBatteryConsumerPlugin.cc</a></p>\n<p><del>Integration tests are added for single link consuming single battery, multiple links consuming the same battery, single link consuming multiple batteries, multiple links consuming multiple batteries, and links of the same name under different models consuming different batteries.</del></p>\n<p>Two batteries are currently considered the same if they <del>their &lt;link&gt;&lt;battery name=\"foo\"&gt;&lt;voltage&gt;12.0&lt;/voltage&gt;&lt;/battery&gt;&lt;/link&gt; tags in the SDF</del> have the same name and same initial voltage (checked by <code>common::Battery::operator==()</code> ).</p>\n<h2 id=\"markdown-header-testing\">Testing</h2>\n<div class=\"codehilite\"><pre><span></span># Keyboard control\ncd ign-gazebo/examples/standalone/keyboard/build\n./keyboard ../keyboard.sdf\n# Diff drive, left vehicle has battery. Once voltage drops &lt; 0, it stops.\ncd ign-gazebo/examples/worlds\nign-gazebo -f linear_battery_demo.sdf -v 4 -r\n</pre></div>\n\n\n<p><del>This file has t</del>w<del>o &lt;link&gt;s consuming the same battery.</del> <strong>Update:</strong> This file has a battery <code>&lt;plugin&gt;</code> under a <code>&lt;model&gt;</code>. Power load is set to 500 to drain quickly for testing effect. <code>&lt;battery&gt;</code> tag has been removed entirely from SDF. Battery is specified only in <code>&lt;plugin&gt;</code> and nowhere else.</p>\n<p>When battery drains, joint forces in the model are set to 0. Currently diff_drive does not use JointForceCmd, so joint velocities are also set to 0, to make diff_drive work.</p>\n<p>There's some debug printouts right now to see the voltage and number of consumers ( <code>PowerLoads().size()</code> ) - these are printed in the plugin and will be removed, but for now, there's no other way of telling how much is left in the battery.</p>\n<p>Sample output:</p>\n<div class=\"codehilite\"><pre><span></span>[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.282894\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.231637\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.168065\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: 0.0787631\n[Dbg] [LinearBatteryPlugin.cc:284] PowerLoads().size(): 1\n[Dbg] [LinearBatteryPlugin.cc:286] voltage: -0.116923\n[Wrn] [LinearBatteryPlugin.cc:289] Model vehicle_blue out of battery.\n</pre></div>\n\n\n<p><del>At component creation time of component::Battery, whose Data() is a common::BatteryPtr , SdfEntityCreator.cc checks that if two links are to consume the same battery, instead of creating a new common::Battery, it points to the existing common::BatteryPtr in an existing components::Battery. A new Entity and a new Component will still be created, just the common::BatteryPtr is the same, so that it can have multiple consumers and drain accordingly.</del> <strong>Update:</strong> Batteries, including <code>common::Battery</code> and <code>components::BatterySoC</code> (state of charge), are created and updated in <code>LinearBatteryPlugin.cc</code>. For simplicity of turning off joints when battery drains completely, only one consumer (a model) per battery (a model plugin) is currently supported. As a result, this plugin currently also serves as the consumer - consumer needs access to <code>common::Battery</code> object to <code>AddConsumer()</code> and <code>SetPowerLoad()</code>.</p>\n<p><del>More SDF files for testing are in test/worlds used for integration tests, for comparing drainage between single and multiple links/batteries.</del></p>", "type": "rendered"}, "source": {"commit": {"hash": "67d48258342a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/67d48258342a.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/67d48258342a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "battery_plugin"}}, "comment_count": 22, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-04-30T23:33:09.272416+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-01T00:02:11.134254+00:00", "type": "participant", "approved": false, "user": {"display_name": "Mabel Zhang", "uuid": "{4b0e38fb-bf50-45c0-a496-61147518b2bf}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D"}, "html": {"href": "https://bitbucket.org/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ceb5942c-6843-408c-8550-3ce4899d299b/4d48e5ea-cf28-4fa7-9715-8fc9e315d831/128"}}, "nickname": "mabelmzhang", "type": "user", "account_id": "557058:ceb5942c-6843-408c-8550-3ce4899d299b"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-23T01:10:00.859799+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-05-01T00:03:56.709812+00:00", "author": {"display_name": "Mabel Zhang", "uuid": "{4b0e38fb-bf50-45c0-a496-61147518b2bf}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D"}, "html": {"href": "https://bitbucket.org/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ceb5942c-6843-408c-8550-3ce4899d299b/4d48e5ea-cf28-4fa7-9715-8fc9e315d831/128"}}, "nickname": "mabelmzhang", "type": "user", "account_id": "557058:ceb5942c-6843-408c-8550-3ce4899d299b"}, "merge_commit": {"hash": "fe55442346a3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/fe55442346a3.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/fe55442346a3"}}}, "closed_by": {"display_name": "Mabel Zhang", "uuid": "{4b0e38fb-bf50-45c0-a496-61147518b2bf}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D"}, "html": {"href": "https://bitbucket.org/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ceb5942c-6843-408c-8550-3ce4899d299b/4d48e5ea-cf28-4fa7-9715-8fc9e315d831/128"}}, "nickname": "mabelmzhang", "type": "user", "account_id": "557058:ceb5942c-6843-408c-8550-3ce4899d299b"}}