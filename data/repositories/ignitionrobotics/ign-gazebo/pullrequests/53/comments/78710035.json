{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/53/comments/78710035.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:888c7dd82142..8f375f722b29?path=include%2Fignition%2Fgazebo%2FEntityComponentManager.hh"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/53/_/diff#comment-78710035"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 53, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/53.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/53"}}, "title": "View cache"}, "content": {"raw": "Isn't it redundant to pass the types both on the template, and as a set? This works for me:\n\n~~~\n--- a/include/ignition/gazebo/EntityComponentManager.hh Tue Oct 09 16:38:22 2018 -070\n0                                                                                    \n+++ b/include/ignition/gazebo/EntityComponentManager.hh Wed Oct 10 18:06:16 2018 -070\n0  \n@@ -652,20 +650,25 @@\n       /// \\param[in] _types The set of Component Types that define a view.\n       /// \\return A reference to the view.\n       private: template<typename ...ComponentTypeTs>\n-               View &FindView(const std::set<ComponentTypeId> &_types) const\n+               View &FindView(const std::set<ComponentTypeId> &/*_types*/) const\n       {\n+        // Create the component type set, which acts as a key into the view\n+        // map.\n+        auto types = std::set<ComponentTypeId>{\n+            this->ComponentType<ComponentTypeTs>()...};\n+\n          std::map<ComponentTypeKey, View>::iterator viewIter;\n         // View &view;\n \n         // Find the view. If the view doesn't exist, then create a new view.\n-        if (!this->FindView(_types, viewIter))\n+        if (!this->FindView(types, viewIter))\n         {\n           View view;\n           // Add all the entities that match the component types to the\n           // view.\n           for (const Entity &entity : this->Entities())\n           {\n-            if (this->EntityMatches(entity.Id(), _types))\n+            if (this->EntityMatches(entity.Id(), types))\n             {\n               view.AddEntity(entity.Id());\n \n@@ -676,7 +679,7 @@\n           }\n \n           // Store the view.\n-          return this->AddView(_types, std::move(view))->second;\n+          return this->AddView(types, std::move(view))->second;\n         }\n~~~", "markup": "markdown", "html": "<p>Isn't it redundant to pass the types both on the template, and as a set? This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">--- a/include/ignition/gazebo/EntityComponentManager.hh Tue Oct 09 16:38:22 2018 -070</span>\n0                                                                                    \n<span class=\"gi\">+++ b/include/ignition/gazebo/EntityComponentManager.hh Wed Oct 10 18:06:16 2018 -070</span>\n0  \n<span class=\"gu\">@@ -652,20 +650,25 @@</span>\n       /// \\param[in] _types The set of Component Types that define a view.\n       /// \\return A reference to the view.\n       private: template&lt;typename ...ComponentTypeTs&gt;\n<span class=\"gd\">-               View &amp;FindView(const std::set&lt;ComponentTypeId&gt; &amp;_types) const</span>\n<span class=\"gi\">+               View &amp;FindView(const std::set&lt;ComponentTypeId&gt; &amp;/*_types*/) const</span>\n       {\n<span class=\"gi\">+        // Create the component type set, which acts as a key into the view</span>\n<span class=\"gi\">+        // map.</span>\n<span class=\"gi\">+        auto types = std::set&lt;ComponentTypeId&gt;{</span>\n<span class=\"gi\">+            this-&gt;ComponentType&lt;ComponentTypeTs&gt;()...};</span>\n<span class=\"gi\">+</span>\n          std::map&lt;ComponentTypeKey, View&gt;::iterator viewIter;\n         // View &amp;view;\n\n         // Find the view. If the view doesn&#39;t exist, then create a new view.\n<span class=\"gd\">-        if (!this-&gt;FindView(_types, viewIter))</span>\n<span class=\"gi\">+        if (!this-&gt;FindView(types, viewIter))</span>\n         {\n           View view;\n           // Add all the entities that match the component types to the\n           // view.\n           for (const Entity &amp;entity : this-&gt;Entities())\n           {\n<span class=\"gd\">-            if (this-&gt;EntityMatches(entity.Id(), _types))</span>\n<span class=\"gi\">+            if (this-&gt;EntityMatches(entity.Id(), types))</span>\n             {\n               view.AddEntity(entity.Id());\n\n<span class=\"gu\">@@ -676,7 +679,7 @@</span>\n           }\n\n           // Store the view.\n<span class=\"gd\">-          return this-&gt;AddView(_types, std::move(view))-&gt;second;</span>\n<span class=\"gi\">+          return this-&gt;AddView(types, std::move(view))-&gt;second;</span>\n         }\n</pre></div>", "type": "rendered"}, "created_on": "2018-10-11T01:09:16.995583+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 655, "from": null, "outdated": true, "path": "include/ignition/gazebo/EntityComponentManager.hh"}, "updated_on": "2018-10-11T01:09:17.003748+00:00", "type": "pullrequest_comment", "id": 78710035}