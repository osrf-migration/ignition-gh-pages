{"rendered": {"reason": {"raw": "I'm closing this PR for the time being. We'll revisit this when we start running systems in parallel.", "markup": "markdown", "html": "<p>I'm closing this PR for the time being. We'll revisit this when we start running systems in parallel.</p>", "type": "rendered"}, "description": {"raw": "This PR refactors the `EntityComponentManager` class to be more thread safe, or at the very least, start a discussion on how we intend to avoid race condition between systems running in parallel. It came to my attention as I was working on pull request #92 that only entity erasures are currently thread safe. \r\n\r\nIn this refactor, all public member functions that access the entity database variables directly or indirectly must lock the `entityMutex`. All private member functions assume that whoever called them already has a lock. This requires\r\nthat we break up some member functions so that all they do is lock a mutex and call a private implementation. It is also critical that member functions avoid calling other public member functions because they might try to lock the mutex again. eg. call `EntityMatchesImpl` instead of `EntityMatches` inside a member function.\r\n\r\nI have added a test using the compiler's thread sanitizer. It needs a cmake arg `-DENABLE_TSAN=ON` to be enabled.\r\n\r\nThis PR does not handle the race condition on accessing and mutating components through `Each` and `Component` calls. I'm working on a separate PR for that.", "markup": "markdown", "html": "<p>This PR refactors the <code>EntityComponentManager</code> class to be more thread safe, or at the very least, start a discussion on how we intend to avoid race condition between systems running in parallel. It came to my attention as I was working on <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/92/eachnew-and-eacherased\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #92</a> that only entity erasures are currently thread safe. </p>\n<p>In this refactor, all public member functions that access the entity database variables directly or indirectly must lock the <code>entityMutex</code>. All private member functions assume that whoever called them already has a lock. This requires\nthat we break up some member functions so that all they do is lock a mutex and call a private implementation. It is also critical that member functions avoid calling other public member functions because they might try to lock the mutex again. eg. call <code>EntityMatchesImpl</code> instead of <code>EntityMatches</code> inside a member function.</p>\n<p>I have added a test using the compiler's thread sanitizer. It needs a cmake arg <code>-DENABLE_TSAN=ON</code> to be enabled.</p>\n<p>This PR does not handle the race condition on accessing and mutating components through <code>Each</code> and <code>Component</code> calls. I'm working on a separate PR for that.</p>", "type": "rendered"}, "title": {"raw": "Refactor EntityComponentManager to be more thread safe", "markup": "markdown", "html": "<p>Refactor EntityComponentManager to be more thread safe</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR refactors the `EntityComponentManager` class to be more thread safe, or at the very least, start a discussion on how we intend to avoid race condition between systems running in parallel. It came to my attention as I was working on pull request #92 that only entity erasures are currently thread safe. \r\n\r\nIn this refactor, all public member functions that access the entity database variables directly or indirectly must lock the `entityMutex`. All private member functions assume that whoever called them already has a lock. This requires\r\nthat we break up some member functions so that all they do is lock a mutex and call a private implementation. It is also critical that member functions avoid calling other public member functions because they might try to lock the mutex again. eg. call `EntityMatchesImpl` instead of `EntityMatches` inside a member function.\r\n\r\nI have added a test using the compiler's thread sanitizer. It needs a cmake arg `-DENABLE_TSAN=ON` to be enabled.\r\n\r\nThis PR does not handle the race condition on accessing and mutating components through `Each` and `Component` calls. I'm working on a separate PR for that.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/97/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:eb7f16ecc552%0D6264cbd5eccc?from_pullrequest_id=97"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/97/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/97.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/97/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/97/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/97"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/97/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:eb7f16ecc552%0D6264cbd5eccc?from_pullrequest_id=97"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/97/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/97/statuses_page=1.json"}}, "title": "Refactor EntityComponentManager to be more thread safe", "close_source_branch": false, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 97, "destination": {"commit": {"hash": "6264cbd5eccc", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/6264cbd5eccc.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/6264cbd5eccc"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "created_on": "2018-12-13T16:49:57.716902+00:00", "summary": {"raw": "This PR refactors the `EntityComponentManager` class to be more thread safe, or at the very least, start a discussion on how we intend to avoid race condition between systems running in parallel. It came to my attention as I was working on pull request #92 that only entity erasures are currently thread safe. \r\n\r\nIn this refactor, all public member functions that access the entity database variables directly or indirectly must lock the `entityMutex`. All private member functions assume that whoever called them already has a lock. This requires\r\nthat we break up some member functions so that all they do is lock a mutex and call a private implementation. It is also critical that member functions avoid calling other public member functions because they might try to lock the mutex again. eg. call `EntityMatchesImpl` instead of `EntityMatches` inside a member function.\r\n\r\nI have added a test using the compiler's thread sanitizer. It needs a cmake arg `-DENABLE_TSAN=ON` to be enabled.\r\n\r\nThis PR does not handle the race condition on accessing and mutating components through `Each` and `Component` calls. I'm working on a separate PR for that.", "markup": "markdown", "html": "<p>This PR refactors the <code>EntityComponentManager</code> class to be more thread safe, or at the very least, start a discussion on how we intend to avoid race condition between systems running in parallel. It came to my attention as I was working on <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/92/eachnew-and-eacherased\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #92</a> that only entity erasures are currently thread safe. </p>\n<p>In this refactor, all public member functions that access the entity database variables directly or indirectly must lock the <code>entityMutex</code>. All private member functions assume that whoever called them already has a lock. This requires\nthat we break up some member functions so that all they do is lock a mutex and call a private implementation. It is also critical that member functions avoid calling other public member functions because they might try to lock the mutex again. eg. call <code>EntityMatchesImpl</code> instead of <code>EntityMatches</code> inside a member function.</p>\n<p>I have added a test using the compiler's thread sanitizer. It needs a cmake arg <code>-DENABLE_TSAN=ON</code> to be enabled.</p>\n<p>This PR does not handle the race condition on accessing and mutating components through <code>Each</code> and <code>Component</code> calls. I'm working on a separate PR for that.</p>", "type": "rendered"}, "source": {"commit": {"hash": "eb7f16ecc552", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/eb7f16ecc552.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/eb7f16ecc552"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ecm_race_cond"}}, "comment_count": 8, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2018-12-13T22:12:43.858612+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "REVIEWER", "participated_on": "2019-01-02T18:57:12.797163+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2018-12-13T22:01:34.739220+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2018-12-13T21:57:05.690883+00:00", "type": "participant", "approved": false, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}], "reason": "I'm closing this PR for the time being. We'll revisit this when we start running systems in parallel.", "updated_on": "2019-01-22T23:42:41.063198+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": null, "closed_by": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}