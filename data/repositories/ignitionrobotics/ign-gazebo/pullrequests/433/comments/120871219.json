{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/433/comments/120871219.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/433/_/diff#comment-120871219"}}, "parent": {"id": 120870827, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/433/comments/120870827.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/433/_/diff#comment-120870827"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 433, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/433.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/433"}}, "title": "Handle relative URIs"}, "content": {"raw": "What about using it for non-macOS platforms? It seems there are already special precompiler exceptions for Windows, so maybe those special exceptions can use `std::filesystem` inside of them instead of hardcoding things like `C:\\`.", "markup": "markdown", "html": "<p>What about using it for non-macOS platforms? It seems there are already special precompiler exceptions for Windows, so maybe those special exceptions can use <code>std::filesystem</code> inside of them instead of hardcoding things like <code>C:\\</code>.</p>", "type": "rendered"}, "created_on": "2019-10-16T04:19:51.595113+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-10-16T04:19:51.602552+00:00", "type": "pullrequest_comment", "id": 120871219}