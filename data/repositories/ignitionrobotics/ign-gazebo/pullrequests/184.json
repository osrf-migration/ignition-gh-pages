{"rendered": {"description": {"raw": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "markup": "markdown", "html": "<p>This PR allows serializing / deserializing the entire state of the ECM.</p>\n<ul>\n<li>Add operators (<code>&lt;&lt;</code> / <code>&gt;&gt;</code>) to ECM - I recommend taking a look at the documentation and tests.</li>\n<li>Add protobuf messages to conveniently store the ECM's serialized state</li>\n</ul>\n<hr />\n<h2 id=\"markdown-header-update\">Update</h2>\n<p>The initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:</p>\n<ul>\n<li>Logging to a file and playing back</li>\n<li>Syncing distributed simulation</li>\n<li>Skipping to keyframes during simulation (used by undo / redo)</li>\n</ul>\n<p>Depending on the use case, you may want to:</p>\n<ul>\n<li>Get the whole state or only some entities / components</li>\n<li>Override the whole absolute state or update the state incrementally</li>\n<li>Choose which components to store based on <code>typeId</code> (efficient) or <code>typeName</code> (user-friendly)</li>\n</ul>\n<p>So I'm thinking of removing the operators from the ECM and implementing the following API instead:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">/// \\brief Get a message with the serialized state of the given entities and components.</span>\n<span class=\"c1\">/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all</span>\n<span class=\"c1\">/// components.</span>\n<span class=\"c1\">/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.</span>\n<span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span> <span class=\"n\">State</span><span class=\"p\">(</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">ComponentTypeId</span><span class=\"o\">&gt;</span> <span class=\"n\">_types</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">ComponentTypeId</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span> <span class=\"n\">_entities</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n<span class=\"c1\">/// \\brief Get a message with the serialized state of the given entities and components.</span>\n<span class=\"c1\">/// \\param[in] _types Registered type names of components to be serialized. Leave empty to</span>\n<span class=\"c1\">/// get all components.</span>\n<span class=\"c1\">/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.</span>\n<span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span> <span class=\"n\">State</span><span class=\"p\">(</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">_types</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span> <span class=\"n\">_entities</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n<span class=\"c1\">/// \\brief Get a message with the serialized state of the given entities and components, only if</span>\n<span class=\"c1\">/// they&#39;re being changed (or created / removed) in this iteration.</span>\n<span class=\"c1\">/// Future work, ECM needs to track changed components first</span>\n<span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span> <span class=\"n\">ChangedState</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">/</span><span class=\"n\">ComponentTypeId</span><span class=\"o\">&gt;</span> <span class=\"n\">_types</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span> <span class=\"n\">_entities</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n<span class=\"c1\">/// \\brief Set the absolute state of the ECM from a serialized message. </span>\n<span class=\"c1\">/// Entities / components that are in the new state but not in the old one will be created.</span>\n<span class=\"c1\">/// Entities / components that are marked as removed will be removed, but they won&#39;t be </span>\n<span class=\"c1\">/// removed if they&#39;re not present in the state.</span>\n<span class=\"kt\">void</span> <span class=\"nf\">SetState</span><span class=\"p\">(</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>I'll also add a <code>boolean removed</code> field to <code>SerializedEntity</code> and <code>SerializedComponent</code> messages.</p>\n<p>Let me know what you think of this plan, @carromj</p>\n<hr />\n<h2 id=\"markdown-header-update-2\">Update 2</h2>\n<p>Implemented the changes above, this is ready for review again.</p>\n<hr />\n<h2 id=\"markdown-header-update-3\">Update 3</h2>\n<p>This PR now requires this <code>ign-msgs</code> PR: <a href=\"#!/ignitionrobotics/ign-msgs/pull-requests/99/\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/pull-requests/99/</a></p>", "type": "rendered"}, "title": {"raw": "[Acropolis] Complete state streaming", "markup": "markdown", "html": "<p>[Acropolis] Complete state streaming</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:eeaefdf4d859%0D63ea9c445cf2?from_pullrequest_id=184"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/184"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:eeaefdf4d859%0D63ea9c445cf2?from_pullrequest_id=184"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/184/statuses_page=1.json"}}, "title": "[Acropolis] Complete state streaming", "close_source_branch": true, "reviewers": [{"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 184, "destination": {"commit": {"hash": "63ea9c445cf2", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/63ea9c445cf2.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/63ea9c445cf2"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo1"}}, "created_on": "2019-02-26T20:42:23.657959+00:00", "summary": {"raw": "This PR allows serializing / deserializing the entire state of the ECM.\r\n\r\n* Add operators (`<<` / `>>`) to ECM - I recommend taking a look at the documentation and tests.\r\n* Add protobuf messages to conveniently store the ECM's serialized state\r\n\r\n---\r\n\r\n## Update\r\n\r\nThe initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:\r\n\r\n* Logging to a file and playing back\r\n* Syncing distributed simulation\r\n* Skipping to keyframes during simulation (used by undo / redo)\r\n\r\nDepending on the use case, you may want to:\r\n\r\n* Get the whole state or only some entities / components\r\n* Override the whole absolute state or update the state incrementally\r\n* Choose which components to store based on `typeId` (efficient) or `typeName` (user-friendly)\r\n\r\nSo I'm thinking of removing the operators from the ECM and implementing the following API instead:\r\n\r\n```c++\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all\r\n/// components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<ComponentTypeId> _types = std::vector<ComponentTypeId>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components.\r\n/// \\param[in] _types Registered type names of components to be serialized. Leave empty to\r\n/// get all components.\r\n/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.\r\nmsgs::SerializedState State(\r\n    std::vector<std::string> _types = std::vector<std::string>(),\r\n    std::vector<Entity> _entities = std::vector<Entity>) const;\r\n\r\n/// \\brief Get a message with the serialized state of the given entities and components, only if\r\n/// they're being changed (or created / removed) in this iteration.\r\n/// Future work, ECM needs to track changed components first\r\nmsgs::SerializedState ChangedState(std::vector<std::string/ComponentTypeId> _types, std::vector<Entity> _entities) const;\r\n\r\n/// \\brief Set the absolute state of the ECM from a serialized message. \r\n/// Entities / components that are in the new state but not in the old one will be created.\r\n/// Entities / components that are marked as removed will be removed, but they won't be \r\n/// removed if they're not present in the state.\r\nvoid SetState(msgs::SerializedState);\r\n```\r\n\r\nI'll also add a `boolean removed` field to `SerializedEntity` and `SerializedComponent` messages.\r\n\r\nLet me know what you think of this plan, @carromj\r\n\r\n---\r\n\r\n## Update 2\r\n\r\nImplemented the changes above, this is ready for review again.\r\n\r\n\r\n---\r\n\r\n## Update 3\r\n\r\nThis PR now requires this `ign-msgs` PR: #!/ignitionrobotics/ign-msgs/pull-requests/99/", "markup": "markdown", "html": "<p>This PR allows serializing / deserializing the entire state of the ECM.</p>\n<ul>\n<li>Add operators (<code>&lt;&lt;</code> / <code>&gt;&gt;</code>) to ECM - I recommend taking a look at the documentation and tests.</li>\n<li>Add protobuf messages to conveniently store the ECM's serialized state</li>\n</ul>\n<hr />\n<h2 id=\"markdown-header-update\">Update</h2>\n<p>The initial approach in this PR is not flexible enough, so I'm working on an updated API which should be able to cover several use cases:</p>\n<ul>\n<li>Logging to a file and playing back</li>\n<li>Syncing distributed simulation</li>\n<li>Skipping to keyframes during simulation (used by undo / redo)</li>\n</ul>\n<p>Depending on the use case, you may want to:</p>\n<ul>\n<li>Get the whole state or only some entities / components</li>\n<li>Override the whole absolute state or update the state incrementally</li>\n<li>Choose which components to store based on <code>typeId</code> (efficient) or <code>typeName</code> (user-friendly)</li>\n</ul>\n<p>So I'm thinking of removing the operators from the ECM and implementing the following API instead:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">/// \\brief Get a message with the serialized state of the given entities and components.</span>\n<span class=\"c1\">/// \\param[in] _types Type ID of components to be serialized. Leave empty to get all</span>\n<span class=\"c1\">/// components.</span>\n<span class=\"c1\">/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.</span>\n<span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span> <span class=\"n\">State</span><span class=\"p\">(</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">ComponentTypeId</span><span class=\"o\">&gt;</span> <span class=\"n\">_types</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">ComponentTypeId</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span> <span class=\"n\">_entities</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n<span class=\"c1\">/// \\brief Get a message with the serialized state of the given entities and components.</span>\n<span class=\"c1\">/// \\param[in] _types Registered type names of components to be serialized. Leave empty to</span>\n<span class=\"c1\">/// get all components.</span>\n<span class=\"c1\">/// \\param[in] _entities Entities to be serialized. Leave empty to get all entities.</span>\n<span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span> <span class=\"n\">State</span><span class=\"p\">(</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">_types</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span> <span class=\"n\">_entities</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n<span class=\"c1\">/// \\brief Get a message with the serialized state of the given entities and components, only if</span>\n<span class=\"c1\">/// they&#39;re being changed (or created / removed) in this iteration.</span>\n<span class=\"c1\">/// Future work, ECM needs to track changed components first</span>\n<span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span> <span class=\"n\">ChangedState</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">/</span><span class=\"n\">ComponentTypeId</span><span class=\"o\">&gt;</span> <span class=\"n\">_types</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span> <span class=\"n\">_entities</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n\n<span class=\"c1\">/// \\brief Set the absolute state of the ECM from a serialized message. </span>\n<span class=\"c1\">/// Entities / components that are in the new state but not in the old one will be created.</span>\n<span class=\"c1\">/// Entities / components that are marked as removed will be removed, but they won&#39;t be </span>\n<span class=\"c1\">/// removed if they&#39;re not present in the state.</span>\n<span class=\"kt\">void</span> <span class=\"nf\">SetState</span><span class=\"p\">(</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">SerializedState</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>I'll also add a <code>boolean removed</code> field to <code>SerializedEntity</code> and <code>SerializedComponent</code> messages.</p>\n<p>Let me know what you think of this plan, @carromj</p>\n<hr />\n<h2 id=\"markdown-header-update-2\">Update 2</h2>\n<p>Implemented the changes above, this is ready for review again.</p>\n<hr />\n<h2 id=\"markdown-header-update-3\">Update 3</h2>\n<p>This PR now requires this <code>ign-msgs</code> PR: <a href=\"#!/ignitionrobotics/ign-msgs/pull-requests/99/\" rel=\"nofollow\" class=\"ap-connect-link\">#!/ignitionrobotics/ign-msgs/pull-requests/99/</a></p>", "type": "rendered"}, "source": {"commit": {"hash": "f8caf94bad00", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/f8caf94bad00.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/f8caf94bad00"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "streaming"}}, "comment_count": 16, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-03-13T14:06:03.193428+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-03-15T19:48:20.088118+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2019-03-15T17:50:20.106777+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-03-15T20:51:45.620174+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "eeaefdf4d859", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/eeaefdf4d859.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/eeaefdf4d859"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}