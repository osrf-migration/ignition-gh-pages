{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97167993.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:8923d3604c46..4501108c710d?path=src%2Fsystems%2Fjoint_controller%2FJointController.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97167993"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "So are you doing this because calling `GetElement` on the original SDF will return the default value instead of null? This sounds like something we need to fix in SDFormat :confounded: ", "markup": "markdown", "html": "<p>So are you doing this because calling <code>GetElement</code> on the original SDF will return the default value instead of null? This sounds like something we need to fix in SDFormat <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f616.png\" alt=\"\ud83d\ude16\" title=\":confounded:\" data-emoji-short-name=\":confounded:\" /> </p>", "type": "rendered"}, "created_on": "2019-04-01T22:22:21.020135+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 81, "from": null, "path": "src/systems/joint_controller/JointController.cc"}, "updated_on": "2019-04-01T22:22:21.036017+00:00", "type": "pullrequest_comment", "id": 97167993}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97168179.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:8923d3604c46..4501108c710d?path=src%2Fsystems%2Fjoint_controller%2FJointController.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97168179"}}, "parent": {"id": 97167993, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97167993.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97167993"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "No, I'm doing this because `_sdf` is const and `GetElement` is non const. I'll add a comment. It would be nice to have a `GetElement` that was const.", "markup": "markdown", "html": "<p>No, I'm doing this because <code>_sdf</code> is const and <code>GetElement</code> is non const. I'll add a comment. It would be nice to have a <code>GetElement</code> that was const.</p>", "type": "rendered"}, "created_on": "2019-04-01T22:25:03.642275+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 81, "from": null, "path": "src/systems/joint_controller/JointController.cc"}, "updated_on": "2019-04-01T22:25:03.656461+00:00", "type": "pullrequest_comment", "id": 97168179}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97168725.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:8923d3604c46..4501108c710d?path=src%2Fsystems%2Fjoint_controller%2FJointController.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97168725"}}, "parent": {"id": 97168179, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97168179.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97168179"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "Oh right! I think you can do `this->dataPtr->jointName = _sdf->Get<std::string>(\"joint_name\");`, it works for both ~~arguments~~ **attributes** and elements.", "markup": "markdown", "html": "<p>Oh right! I think you can do <code>this-&gt;dataPtr-&gt;jointName = _sdf-&gt;Get&lt;std::string&gt;(\"joint_name\");</code>, it works for both <del>arguments</del> <strong>attributes</strong> and elements.</p>", "type": "rendered"}, "created_on": "2019-04-01T22:33:12.588685+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 81, "from": null, "path": "src/systems/joint_controller/JointController.cc"}, "updated_on": "2019-04-01T22:37:18.979785+00:00", "type": "pullrequest_comment", "id": 97168725}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97169514.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:8923d3604c46..4501108c710d?path=test%2Fintegration%2Fjoint_controller_system.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97169514"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "Having such sleeps in tests is always tricky for slower machines. Ideally we'd sleep in a loop and have a timeout and an early exit condition, but I can't think of an easy exit condition in this case. Maybe we can leave it as is and return to it if it becomes flaky.", "markup": "markdown", "html": "<p>Having such sleeps in tests is always tricky for slower machines. Ideally we'd sleep in a loop and have a timeout and an early exit condition, but I can't think of an easy exit condition in this case. Maybe we can leave it as is and return to it if it becomes flaky.</p>", "type": "rendered"}, "created_on": "2019-04-01T22:45:40.705712+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 167, "from": null, "path": "test/integration/joint_controller_system.cc"}, "updated_on": "2019-04-01T22:45:40.717668+00:00", "type": "pullrequest_comment", "id": 97169514}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97170963.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97170963"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "I have some small suggestions on pull request #250", "markup": "markdown", "html": "<p>I have some small suggestions on <a href=\"#!/ignitionrobotics/ign-gazebo/pull-requests/250/tweaks-to-joint-controller\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #250</a></p>", "type": "rendered"}, "created_on": "2019-04-01T23:07:22.059036+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-01T23:07:22.067955+00:00", "type": "pullrequest_comment", "id": 97170963}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97325057.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97325057"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "I am still catching up with the architecture of the new Ignition Gazebo, but I am bit confused by the naming of this PR.   \nIn classic Gazebo, the JointController was a class used to simulate a low-level PID controller acting at the joint level \\(see [http://gazebosim.org/tutorials?tut=set\\_velocity#SetJointVelocityUsingPIDcontrollers](http://gazebosim.org/tutorials?tut=set_velocity#SetJointVelocityUsingPIDcontrollers)\\), that was clearly separate from the API to bypass the physics engine integrator and directly set the   \nvelocity of the joint. If I understand correctly, instead  in the new Ignition Gazebo the JointController is a system that permits to directly set the   \njoint velocity \\(similar to Classic Gazebo  `Joint::SetVelocity()` API\\). There is any specific reason for this?", "markup": "markdown", "html": "<p>I am still catching up with the architecture of the new Ignition Gazebo, but I am bit confused by the naming of this PR. <br />\nIn classic Gazebo, the JointController was a class used to simulate a low-level PID controller acting at the joint level (see <a data-is-external-link=\"true\" href=\"http://gazebosim.org/tutorials?tut=set_velocity#SetJointVelocityUsingPIDcontrollers\" rel=\"nofollow\">http://gazebosim.org/tutorials?tut=set_velocity#SetJointVelocityUsingPIDcontrollers</a>), that was clearly separate from the API to bypass the physics engine integrator and directly set the <br />\nvelocity of the joint. If I understand correctly, instead  in the new Ignition Gazebo the JointController is a system that permits to directly set the <br />\njoint velocity (similar to Classic Gazebo  <code>Joint::SetVelocity()</code> API). There is any specific reason for this?</p>", "type": "rendered"}, "created_on": "2019-04-02T19:16:13.138103+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": "2019-04-02T19:16:13.236787+00:00", "type": "pullrequest_comment", "id": 97325057}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97331230.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97331230"}}, "parent": {"id": 97325057, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97325057.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97325057"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "> the JointController is a system that permits to directly set the joint velocity (similar to Classic Gazebo Joint::SetVelocity() API)\n\nCorrect, this is just passing the velocity directly to `ignition::physics::Joint::SetVelocity`. It was added mainly for convenience when testing other features, but we may be adding other controllers like PID in the future.\n", "markup": "markdown", "html": "<blockquote>\n<p>the JointController is a system that permits to directly set the joint velocity (similar to Classic Gazebo Joint::SetVelocity() API)</p>\n</blockquote>\n<p>Correct, this is just passing the velocity directly to <code>ignition::physics::Joint::SetVelocity</code>. It was added mainly for convenience when testing other features, but we may be adding other controllers like PID in the future.</p>", "type": "rendered"}, "created_on": "2019-04-02T20:12:46.011717+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-02T20:12:46.022896+00:00", "type": "pullrequest_comment", "id": 97331230}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97345683.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97345683"}}, "parent": {"id": 97331230, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97331230.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97331230"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "Ack, let\u2019s hope no user of Classic Gazebo gets too confused by this, thanks for the answer.\n\nBy the way, are you open to external PRs for implementing the Joint level PID?", "markup": "markdown", "html": "<p>Ack, let\u2019s hope no user of Classic Gazebo gets too confused by this, thanks for the answer.</p>\n<p>By the way, are you open to external PRs for implementing the Joint level PID?</p>", "type": "rendered"}, "created_on": "2019-04-02T22:57:16.543632+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": "2019-04-02T22:57:16.606694+00:00", "type": "pullrequest_comment", "id": 97345683}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97347713.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97347713"}}, "parent": {"id": 97345683, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97345683.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97345683"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "> let\u2019s hope no user of Classic Gazebo gets too confused by this, thanks for the answer.\n\n+1, we can definitely revisit if it becomes a common source of confusion\n\n> are you open to external PRs for implementing the Joint level PID?\n\n+100 :smile: ", "markup": "markdown", "html": "<blockquote>\n<p>let\u2019s hope no user of Classic Gazebo gets too confused by this, thanks for the answer.</p>\n</blockquote>\n<p>+1, we can definitely revisit if it becomes a common source of confusion</p>\n<blockquote>\n<p>are you open to external PRs for implementing the Joint level PID?</p>\n</blockquote>\n<p>+100 <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f604.png\" alt=\"\ud83d\ude04\" title=\":smile:\" data-emoji-short-name=\":smile:\" /> </p>", "type": "rendered"}, "created_on": "2019-04-02T23:31:43.163300+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-02T23:31:43.171568+00:00", "type": "pullrequest_comment", "id": 97347713}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97355857.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97355857"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "Sorry for not catching this sooner, but directly modifying the state of the physics like this could lead to some really bad results depending on what physics engine is running under the hood, and depending on what the circumstances are.\n\nIt would be much better to decouple joint commands from joint state. Rather than modifying a `JointVelocity` component, we should modifying something like a `VelocityCommand` component, and then let the underlying physics engine incorporate that into its constraint solving. That does mean adding a velocity command feature to ignition-physics, but that shouldn\u2019t be a big deal.\n\nWe can probably get away with this for now in simple situations, but this should definitely be revisited as soon as feasible.", "markup": "markdown", "html": "<p>Sorry for not catching this sooner, but directly modifying the state of the physics like this could lead to some really bad results depending on what physics engine is running under the hood, and depending on what the circumstances are.</p>\n<p>It would be much better to decouple joint commands from joint state. Rather than modifying a <code>JointVelocity</code> component, we should modifying something like a <code>VelocityCommand</code> component, and then let the underlying physics engine incorporate that into its constraint solving. That does mean adding a velocity command feature to ignition-physics, but that shouldn\u2019t be a big deal.</p>\n<p>We can probably get away with this for now in simple situations, but this should definitely be revisited as soon as feasible.</p>", "type": "rendered"}, "created_on": "2019-04-03T02:34:18.253234+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-04-03T02:34:18.261129+00:00", "type": "pullrequest_comment", "id": 97355857}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97356665.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97356665"}}, "parent": {"id": 97355857, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97355857.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97355857"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "Yup that all makes sense. Note though that this is not the first use of `SetVelocity`, we're also using it on the diff-drive plugin.\n\nI think it's not necessarily bad to offer this option to users, as long as they know what the limitations are and we also offer other more appropriate options.\n\nI was actually just thinking that we may want to rename this plugin to something like `JointSetVelocity` so it doesn't get confused with a proper controller as @traversaro mentioned.", "markup": "markdown", "html": "<p>Yup that all makes sense. Note though that this is not the first use of <code>SetVelocity</code>, we're also using it on the diff-drive plugin.</p>\n<p>I think it's not necessarily bad to offer this option to users, as long as they know what the limitations are and we also offer other more appropriate options.</p>\n<p>I was actually just thinking that we may want to rename this plugin to something like <code>JointSetVelocity</code> so it doesn't get confused with a proper controller as @traversaro mentioned.</p>", "type": "rendered"}, "created_on": "2019-04-03T02:52:44.731422+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-03T02:52:44.751455+00:00", "type": "pullrequest_comment", "id": 97356665}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97360514.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97360514"}}, "parent": {"id": 97356665, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97356665.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97356665"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "> I think it's not necessarily bad to offer this option to users\n\nIt\u2019s not wrong to be able to set velocity directly when initializing a scenario, but it\u2019s very bad practice to directly modify state as a means of controlling a simulation, and we shouldn\u2019t be engaging in that practice, full-stop. This kind of practice is how pernicious bugs trickle their way into simulation code and lead to explosions and instability.\n\nIt\u2019s fine for now as we\u2019re testing and developing the overall ECS framework, but this means of controlling robots should not go into production code anywhere, and it shouldn\u2019t be used by anyone as a reference for how to control a robot.\n\n> I was actually just thinking that we may want to rename this plugin to something like `JointSetVelocity`\n\nThe ability to set velocity directly should only be presented in the context of initializing a simulation. I would not object to a plugin that directly sets the velocity in order to programmatically initialize the physics, but any instance of setting velocity outside of that context should not be encouraged.", "markup": "markdown", "html": "<blockquote>\n<p>I think it's not necessarily bad to offer this option to users</p>\n</blockquote>\n<p>It\u2019s not wrong to be able to set velocity directly when initializing a scenario, but it\u2019s very bad practice to directly modify state as a means of controlling a simulation, and we shouldn\u2019t be engaging in that practice, full-stop. This kind of practice is how pernicious bugs trickle their way into simulation code and lead to explosions and instability.</p>\n<p>It\u2019s fine for now as we\u2019re testing and developing the overall ECS framework, but this means of controlling robots should not go into production code anywhere, and it shouldn\u2019t be used by anyone as a reference for how to control a robot.</p>\n<blockquote>\n<p>I was actually just thinking that we may want to rename this plugin to something like <code>JointSetVelocity</code></p>\n</blockquote>\n<p>The ability to set velocity directly should only be presented in the context of initializing a simulation. I would not object to a plugin that directly sets the velocity in order to programmatically initialize the physics, but any instance of setting velocity outside of that context should not be encouraged.</p>", "type": "rendered"}, "created_on": "2019-04-03T04:11:29.841945+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-04-03T04:11:29.850600+00:00", "type": "pullrequest_comment", "id": 97360514}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97452562.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97452562"}}, "parent": {"id": 97360514, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97360514.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97360514"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "In the past few weeks I experimented with ECM and a proper joint controller with associated PIDs \\([IgnitionRobot.cpp](https://github.com/robotology/gym-ignition/blob/master/ignition/src/IgnitionRobot.cpp), [Physics.cpp](https://github.com/diegoferigo/ign-gazebo/blob/30d81368548637c4ae59a5c4b1abe44a9153a86c/src/systems/physics/Physics.cc) \\). My 2c on this is that a valid solution is something similar to what @{557058:67759e29-d1df-465f-868d-047738e36fc9} suggested. It would require a new `JointForce` component that will be set by either the position or velocity PID of a proper joint controller and processed by the physics plugin.\n\nHowever, similarly to what I reported in [Issue#20](#!/ignitionrobotics/ign-gazebo/issues/20/current-performance-of-ignition-robotic), it is not clear how to handle some implementation detail. For example how to handle this joint force component in the iteration that follows the one that generated the force \\(it can be a PID, a manual external force, or something else\\). In absence of a new reference, should the physics plugin remove the component? Given the ECM architecture, it appears to be not an efficient solution. The alternative would be to keep the component but zero its force value, even though I don't know if this can cause strange behaviors. A similar reasoning applies to similar `JointVelocity` and `JointPosition` components that operate directly on the state. Right now, as far as I see, the supported `JointVelocity` component is [never reset nor removed](#!/ignitionrobotics/ign-gazebo/src/73e2f82e5c6f358a348146006f36e7d412782537/src/systems/physics/Physics.cc#lines-586). Though, this is not the proper place where to discuss it.\n\n> it\u2019s very bad practice to directly modify state as a means of controlling a simulation, and we shouldn\u2019t be engaging in that practice\n\nI totally agree on this and it should be properly documented, but I would like that the possibility to do it would not disappear. For example, right now, to my knowledge there\u2019s no way to reset a simulation, and resetting the state is the closest alternative \\(under the assumption of fixed-base robots\\).", "markup": "markdown", "html": "<p>In the past few weeks I experimented with ECM and a proper joint controller with associated PIDs (<a data-is-external-link=\"true\" href=\"https://github.com/robotology/gym-ignition/blob/master/ignition/src/IgnitionRobot.cpp\" rel=\"nofollow\">IgnitionRobot.cpp</a>, <a data-is-external-link=\"true\" href=\"https://github.com/diegoferigo/ign-gazebo/blob/30d81368548637c4ae59a5c4b1abe44a9153a86c/src/systems/physics/Physics.cc\" rel=\"nofollow\">Physics.cpp</a> ). My 2c on this is that a valid solution is something similar to what <span class=\"ap-mention\" data-atlassian-id=\"557058:67759e29-d1df-465f-868d-047738e36fc9\">@Michael Grey</span> suggested. It would require a new <code>JointForce</code> component that will be set by either the position or velocity PID of a proper joint controller and processed by the physics plugin.</p>\n<p>However, similarly to what I reported in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/issues/20/current-performance-of-ignition-robotic\" rel=\"nofollow\">Issue#20</a>, it is not clear how to handle some implementation detail. For example how to handle this joint force component in the iteration that follows the one that generated the force (it can be a PID, a manual external force, or something else). In absence of a new reference, should the physics plugin remove the component? Given the ECM architecture, it appears to be not an efficient solution. The alternative would be to keep the component but zero its force value, even though I don't know if this can cause strange behaviors. A similar reasoning applies to similar <code>JointVelocity</code> and <code>JointPosition</code> components that operate directly on the state. Right now, as far as I see, the supported <code>JointVelocity</code> component is <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/73e2f82e5c6f358a348146006f36e7d412782537/src/systems/physics/Physics.cc#lines-586\" rel=\"nofollow\">never reset nor removed</a>. Though, this is not the proper place where to discuss it.</p>\n<blockquote>\n<p>it\u2019s very bad practice to directly modify state as a means of controlling a simulation, and we shouldn\u2019t be engaging in that practice</p>\n</blockquote>\n<p>I totally agree on this and it should be properly documented, but I would like that the possibility to do it would not disappear. For example, right now, to my knowledge there\u2019s no way to reset a simulation, and resetting the state is the closest alternative (under the assumption of fixed-base robots).</p>", "type": "rendered"}, "created_on": "2019-04-03T14:14:11.987339+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": "2019-04-03T14:16:07.032331+00:00", "type": "pullrequest_comment", "id": 97452562}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97483039.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97483039"}}, "parent": {"id": 97452562, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97452562.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97452562"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "Thank you for all the input. I think the key here is that we shouldn't encourage joints to be controlled by setting velocity, which we all agree on. But I maintain that we shouldn't be setting the precedent of not exposing physics features because we think users may misuse them. Especially considering that the ROS interface will be done mainly through the transport bridge, and we want to expose as much functionality to ROS / Ignition transport users as possible. I can also see other legitimate use cases for `Joint::SetVelocity`, such as situations when you want to \"animate\" a joint. We just need to make sure everything is well documented and we're not putting bad examples out there - so we should plan to update the diff-drive plugin asap.\n\nThat said, I'm leaning towards renaming the current plugin to something like `JointSetVelocity` to make it clear that we're not encouraging that to be used as a controller. Looking forward to controller contributions from @traversaro and @dgferigo :slight_smile: ", "markup": "markdown", "html": "<p>Thank you for all the input. I think the key here is that we shouldn't encourage joints to be controlled by setting velocity, which we all agree on. But I maintain that we shouldn't be setting the precedent of not exposing physics features because we think users may misuse them. Especially considering that the ROS interface will be done mainly through the transport bridge, and we want to expose as much functionality to ROS / Ignition transport users as possible. I can also see other legitimate use cases for <code>Joint::SetVelocity</code>, such as situations when you want to \"animate\" a joint. We just need to make sure everything is well documented and we're not putting bad examples out there - so we should plan to update the diff-drive plugin asap.</p>\n<p>That said, I'm leaning towards renaming the current plugin to something like <code>JointSetVelocity</code> to make it clear that we're not encouraging that to be used as a controller. Looking forward to controller contributions from @traversaro and @dgferigo <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f642.png\" alt=\"\ud83d\ude42\" title=\":slight_smile:\" data-emoji-short-name=\":slight_smile:\" /> </p>", "type": "rendered"}, "created_on": "2019-04-03T17:10:19.162386+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-03T17:10:19.265217+00:00", "type": "pullrequest_comment", "id": 97483039}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97483875.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97483875"}}, "parent": {"id": 97452562, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97452562.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97452562"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "To @dgferigo 's more specific points:\n\n> It would require a new JointForce component that will be set by either the position or velocity PID of a proper joint controller and processed by the physics plugin.\n\n+1\n\n> how to handle this joint force component in the iteration that follows the one that generated the force... should the physics plugin remove the component? ... The alternative would be to keep the component but zero its force value\n\nThose are very good points. We're still coming up with the strategy for updating systems in parallel and how to handle multiple systems changing (or adding to) the same component during the same iteration.", "markup": "markdown", "html": "<p>To @dgferigo 's more specific points:</p>\n<blockquote>\n<p>It would require a new JointForce component that will be set by either the position or velocity PID of a proper joint controller and processed by the physics plugin.</p>\n</blockquote>\n<p>+1</p>\n<blockquote>\n<p>how to handle this joint force component in the iteration that follows the one that generated the force... should the physics plugin remove the component? ... The alternative would be to keep the component but zero its force value</p>\n</blockquote>\n<p>Those are very good points. We're still coming up with the strategy for updating systems in parallel and how to handle multiple systems changing (or adding to) the same component during the same iteration.</p>", "type": "rendered"}, "created_on": "2019-04-03T17:17:46.383133+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-03T17:17:46.404500+00:00", "type": "pullrequest_comment", "id": 97483875}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97490837.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97490837"}}, "parent": {"id": 97483875, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97483875.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97483875"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "Thanks for the feedback @chapulina \n\n> We're still coming up with the strategy for updating systems in parallel and how to handle multiple systems changing \\(or adding to\\) the same component during the same iteration.\n\nThis is something that came in my mind while I was writing the previous comment. Beyond your observation, I still find confusing to understand the order of execution of the systems. A naive approach could be following the order of their declaration in the sdf  file. But what about the plugins that have been added through APIs \\(ServerConfig\\)? I had this situation recently and if I recall, the sdf plugins have the precedence over ServerConfig, but I should double check it. However, this is not really what users might want. Considering only the physic plugin, which in this view has a very high priority \\(declared in the sdf, in its top section\\), I would expect its `UpdatePhysics` to be called after the callbacks of all other systems before its `Step` \\(in order to get all the components that system might have addeed in the ECM\\), and its `UpdatedSim` to be called before the callbacks of other systems \\(in order to update the values of the components right after the physic integration, that are probably consumed by other systems\\). Should the physic system be a special system? These are all examples of design choices \\(and, beyond yours, there are also other ones\\) that still have to be properly sorted out.", "markup": "markdown", "html": "<p>Thanks for the feedback @chapulina </p>\n<blockquote>\n<p>We're still coming up with the strategy for updating systems in parallel and how to handle multiple systems changing (or adding to) the same component during the same iteration.</p>\n</blockquote>\n<p>This is something that came in my mind while I was writing the previous comment. Beyond your observation, I still find confusing to understand the order of execution of the systems. A naive approach could be following the order of their declaration in the sdf  file. But what about the plugins that have been added through APIs (ServerConfig)? I had this situation recently and if I recall, the sdf plugins have the precedence over ServerConfig, but I should double check it. However, this is not really what users might want. Considering only the physic plugin, which in this view has a very high priority (declared in the sdf, in its top section), I would expect its <code>UpdatePhysics</code> to be called after the callbacks of all other systems before its <code>Step</code> (in order to get all the components that system might have addeed in the ECM), and its <code>UpdatedSim</code> to be called before the callbacks of other systems (in order to update the values of the components right after the physic integration, that are probably consumed by other systems). Should the physic system be a special system? These are all examples of design choices (and, beyond yours, there are also other ones) that still have to be properly sorted out.</p>", "type": "rendered"}, "created_on": "2019-04-03T18:14:56.754166+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": "2019-04-03T18:14:56.883677+00:00", "type": "pullrequest_comment", "id": 97490837}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97512928.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97512928"}}, "parent": {"id": 97490837, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97490837.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97490837"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "> I would expect its UpdatePhysics to be called after the callbacks of all other systems before its Step (in order to get all the components that system might have addeed in the ECM)\n\nThe current recommendation is that only physics (or things like log playback) should use the `Update` callback. All other systems should use the `PreUpdate` and `PostUpdate` callbacks according to whether they want to affect the current physics iteration or just read its final results.\n\n> I still find confusing to understand the order of execution of the systems\n\nRight now we don't guarantee the order of execution, we hope to improve this by Blueprint. The goal is to have all systems being updated in parallel, so they shouldn't depend on each-other's results within the same `[Pre/Post]Update` callback. Once all systems have run a callback, the ECM will resolve conflicts according to the systems' priorities. We're considering either:\n\n* declaring a priority for each system at runtime (much like CSS's z-index, so they would be a group integers that make sense when used together), or\n* each system declaring its dependencies on other systems, forming a dependency tree\n\n", "markup": "markdown", "html": "<blockquote>\n<p>I would expect its UpdatePhysics to be called after the callbacks of all other systems before its Step (in order to get all the components that system might have addeed in the ECM)</p>\n</blockquote>\n<p>The current recommendation is that only physics (or things like log playback) should use the <code>Update</code> callback. All other systems should use the <code>PreUpdate</code> and <code>PostUpdate</code> callbacks according to whether they want to affect the current physics iteration or just read its final results.</p>\n<blockquote>\n<p>I still find confusing to understand the order of execution of the systems</p>\n</blockquote>\n<p>Right now we don't guarantee the order of execution, we hope to improve this by Blueprint. The goal is to have all systems being updated in parallel, so they shouldn't depend on each-other's results within the same <code>[Pre/Post]Update</code> callback. Once all systems have run a callback, the ECM will resolve conflicts according to the systems' priorities. We're considering either:</p>\n<ul>\n<li>declaring a priority for each system at runtime (much like CSS's z-index, so they would be a group integers that make sense when used together), or</li>\n<li>each system declaring its dependencies on other systems, forming a dependency tree</li>\n</ul>", "type": "rendered"}, "created_on": "2019-04-03T21:44:41.014659+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2019-04-03T21:44:41.023542+00:00", "type": "pullrequest_comment", "id": 97512928}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97561199.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97561199"}}, "parent": {"id": 97512928, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97512928.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97512928"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "> The current recommendation is that only physics \\(or things like log playback\\) should use the `Update` callback. All other systems should use the `PreUpdate` and `PostUpdate` callbacks according to whether they want to affect the current physics iteration or just read its final results.\n\n\\+1\n\n> The goal is to have all systems being updated in parallel\n\nNice addition. I\u2019ll wait to see a draft of it. Thanks @chapulina for your replies :slight_smile: ", "markup": "markdown", "html": "<blockquote>\n<p>The current recommendation is that only physics (or things like log playback) should use the <code>Update</code> callback. All other systems should use the <code>PreUpdate</code> and <code>PostUpdate</code> callbacks according to whether they want to affect the current physics iteration or just read its final results.</p>\n</blockquote>\n<p>+1</p>\n<blockquote>\n<p>The goal is to have all systems being updated in parallel</p>\n</blockquote>\n<p>Nice addition. I\u2019ll wait to see a draft of it. Thanks @chapulina for your replies <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f642.png\" alt=\"\ud83d\ude42\" title=\":slight_smile:\" data-emoji-short-name=\":slight_smile:\" /> </p>", "type": "rendered"}, "created_on": "2019-04-04T08:28:18.289758+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": "2019-04-04T08:28:18.377589+00:00", "type": "pullrequest_comment", "id": 97561199}, {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97360498.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97360498"}}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2019-04-03T04:11:13.109480+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2019-04-03T04:11:27.673498+00:00", "type": "pullrequest_comment", "id": 97360498}], "page": 1, "size": 19}