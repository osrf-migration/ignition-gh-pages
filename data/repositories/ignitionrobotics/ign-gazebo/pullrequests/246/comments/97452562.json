{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97452562.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97452562"}}, "parent": {"id": 97360514, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246/comments/97360514.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246/_/diff#comment-97360514"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 246, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/246.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/246"}}, "title": "Add JointController system"}, "content": {"raw": "In the past few weeks I experimented with ECM and a proper joint controller with associated PIDs \\([IgnitionRobot.cpp](https://github.com/robotology/gym-ignition/blob/master/ignition/src/IgnitionRobot.cpp), [Physics.cpp](https://github.com/diegoferigo/ign-gazebo/blob/30d81368548637c4ae59a5c4b1abe44a9153a86c/src/systems/physics/Physics.cc) \\). My 2c on this is that a valid solution is something similar to what @{557058:67759e29-d1df-465f-868d-047738e36fc9} suggested. It would require a new `JointForce` component that will be set by either the position or velocity PID of a proper joint controller and processed by the physics plugin.\n\nHowever, similarly to what I reported in [Issue#20](#!/ignitionrobotics/ign-gazebo/issues/20/current-performance-of-ignition-robotic), it is not clear how to handle some implementation detail. For example how to handle this joint force component in the iteration that follows the one that generated the force \\(it can be a PID, a manual external force, or something else\\). In absence of a new reference, should the physics plugin remove the component? Given the ECM architecture, it appears to be not an efficient solution. The alternative would be to keep the component but zero its force value, even though I don't know if this can cause strange behaviors. A similar reasoning applies to similar `JointVelocity` and `JointPosition` components that operate directly on the state. Right now, as far as I see, the supported `JointVelocity` component is [never reset nor removed](#!/ignitionrobotics/ign-gazebo/src/73e2f82e5c6f358a348146006f36e7d412782537/src/systems/physics/Physics.cc#lines-586). Though, this is not the proper place where to discuss it.\n\n> it\u2019s very bad practice to directly modify state as a means of controlling a simulation, and we shouldn\u2019t be engaging in that practice\n\nI totally agree on this and it should be properly documented, but I would like that the possibility to do it would not disappear. For example, right now, to my knowledge there\u2019s no way to reset a simulation, and resetting the state is the closest alternative \\(under the assumption of fixed-base robots\\).", "markup": "markdown", "html": "<p>In the past few weeks I experimented with ECM and a proper joint controller with associated PIDs (<a data-is-external-link=\"true\" href=\"https://github.com/robotology/gym-ignition/blob/master/ignition/src/IgnitionRobot.cpp\" rel=\"nofollow\">IgnitionRobot.cpp</a>, <a data-is-external-link=\"true\" href=\"https://github.com/diegoferigo/ign-gazebo/blob/30d81368548637c4ae59a5c4b1abe44a9153a86c/src/systems/physics/Physics.cc\" rel=\"nofollow\">Physics.cpp</a> ). My 2c on this is that a valid solution is something similar to what <span class=\"ap-mention\" data-atlassian-id=\"557058:67759e29-d1df-465f-868d-047738e36fc9\">@Michael Grey</span> suggested. It would require a new <code>JointForce</code> component that will be set by either the position or velocity PID of a proper joint controller and processed by the physics plugin.</p>\n<p>However, similarly to what I reported in <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/issues/20/current-performance-of-ignition-robotic\" rel=\"nofollow\">Issue#20</a>, it is not clear how to handle some implementation detail. For example how to handle this joint force component in the iteration that follows the one that generated the force (it can be a PID, a manual external force, or something else). In absence of a new reference, should the physics plugin remove the component? Given the ECM architecture, it appears to be not an efficient solution. The alternative would be to keep the component but zero its force value, even though I don't know if this can cause strange behaviors. A similar reasoning applies to similar <code>JointVelocity</code> and <code>JointPosition</code> components that operate directly on the state. Right now, as far as I see, the supported <code>JointVelocity</code> component is <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-gazebo/src/73e2f82e5c6f358a348146006f36e7d412782537/src/systems/physics/Physics.cc#lines-586\" rel=\"nofollow\">never reset nor removed</a>. Though, this is not the proper place where to discuss it.</p>\n<blockquote>\n<p>it\u2019s very bad practice to directly modify state as a means of controlling a simulation, and we shouldn\u2019t be engaging in that practice</p>\n</blockquote>\n<p>I totally agree on this and it should be properly documented, but I would like that the possibility to do it would not disappear. For example, right now, to my knowledge there\u2019s no way to reset a simulation, and resetting the state is the closest alternative (under the assumption of fixed-base robots).</p>", "type": "rendered"}, "created_on": "2019-04-03T14:14:11.987339+00:00", "user": {"display_name": "Diego Ferigo", "uuid": "{994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D"}, "html": {"href": "https://bitbucket.org/%7B994b27a5-7d6d-42b2-8aa7-2ea82fbe7bf6%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:054df869-5cda-48f2-8b4e-81a61c133346/130cd3bf-aa0a-4355-bec2-c90f195acc4c/128"}}, "nickname": "dgferigo", "type": "user", "account_id": "557058:054df869-5cda-48f2-8b4e-81a61c133346"}, "updated_on": "2019-04-03T14:16:07.032331+00:00", "type": "pullrequest_comment", "id": 97452562}