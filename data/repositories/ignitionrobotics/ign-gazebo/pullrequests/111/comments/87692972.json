{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/111/comments/87692972.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:9acde13b89cb..ebf36aa50919?path=src%2FLevelManager.cc"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/111/_/diff#comment-87692972"}}, "parent": {"id": 87296509, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/111/comments/87296509.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/111/_/diff#comment-87296509"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/111.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/111"}}, "title": "[A-1] Levels"}, "content": {"raw": "My initial approach was to never erase entities. Instead I had a bool `RenderState` component that was set by the level manager. However, I noticed that just having a large number of entities in the `EntityComponentManager` caused the RTF to go down significantly. I can look into moving the entities somewhere else so they don't participate in calls to `Each*`. \nSo then we would have three states of an entity: \"active\", \"inactive\" and \"erased\". If we go ahead with this idea:\n\n* ** ign-gui/ign-rendering**: When entities are \"inactive\", should they be destroyed or hidden (detached from the parent visual) in ign-gui/Scene3D? If they are only hidden, wouldn't we have a memory problem as the simulation progresses and loads more resources into the rendering engine? \n* **ign-physics**: I guess if the physics engine supports disabling entities, \"inactive\" would mean disable. Otherwise, we would remove the entity from the physics engine for both \"inactive\" and \"erased\". There might still be two scenarios here: \n1. The physics engine supports ref counting, so if an entity is \"inactive\", we would remove it from the engine but keep a reference  so that the memory isn't cleaned up. \n2. The physics engine does not support ref counting, so for both \"inactive\" and \"erased\", we would remove the entity and leave it to the physics engine to clean up memory as it chooses. If the entity becomes \"active\" again, a new corresponding entity may have to created inside the physics engine. \nDoes that sound right?", "markup": "markdown", "html": "<p>My initial approach was to never erase entities. Instead I had a bool <code>RenderState</code> component that was set by the level manager. However, I noticed that just having a large number of entities in the <code>EntityComponentManager</code> caused the RTF to go down significantly. I can look into moving the entities somewhere else so they don't participate in calls to <code>Each*</code>. \nSo then we would have three states of an entity: \"active\", \"inactive\" and \"erased\". If we go ahead with this idea:</p>\n<ul>\n<li><strong> ign-gui/ign-rendering</strong>: When entities are \"inactive\", should they be destroyed or hidden (detached from the parent visual) in ign-gui/Scene3D? If they are only hidden, wouldn't we have a memory problem as the simulation progresses and loads more resources into the rendering engine? </li>\n<li><strong>ign-physics</strong>: I guess if the physics engine supports disabling entities, \"inactive\" would mean disable. Otherwise, we would remove the entity from the physics engine for both \"inactive\" and \"erased\". There might still be two scenarios here: \n1. The physics engine supports ref counting, so if an entity is \"inactive\", we would remove it from the engine but keep a reference  so that the memory isn't cleaned up. \n2. The physics engine does not support ref counting, so for both \"inactive\" and \"erased\", we would remove the entity and leave it to the physics engine to clean up memory as it chooses. If the entity becomes \"active\" again, a new corresponding entity may have to created inside the physics engine. \nDoes that sound right?</li>\n</ul>", "type": "rendered"}, "created_on": "2019-01-10T17:23:48.387967+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 444, "from": null, "outdated": true, "path": "src/LevelManager.cc"}, "updated_on": "2019-01-10T17:23:48.399023+00:00", "type": "pullrequest_comment", "id": 87692972}