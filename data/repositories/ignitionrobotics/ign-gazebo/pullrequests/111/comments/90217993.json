{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/111/comments/90217993.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:8e06e3847568..06efe3b5ad0f?path=src%2FLevelManager.hh"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/111/_/diff#comment-90217993"}}, "parent": {"id": 90206788, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/111/comments/90206788.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/111/_/diff#comment-90206788"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 111, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/111.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/111"}}, "title": "[A-1] Levels"}, "content": {"raw": "My issue is that this class depends on the pointer being valid throughout the life of this class. The pointer is assumed to be valid, whereas a shared_ptr guarantees that the pointer will be valid.\n\nHow do you feel about ensuring that only the simulation runner can create a level manager, and leave this as a raw pointer? You could make the constructor a private friend to the simulation runner. Or make the level manager a private internal class of the simulation runner.\n\nI'm also okay if you want to punt on this, especially since we haven't come up with a good method for dependency injection. If you want to punt, then I can create an issue for this.", "markup": "markdown", "html": "<p>My issue is that this class depends on the pointer being valid throughout the life of this class. The pointer is assumed to be valid, whereas a shared_ptr guarantees that the pointer will be valid.</p>\n<p>How do you feel about ensuring that only the simulation runner can create a level manager, and leave this as a raw pointer? You could make the constructor a private friend to the simulation runner. Or make the level manager a private internal class of the simulation runner.</p>\n<p>I'm also okay if you want to punt on this, especially since we haven't come up with a good method for dependency injection. If you want to punt, then I can create an issue for this.</p>", "type": "rendered"}, "created_on": "2019-02-02T03:17:47.834339+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": 115, "from": null, "outdated": true, "path": "src/LevelManager.hh"}, "updated_on": "2019-02-02T03:17:47.843375+00:00", "type": "pullrequest_comment", "id": 90217993}