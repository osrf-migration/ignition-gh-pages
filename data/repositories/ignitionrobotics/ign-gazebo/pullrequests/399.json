{"rendered": {"description": {"raw": "There are 2 threads that are interesting for us in the GUI:\r\n\r\n* `Scene3D`'s render thread: `RenderThread`\r\n* The threads spun up on demand as the GUI runner receives a new state message: `GuiRunner::OnState`\r\n\r\nResults running a SubT world:\r\n\r\n## RenderThread\r\n\r\n![render_thread.png](data/bitbucket.org/repo/8zodKzn/images/770033905-render_thread.png)\r\n![render_thread_2.png](data/bitbucket.org/repo/8zodKzn/images/1429930800-render_thread_2.png)\r\n\r\nAlmost all the time is spend on `camera->Update()`\r\n\r\n\r\n## GuiRunner::OnState\r\n\r\n![onstate_thread.png](data/bitbucket.org/repo/8zodKzn/images/2215345235-onstate_thread.png)\r\n![onstate_thread_2.png](data/bitbucket.org/repo/8zodKzn/images/1157025931-onstate_thread_2.png)\r\n\r\nThe majority of time is spend on `RenderUtilPrivate::UpdateRenderingEntities`, which consists of several simple `Each` calls.\r\n\r\nI tried consolidating all `Each` calls into a single one that gets all entities with a pose, even if rendering doesn't care about them, and that made the performance slightly worse.\r\n\r\n~~~\r\n   _ecm.Each<components::Pose>(\r\n       [&](const Entity &_entity,\r\n         const components::Pose *_pose)->bool\r\n       {\r\n         this->entityPoses[_entity] = _pose->Data();\r\n         return true;\r\n       });\r\n~~~\r\n\r\n---\r\n\r\nWith these preliminary results, I'm inclined to say that the client is processing well the incoming data. Therefore, delays on display are a result from the server being slow in publishing messages. I wouldn't say this is conclusive though.", "markup": "markdown", "html": "<p>There are 2 threads that are interesting for us in the GUI:</p>\n<ul>\n<li><code>Scene3D</code>'s render thread: <code>RenderThread</code></li>\n<li>The threads spun up on demand as the GUI runner receives a new state message: <code>GuiRunner::OnState</code></li>\n</ul>\n<p>Results running a SubT world:</p>\n<h2 id=\"markdown-header-renderthread\">RenderThread</h2>\n<p><img alt=\"render_thread.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/770033905-render_thread.png\" />\n<img alt=\"render_thread_2.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/1429930800-render_thread_2.png\" /></p>\n<p>Almost all the time is spend on <code>camera-&gt;Update()</code></p>\n<h2 id=\"markdown-header-guirunneronstate\">GuiRunner::OnState</h2>\n<p><img alt=\"onstate_thread.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/2215345235-onstate_thread.png\" />\n<img alt=\"onstate_thread_2.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/1157025931-onstate_thread_2.png\" /></p>\n<p>The majority of time is spend on <code>RenderUtilPrivate::UpdateRenderingEntities</code>, which consists of several simple <code>Each</code> calls.</p>\n<p>I tried consolidating all <code>Each</code> calls into a single one that gets all entities with a pose, even if rendering doesn't care about them, and that made the performance slightly worse.</p>\n<div class=\"codehilite\"><pre><span></span>   _ecm.Each&lt;components::Pose&gt;(\n       [&amp;](const Entity &amp;_entity,\n         const components::Pose *_pose)-&gt;bool\n       {\n         this-&gt;entityPoses[_entity] = _pose-&gt;Data();\n         return true;\n       });\n</pre></div>\n\n\n<hr />\n<p>With these preliminary results, I'm inclined to say that the client is processing well the incoming data. Therefore, delays on display are a result from the server being slow in publishing messages. I wouldn't say this is conclusive though.</p>", "type": "rendered"}, "title": {"raw": "Add profiling points to GUI", "markup": "markdown", "html": "<p>Add profiling points to GUI</p>", "type": "rendered"}}, "type": "pullrequest", "description": "There are 2 threads that are interesting for us in the GUI:\r\n\r\n* `Scene3D`'s render thread: `RenderThread`\r\n* The threads spun up on demand as the GUI runner receives a new state message: `GuiRunner::OnState`\r\n\r\nResults running a SubT world:\r\n\r\n## RenderThread\r\n\r\n![render_thread.png](data/bitbucket.org/repo/8zodKzn/images/770033905-render_thread.png)\r\n![render_thread_2.png](data/bitbucket.org/repo/8zodKzn/images/1429930800-render_thread_2.png)\r\n\r\nAlmost all the time is spend on `camera->Update()`\r\n\r\n\r\n## GuiRunner::OnState\r\n\r\n![onstate_thread.png](data/bitbucket.org/repo/8zodKzn/images/2215345235-onstate_thread.png)\r\n![onstate_thread_2.png](data/bitbucket.org/repo/8zodKzn/images/1157025931-onstate_thread_2.png)\r\n\r\nThe majority of time is spend on `RenderUtilPrivate::UpdateRenderingEntities`, which consists of several simple `Each` calls.\r\n\r\nI tried consolidating all `Each` calls into a single one that gets all entities with a pose, even if rendering doesn't care about them, and that made the performance slightly worse.\r\n\r\n~~~\r\n   _ecm.Each<components::Pose>(\r\n       [&](const Entity &_entity,\r\n         const components::Pose *_pose)->bool\r\n       {\r\n         this->entityPoses[_entity] = _pose->Data();\r\n         return true;\r\n       });\r\n~~~\r\n\r\n---\r\n\r\nWith these preliminary results, I'm inclined to say that the client is processing well the incoming data. Therefore, delays on display are a result from the server being slow in publishing messages. I wouldn't say this is conclusive though.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/399/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:cc505203a1d8%0D5964c66d2ef3?from_pullrequest_id=399"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/399/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/399.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/399/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/399/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/399"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/399/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:cc505203a1d8%0D5964c66d2ef3?from_pullrequest_id=399"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/399/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/399/statuses_page=1.json"}}, "title": "Add profiling points to GUI", "close_source_branch": true, "reviewers": [], "id": 399, "destination": {"commit": {"hash": "5964c66d2ef3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/5964c66d2ef3.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/5964c66d2ef3"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "ign-gazebo2"}}, "created_on": "2019-07-25T22:28:53.779785+00:00", "summary": {"raw": "There are 2 threads that are interesting for us in the GUI:\r\n\r\n* `Scene3D`'s render thread: `RenderThread`\r\n* The threads spun up on demand as the GUI runner receives a new state message: `GuiRunner::OnState`\r\n\r\nResults running a SubT world:\r\n\r\n## RenderThread\r\n\r\n![render_thread.png](data/bitbucket.org/repo/8zodKzn/images/770033905-render_thread.png)\r\n![render_thread_2.png](data/bitbucket.org/repo/8zodKzn/images/1429930800-render_thread_2.png)\r\n\r\nAlmost all the time is spend on `camera->Update()`\r\n\r\n\r\n## GuiRunner::OnState\r\n\r\n![onstate_thread.png](data/bitbucket.org/repo/8zodKzn/images/2215345235-onstate_thread.png)\r\n![onstate_thread_2.png](data/bitbucket.org/repo/8zodKzn/images/1157025931-onstate_thread_2.png)\r\n\r\nThe majority of time is spend on `RenderUtilPrivate::UpdateRenderingEntities`, which consists of several simple `Each` calls.\r\n\r\nI tried consolidating all `Each` calls into a single one that gets all entities with a pose, even if rendering doesn't care about them, and that made the performance slightly worse.\r\n\r\n~~~\r\n   _ecm.Each<components::Pose>(\r\n       [&](const Entity &_entity,\r\n         const components::Pose *_pose)->bool\r\n       {\r\n         this->entityPoses[_entity] = _pose->Data();\r\n         return true;\r\n       });\r\n~~~\r\n\r\n---\r\n\r\nWith these preliminary results, I'm inclined to say that the client is processing well the incoming data. Therefore, delays on display are a result from the server being slow in publishing messages. I wouldn't say this is conclusive though.", "markup": "markdown", "html": "<p>There are 2 threads that are interesting for us in the GUI:</p>\n<ul>\n<li><code>Scene3D</code>'s render thread: <code>RenderThread</code></li>\n<li>The threads spun up on demand as the GUI runner receives a new state message: <code>GuiRunner::OnState</code></li>\n</ul>\n<p>Results running a SubT world:</p>\n<h2 id=\"markdown-header-renderthread\">RenderThread</h2>\n<p><img alt=\"render_thread.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/770033905-render_thread.png\" />\n<img alt=\"render_thread_2.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/1429930800-render_thread_2.png\" /></p>\n<p>Almost all the time is spend on <code>camera-&gt;Update()</code></p>\n<h2 id=\"markdown-header-guirunneronstate\">GuiRunner::OnState</h2>\n<p><img alt=\"onstate_thread.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/2215345235-onstate_thread.png\" />\n<img alt=\"onstate_thread_2.png\" src=\"data/bitbucket.org/repo/8zodKzn/images/1157025931-onstate_thread_2.png\" /></p>\n<p>The majority of time is spend on <code>RenderUtilPrivate::UpdateRenderingEntities</code>, which consists of several simple <code>Each</code> calls.</p>\n<p>I tried consolidating all <code>Each</code> calls into a single one that gets all entities with a pose, even if rendering doesn't care about them, and that made the performance slightly worse.</p>\n<div class=\"codehilite\"><pre><span></span>   _ecm.Each&lt;components::Pose&gt;(\n       [&amp;](const Entity &amp;_entity,\n         const components::Pose *_pose)-&gt;bool\n       {\n         this-&gt;entityPoses[_entity] = _pose-&gt;Data();\n         return true;\n       });\n</pre></div>\n\n\n<hr />\n<p>With these preliminary results, I'm inclined to say that the client is processing well the incoming data. Therefore, delays on display are a result from the server being slow in publishing messages. I wouldn't say this is conclusive though.</p>", "type": "rendered"}, "source": {"commit": {"hash": "9ca823ba8a62", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9ca823ba8a62.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9ca823ba8a62"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "profile_gui"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-07-29T15:14:45.925780+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-07-26T00:44:32.840230+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-07-29T15:46:49.247687+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "cc505203a1d8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/cc505203a1d8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/cc505203a1d8"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}