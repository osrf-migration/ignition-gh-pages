{"rendered": {"description": {"raw": "This PR adds support for removing sensor at runtime. I found the need for this feature while working on the ModelPropShop plugin porting \\(since I couldn\u2019t find a way to pause the camera and prevent it from creating additional images I thought I would delete it once all the images have been taken\\).\r\n\r\nThe idea behind the implementation is that we will keep a map that maps ignition::sensor sensor Ids to their corresponding gazebo entities. At each PostUpdate call we iterate through the map and make sure that each entity still exists. If it doesn\u2019t we trigger cleanup of _most_ resources \\(I still didn\u2019t find a good way to cleanup the cameras structure, I might need to introduce an additional map\\).\r\n\r\nIt can be tested with my _very ugly hacky wip branch_ model\\_propshop, by running\r\n\r\n```\r\nign gazebo propshop.sdf -v 4 -r\r\n```\r\n\r\nWithout the PR merged the thumbnails directory will keep getting populated with invalid images \\(and the camera topic will keep being visible in the Image display plugin\\).\r\n\r\nWith the PR, the thumbnails will stop being generated and the topic will stop being shown.\r\n\r\nNow the parts where I\u2019d be happy to get some input:\r\n\r\n* Cleaning up the cameras structure is a bit tricky. I could change the cameras structure to a map <string, vector<Cameras> and keep the first entry of the vector as the parent and all the rest of the cameras as the children, then delete the entry only when all the cameras have been deleted. This however creates the issue, what should we do if only the parent camera of a set is deleted? Do we find a new parent? Delete the whole set? I wouldn\u2019t even know what behavior would be acceptable in that case.\r\n* Is the implementation idea generally OK? My first implementation iterated over the sensor list only once in the PostUpdate function but made the code in there a bit of a mess so decided to split into a separate function. Also I couldn\u2019t find a way to do it without breaking API and introducing the new map / changing the function signature.\r\n\r\n    \r\n\r\n\r\n\r\n\u200c", "markup": "markdown", "html": "<p>This PR adds support for removing sensor at runtime. I found the need for this feature while working on the ModelPropShop plugin porting (since I couldn\u2019t find a way to pause the camera and prevent it from creating additional images I thought I would delete it once all the images have been taken).</p>\n<p>The idea behind the implementation is that we will keep a map that maps ignition::sensor sensor Ids to their corresponding gazebo entities. At each PostUpdate call we iterate through the map and make sure that each entity still exists. If it doesn\u2019t we trigger cleanup of <em>most</em> resources (I still didn\u2019t find a good way to cleanup the cameras structure, I might need to introduce an additional map).</p>\n<p>It can be tested with my <em>very ugly hacky wip branch</em> model_propshop, by running</p>\n<div class=\"codehilite\"><pre><span></span>ign gazebo propshop.sdf -v 4 -r\n</pre></div>\n\n\n<p>Without the PR merged the thumbnails directory will keep getting populated with invalid images (and the camera topic will keep being visible in the Image display plugin).</p>\n<p>With the PR, the thumbnails will stop being generated and the topic will stop being shown.</p>\n<p>Now the parts where I\u2019d be happy to get some input:</p>\n<ul>\n<li>Cleaning up the cameras structure is a bit tricky. I could change the cameras structure to a map &lt;string, vector&lt;Cameras&gt; and keep the first entry of the vector as the parent and all the rest of the cameras as the children, then delete the entry only when all the cameras have been deleted. This however creates the issue, what should we do if only the parent camera of a set is deleted? Do we find a new parent? Delete the whole set? I wouldn\u2019t even know what behavior would be acceptable in that case.</li>\n<li>Is the implementation idea generally OK? My first implementation iterated over the sensor list only once in the PostUpdate function but made the code in there a bit of a mess so decided to split into a separate function. Also I couldn\u2019t find a way to do it without breaking API and introducing the new map / changing the function signature.</li>\n</ul>\n<p>\u200c</p>", "type": "rendered"}, "title": {"raw": "Added support for removing sensors at runtime", "markup": "markdown", "html": "<p>Added support for removing sensors at runtime</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR adds support for removing sensor at runtime. I found the need for this feature while working on the ModelPropShop plugin porting \\(since I couldn\u2019t find a way to pause the camera and prevent it from creating additional images I thought I would delete it once all the images have been taken\\).\r\n\r\nThe idea behind the implementation is that we will keep a map that maps ignition::sensor sensor Ids to their corresponding gazebo entities. At each PostUpdate call we iterate through the map and make sure that each entity still exists. If it doesn\u2019t we trigger cleanup of _most_ resources \\(I still didn\u2019t find a good way to cleanup the cameras structure, I might need to introduce an additional map\\).\r\n\r\nIt can be tested with my _very ugly hacky wip branch_ model\\_propshop, by running\r\n\r\n```\r\nign gazebo propshop.sdf -v 4 -r\r\n```\r\n\r\nWithout the PR merged the thumbnails directory will keep getting populated with invalid images \\(and the camera topic will keep being visible in the Image display plugin\\).\r\n\r\nWith the PR, the thumbnails will stop being generated and the topic will stop being shown.\r\n\r\nNow the parts where I\u2019d be happy to get some input:\r\n\r\n* Cleaning up the cameras structure is a bit tricky. I could change the cameras structure to a map <string, vector<Cameras> and keep the first entry of the vector as the parent and all the rest of the cameras as the children, then delete the entry only when all the cameras have been deleted. This however creates the issue, what should we do if only the parent camera of a set is deleted? Do we find a new parent? Delete the whole set? I wouldn\u2019t even know what behavior would be acceptable in that case.\r\n* Is the implementation idea generally OK? My first implementation iterated over the sensor list only once in the PostUpdate function but made the code in there a bit of a mess so decided to split into a separate function. Also I couldn\u2019t find a way to do it without breaking API and introducing the new map / changing the function signature.\r\n\r\n    \r\n\r\n\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/558/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:2dd9c3d21b2c%0D9f12bd9187e8?from_pullrequest_id=558"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/558/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/558.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/558/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/558/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/558"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/558/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:2dd9c3d21b2c%0D9f12bd9187e8?from_pullrequest_id=558"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/558/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/558/statuses_page=1.json"}}, "title": "Added support for removing sensors at runtime", "close_source_branch": true, "reviewers": [], "id": 558, "destination": {"commit": {"hash": "9f12bd9187e8", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/9f12bd9187e8.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/9f12bd9187e8"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "created_on": "2020-03-13T08:24:13.247465+00:00", "summary": {"raw": "This PR adds support for removing sensor at runtime. I found the need for this feature while working on the ModelPropShop plugin porting \\(since I couldn\u2019t find a way to pause the camera and prevent it from creating additional images I thought I would delete it once all the images have been taken\\).\r\n\r\nThe idea behind the implementation is that we will keep a map that maps ignition::sensor sensor Ids to their corresponding gazebo entities. At each PostUpdate call we iterate through the map and make sure that each entity still exists. If it doesn\u2019t we trigger cleanup of _most_ resources \\(I still didn\u2019t find a good way to cleanup the cameras structure, I might need to introduce an additional map\\).\r\n\r\nIt can be tested with my _very ugly hacky wip branch_ model\\_propshop, by running\r\n\r\n```\r\nign gazebo propshop.sdf -v 4 -r\r\n```\r\n\r\nWithout the PR merged the thumbnails directory will keep getting populated with invalid images \\(and the camera topic will keep being visible in the Image display plugin\\).\r\n\r\nWith the PR, the thumbnails will stop being generated and the topic will stop being shown.\r\n\r\nNow the parts where I\u2019d be happy to get some input:\r\n\r\n* Cleaning up the cameras structure is a bit tricky. I could change the cameras structure to a map <string, vector<Cameras> and keep the first entry of the vector as the parent and all the rest of the cameras as the children, then delete the entry only when all the cameras have been deleted. This however creates the issue, what should we do if only the parent camera of a set is deleted? Do we find a new parent? Delete the whole set? I wouldn\u2019t even know what behavior would be acceptable in that case.\r\n* Is the implementation idea generally OK? My first implementation iterated over the sensor list only once in the PostUpdate function but made the code in there a bit of a mess so decided to split into a separate function. Also I couldn\u2019t find a way to do it without breaking API and introducing the new map / changing the function signature.\r\n\r\n    \r\n\r\n\r\n\r\n\u200c", "markup": "markdown", "html": "<p>This PR adds support for removing sensor at runtime. I found the need for this feature while working on the ModelPropShop plugin porting (since I couldn\u2019t find a way to pause the camera and prevent it from creating additional images I thought I would delete it once all the images have been taken).</p>\n<p>The idea behind the implementation is that we will keep a map that maps ignition::sensor sensor Ids to their corresponding gazebo entities. At each PostUpdate call we iterate through the map and make sure that each entity still exists. If it doesn\u2019t we trigger cleanup of <em>most</em> resources (I still didn\u2019t find a good way to cleanup the cameras structure, I might need to introduce an additional map).</p>\n<p>It can be tested with my <em>very ugly hacky wip branch</em> model_propshop, by running</p>\n<div class=\"codehilite\"><pre><span></span>ign gazebo propshop.sdf -v 4 -r\n</pre></div>\n\n\n<p>Without the PR merged the thumbnails directory will keep getting populated with invalid images (and the camera topic will keep being visible in the Image display plugin).</p>\n<p>With the PR, the thumbnails will stop being generated and the topic will stop being shown.</p>\n<p>Now the parts where I\u2019d be happy to get some input:</p>\n<ul>\n<li>Cleaning up the cameras structure is a bit tricky. I could change the cameras structure to a map &lt;string, vector&lt;Cameras&gt; and keep the first entry of the vector as the parent and all the rest of the cameras as the children, then delete the entry only when all the cameras have been deleted. This however creates the issue, what should we do if only the parent camera of a set is deleted? Do we find a new parent? Delete the whole set? I wouldn\u2019t even know what behavior would be acceptable in that case.</li>\n<li>Is the implementation idea generally OK? My first implementation iterated over the sensor list only once in the PostUpdate function but made the code in there a bit of a mess so decided to split into a separate function. Also I couldn\u2019t find a way to do it without breaking API and introducing the new map / changing the function signature.</li>\n</ul>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "4afddd724ba6", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/4afddd724ba6.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/4afddd724ba6"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "remove_sensors"}}, "comment_count": 24, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-03-16T23:56:54.728861+00:00", "type": "participant", "approved": false, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "PARTICIPANT", "participated_on": "2020-04-03T10:53:47.498923+00:00", "type": "participant", "approved": false, "user": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}}, {"role": "PARTICIPANT", "participated_on": "2020-03-31T02:00:04.529908+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2020-03-30T17:00:01.944883+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2020-04-09T23:41:40.488999+00:00", "author": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}, "merge_commit": {"hash": "2dd9c3d21b2c", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2dd9c3d21b2c.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2dd9c3d21b2c"}}}, "closed_by": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}