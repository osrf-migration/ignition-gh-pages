{"rendered": {"description": {"raw": "This PR adds support for component serialization / de-serialization into streams.\r\n\r\n* It uses the **stream operators** (`<<` / `>>`) for convenience when dealing with several standard types and Ignition Math types.\r\n* Supports **custom serialization**, which can be defined by either:\r\n    * Overriding `De/Serialize` functions (see an example on the `LevelEntityNames` component)\r\n    * Defining custom operators - this is less convenient because as free functions, they'd need to be implemented in a `cc` file\r\n* Supports **components that can't be serialized**. This means there's no compilation failure for components whose data doesn't have stream operators. Instead, a warning is printed if there's an attempt to serialize/deserialize them. Take a look at the `to/fromStream` functions.\r\n\r\n---\r\n\r\n## Next steps\r\n\r\n* Implement serialization for types which currently don't support it, mainly those wrapping `sdf::ElementPtr` and other SDF classes. This may involve storing Ignition Messages instead.\r\n* Implement serialization of the whole ECM, which is already under way in the `streaming` branch.\r\n\r\n---\r\n\r\nThanks @carromj for bouncing ideas about how to implement the SFINAE rules.", "markup": "markdown", "html": "<p>This PR adds support for component serialization / de-serialization into streams.</p>\n<ul>\n<li>It uses the <strong>stream operators</strong> (<code>&lt;&lt;</code> / <code>&gt;&gt;</code>) for convenience when dealing with several standard types and Ignition Math types.</li>\n<li>Supports <strong>custom serialization</strong>, which can be defined by either:<ul>\n<li>Overriding <code>De/Serialize</code> functions (see an example on the <code>LevelEntityNames</code> component)</li>\n<li>Defining custom operators - this is less convenient because as free functions, they'd need to be implemented in a <code>cc</code> file</li>\n</ul>\n</li>\n<li>Supports <strong>components that can't be serialized</strong>. This means there's no compilation failure for components whose data doesn't have stream operators. Instead, a warning is printed if there's an attempt to serialize/deserialize them. Take a look at the <code>to/fromStream</code> functions.</li>\n</ul>\n<hr />\n<h2 id=\"markdown-header-next-steps\">Next steps</h2>\n<ul>\n<li>Implement serialization for types which currently don't support it, mainly those wrapping <code>sdf::ElementPtr</code> and other SDF classes. This may involve storing Ignition Messages instead.</li>\n<li>Implement serialization of the whole ECM, which is already under way in the <code>streaming</code> branch.</li>\n</ul>\n<hr />\n<p>Thanks @carromj for bouncing ideas about how to implement the SFINAE rules.</p>", "type": "rendered"}, "title": {"raw": "[A-4] Component serialization", "markup": "markdown", "html": "<p>[A-4] Component serialization</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR adds support for component serialization / de-serialization into streams.\r\n\r\n* It uses the **stream operators** (`<<` / `>>`) for convenience when dealing with several standard types and Ignition Math types.\r\n* Supports **custom serialization**, which can be defined by either:\r\n    * Overriding `De/Serialize` functions (see an example on the `LevelEntityNames` component)\r\n    * Defining custom operators - this is less convenient because as free functions, they'd need to be implemented in a `cc` file\r\n* Supports **components that can't be serialized**. This means there's no compilation failure for components whose data doesn't have stream operators. Instead, a warning is printed if there's an attempt to serialize/deserialize them. Take a look at the `to/fromStream` functions.\r\n\r\n---\r\n\r\n## Next steps\r\n\r\n* Implement serialization for types which currently don't support it, mainly those wrapping `sdf::ElementPtr` and other SDF classes. This may involve storing Ignition Messages instead.\r\n* Implement serialization of the whole ECM, which is already under way in the `streaming` branch.\r\n\r\n---\r\n\r\nThanks @carromj for bouncing ideas about how to implement the SFINAE rules.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/175/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diffstat/ignitionrobotics/ign-gazebo:c1d1a737d4b3%0D2abb5f7d521a?from_pullrequest_id=175"}, "commits": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/175/commits.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/175.json"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/175/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/175/merge"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/175"}, "activity": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/175/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:c1d1a737d4b3%0D2abb5f7d521a?from_pullrequest_id=175"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/pullrequests/175/approve"}, "statuses": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/175/statuses_page=1.json"}}, "title": "[A-4] Component serialization", "close_source_branch": true, "reviewers": [{"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}], "id": 175, "destination": {"commit": {"hash": "2abb5f7d521a", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/2abb5f7d521a.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/2abb5f7d521a"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "default"}}, "created_on": "2019-02-20T21:40:40.878287+00:00", "summary": {"raw": "This PR adds support for component serialization / de-serialization into streams.\r\n\r\n* It uses the **stream operators** (`<<` / `>>`) for convenience when dealing with several standard types and Ignition Math types.\r\n* Supports **custom serialization**, which can be defined by either:\r\n    * Overriding `De/Serialize` functions (see an example on the `LevelEntityNames` component)\r\n    * Defining custom operators - this is less convenient because as free functions, they'd need to be implemented in a `cc` file\r\n* Supports **components that can't be serialized**. This means there's no compilation failure for components whose data doesn't have stream operators. Instead, a warning is printed if there's an attempt to serialize/deserialize them. Take a look at the `to/fromStream` functions.\r\n\r\n---\r\n\r\n## Next steps\r\n\r\n* Implement serialization for types which currently don't support it, mainly those wrapping `sdf::ElementPtr` and other SDF classes. This may involve storing Ignition Messages instead.\r\n* Implement serialization of the whole ECM, which is already under way in the `streaming` branch.\r\n\r\n---\r\n\r\nThanks @carromj for bouncing ideas about how to implement the SFINAE rules.", "markup": "markdown", "html": "<p>This PR adds support for component serialization / de-serialization into streams.</p>\n<ul>\n<li>It uses the <strong>stream operators</strong> (<code>&lt;&lt;</code> / <code>&gt;&gt;</code>) for convenience when dealing with several standard types and Ignition Math types.</li>\n<li>Supports <strong>custom serialization</strong>, which can be defined by either:<ul>\n<li>Overriding <code>De/Serialize</code> functions (see an example on the <code>LevelEntityNames</code> component)</li>\n<li>Defining custom operators - this is less convenient because as free functions, they'd need to be implemented in a <code>cc</code> file</li>\n</ul>\n</li>\n<li>Supports <strong>components that can't be serialized</strong>. This means there's no compilation failure for components whose data doesn't have stream operators. Instead, a warning is printed if there's an attempt to serialize/deserialize them. Take a look at the <code>to/fromStream</code> functions.</li>\n</ul>\n<hr />\n<h2 id=\"markdown-header-next-steps\">Next steps</h2>\n<ul>\n<li>Implement serialization for types which currently don't support it, mainly those wrapping <code>sdf::ElementPtr</code> and other SDF classes. This may involve storing Ignition Messages instead.</li>\n<li>Implement serialization of the whole ECM, which is already under way in the <code>streaming</code> branch.</li>\n</ul>\n<hr />\n<p>Thanks @carromj for bouncing ideas about how to implement the SFINAE rules.</p>", "type": "rendered"}, "source": {"commit": {"hash": "04bd1abdc8a9", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/04bd1abdc8a9.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/04bd1abdc8a9"}}}, "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f98d11fe-f287-4dfb-99c3-e2b76a13232e}ts=2082645"}}, "type": "repository", "name": "ign-gazebo", "full_name": "ignitionrobotics/ign-gazebo", "uuid": "{f98d11fe-f287-4dfb-99c3-e2b76a13232e}"}, "branch": {"name": "component_stream"}}, "comment_count": 19, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-02-25T17:33:19.415386+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2019-02-26T17:44:31.696696+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-02-26T17:44:37.970418+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "c1d1a737d4b3", "type": "commit", "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/commit/c1d1a737d4b3.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/commits/c1d1a737d4b3"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}