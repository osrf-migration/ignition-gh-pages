{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/506/comments/141716492.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:48769d777674..2f6015245cd0?path=examples%2Fworlds%2Fbuoyancy.sdf"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/506/_/diff#comment-141716492"}}, "parent": {"id": 134684127, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/506/comments/134684127.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/506/_/diff#comment-134684127"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 506, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/506.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/506"}}, "title": "Buoyancy"}, "content": {"raw": "I did this on purpose because:\n\n1. Adding a buoyancy plugin to every model that needs to be buoyant is difficult to maintain and not scalable. We would have to duplicate each Fuel model that needs to function in and out of water. Or, we would have to add the plugins to each model via a launch file.\n2. Adding a world property to a model plugin is not very intuitive, and it is a pattern that we should avoid. A model plugin should only pertain to the model itself, such as a robot controller. Environmental effects should be handled at the world level. There are probably corner cases, but I think it's a good rule of thumb to follow.\n3. We don't have worlds that need to simulate both underwater and above water environments simultaneously. We may in the future, but planning for a hypothetical future is feature creep. There is a hook to adjust the fluid density based on the pose of the entity. When we encounter this scenario, then we can implement that hook. See  the `double BuoyancyPrivate::FluidDensity` function.", "markup": "markdown", "html": "<p>I did this on purpose because:</p>\n<ol>\n<li>Adding a buoyancy plugin to every model that needs to be buoyant is difficult to maintain and not scalable. We would have to duplicate each Fuel model that needs to function in and out of water. Or, we would have to add the plugins to each model via a launch file.</li>\n<li>Adding a world property to a model plugin is not very intuitive, and it is a pattern that we should avoid. A model plugin should only pertain to the model itself, such as a robot controller. Environmental effects should be handled at the world level. There are probably corner cases, but I think it's a good rule of thumb to follow.</li>\n<li>We don't have worlds that need to simulate both underwater and above water environments simultaneously. We may in the future, but planning for a hypothetical future is feature creep. There is a hook to adjust the fluid density based on the pose of the entity. When we encounter this scenario, then we can implement that hook. See  the <code>double BuoyancyPrivate::FluidDensity</code> function.</li>\n</ol>", "type": "rendered"}, "created_on": "2020-03-24T16:16:44.925708+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "outdated": false, "path": "examples/worlds/buoyancy.sdf"}, "updated_on": "2020-03-24T16:16:44.934005+00:00", "type": "pullrequest_comment", "id": 141716492}