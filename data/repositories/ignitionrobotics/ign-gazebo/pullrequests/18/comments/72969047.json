{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/18/comments/72969047.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/18/_/diff#comment-72969047"}}, "parent": {"id": 72847741, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/18/comments/72847741.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/18/_/diff#comment-72847741"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/18.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/18"}}, "title": "Implementation of System Plugins"}, "content": {"raw": "Okay, we need to get this moving forward so that we can hit our milestones and unblock people.  \n\nGrey, you have good points and we may very well end up with your proposal. Right now I\u2019m going to side with the approach of treating all Systems as plugins. There is less infrastructure and prescribed methodology for this approach, and we will need the blackbox approach to handle systems that do not fall into a specific category. We can always add system types later down the line. \n\nI\u2019d also like to get some experience using an ECS before creating a lot of code around systems and how they are used.\n\nFor now, let\u2019s ditch system types all together. I\u2019m not 100% certain we need them, and I\u2019d rather implement types when we have a concrete use case. The initial reason to have system types was to structure the order in which systems execute to prevent \\(for example\\) a pose-publisher-system from sending out pose information before the physics update. Instead of types, we really should have a two-step update loop, where all systems update operate on static components. The second step would apply component modifications generated by systems. This would look like:\n\nStep 1: Instantiate the entities, components, and systems.\n\nStep 2: Store component state in two states, StateA and StateB.\n\nStep 3: Update the systems. Systems can read StateA, and write to StateB.\n\nStep 4: Swap StateA, and StateB\n\nStep 5: Goto Step3.", "markup": "markdown", "html": "<p>Okay, we need to get this moving forward so that we can hit our milestones and unblock people.  </p>\n<p>Grey, you have good points and we may very well end up with your proposal. Right now I\u2019m going to side with the approach of treating all Systems as plugins. There is less infrastructure and prescribed methodology for this approach, and we will need the blackbox approach to handle systems that do not fall into a specific category. We can always add system types later down the line. </p>\n<p>I\u2019d also like to get some experience using an ECS before creating a lot of code around systems and how they are used.</p>\n<p>For now, let\u2019s ditch system types all together. I\u2019m not 100% certain we need them, and I\u2019d rather implement types when we have a concrete use case. The initial reason to have system types was to structure the order in which systems execute to prevent (for example) a pose-publisher-system from sending out pose information before the physics update. Instead of types, we really should have a two-step update loop, where all systems update operate on static components. The second step would apply component modifications generated by systems. This would look like:</p>\n<p>Step 1: Instantiate the entities, components, and systems.</p>\n<p>Step 2: Store component state in two states, StateA and StateB.</p>\n<p>Step 3: Update the systems. Systems can read StateA, and write to StateB.</p>\n<p>Step 4: Swap StateA, and StateB</p>\n<p>Step 5: Goto Step3.</p>", "type": "rendered"}, "created_on": "2018-08-14T22:05:51.434266+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2018-08-14T22:05:51.447035+00:00", "type": "pullrequest_comment", "id": 72969047}