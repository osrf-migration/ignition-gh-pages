{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/547/comments/138978712.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/547/_/diff#comment-138978712"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 547, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/547.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/547"}}, "title": "Add support for setting visual transparency through SDF"}, "content": {"raw": "Just a clarification on the behavior, I understand that the <transparency> tag will override whatever was specified in the mesh materials and from what I see this is coherent with what gazebo used to do, which is great for porting.  \nThe alternative behavior would be doing a product of the transparencies, which is similar to what is done in collada with the <transparency> and <transparent> tag.\n\nI can think of at least one \u201cedge case\u201d in which overriding the transparency of every submesh instead of multiplying would be counterintuitive.  \nLet\u2019s say we have a mesh with both fully opaque and partially transparent submeshes \\(i.e. a building with windows, such as [cafe](https://app.ignitionrobotics.org/openrobotics/fuel/models/Cafe)\\). Now if we write any transparency tag in sdf it will override all the submeshes, which means we will lose \u201crelative\u201d transparency between walls and windows.  \nThis wouldn\u2019t happen if we multiply the values, which means that we would end up with the whole model being \u201cmore transparent\u201d but the relative transparency between windows and walls will be kept.\n\nI can see pros and cons to both approaches \\(consistency with gazebo / more \u201caccurate\u201d rendering\\), what do you think?", "markup": "markdown", "html": "<p>Just a clarification on the behavior, I understand that the &lt;transparency&gt; tag will override whatever was specified in the mesh materials and from what I see this is coherent with what gazebo used to do, which is great for porting.<br />\nThe alternative behavior would be doing a product of the transparencies, which is similar to what is done in collada with the &lt;transparency&gt; and &lt;transparent&gt; tag.</p>\n<p>I can think of at least one \u201cedge case\u201d in which overriding the transparency of every submesh instead of multiplying would be counterintuitive.<br />\nLet\u2019s say we have a mesh with both fully opaque and partially transparent submeshes (i.e. a building with windows, such as <a data-is-external-link=\"true\" href=\"https://app.ignitionrobotics.org/openrobotics/fuel/models/Cafe\" rel=\"nofollow\">cafe</a>). Now if we write any transparency tag in sdf it will override all the submeshes, which means we will lose \u201crelative\u201d transparency between walls and windows.<br />\nThis wouldn\u2019t happen if we multiply the values, which means that we would end up with the whole model being \u201cmore transparent\u201d but the relative transparency between windows and walls will be kept.</p>\n<p>I can see pros and cons to both approaches (consistency with gazebo / more \u201caccurate\u201d rendering), what do you think?</p>", "type": "rendered"}, "created_on": "2020-03-06T09:24:18.827964+00:00", "user": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}, "updated_on": "2020-03-06T09:24:18.836954+00:00", "type": "pullrequest_comment", "id": 138978712}