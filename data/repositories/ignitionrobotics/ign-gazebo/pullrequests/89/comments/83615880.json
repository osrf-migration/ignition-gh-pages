{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89/comments/83615880.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:8acfaf312be4..3696b763243a?path=doc%2Farchitecture_design.md"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89/_/diff#comment-83615880"}}, "parent": {"id": 83602596, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89/comments/83602596.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89/_/diff#comment-83602596"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89"}}, "title": "Initial design"}, "content": {"raw": "> How do we handle systems that communicate with clients outside of ign-gazebo (e.g. ROS nodes)?\n\nI think this is a valid use case, but our immediate priority is supporting clients which use `ign-transport`, which is not limited to be used inside `ign-gazebo`. The current idea is that the ROS integration will be made by a bridge which can run in its own process and relays messages and services from ign to ROS and back. I'll add a section to the document about this.\n\n> Systems that are \"distributable\" would only use ign-transport to communicate with other systems.\n\nIn my mind, the way systems would \"communicate\" would be either through the ECS (by modifying components) or through events. I was thinking of ign-transport as the interface to the outside of ign-gazebo. Internally, it will be used for synchronizing runners, but I think that system developers shouldn't worry about that. Let me know if I misunderstood what you meant.\n\n> This is assuming ign-transport supports moving nodes as you mentioned earlier.\n\nJust a clarification, a node wouldn't be *moved*, it would be destroyed and a new node publishing the same topics would be created.\n\n > When a distributable system needs to communicate outside ign-transport, the author of the system would need to write a non-distributable system to relay messages between ign-transport and the external communication scheme. \n\nAgreed, I think that if someone wants to use a different transport inside a system, they will need to figure it out themselves. If this becomes an important use case, I think we can revisit and try to offer a convenient interface.\n\n> have systems that are \"distributable\" and systems that are not (i.e, stay on the primary)\n\nDo you think there's any special interface these systems would need to have, or would it be enough to load them in the correct place in the SDF?\n\n> Options:\n\nI vote for option 2, where plugins are able to register their custom components and let the ECS handle serialization. It feels to me that doing anything other than that means we'd have to support 2 state synchronization mechanisms, the ECS and the other one.\n\n\n\n\n", "markup": "markdown", "html": "<blockquote>\n<p>How do we handle systems that communicate with clients outside of ign-gazebo (e.g. ROS nodes)?</p>\n</blockquote>\n<p>I think this is a valid use case, but our immediate priority is supporting clients which use <code>ign-transport</code>, which is not limited to be used inside <code>ign-gazebo</code>. The current idea is that the ROS integration will be made by a bridge which can run in its own process and relays messages and services from ign to ROS and back. I'll add a section to the document about this.</p>\n<blockquote>\n<p>Systems that are \"distributable\" would only use ign-transport to communicate with other systems.</p>\n</blockquote>\n<p>In my mind, the way systems would \"communicate\" would be either through the ECS (by modifying components) or through events. I was thinking of ign-transport as the interface to the outside of ign-gazebo. Internally, it will be used for synchronizing runners, but I think that system developers shouldn't worry about that. Let me know if I misunderstood what you meant.</p>\n<blockquote>\n<p>This is assuming ign-transport supports moving nodes as you mentioned earlier.</p>\n</blockquote>\n<p>Just a clarification, a node wouldn't be <em>moved</em>, it would be destroyed and a new node publishing the same topics would be created.</p>\n<blockquote>\n<p>When a distributable system needs to communicate outside ign-transport, the author of the system would need to write a non-distributable system to relay messages between ign-transport and the external communication scheme. </p>\n</blockquote>\n<p>Agreed, I think that if someone wants to use a different transport inside a system, they will need to figure it out themselves. If this becomes an important use case, I think we can revisit and try to offer a convenient interface.</p>\n<blockquote>\n<p>have systems that are \"distributable\" and systems that are not (i.e, stay on the primary)</p>\n</blockquote>\n<p>Do you think there's any special interface these systems would need to have, or would it be enough to load them in the correct place in the SDF?</p>\n<blockquote>\n<p>Options:</p>\n</blockquote>\n<p>I vote for option 2, where plugins are able to register their custom components and let the ECS handle serialization. It feels to me that doing anything other than that means we'd have to support 2 state synchronization mechanisms, the ECS and the other one.</p>", "type": "rendered"}, "created_on": "2018-11-26T23:49:52.653266+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": 184, "from": null, "outdated": true, "path": "doc/architecture_design.md"}, "updated_on": "2018-11-26T23:49:52.665041+00:00", "type": "pullrequest_comment", "id": 83615880}