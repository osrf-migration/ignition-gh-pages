{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89/comments/84220858.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:7ccbf0c74b8d..72856e2a48e3?path=doc%2Farchitecture_design.md"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89/_/diff#comment-84220858"}}, "parent": {"id": 84106076, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89/comments/84106076.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89/_/diff#comment-84106076"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89"}}, "title": "Initial design"}, "content": {"raw": "> I think this should also be true for physics, because we will inevitably run into cases where things will need to be moved, since we can't control how performers will interact (or do we want to?). Do you agree with this statement? Maybe there's something I'm missing.\n\nI think it would be great if we didn't have to move any system at all including physics. But,If I recall correctly from a conversation with @scpeters, it is very difficult to perform a stable physics simulation of two interacting (colliding) performers in two separate physics engine instances. So physics has to be moved out of necessity.\n\nRegarding the cost of moving a system, I'd add:\n\n* Added complexity for system authors as they have to make sure all their state is kept in the ECS. And if an author neglects to do this, that system won't function properly when moved. We'll then have to deal with systems that are movable and those that are not. I don't know if there's a way to find out without inspecting the code.\n* Risk of instability when transport nodes get destroyed and recreated, especially if this happens while the node is actively sending/receiving a message.\n\nOverall, in my opinion, it would be better if we kept the systems that have to be moved to a small set so that only a few system authors have to deal with it. ", "markup": "markdown", "html": "<blockquote>\n<p>I think this should also be true for physics, because we will inevitably run into cases where things will need to be moved, since we can't control how performers will interact (or do we want to?). Do you agree with this statement? Maybe there's something I'm missing.</p>\n</blockquote>\n<p>I think it would be great if we didn't have to move any system at all including physics. But,If I recall correctly from a conversation with @scpeters, it is very difficult to perform a stable physics simulation of two interacting (colliding) performers in two separate physics engine instances. So physics has to be moved out of necessity.</p>\n<p>Regarding the cost of moving a system, I'd add:</p>\n<ul>\n<li>Added complexity for system authors as they have to make sure all their state is kept in the ECS. And if an author neglects to do this, that system won't function properly when moved. We'll then have to deal with systems that are movable and those that are not. I don't know if there's a way to find out without inspecting the code.</li>\n<li>Risk of instability when transport nodes get destroyed and recreated, especially if this happens while the node is actively sending/receiving a message.</li>\n</ul>\n<p>Overall, in my opinion, it would be better if we kept the systems that have to be moved to a small set so that only a few system authors have to deal with it. </p>", "type": "rendered"}, "created_on": "2018-11-30T20:19:35.744003+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {"to": 184, "from": null, "outdated": true, "path": "doc/architecture_design.md"}, "updated_on": "2018-11-30T20:19:35.764068+00:00", "type": "pullrequest_comment", "id": 84220858}