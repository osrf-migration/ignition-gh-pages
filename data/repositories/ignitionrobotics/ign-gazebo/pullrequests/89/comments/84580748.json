{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89/comments/84580748.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-gazebo/diff/ignitionrobotics/ign-gazebo:7ccbf0c74b8d..72856e2a48e3?path=doc%2Farchitecture_design.md"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89/_/diff#comment-84580748"}}, "parent": {"id": 84540102, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89/comments/84540102.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89/_/diff#comment-84540102"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-gazebo/pullrequests/89.json"}, "html": {"href": "#!/ignitionrobotics/ign-gazebo/pull-requests/89"}}, "title": "Initial design"}, "content": {"raw": "> Ideally, systems shouldn't have an internal state at all.\n\nIn theory it would be great if this could be the case, but it\u2019s not practical or even desirable, if only for performance considerations.\n\nTaking physics as a straightforward example, every physics engine will have its own way of storing, manipulating, and caching data about physics, about models, and about the environment. It\u2019s not possible for a physics system to lack an internal state.\n\n`ign-physics` borrows some of the useful aspects of the ECS concept for the sake of being an extremely lightweight abstraction layer, but `ign-physics` handles state in the opposite way of `ign-gazebo`. The role of `ign-gazebo` is essentially to shovel some generic representations of state from one system to another. `ign-physics` does the opposite: It does not maintain _any_ concept of state itself, and instead allows the underlying physics engine to manage its own state in whatever way it chooses. That design wouldn't work for `ign-gazebo` because `ign-gazebo` needs to be more like a middleware between systems instead of a wrapper around one system.\n\nFor stateful systems \\(which I strongly believe we cannot avoid and should not try to\\), instead of communicating information about the current state, we\u2019ll want to communicate changes about all changes to state since the last update.\n\n\u200c\n\n> while minimizing the costs of moving state mentioned above.\n\nIf we can have some concept of a delta between sequential states and have a way for the physics system to consume that delta, we shouldn\u2019t have any trouble.", "markup": "markdown", "html": "<blockquote>\n<p>Ideally, systems shouldn't have an internal state at all.</p>\n</blockquote>\n<p>In theory it would be great if this could be the case, but it\u2019s not practical or even desirable, if only for performance considerations.</p>\n<p>Taking physics as a straightforward example, every physics engine will have its own way of storing, manipulating, and caching data about physics, about models, and about the environment. It\u2019s not possible for a physics system to lack an internal state.</p>\n<p><code>ign-physics</code> borrows some of the useful aspects of the ECS concept for the sake of being an extremely lightweight abstraction layer, but <code>ign-physics</code> handles state in the opposite way of <code>ign-gazebo</code>. The role of <code>ign-gazebo</code> is essentially to shovel some generic representations of state from one system to another. <code>ign-physics</code> does the opposite: It does not maintain <em>any</em> concept of state itself, and instead allows the underlying physics engine to manage its own state in whatever way it chooses. That design wouldn't work for <code>ign-gazebo</code> because <code>ign-gazebo</code> needs to be more like a middleware between systems instead of a wrapper around one system.</p>\n<p>For stateful systems (which I strongly believe we cannot avoid and should not try to), instead of communicating information about the current state, we\u2019ll want to communicate changes about all changes to state since the last update.</p>\n<p>\u200c</p>\n<blockquote>\n<p>while minimizing the costs of moving state mentioned above.</p>\n</blockquote>\n<p>If we can have some concept of a delta between sequential states and have a way for the physics system to consume that delta, we shouldn\u2019t have any trouble.</p>", "type": "rendered"}, "created_on": "2018-12-05T03:45:16.937144+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 184, "from": null, "outdated": true, "path": "doc/architecture_design.md"}, "updated_on": "2018-12-05T03:45:16.947700+00:00", "type": "pullrequest_comment", "id": 84580748}